
M365_custom_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0ac  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001c90  0800c1c0  0800c1c0  0001c1c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de50  0800de50  000205ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800de50  0800de50  000205ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800de50  0800de50  000205ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de50  0800de50  0001de50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de54  0800de54  0001de54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  20000000  0800de58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f94  200005b0  0800e404  000205b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004544  0800e404  00024544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033b5e  00000000  00000000  000205d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007517  00000000  00000000  00054133  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017f4c  00000000  00000000  0005b64a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000019d0  00000000  00000000  00073598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025c8  00000000  00000000  00074f68  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a1a7  00000000  00000000  00077530  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018992  00000000  00000000  000916d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00087650  00000000  00000000  000aa069  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  001316b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f0  00000000  00000000  00131734  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005b0 	.word	0x200005b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1a4 	.word	0x0800c1a4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005b4 	.word	0x200005b4
 800014c:	0800c1a4 	.word	0x0800c1a4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <div_nde_s32_floor>:
}

int32_T div_nde_s32_floor(int32_T numerator, int32_T denominator)
{
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
           0) ? -1 : 0) + numerator / denominator;
 8001188:	0fcb      	lsrs	r3, r1, #31
 800118a:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
 800118e:	fb90 f3f1 	sdiv	r3, r0, r1
 8001192:	d007      	beq.n	80011a4 <div_nde_s32_floor+0x1c>
  return (((numerator < 0) != (denominator < 0)) && (numerator % denominator !=
 8001194:	fb01 0113 	mls	r1, r1, r3, r0
 8001198:	3100      	adds	r1, #0
 800119a:	bf18      	it	ne
 800119c:	2101      	movne	r1, #1
 800119e:	4249      	negs	r1, r1
}
 80011a0:	1858      	adds	r0, r3, r1
 80011a2:	4770      	bx	lr
           0) ? -1 : 0) + numerator / denominator;
 80011a4:	2100      	movs	r1, #0
 80011a6:	e7fb      	b.n	80011a0 <div_nde_s32_floor+0x18>

080011a8 <Counter>:

  /* Switch: '<S16>/Switch1' incorporates:
   *  Constant: '<S16>/Constant23'
   *  UnitDelay: '<S16>/UnitDelay'
   */
  if (rtu_rst) {
 80011a8:	b942      	cbnz	r2, 80011bc <Counter+0x14>
    rtu_rst_0 = 0;
  } else {
    rtu_rst_0 = localDW->UnitDelay_DSTATE;
 80011aa:	f9b3 2000 	ldrsh.w	r2, [r3]
  }

  /* End of Switch: '<S16>/Switch1' */

  /* Sum: '<S14>/Sum1' */
  rty_cnt_0 = (int16_T)(rtu_inc + rtu_rst_0);
 80011ae:	4410      	add	r0, r2
 80011b0:	b200      	sxth	r0, r0

  /* MinMax: '<S14>/MinMax' */
  if (rty_cnt_0 < rtu_max) {
    /* Update for UnitDelay: '<S16>/UnitDelay' */
    localDW->UnitDelay_DSTATE = rty_cnt_0;
 80011b2:	4281      	cmp	r1, r0
 80011b4:	bfa8      	it	ge
 80011b6:	4601      	movge	r1, r0
 80011b8:	8019      	strh	r1, [r3, #0]
    localDW->UnitDelay_DSTATE = rtu_max;
  }

  /* End of MinMax: '<S14>/MinMax' */
  return rty_cnt_0;
}
 80011ba:	4770      	bx	lr
    rtu_rst_0 = 0;
 80011bc:	2200      	movs	r2, #0
 80011be:	e7f6      	b.n	80011ae <Counter+0x6>

080011c0 <PI_clamp_fixdt>:
 *    '<S53>/PI_clamp_fixdt'
 */
void PI_clamp_fixdt(int16_T rtu_err, uint16_T rtu_P, uint16_T rtu_I, int16_T
                    rtu_satMax, int16_T rtu_satMin, int32_T rtu_ext_limProt,
                    int16_T *rty_out, DW_PI_clamp_fixdt *localDW)
{
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
  int16_T tmp_0;

  /* Sum: '<S65>/Sum2' incorporates:
   *  Product: '<S65>/Divide2'
   */
  q0 = rtu_err * rtu_I;
 80011c2:	fb00 f402 	mul.w	r4, r0, r2
{
 80011c6:	e9dd 5c06 	ldrd	r5, ip, [sp, #24]
  if ((q0 < 0) && (rtu_ext_limProt < MIN_int32_T - q0)) {
 80011ca:	2c00      	cmp	r4, #0
{
 80011cc:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 80011d0:	9e08      	ldr	r6, [sp, #32]
  if ((q0 < 0) && (rtu_ext_limProt < MIN_int32_T - q0)) {
 80011d2:	da05      	bge.n	80011e0 <PI_clamp_fixdt+0x20>
 80011d4:	f1c4 4200 	rsb	r2, r4, #2147483648	; 0x80000000
 80011d8:	42aa      	cmp	r2, r5
 80011da:	dc40      	bgt.n	800125e <PI_clamp_fixdt+0x9e>
    q0 = MIN_int32_T;
  } else if ((q0 > 0) && (rtu_ext_limProt > MAX_int32_T - q0)) {
    q0 = MAX_int32_T;
  } else {
    q0 += rtu_ext_limProt;
 80011dc:	1962      	adds	r2, r4, r5
 80011de:	e006      	b.n	80011ee <PI_clamp_fixdt+0x2e>
  } else if ((q0 > 0) && (rtu_ext_limProt > MAX_int32_T - q0)) {
 80011e0:	d0fc      	beq.n	80011dc <PI_clamp_fixdt+0x1c>
 80011e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011e6:	eba2 0e04 	sub.w	lr, r2, r4
 80011ea:	45ae      	cmp	lr, r5
 80011ec:	daf6      	bge.n	80011dc <PI_clamp_fixdt+0x1c>
  /* Switch: '<S65>/Switch1' incorporates:
   *  Constant: '<S65>/Constant'
   *  Sum: '<S65>/Sum2'
   *  UnitDelay: '<S65>/UnitDelay1'
   */
  if (localDW->UnitDelay1_DSTATE) {
 80011ee:	7934      	ldrb	r4, [r6, #4]
   *  UnitDelay: '<S68>/UnitDelay'
   */
  rtb_Sum1_n = tmp + localDW->UnitDelay_DSTATE;

  /* Product: '<S65>/Divide5' */
  tmp = (rtu_err * rtu_P) >> 11;
 80011f0:	4348      	muls	r0, r1
  if (localDW->UnitDelay1_DSTATE) {
 80011f2:	2c00      	cmp	r4, #0
 80011f4:	bf0c      	ite	eq
 80011f6:	4615      	moveq	r5, r2
 80011f8:	2500      	movne	r5, #0
  rtb_Sum1_n = tmp + localDW->UnitDelay_DSTATE;
 80011fa:	6834      	ldr	r4, [r6, #0]
  tmp = (rtu_err * rtu_P) >> 11;
 80011fc:	12c0      	asrs	r0, r0, #11
  rtb_Sum1_n = tmp + localDW->UnitDelay_DSTATE;
 80011fe:	4425      	add	r5, r4
 8001200:	4c22      	ldr	r4, [pc, #136]	; (800128c <PI_clamp_fixdt+0xcc>)

  /* Sum: '<S65>/Sum1' incorporates:
   *  DataTypeConversion: '<S68>/Data Type Conversion1'
   *  Product: '<S65>/Divide5'
   */
  tmp = (((rtb_Sum1_n >> 16) << 1) + tmp) >> 1;
 8001202:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001206:	42a0      	cmp	r0, r4
 8001208:	bfb8      	it	lt
 800120a:	4620      	movlt	r0, r4
 800120c:	4288      	cmp	r0, r1
 800120e:	bfa8      	it	ge
 8001210:	4608      	movge	r0, r1
 8001212:	ea4f 4e25 	mov.w	lr, r5, asr #16
 8001216:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 800121a:	1040      	asrs	r0, r0, #1
 800121c:	4284      	cmp	r4, r0
 800121e:	bfb8      	it	lt
 8001220:	4604      	movlt	r4, r0
  }

  /* RelationalOperator: '<S69>/LowerRelop1' incorporates:
   *  Sum: '<S65>/Sum1'
   */
  rtb_LowerRelop1_c = ((int16_T)tmp > rtu_satMax);
 8001222:	428c      	cmp	r4, r1
 8001224:	bfa8      	it	ge
 8001226:	460c      	movge	r4, r1
 8001228:	b221      	sxth	r1, r4

  /* Switch: '<S69>/Switch1' incorporates:
   *  Sum: '<S65>/Sum1'
   *  Switch: '<S69>/Switch3'
   */
  if (rtb_LowerRelop1_c) {
 800122a:	4299      	cmp	r1, r3
 800122c:	dd1a      	ble.n	8001264 <PI_clamp_fixdt+0xa4>
    *rty_out = rtu_satMax;
 800122e:	f8ac 3000 	strh.w	r3, [ip]
  /* End of Switch: '<S69>/Switch1' */

  /* Signum: '<S67>/SignDeltaU2' incorporates:
   *  Sum: '<S65>/Sum2'
   */
  if (q0 < 0) {
 8001232:	2a00      	cmp	r2, #0
 8001234:	db24      	blt.n	8001280 <PI_clamp_fixdt+0xc0>
    q0 = -1;
  } else {
    q0 = (q0 > 0);
 8001236:	bfcc      	ite	gt
 8001238:	2201      	movgt	r2, #1
 800123a:	2200      	movle	r2, #0
  /* End of Signum: '<S67>/SignDeltaU2' */

  /* Signum: '<S67>/SignDeltaU3' incorporates:
   *  Sum: '<S65>/Sum1'
   */
  if ((int16_T)tmp < 0) {
 800123c:	2800      	cmp	r0, #0
 800123e:	db18      	blt.n	8001272 <PI_clamp_fixdt+0xb2>
    tmp_0 = -1;
  } else {
    tmp_0 = (int16_T)((int16_T)tmp > 0);
 8001240:	2900      	cmp	r1, #0
 8001242:	bfd4      	ite	le
 8001244:	2000      	movle	r0, #0
 8001246:	2001      	movgt	r0, #1
   *  DataTypeConversion: '<S67>/DataTypeConv4'
   *  Logic: '<S65>/AND1'
   *  Logic: '<S67>/AND1'
   *  RelationalOperator: '<S67>/Equal1'
   */
  localDW->UnitDelay1_DSTATE = ((q0 == tmp_0) && (rtb_LowerRelop1_c ||
 8001248:	4290      	cmp	r0, r2
 800124a:	d115      	bne.n	8001278 <PI_clamp_fixdt+0xb8>
 800124c:	4299      	cmp	r1, r3
 800124e:	dc15      	bgt.n	800127c <PI_clamp_fixdt+0xbc>
 8001250:	42b9      	cmp	r1, r7
 8001252:	bfac      	ite	ge
 8001254:	2100      	movge	r1, #0
 8001256:	2101      	movlt	r1, #1
 8001258:	7131      	strb	r1, [r6, #4]
    rtb_UpperRelop_e));

  /* Update for UnitDelay: '<S68>/UnitDelay' */
  localDW->UnitDelay_DSTATE = rtb_Sum1_n;
 800125a:	6035      	str	r5, [r6, #0]
}
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    q0 = MIN_int32_T;
 800125e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001262:	e7c4      	b.n	80011ee <PI_clamp_fixdt+0x2e>
    *rty_out = rtu_satMin;
 8001264:	42b9      	cmp	r1, r7
 8001266:	460c      	mov	r4, r1
 8001268:	bfb8      	it	lt
 800126a:	463c      	movlt	r4, r7
 800126c:	f8ac 4000 	strh.w	r4, [ip]
 8001270:	e7df      	b.n	8001232 <PI_clamp_fixdt+0x72>
    tmp_0 = -1;
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	e7e7      	b.n	8001248 <PI_clamp_fixdt+0x88>
  localDW->UnitDelay1_DSTATE = ((q0 == tmp_0) && (rtb_LowerRelop1_c ||
 8001278:	2100      	movs	r1, #0
 800127a:	e7ed      	b.n	8001258 <PI_clamp_fixdt+0x98>
 800127c:	2101      	movs	r1, #1
 800127e:	e7eb      	b.n	8001258 <PI_clamp_fixdt+0x98>
  if ((int16_T)tmp < 0) {
 8001280:	2800      	cmp	r0, #0
 8001282:	dbe3      	blt.n	800124c <PI_clamp_fixdt+0x8c>
    q0 = -1;
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	e7da      	b.n	8001240 <PI_clamp_fixdt+0x80>
 800128a:	bf00      	nop
 800128c:	ffff8000 	.word	0xffff8000

08001290 <Low_Pass_Filter>:
}

/* Output and update for atomic system: '<S41>/Low_Pass_Filter' */
void Low_Pass_Filter(const int16_T rtu_u[2], uint16_T rtu_coef, int16_T rty_y[2],
                     DW_Low_Pass_Filter *localDW)
{
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
  int32_T rtb_Sum3_g;

  /* Sum: '<S50>/Sum2' incorporates:
   *  UnitDelay: '<S50>/UnitDelay1'
   */
  rtb_Sum3_g = rtu_u[0] - (localDW->UnitDelay1_DSTATE[0] >> 16);
 8001292:	681d      	ldr	r5, [r3, #0]
 8001294:	f9b0 4000 	ldrsh.w	r4, [r0]
 8001298:	4f10      	ldr	r7, [pc, #64]	; (80012dc <Low_Pass_Filter+0x4c>)
 800129a:	eba4 4425 	sub.w	r4, r4, r5, asr #16
 800129e:	42bc      	cmp	r4, r7
  /* Sum: '<S50>/Sum3' incorporates:
   *  Product: '<S50>/Divide3'
   *  Sum: '<S50>/Sum2'
   *  UnitDelay: '<S50>/UnitDelay1'
   */
  rtb_Sum3_g = rtu_coef * rtb_Sum3_g + localDW->UnitDelay1_DSTATE[0];
 80012a0:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80012a4:	bfb8      	it	lt
 80012a6:	463c      	movlt	r4, r7
 80012a8:	42b4      	cmp	r4, r6
 80012aa:	bfa8      	it	ge
 80012ac:	4634      	movge	r4, r6
 80012ae:	fb01 5404 	mla	r4, r1, r4, r5

  /* DataTypeConversion: '<S50>/Data Type Conversion' */
  rty_y[0] = (int16_T)(rtb_Sum3_g >> 16);
 80012b2:	1425      	asrs	r5, r4, #16
 80012b4:	8015      	strh	r5, [r2, #0]
  localDW->UnitDelay1_DSTATE[0] = rtb_Sum3_g;

  /* Sum: '<S50>/Sum2' incorporates:
   *  UnitDelay: '<S50>/UnitDelay1'
   */
  rtb_Sum3_g = rtu_u[1] - (localDW->UnitDelay1_DSTATE[1] >> 16);
 80012b6:	685d      	ldr	r5, [r3, #4]
  localDW->UnitDelay1_DSTATE[0] = rtb_Sum3_g;
 80012b8:	601c      	str	r4, [r3, #0]
  rtb_Sum3_g = rtu_u[1] - (localDW->UnitDelay1_DSTATE[1] >> 16);
 80012ba:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80012be:	eba4 4025 	sub.w	r0, r4, r5, asr #16
 80012c2:	42b8      	cmp	r0, r7
 80012c4:	bfb8      	it	lt
 80012c6:	4638      	movlt	r0, r7
  /* Sum: '<S50>/Sum3' incorporates:
   *  Product: '<S50>/Divide3'
   *  Sum: '<S50>/Sum2'
   *  UnitDelay: '<S50>/UnitDelay1'
   */
  rtb_Sum3_g = rtu_coef * rtb_Sum3_g + localDW->UnitDelay1_DSTATE[1];
 80012c8:	42b0      	cmp	r0, r6
 80012ca:	bfa8      	it	ge
 80012cc:	4630      	movge	r0, r6
 80012ce:	fb01 5100 	mla	r1, r1, r0, r5

  /* DataTypeConversion: '<S50>/Data Type Conversion' */
  rty_y[1] = (int16_T)(rtb_Sum3_g >> 16);
 80012d2:	1408      	asrs	r0, r1, #16
 80012d4:	8050      	strh	r0, [r2, #2]

  /* Update for UnitDelay: '<S50>/UnitDelay1' */
  localDW->UnitDelay1_DSTATE[1] = rtb_Sum3_g;
 80012d6:	6059      	str	r1, [r3, #4]
}
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	bf00      	nop
 80012dc:	ffff8000 	.word	0xffff8000

080012e0 <I_backCalc_fixdt>:

  /* Sum: '<S78>/Sum2' incorporates:
   *  Product: '<S78>/Divide2'
   *  UnitDelay: '<S78>/UnitDelay'
   */
  rtb_Sum1_e0 = (rtu_err * rtu_I) >> 4;
 80012e0:	4341      	muls	r1, r0
{
 80012e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  rtb_Sum1_e0 = (rtu_err * rtu_I) >> 4;
 80012e4:	1109      	asrs	r1, r1, #4
  if ((rtb_Sum1_e0 < 0) && (localDW->UnitDelay_DSTATE < MIN_int32_T
 80012e6:	2900      	cmp	r1, #0
{
 80012e8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80012ec:	6826      	ldr	r6, [r4, #0]
  if ((rtb_Sum1_e0 < 0) && (localDW->UnitDelay_DSTATE < MIN_int32_T
 80012ee:	da05      	bge.n	80012fc <I_backCalc_fixdt+0x1c>
       - rtb_Sum1_e0)) {
 80012f0:	f1c1 4000 	rsb	r0, r1, #2147483648	; 0x80000000
  if ((rtb_Sum1_e0 < 0) && (localDW->UnitDelay_DSTATE < MIN_int32_T
 80012f4:	42b0      	cmp	r0, r6
 80012f6:	dc15      	bgt.n	8001324 <I_backCalc_fixdt+0x44>
    rtb_Sum1_e0 = MIN_int32_T;
  } else if ((rtb_Sum1_e0 > 0) && (localDW->UnitDelay_DSTATE > MAX_int32_T
              - rtb_Sum1_e0)) {
    rtb_Sum1_e0 = MAX_int32_T;
  } else {
    rtb_Sum1_e0 += localDW->UnitDelay_DSTATE;
 80012f8:	1988      	adds	r0, r1, r6
 80012fa:	e005      	b.n	8001308 <I_backCalc_fixdt+0x28>
  } else if ((rtb_Sum1_e0 > 0) && (localDW->UnitDelay_DSTATE > MAX_int32_T
 80012fc:	d0fc      	beq.n	80012f8 <I_backCalc_fixdt+0x18>
              - rtb_Sum1_e0)) {
 80012fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8001302:	1a47      	subs	r7, r0, r1
  } else if ((rtb_Sum1_e0 > 0) && (localDW->UnitDelay_DSTATE > MAX_int32_T
 8001304:	42b7      	cmp	r7, r6
 8001306:	daf7      	bge.n	80012f8 <I_backCalc_fixdt+0x18>
  /* End of Sum: '<S78>/Sum2' */

  /* Sum: '<S80>/Sum1' incorporates:
   *  UnitDelay: '<S80>/UnitDelay'
   */
  rtb_Sum1_e0 += localDW->UnitDelay_DSTATE_h;
 8001308:	6861      	ldr	r1, [r4, #4]
 800130a:	4408      	add	r0, r1

  /* DataTypeConversion: '<S80>/Data Type Conversion1' */
  rtb_DataTypeConversion1_no = (int16_T)(rtb_Sum1_e0 >> 12);
 800130c:	1306      	asrs	r6, r0, #12
 800130e:	b231      	sxth	r1, r6
  /* Switch: '<S81>/Switch2' incorporates:
   *  RelationalOperator: '<S81>/LowerRelop1'
   *  RelationalOperator: '<S81>/UpperRelop'
   *  Switch: '<S81>/Switch'
   */
  if (rtb_DataTypeConversion1_no > rtu_satMax) {
 8001310:	4299      	cmp	r1, r3
 8001312:	dd0a      	ble.n	800132a <I_backCalc_fixdt+0x4a>
    *rty_out = rtu_satMax;
 8001314:	802b      	strh	r3, [r5, #0]

  /* Update for UnitDelay: '<S78>/UnitDelay' incorporates:
   *  Product: '<S78>/Divide1'
   *  Sum: '<S78>/Sum3'
   */
  localDW->UnitDelay_DSTATE = (int16_T)(*rty_out - rtb_DataTypeConversion1_no) *
 8001316:	882b      	ldrh	r3, [r5, #0]
 8001318:	1b9b      	subs	r3, r3, r6
 800131a:	b21b      	sxth	r3, r3
 800131c:	435a      	muls	r2, r3
    rtu_Kb;

  /* Update for UnitDelay: '<S80>/UnitDelay' */
  localDW->UnitDelay_DSTATE_h = rtb_Sum1_e0;
 800131e:	e9c4 2000 	strd	r2, r0, [r4]
}
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
    rtb_Sum1_e0 = MIN_int32_T;
 8001324:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001328:	e7ee      	b.n	8001308 <I_backCalc_fixdt+0x28>
    *rty_out = rtu_satMin;
 800132a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800132e:	4299      	cmp	r1, r3
 8001330:	bfb8      	it	lt
 8001332:	4619      	movlt	r1, r3
 8001334:	8029      	strh	r1, [r5, #0]
 8001336:	e7ee      	b.n	8001316 <I_backCalc_fixdt+0x36>

08001338 <Counter_i>:

  /* Switch: '<S26>/Switch1' incorporates:
   *  Constant: '<S26>/Constant23'
   *  UnitDelay: '<S26>/UnitDelay'
   */
  if (rtu_rst) {
 8001338:	b93a      	cbnz	r2, 800134a <Counter_i+0x12>
    rtu_rst_0 = 0U;
  } else {
    rtu_rst_0 = localDW->UnitDelay_DSTATE;
 800133a:	881a      	ldrh	r2, [r3, #0]
  }

  /* End of Switch: '<S26>/Switch1' */

  /* Sum: '<S25>/Sum1' */
  rty_cnt_0 = (uint16_T)((uint32_T)rtu_inc + rtu_rst_0);
 800133c:	4410      	add	r0, r2
 800133e:	b280      	uxth	r0, r0

  /* MinMax: '<S25>/MinMax' */
  if (rty_cnt_0 < rtu_max) {
    /* Update for UnitDelay: '<S26>/UnitDelay' */
    localDW->UnitDelay_DSTATE = rty_cnt_0;
 8001340:	4281      	cmp	r1, r0
 8001342:	bf28      	it	cs
 8001344:	4601      	movcs	r1, r0
 8001346:	8019      	strh	r1, [r3, #0]
    localDW->UnitDelay_DSTATE = rtu_max;
  }

  /* End of MinMax: '<S25>/MinMax' */
  return rty_cnt_0;
}
 8001348:	4770      	bx	lr
    rtu_rst_0 = 0U;
 800134a:	2200      	movs	r2, #0
 800134c:	e7f6      	b.n	800133c <Counter_i+0x4>

0800134e <Debounce_Filter>:
}

/* Output and update for atomic system: '<S3>/Debounce_Filter' */
void Debounce_Filter(boolean_T rtu_u, uint16_T rtu_tAcv, uint16_T rtu_tDeacv,
                     boolean_T *rty_y, DW_Debounce_Filter *localDW)
{
 800134e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001350:	9c06      	ldr	r4, [sp, #24]
 8001352:	4616      	mov	r6, r2
  rty_y_0 = (rtu_u != localDW->UnitDelay_DSTATE);
 8001354:	7822      	ldrb	r2, [r4, #0]
{
 8001356:	461d      	mov	r5, r3
  rty_y_0 = (rtu_u != localDW->UnitDelay_DSTATE);
 8001358:	1a12      	subs	r2, r2, r0
{
 800135a:	460f      	mov	r7, r1
  boolean_T rtb_UnitDelay_o;
  uint16_T rtb_Sum1_g3;
  boolean_T rtb_RelationalOperator_f;

  /* UnitDelay: '<S17>/UnitDelay' */
  rtb_UnitDelay_o = localDW->UnitDelay_DSTATE;
 800135c:	79a3      	ldrb	r3, [r4, #6]
  rty_y_0 = (rtu_u != localDW->UnitDelay_DSTATE);
 800135e:	bf18      	it	ne
 8001360:	2201      	movne	r2, #1
  localDW->UnitDelay_DSTATE = rtu_u;
 8001362:	7020      	strb	r0, [r4, #0]
   *  Logic: '<S17>/Logical Operator1'
   *  Logic: '<S17>/Logical Operator2'
   *  Logic: '<S17>/Logical Operator3'
   *  Logic: '<S17>/Logical Operator4'
   */
  if (rtu_u && (!rtb_UnitDelay_o)) {
 8001364:	b160      	cbz	r0, 8001380 <Debounce_Filter+0x32>
 8001366:	b9b3      	cbnz	r3, 8001396 <Debounce_Filter+0x48>
    /* Outputs for IfAction SubSystem: '<S17>/Qualification' incorporates:
     *  ActionPort: '<S21>/Action Port'
     */

    /* Outputs for Atomic SubSystem: '<S21>/Counter' */
    rtb_Sum1_g3 = (uint16_T) Counter_i(1U, rtu_tAcv, rtb_RelationalOperator_f,
 8001368:	1d23      	adds	r3, r4, #4
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ffe4 	bl	8001338 <Counter_i>

    /* Switch: '<S21>/Switch2' incorporates:
     *  Constant: '<S21>/Constant6'
     *  RelationalOperator: '<S21>/Relational Operator2'
     */
    *rty_y = (rtb_Sum1_g3 > rtu_tAcv);
 8001370:	4287      	cmp	r7, r0
 8001372:	bf2c      	ite	cs
 8001374:	2000      	movcs	r0, #0
 8001376:	2001      	movcc	r0, #1

    /* Switch: '<S20>/Switch2' incorporates:
     *  Constant: '<S20>/Constant6'
     *  RelationalOperator: '<S20>/Relational Operator2'
     */
    *rty_y = !(rtb_Sum1_g3 > rtu_tDeacv);
 8001378:	7028      	strb	r0, [r5, #0]
  }

  /* End of If: '<S17>/If2' */

  /* Update for UnitDelay: '<S17>/UnitDelay' */
  localDW->UnitDelay_DSTATE = *rty_y;
 800137a:	782b      	ldrb	r3, [r5, #0]
 800137c:	71a3      	strb	r3, [r4, #6]
}
 800137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  } else if ((!rtu_u) && rtb_UnitDelay_o) {
 8001380:	b14b      	cbz	r3, 8001396 <Debounce_Filter+0x48>
    rtb_Sum1_g3 = (uint16_T) Counter_i(1U, rtu_tDeacv, rtb_RelationalOperator_f,
 8001382:	1ca3      	adds	r3, r4, #2
 8001384:	4631      	mov	r1, r6
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffd6 	bl	8001338 <Counter_i>
    *rty_y = !(rtb_Sum1_g3 > rtu_tDeacv);
 800138c:	4286      	cmp	r6, r0
 800138e:	bf34      	ite	cc
 8001390:	2000      	movcc	r0, #0
 8001392:	2001      	movcs	r0, #1
 8001394:	e7f0      	b.n	8001378 <Debounce_Filter+0x2a>
    *rty_y = rtb_UnitDelay_o;
 8001396:	702b      	strb	r3, [r5, #0]
 8001398:	e7ef      	b.n	800137a <Debounce_Filter+0x2c>
	...

0800139c <BLDC_controller_step>:

/* Model step function */
void BLDC_controller_step(RT_MODEL *const rtM)
{
 800139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  P *rtP = ((P *) rtM->defaultParam);
  DW *rtDW = ((DW *) rtM->dwork);
  ExtU *rtU = (ExtU *) rtM->inputs;
  ExtY *rtY = (ExtY *) rtM->outputs;
 80013a0:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
   *  Inport: '<Root>/b_hallA '
   *  Inport: '<Root>/b_hallB'
   *  Inport: '<Root>/b_hallC'
   */
  rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
    + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 80013a4:	7972      	ldrb	r2, [r6, #5]
  rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
 80013a6:	7937      	ldrb	r7, [r6, #4]
  DW *rtDW = ((DW *) rtM->dwork);
 80013a8:	68c4      	ldr	r4, [r0, #12]
    + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 80013aa:	0051      	lsls	r1, r2, #1
  P *rtP = ((P *) rtM->defaultParam);
 80013ac:	6805      	ldr	r5, [r0, #0]
    + (uint8_T)(rtU->b_hallB << 1)) + rtU->b_hallC);
 80013ae:	79b0      	ldrb	r0, [r6, #6]
  rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
 80013b0:	eb01 0187 	add.w	r1, r1, r7, lsl #2
{
 80013b4:	b093      	sub	sp, #76	; 0x4c
  rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
 80013b6:	4401      	add	r1, r0
  ExtY *rtY = (ExtY *) rtM->outputs;
 80013b8:	9304      	str	r3, [sp, #16]
  rtb_Sum = (uint8_T)((uint32_T)(uint8_T)((uint32_T)(uint8_T)(rtU->b_hallA << 2)
 80013ba:	b2cb      	uxtb	r3, r1
 80013bc:	9308      	str	r3, [sp, #32]
   *  Inport: '<Root>/b_hallC'
   *  UnitDelay: '<S9>/UnitDelay1'
   *  UnitDelay: '<S9>/UnitDelay2'
   *  UnitDelay: '<S9>/UnitDelay3'
   */
  rtb_LogicalOperator = (boolean_T)((rtU->b_hallA != 0) ^ (rtU->b_hallB != 0) ^
 80013be:	1c13      	adds	r3, r2, #0
 80013c0:	bf18      	it	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	bf18      	it	ne
 80013c8:	f083 0301 	eorne.w	r3, r3, #1
 80013cc:	2800      	cmp	r0, #0
 80013ce:	bf18      	it	ne
 80013d0:	f083 0301 	eorne.w	r3, r3, #1
    (rtU->b_hallC != 0) ^ (rtDW->UnitDelay3_DSTATE_fy != 0) ^
 80013d4:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
    (rtDW->UnitDelay1_DSTATE != 0)) ^ (rtDW->UnitDelay2_DSTATE_f != 0);
 80013d8:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 80013dc:	2a00      	cmp	r2, #0
 80013de:	bf18      	it	ne
 80013e0:	f083 0301 	eorne.w	r3, r3, #1
 80013e4:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 80013e8:	9f08      	ldr	r7, [sp, #32]
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	bf18      	it	ne
 80013ee:	f083 0301 	eorne.w	r3, r3, #1
 80013f2:	3100      	adds	r1, #0
 80013f4:	bf18      	it	ne
 80013f6:	2101      	movne	r1, #1
 80013f8:	48b4      	ldr	r0, [pc, #720]	; (80016cc <BLDC_controller_step+0x330>)
  /* If: '<S12>/If2' incorporates:
   *  If: '<S2>/If2'
   *  Inport: '<S15>/z_counterRawPrev'
   *  UnitDelay: '<S12>/UnitDelay3'
   */
  if (rtb_LogicalOperator) {
 80013fa:	4299      	cmp	r1, r3
 80013fc:	4438      	add	r0, r7
  rtb_LogicalOperator = (boolean_T)((rtU->b_hallA != 0) ^ (rtU->b_hallB != 0) ^
 80013fe:	ea81 0203 	eor.w	r2, r1, r3
 8001402:	f990 7788 	ldrsb.w	r7, [r0, #1928]	; 0x788
  if (rtb_LogicalOperator) {
 8001406:	d050      	beq.n	80014aa <BLDC_controller_step+0x10e>
    /* Sum: '<S11>/Sum2' incorporates:
     *  Constant: '<S10>/vec_hallToPos'
     *  Selector: '<S10>/Selector'
     *  UnitDelay: '<S11>/UnitDelay2'
     */
    rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] -
 8001408:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
    UnitDelay3 = rtDW->Switch2_e;
 800140c:	f994 e08c 	ldrsb.w	lr, [r4, #140]	; 0x8c
    rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] -
 8001410:	1afb      	subs	r3, r7, r3
 8001412:	b25b      	sxtb	r3, r3
     *  Constant: '<S11>/Constant8'
     *  Logic: '<S11>/Logical Operator3'
     *  RelationalOperator: '<S11>/Relational Operator1'
     *  RelationalOperator: '<S11>/Relational Operator6'
     */
    if ((rtb_Sum2_h == 1) || (rtb_Sum2_h == -5)) {
 8001414:	2b01      	cmp	r3, #1
 8001416:	d002      	beq.n	800141e <BLDC_controller_step+0x82>
 8001418:	3305      	adds	r3, #5
 800141a:	f040 8111 	bne.w	8001640 <BLDC_controller_step+0x2a4>
      rtDW->Switch2_e = 1;
 800141e:	2301      	movs	r3, #1
    /* End of Outputs for SubSystem: '<S2>/F01_03_Direction_Detection' */

    /* Outputs for IfAction SubSystem: '<S12>/Raw_Motor_Speed_Estimation' incorporates:
     *  ActionPort: '<S15>/Action Port'
     */
    rtDW->z_counterRawPrev = rtDW->UnitDelay3_DSTATE;
 8001420:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
      rtDW->Switch2_e = -1;
 8001424:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
    /* Sum: '<S15>/Sum7' incorporates:
     *  Inport: '<S15>/z_counterRawPrev'
     *  UnitDelay: '<S12>/UnitDelay3'
     *  UnitDelay: '<S15>/UnitDelay4'
     */
    rtb_Switch2_k = (int16_T)(rtDW->z_counterRawPrev - rtDW->UnitDelay4_DSTATE);
 8001428:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 800142c:	b281      	uxth	r1, r0
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	fa0f fc83 	sxth.w	ip, r3

    /* Abs: '<S15>/Abs2' */
    if (rtb_Switch2_k < 0) {
 8001436:	f1bc 0f00 	cmp.w	ip, #0
      rtb_Switch1_l = (int16_T)-rtb_Switch2_k;
 800143a:	bfb8      	it	lt
 800143c:	425b      	neglt	r3, r3
    rtDW->UnitDelay2_DSTATE_b = rtConstP.vec_hallToPos_Value[rtb_Sum];
 800143e:	f884 708d 	strb.w	r7, [r4, #141]	; 0x8d
      rtb_Switch1_l = (int16_T)-rtb_Switch2_k;
 8001442:	bfb8      	it	lt
 8001444:	fa0f fc83 	sxthlt.w	ip, r3
    }

    /* End of Abs: '<S15>/Abs2' */

    /* Relay: '<S15>/dz_cntTrnsDet' */
    if (rtb_Switch1_l >= rtP->dz_cntTrnsDetHi) {
 8001448:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
    rtDW->z_counterRawPrev = rtDW->UnitDelay3_DSTATE;
 800144c:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
    if (rtb_Switch1_l >= rtP->dz_cntTrnsDetHi) {
 8001450:	4563      	cmp	r3, ip
 8001452:	f300 80f7 	bgt.w	8001644 <BLDC_controller_step+0x2a8>
      rtDW->dz_cntTrnsDet_Mode = true;
 8001456:	2301      	movs	r3, #1
    } else {
      if (rtb_Switch1_l <= rtP->dz_cntTrnsDetLo) {
        rtDW->dz_cntTrnsDet_Mode = false;
 8001458:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    rtDW->dz_cntTrnsDet = rtDW->dz_cntTrnsDet_Mode;

    /* End of Relay: '<S15>/dz_cntTrnsDet' */

    /* RelationalOperator: '<S15>/Relational Operator4' */
    rtb_RelationalOperator4_d = (rtDW->Switch2_e != UnitDelay3);
 800145c:	f994 c08c 	ldrsb.w	ip, [r4, #140]	; 0x8c
    rtDW->dz_cntTrnsDet = rtDW->dz_cntTrnsDet_Mode;
 8001460:	f894 a0a1 	ldrb.w	sl, [r4, #161]	; 0xa1
    rtb_RelationalOperator4_d = (rtDW->Switch2_e != UnitDelay3);
 8001464:	45f4      	cmp	ip, lr
    rtDW->dz_cntTrnsDet = rtDW->dz_cntTrnsDet_Mode;
 8001466:	f884 a09a 	strb.w	sl, [r4, #154]	; 0x9a
    rtb_RelationalOperator4_d = (rtDW->Switch2_e != UnitDelay3);
 800146a:	bf14      	ite	ne
 800146c:	f04f 0901 	movne.w	r9, #1
 8001470:	f04f 0900 	moveq.w	r9, #0
 8001474:	f9b4 8082 	ldrsh.w	r8, [r4, #130]	; 0x82
 8001478:	f9b4 e084 	ldrsh.w	lr, [r4, #132]	; 0x84
     *  Logic: '<S15>/Logical Operator1'
     *  Switch: '<S15>/Switch1'
     *  Switch: '<S15>/Switch2'
     *  UnitDelay: '<S15>/UnitDelay1'
     */
    if (rtb_RelationalOperator4_d && rtDW->UnitDelay1_DSTATE_n) {
 800147c:	f000 80e9 	beq.w	8001652 <BLDC_controller_step+0x2b6>
 8001480:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 80f9 	bne.w	800167c <BLDC_controller_step+0x2e0>
      rtb_Switch1_l = 0;
    } else if (rtb_RelationalOperator4_d) {
      /* Switch: '<S15>/Switch2' incorporates:
       *  UnitDelay: '<S12>/UnitDelay4'
       */
      rtb_Switch1_l = rtDW->UnitDelay4_DSTATE_e;
 800148a:	f9b4 3086 	ldrsh.w	r3, [r4, #134]	; 0x86
    }

    /* End of Switch: '<S15>/Switch3' */

    /* Product: '<S15>/Divide11' */
    rtDW->Divide11 = (int16_T)(rtb_Switch1_l * rtDW->Switch2_e);
 800148e:	fb0c f303 	mul.w	r3, ip, r3

    /* Update for UnitDelay: '<S15>/UnitDelay4' */
    rtDW->UnitDelay4_DSTATE = rtDW->z_counterRawPrev;
 8001492:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
    rtDW->Divide11 = (int16_T)(rtb_Switch1_l * rtDW->Switch2_e);
 8001496:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a

    /* Update for UnitDelay: '<S15>/UnitDelay2' incorporates:
     *  UnitDelay: '<S15>/UnitDelay3'
     */
    rtDW->UnitDelay2_DSTATE = rtDW->UnitDelay3_DSTATE_o;
 800149a:	f8a4 8080 	strh.w	r8, [r4, #128]	; 0x80

    /* Update for UnitDelay: '<S15>/UnitDelay3' incorporates:
     *  UnitDelay: '<S15>/UnitDelay5'
     */
    rtDW->UnitDelay3_DSTATE_o = rtDW->UnitDelay5_DSTATE;
 800149e:	f8a4 e082 	strh.w	lr, [r4, #130]	; 0x82

    /* Update for UnitDelay: '<S15>/UnitDelay5' */
    rtDW->UnitDelay5_DSTATE = rtDW->z_counterRawPrev;
 80014a2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84

    /* Update for UnitDelay: '<S15>/UnitDelay1' */
    rtDW->UnitDelay1_DSTATE_n = rtb_RelationalOperator4_d;
 80014a6:	f884 909f 	strb.w	r9, [r4, #159]	; 0x9f
  /* Outputs for Atomic SubSystem: '<S12>/Counter' */

  /* Constant: '<S12>/Constant6' incorporates:
   *  Constant: '<S12>/z_maxCntRst2'
   */
  rtb_Switch1_l = (int16_T) Counter(1, rtP->z_maxCntRst, rtb_LogicalOperator,
 80014aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ae:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff fe78 	bl	80011a8 <Counter>
  /* Switch: '<S12>/Switch2' incorporates:
   *  Constant: '<S12>/Constant4'
   *  Constant: '<S12>/z_maxCntRst'
   *  RelationalOperator: '<S12>/Relational Operator2'
   */
  if (rtb_Switch1_l > rtP->z_maxCntRst) {
 80014b8:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
  rtb_Switch1_l = (int16_T) Counter(1, rtP->z_maxCntRst, rtb_LogicalOperator,
 80014bc:	9009      	str	r0, [sp, #36]	; 0x24
  if (rtb_Switch1_l > rtP->z_maxCntRst) {
 80014be:	4283      	cmp	r3, r0
 80014c0:	f2c0 80de 	blt.w	8001680 <BLDC_controller_step+0x2e4>
    rtb_Switch2_k = 0;
  } else {
    rtb_Switch2_k = rtDW->Divide11;
 80014c4:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
  }

  /* End of Switch: '<S12>/Switch2' */

  /* Abs: '<S12>/Abs5' */
  if (rtb_Switch2_k < 0) {
 80014c8:	2b00      	cmp	r3, #0
    rtb_Switch2_k = rtDW->Divide11;
 80014ca:	9305      	str	r3, [sp, #20]
  if (rtb_Switch2_k < 0) {
 80014cc:	f280 80dc 	bge.w	8001688 <BLDC_controller_step+0x2ec>
    rtb_Abs5 = (int16_T)-rtb_Switch2_k;
 80014d0:	425b      	negs	r3, r3
 80014d2:	fa0f fb83 	sxth.w	fp, r3
  }

  /* End of Abs: '<S12>/Abs5' */

  /* Relay: '<S12>/n_commDeacv' */
  if (rtb_Abs5 >= rtP->n_commDeacvHi) {
 80014d6:	f9b5 30d2 	ldrsh.w	r3, [r5, #210]	; 0xd2
 80014da:	455b      	cmp	r3, fp
 80014dc:	f300 80d7 	bgt.w	800168e <BLDC_controller_step+0x2f2>
    rtDW->n_commDeacv_Mode = true;
 80014e0:	2301      	movs	r3, #1
  } else {
    if (rtb_Abs5 <= rtP->n_commAcvLo) {
      rtDW->n_commDeacv_Mode = false;
 80014e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0

  /* Logic: '<S12>/Logical Operator2' incorporates:
   *  Logic: '<S12>/Logical Operator1'
   *  Relay: '<S12>/n_commDeacv'
   */
  rtb_LogicalOperator = (rtDW->n_commDeacv_Mode && (!rtDW->dz_cntTrnsDet));
 80014e6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80014ea:	f994 208c 	ldrsb.w	r2, [r4, #140]	; 0x8c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80d4 	beq.w	800169c <BLDC_controller_step+0x300>
 80014f4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 80cf 	bne.w	800169c <BLDC_controller_step+0x300>
 80014fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   *  Switch: '<S13>/Switch3'
   */
  if (rtb_LogicalOperator) {
    /* MinMax: '<S13>/MinMax' */
    rtb_Switch2_fl = rtb_Switch1_l;
    if (!(rtb_Switch2_fl < rtDW->z_counterRawPrev)) {
 8001500:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
 8001504:	428b      	cmp	r3, r1
 8001506:	bfa8      	it	ge
 8001508:	460b      	movge	r3, r1
     *  Constant: '<S13>/Constant16'
     *  RelationalOperator: '<S13>/Relational Operator7'
     *  Selector: '<S10>/Selector'
     *  Sum: '<S13>/Sum1'
     */
    if (rtDW->Switch2_e == 1) {
 800150a:	2a01      	cmp	r2, #1
 800150c:	b21b      	sxth	r3, r3
 800150e:	f040 80cb 	bne.w	80016a8 <BLDC_controller_step+0x30c>
      rtb_Sum2_h = rtConstP.vec_hallToPos_Value[rtb_Sum];
    } else {
      rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] + 1);
    }

    rtb_Switch2_fl = (int16_T)(((int16_T)((int16_T)((rtb_Switch2_fl << 14) /
 8001512:	039b      	lsls	r3, r3, #14
 8001514:	fb93 f3f1 	sdiv	r3, r3, r1
      rtDW->z_counterRawPrev) * rtDW->Switch2_e) + (rtb_Sum2_h << 14)) >> 2);
 8001518:	4353      	muls	r3, r2
    rtb_Switch2_fl = (int16_T)(((int16_T)((int16_T)((rtb_Switch2_fl << 14) /
 800151a:	b21b      	sxth	r3, r3
      rtDW->z_counterRawPrev) * rtDW->Switch2_e) + (rtb_Sum2_h << 14)) >> 2);
 800151c:	eb03 3787 	add.w	r7, r3, r7, lsl #14
  rtb_LogicalOperator = (rtDW->n_commDeacv_Mode && (!rtDW->dz_cntTrnsDet));
 8001520:	2301      	movs	r3, #1
    rtb_Switch2_fl = (int16_T)(((int16_T)((int16_T)((rtb_Switch2_fl << 14) /
 8001522:	f347 078f 	sbfx	r7, r7, #2, #16
  }

  /* End of MinMax: '<S13>/MinMax1' */

  /* Product: '<S13>/Divide2' */
  rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 8001526:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800152a:	b23f      	sxth	r7, r7
 800152c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
    rtb_Switch2_fl = (int16_T)(rtb_Sum2_h << 12);
 8001530:	9307      	str	r3, [sp, #28]
  rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 8001532:	113b      	asrs	r3, r7, #4
 8001534:	9306      	str	r3, [sp, #24]

  /* DataTypeConversion: '<S1>/Data Type Conversion2' incorporates:
   *  Inport: '<Root>/r_inpTgt'
   */
  if (rtU->r_inpTgt > 2047) {
 8001536:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
  rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 800153a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
  if (rtU->r_inpTgt > 2047) {
 800153e:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
  rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 8001542:	930b      	str	r3, [sp, #44]	; 0x2c
  if (rtU->r_inpTgt > 2047) {
 8001544:	f280 80b6 	bge.w	80016b4 <BLDC_controller_step+0x318>
    rtb_DataTypeConversion2 = MAX_int16_T;
  } else if (rtU->r_inpTgt <= -2048) {
 8001548:	f517 6f00 	cmn.w	r7, #2048	; 0x800
 800154c:	f340 80b5 	ble.w	80016ba <BLDC_controller_step+0x31e>
    rtb_DataTypeConversion2 = MIN_int16_T;
  } else {
    rtb_DataTypeConversion2 = (int16_T)(rtU->r_inpTgt << 4);
 8001550:	013f      	lsls	r7, r7, #4
 8001552:	b23f      	sxth	r7, r7
  }

  /* UnitDelay: '<S8>/UnitDelay2' */
  rtb_RelationalOperator4_d = rtDW->UnitDelay2_DSTATE_g;
 8001554:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b

  /* RelationalOperator: '<S12>/Relational Operator9' incorporates:
   *  Constant: '<S12>/n_stdStillDet'
   */
  rtb_RelationalOperator9 = (rtb_Abs5 < rtP->n_stdStillDet);
 8001558:	f9b5 90da 	ldrsh.w	r9, [r5, #218]	; 0xda
  rtb_RelationalOperator4_d = rtDW->UnitDelay2_DSTATE_g;
 800155c:	930c      	str	r3, [sp, #48]	; 0x30
   *  Constant: '<S3>/t_errQual'
   *  Logic: '<S1>/Logical Operator2'
   *  RelationalOperator: '<S3>/Relational Operator2'
   *  UnitDelay: '<S8>/UnitDelay2'
   */
  if (rtP->b_diagEna && rtDW->UnitDelay2_DSTATE_g) {
 800155e:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03d      	beq.n	80015e2 <BLDC_controller_step+0x246>
 8001566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03a      	beq.n	80015e2 <BLDC_controller_step+0x246>
     *  RelationalOperator: '<S3>/Relational Operator7'
     *  S-Function (sfix_bitop): '<S3>/Bitwise Operator1'
     *  UnitDelay: '<S3>/UnitDelay'
     *  UnitDelay: '<S7>/UnitDelay4'
     */
    if ((rtY->z_errCode & 4) != 0) {
 800156c:	9b04      	ldr	r3, [sp, #16]
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	075b      	lsls	r3, r3, #29
 8001572:	f100 80a6 	bmi.w	80016c2 <BLDC_controller_step+0x326>
      rtb_RelationalOperator1_m = true;
    } else {
      if (rtDW->UnitDelay4_DSTATE_eu < 0) {
 8001576:	f9b4 2088 	ldrsh.w	r2, [r4, #136]	; 0x88
 800157a:	2a00      	cmp	r2, #0
        /* Abs: '<S3>/Abs4' incorporates:
         *  UnitDelay: '<S7>/UnitDelay4'
         */
        rtb_Merge_f_idx_1 = (int16_T)-rtDW->UnitDelay4_DSTATE_eu;
 800157c:	bfbc      	itt	lt
 800157e:	4253      	neglt	r3, r2
 8001580:	b21a      	sxthlt	r2, r3
         *  UnitDelay: '<S7>/UnitDelay4'
         */
        rtb_Merge_f_idx_1 = rtDW->UnitDelay4_DSTATE_eu;
      }

      rtb_RelationalOperator1_m = (rtU->b_motEna && rtb_RelationalOperator9 &&
 8001582:	7833      	ldrb	r3, [r6, #0]
 8001584:	b143      	cbz	r3, 8001598 <BLDC_controller_step+0x1fc>
 8001586:	45d9      	cmp	r9, fp
 8001588:	f340 8099 	ble.w	80016be <BLDC_controller_step+0x322>
 800158c:	f9b5 30dc 	ldrsh.w	r3, [r5, #220]	; 0xdc
 8001590:	4293      	cmp	r3, r2
 8001592:	bfac      	ite	ge
 8001594:	2300      	movge	r3, #0
 8001596:	2301      	movlt	r3, #1
 8001598:	b2db      	uxtb	r3, r3
     *  Gain: '<S3>/g_Hb'
     *  Gain: '<S3>/g_Hb1'
     *  RelationalOperator: '<S3>/Relational Operator1'
     *  RelationalOperator: '<S3>/Relational Operator3'
     */
    rtb_Sum_l = (uint8_T)(((uint32_T)((rtb_Sum == 7) << 1) + (rtb_Sum == 0)) +
 800159a:	9a08      	ldr	r2, [sp, #32]
                          (rtb_RelationalOperator1_m << 2));
 800159c:	009b      	lsls	r3, r3, #2
    rtb_Sum_l = (uint8_T)(((uint32_T)((rtb_Sum == 7) << 1) + (rtb_Sum == 0)) +
 800159e:	2a07      	cmp	r2, #7
 80015a0:	bf14      	ite	ne
 80015a2:	f04f 0800 	movne.w	r8, #0
 80015a6:	f04f 0802 	moveq.w	r8, #2
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	bf08      	it	eq
 80015ae:	3301      	addeq	r3, #1
 80015b0:	4443      	add	r3, r8

    /* Outputs for Atomic SubSystem: '<S3>/Debounce_Filter' */
    Debounce_Filter(rtb_Sum_l != 0, rtP->t_errQual, rtP->t_errDequal,
 80015b2:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
 80015b6:	f104 0302 	add.w	r3, r4, #2
 80015ba:	89aa      	ldrh	r2, [r5, #12]
 80015bc:	89e9      	ldrh	r1, [r5, #14]
 80015be:	bf18      	it	ne
 80015c0:	2001      	movne	r0, #1
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	bf08      	it	eq
 80015c6:	2000      	moveq	r0, #0
 80015c8:	f104 0399 	add.w	r3, r4, #153	; 0x99
 80015cc:	f7ff febf 	bl	800134e <Debounce_Filter>
                    &rtDW->Merge_n, &rtDW->Debounce_Filter_f);

    /* End of Outputs for SubSystem: '<S3>/Debounce_Filter' */

    /* Outputs for Atomic SubSystem: '<S3>/either_edge' */
    rtb_RelationalOperator1_m = either_edge(rtDW->Merge_n, &rtDW->either_edge_a);
 80015d0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
  rty_y_0 = (rtu_u != localDW->UnitDelay_DSTATE);
 80015d4:	7822      	ldrb	r2, [r4, #0]
  localDW->UnitDelay_DSTATE = rtu_u;
 80015d6:	7023      	strb	r3, [r4, #0]
     *  Constant: '<S3>/CTRL_COMM2'
     *  Constant: '<S3>/t_errDequal'
     *  Constant: '<S3>/t_errQual'
     *  RelationalOperator: '<S3>/Relational Operator2'
     */
    if (rtb_RelationalOperator1_m) {
 80015d8:	4293      	cmp	r3, r2
      /* Outport: '<Root>/z_errCode' */
      rtY->z_errCode = rtb_Sum_l;
 80015da:	bf1c      	itt	ne
 80015dc:	9b04      	ldrne	r3, [sp, #16]
 80015de:	f883 8006 	strbne.w	r8, [r3, #6]
  /* If: '<S1>/If4' incorporates:
   *  UnitDelay: '<S8>/UnitDelay2'
   */
  rtb_Sum2_h = rtDW->If4_ActiveSubsystem;
  UnitDelay3 = -1;
  if (rtDW->UnitDelay2_DSTATE_g) {
 80015e2:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
  rtb_Sum2_h = rtDW->If4_ActiveSubsystem;
 80015e6:	f994 108e 	ldrsb.w	r1, [r4, #142]	; 0x8e
  if (rtDW->UnitDelay2_DSTATE_g) {
 80015ea:	fab2 f382 	clz	r3, r2
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	425b      	negs	r3, r3
    UnitDelay3 = 0;
  }

  rtDW->If4_ActiveSubsystem = UnitDelay3;
  if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 80015f2:	4299      	cmp	r1, r3
  rtDW->If4_ActiveSubsystem = UnitDelay3;
 80015f4:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
  if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 80015f8:	d003      	beq.n	8001602 <BLDC_controller_step+0x266>
 80015fa:	b911      	cbnz	r1, 8001602 <BLDC_controller_step+0x266>
    /* Disable for If: '<S29>/If2' */
    rtDW->If2_ActiveSubsystem = -1;
 80015fc:	23ff      	movs	r3, #255	; 0xff
 80015fe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
  }

  if (UnitDelay3 == 0) {
 8001602:	2a00      	cmp	r2, #0
 8001604:	f000 80e3 	beq.w	80017ce <BLDC_controller_step+0x432>
     *  RelationalOperator: '<S27>/Relational Operator11'
     *  RelationalOperator: '<S27>/Relational Operator2'
     *  UnitDelay: '<S4>/UnitDelay1'
     */
    rtb_RelationalOperator1_m = ((!rtU->b_motEna) || rtDW->Merge_n ||
      (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 8001608:	7833      	ldrb	r3, [r6, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d05b      	beq.n	80016c6 <BLDC_controller_step+0x32a>
    rtb_RelationalOperator1_m = ((!rtU->b_motEna) || rtDW->Merge_n ||
 800160e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8001612:	2b00      	cmp	r3, #0
 8001614:	d157      	bne.n	80016c6 <BLDC_controller_step+0x32a>
      (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 8001616:	7871      	ldrb	r1, [r6, #1]
    rtb_RelationalOperator1_m = ((!rtU->b_motEna) || rtDW->Merge_n ||
 8001618:	2900      	cmp	r1, #0
 800161a:	d054      	beq.n	80016c6 <BLDC_controller_step+0x32a>
      (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 800161c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8001620:	4291      	cmp	r1, r2
 8001622:	d002      	beq.n	800162a <BLDC_controller_step+0x28e>
 8001624:	1c13      	adds	r3, r2, #0
 8001626:	bf18      	it	ne
 8001628:	2301      	movne	r3, #1
     *  RelationalOperator: '<S27>/Relational Operator3'
     *  RelationalOperator: '<S27>/Relational Operator4'
     *  RelationalOperator: '<S27>/Relational Operator5'
     *  RelationalOperator: '<S27>/Relational Operator6'
     */
    if (rtDW->is_active_c1_BLDC_controller == 0U) {
 800162a:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
 800162e:	2a00      	cmp	r2, #0
 8001630:	d150      	bne.n	80016d4 <BLDC_controller_step+0x338>
      rtDW->is_active_c1_BLDC_controller = 1U;
 8001632:	f240 2301 	movw	r3, #513	; 0x201
 8001636:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
        } else if (rtU->z_ctrlModReq == 2) {
          rtDW->is_ACTIVE = IN_SPEED_MODE;
          rtDW->z_ctrlMod = SPD_MODE;
        } else {
          rtDW->is_ACTIVE = IN_VOLTAGE_MODE;
          rtDW->z_ctrlMod = VLT_MODE;
 800163a:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 800163e:	e059      	b.n	80016f4 <BLDC_controller_step+0x358>
      rtDW->Switch2_e = -1;
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	e6ed      	b.n	8001420 <BLDC_controller_step+0x84>
      if (rtb_Switch1_l <= rtP->dz_cntTrnsDetLo) {
 8001644:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8001648:	4563      	cmp	r3, ip
 800164a:	f6ff af07 	blt.w	800145c <BLDC_controller_step+0xc0>
        rtDW->dz_cntTrnsDet_Mode = false;
 800164e:	2300      	movs	r3, #0
 8001650:	e702      	b.n	8001458 <BLDC_controller_step+0xbc>
 8001652:	896b      	ldrh	r3, [r5, #10]
    } else if (rtDW->dz_cntTrnsDet) {
 8001654:	f1ba 0f00 	cmp.w	sl, #0
 8001658:	d004      	beq.n	8001664 <BLDC_controller_step+0x2c8>
      rtb_Switch1_l = (int16_T)((rtP->cf_speedCoef << 4) /
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	fb93 f3f0 	sdiv	r3, r3, r0
      rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 8001660:	b21b      	sxth	r3, r3
 8001662:	e714      	b.n	800148e <BLDC_controller_step+0xf2>
                   rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 8001664:	f8b4 a080 	ldrh.w	sl, [r4, #128]	; 0x80
      rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 8001668:	009b      	lsls	r3, r3, #2
                   rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 800166a:	4451      	add	r1, sl
 800166c:	4441      	add	r1, r8
      rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 800166e:	b29b      	uxth	r3, r3
                   rtDW->UnitDelay5_DSTATE) + rtDW->z_counterRawPrev));
 8001670:	4471      	add	r1, lr
      rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 8001672:	011b      	lsls	r3, r3, #4
        (int16_T)(((rtDW->UnitDelay2_DSTATE + rtDW->UnitDelay3_DSTATE_o) +
 8001674:	b209      	sxth	r1, r1
      rtb_Switch1_l = (int16_T)(((uint16_T)(rtP->cf_speedCoef << 2) << 4) /
 8001676:	fb93 f3f1 	sdiv	r3, r3, r1
 800167a:	e7f1      	b.n	8001660 <BLDC_controller_step+0x2c4>
      rtb_Switch1_l = 0;
 800167c:	2300      	movs	r3, #0
 800167e:	e706      	b.n	800148e <BLDC_controller_step+0xf2>
    rtb_Switch2_k = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	9305      	str	r3, [sp, #20]
 8001684:	469b      	mov	fp, r3
 8001686:	e726      	b.n	80014d6 <BLDC_controller_step+0x13a>
 8001688:	f8dd b014 	ldr.w	fp, [sp, #20]
 800168c:	e723      	b.n	80014d6 <BLDC_controller_step+0x13a>
    if (rtb_Abs5 <= rtP->n_commAcvLo) {
 800168e:	f9b5 30d0 	ldrsh.w	r3, [r5, #208]	; 0xd0
 8001692:	455b      	cmp	r3, fp
 8001694:	f6ff af27 	blt.w	80014e6 <BLDC_controller_step+0x14a>
      rtDW->n_commDeacv_Mode = false;
 8001698:	2300      	movs	r3, #0
 800169a:	e722      	b.n	80014e2 <BLDC_controller_step+0x146>
    if (rtDW->Switch2_e == 1) {
 800169c:	2a01      	cmp	r2, #1
 800169e:	d106      	bne.n	80016ae <BLDC_controller_step+0x312>
    rtb_Switch2_fl = (int16_T)(rtb_Sum2_h << 12);
 80016a0:	033f      	lsls	r7, r7, #12
 80016a2:	b23f      	sxth	r7, r7
 80016a4:	2300      	movs	r3, #0
 80016a6:	e73e      	b.n	8001526 <BLDC_controller_step+0x18a>
      rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] + 1);
 80016a8:	3701      	adds	r7, #1
 80016aa:	b27f      	sxtb	r7, r7
 80016ac:	e731      	b.n	8001512 <BLDC_controller_step+0x176>
      rtb_Sum2_h = (int8_T)(rtConstP.vec_hallToPos_Value[rtb_Sum] + 1);
 80016ae:	3701      	adds	r7, #1
 80016b0:	b27f      	sxtb	r7, r7
 80016b2:	e7f5      	b.n	80016a0 <BLDC_controller_step+0x304>
    rtb_DataTypeConversion2 = MAX_int16_T;
 80016b4:	f647 77ff 	movw	r7, #32767	; 0x7fff
 80016b8:	e74c      	b.n	8001554 <BLDC_controller_step+0x1b8>
    rtb_DataTypeConversion2 = MIN_int16_T;
 80016ba:	4f05      	ldr	r7, [pc, #20]	; (80016d0 <BLDC_controller_step+0x334>)
 80016bc:	e74a      	b.n	8001554 <BLDC_controller_step+0x1b8>
      rtb_RelationalOperator1_m = (rtU->b_motEna && rtb_RelationalOperator9 &&
 80016be:	2300      	movs	r3, #0
 80016c0:	e76a      	b.n	8001598 <BLDC_controller_step+0x1fc>
      rtb_RelationalOperator1_m = true;
 80016c2:	2301      	movs	r3, #1
 80016c4:	e769      	b.n	800159a <BLDC_controller_step+0x1fe>
      (rtU->z_ctrlModReq == 0) || ((rtU->z_ctrlModReq != rtDW->z_ctrlMod) &&
 80016c6:	2301      	movs	r3, #1
 80016c8:	e7af      	b.n	800162a <BLDC_controller_step+0x28e>
 80016ca:	bf00      	nop
 80016cc:	0800c1d0 	.word	0x0800c1d0
 80016d0:	ffff8000 	.word	0xffff8000
    } else if (rtDW->is_c1_BLDC_controller == IN_ACTIVE) {
 80016d4:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 80016d8:	2a01      	cmp	r2, #1
 80016da:	f040 8109 	bne.w	80018f0 <BLDC_controller_step+0x554>
      if (rtb_RelationalOperator1_m) {
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80fb 	beq.w	80018da <BLDC_controller_step+0x53e>
        rtDW->is_ACTIVE = IN_NO_ACTIVE_CHILD;
 80016e4:	2300      	movs	r3, #0
        rtDW->is_c1_BLDC_controller = IN_OPEN;
 80016e6:	2202      	movs	r2, #2
        rtDW->is_ACTIVE = IN_NO_ACTIVE_CHILD;
 80016e8:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
        rtDW->is_c1_BLDC_controller = IN_OPEN;
 80016ec:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
          rtDW->z_ctrlMod = SPD_MODE;
 80016f0:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 80016f4:	4bd1      	ldr	r3, [pc, #836]	; (8001a3c <BLDC_controller_step+0x6a0>)
 80016f6:	42bb      	cmp	r3, r7
 80016f8:	bfb8      	it	lt
 80016fa:	463b      	movlt	r3, r7
 80016fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001700:	bfa8      	it	ge
 8001702:	f44f 537a 	movge.w	r3, #16000	; 0x3e80
 8001706:	461a      	mov	r2, r3
     *  Constant: '<S1>/z_ctrlTypSel1'
     *  DataTypeConversion: '<S1>/Data Type Conversion2'
     *  Inport: '<S30>/r_inpTgt'
     *  Saturate: '<S29>/Saturation'
     */
    if (rtP->z_ctrlTypSel == 2) {
 8001708:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
 800170c:	2b02      	cmp	r3, #2
 800170e:	d11b      	bne.n	8001748 <BLDC_controller_step+0x3ac>
       *  Constant: '<S32>/Vd_max'
       *  Constant: '<S32>/constant1'
       *  Constant: '<S32>/i_max'
       *  Constant: '<S32>/n_max'
       */
      tmp[0] = 0;
 8001710:	2300      	movs	r3, #0
 8001712:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
      tmp[1] = rtP->Vd_max;
 8001716:	8a2b      	ldrh	r3, [r5, #16]
      /* Product: '<S32>/Divide1' incorporates:
       *  Inport: '<Root>/z_ctrlModReq'
       *  Product: '<S32>/Divide4'
       *  Selector: '<S32>/Selector'
       */
      rtb_Merge = (int16_T)(((uint16_T)((tmp[rtU->z_ctrlModReq] << 5) / 125) *
 8001718:	a912      	add	r1, sp, #72	; 0x48
      tmp[1] = rtP->Vd_max;
 800171a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
      tmp[2] = rtP->n_max;
 800171e:	f8b5 30d8 	ldrh.w	r3, [r5, #216]	; 0xd8
 8001722:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
      tmp[3] = rtP->i_max;
 8001726:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
 800172a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
      rtb_Merge = (int16_T)(((uint16_T)((tmp[rtU->z_ctrlModReq] << 5) / 125) *
 800172e:	7873      	ldrb	r3, [r6, #1]
 8001730:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001734:	217d      	movs	r1, #125	; 0x7d
 8001736:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	fb93 f3f1 	sdiv	r3, r3, r1
 8001740:	b29b      	uxth	r3, r3
 8001742:	4353      	muls	r3, r2
 8001744:	f343 320f 	sbfx	r2, r3, #12, #16

    /* If: '<S29>/If2' incorporates:
     *  Inport: '<S31>/r_inpTgtScaRaw'
     */
    rtb_Sum2_h = rtDW->If2_ActiveSubsystem;
    UnitDelay3 = (int8_T)!(rtDW->z_ctrlMod == 0);
 8001748:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
    rtb_Sum2_h = rtDW->If2_ActiveSubsystem;
 800174c:	f994 1090 	ldrsb.w	r1, [r4, #144]	; 0x90
    UnitDelay3 = (int8_T)!(rtDW->z_ctrlMod == 0);
 8001750:	3300      	adds	r3, #0
 8001752:	bf18      	it	ne
 8001754:	2301      	movne	r3, #1
    rtDW->If2_ActiveSubsystem = UnitDelay3;
 8001756:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
    switch (UnitDelay3) {
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80e7 	bne.w	800192e <BLDC_controller_step+0x592>
     case 0:
      if (UnitDelay3 != rtb_Sum2_h) {
 8001760:	b121      	cbz	r1, 800176c <BLDC_controller_step+0x3d0>
        /* SystemReset for Atomic SubSystem: '<S33>/rising_edge_init' */
        /* SystemReset for If: '<S29>/If2' incorporates:
         *  UnitDelay: '<S35>/UnitDelay'
         *  UnitDelay: '<S36>/UnitDelay'
         */
        rtDW->UnitDelay_DSTATE_e = true;
 8001762:	2301      	movs	r3, #1
 8001764:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e

        /* End of SystemReset for SubSystem: '<S33>/rising_edge_init' */

        /* SystemReset for Atomic SubSystem: '<S33>/Rate_Limiter' */
        rtDW->UnitDelay_DSTATE = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	64e3      	str	r3, [r4, #76]	; 0x4c
      rtb_RelationalOperator9 = rtDW->UnitDelay_DSTATE_e;

      /* Update for UnitDelay: '<S35>/UnitDelay' incorporates:
       *  Constant: '<S35>/Constant'
       */
      rtDW->UnitDelay_DSTATE_e = false;
 800176c:	2300      	movs	r3, #0
      rtb_Gain3 = rtDW->UnitDelay4_DSTATE_eu << 12;
 800176e:	f9b4 1088 	ldrsh.w	r1, [r4, #136]	; 0x88
      rtb_RelationalOperator9 = rtDW->UnitDelay_DSTATE_e;
 8001772:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
      rtb_Gain3 = rtDW->UnitDelay4_DSTATE_eu << 12;
 8001776:	0309      	lsls	r1, r1, #12
      rtDW->UnitDelay_DSTATE_e = false;
 8001778:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e

      /* Outputs for Atomic SubSystem: '<S33>/Rate_Limiter' */
      /* Switch: '<S36>/Switch1' incorporates:
       *  UnitDelay: '<S36>/UnitDelay'
       */
      if (rtb_RelationalOperator9) {
 800177c:	2800      	cmp	r0, #0
 800177e:	f040 80d4 	bne.w	800192a <BLDC_controller_step+0x58e>
        rtb_Switch1 = rtb_DataTypeConversion;
      } else {
        rtb_Switch1 = rtDW->UnitDelay_DSTATE;
 8001782:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
      }

      /* End of Switch: '<S36>/Switch1' */

      /* Sum: '<S34>/Sum1' */
      rtb_Gain3 = -rtb_Switch1;
 8001784:	f1c2 0c00 	rsb	ip, r2, #0
      rtb_Sum1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 8001788:	f01c 6f00 	tst.w	ip, #134217728	; 0x8000000

      /* Switch: '<S37>/Switch2' incorporates:
       *  Constant: '<S33>/dV_openRate'
       *  RelationalOperator: '<S37>/LowerRelop1'
       */
      if (rtb_Sum1 > rtP->dV_openRate) {
 800178c:	682b      	ldr	r3, [r5, #0]
      rtb_Sum1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 800178e:	bf14      	ite	ne
 8001790:	f04c 4c78 	orrne.w	ip, ip, #4160749568	; 0xf8000000
 8001794:	f02c 4c78 	biceq.w	ip, ip, #4160749568	; 0xf8000000
      if (rtb_Sum1 > rtP->dV_openRate) {
 8001798:	4563      	cmp	r3, ip
 800179a:	db0a      	blt.n	80017b2 <BLDC_controller_step+0x416>
        rtb_Sum1 = rtP->dV_openRate;
      } else {
        /* Gain: '<S33>/Gain3' */
        rtb_Gain3 = -rtP->dV_openRate;
 800179c:	425b      	negs	r3, r3
        rtb_Gain3 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 800179e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80017a2:	bf14      	ite	ne
 80017a4:	f043 4378 	orrne.w	r3, r3, #4160749568	; 0xf8000000
 80017a8:	f023 4378 	biceq.w	r3, r3, #4160749568	; 0xf8000000
 80017ac:	4563      	cmp	r3, ip
 80017ae:	bfb8      	it	lt
 80017b0:	4663      	movlt	r3, ip
      }

      /* End of Switch: '<S37>/Switch2' */

      /* Sum: '<S34>/Sum2' */
      rtb_Gain3 = rtb_Sum1 + rtb_Switch1;
 80017b2:	4413      	add	r3, r2
      rtb_Switch1 = (rtb_Gain3 & 134217728) != 0 ? rtb_Gain3 | -134217728 :
 80017b4:	011a      	lsls	r2, r3, #4
 80017b6:	bf4c      	ite	mi
 80017b8:	f043 4378 	orrmi.w	r3, r3, #4160749568	; 0xf8000000
 80017bc:	f023 4378 	bicpl.w	r3, r3, #4160749568	; 0xf8000000
        rtb_Gain3 & 134217727;

      /* Switch: '<S36>/Switch2' */
      if (rtb_RelationalOperator9) {
        /* Update for UnitDelay: '<S36>/UnitDelay' */
        rtDW->UnitDelay_DSTATE = rtb_DataTypeConversion;
 80017c0:	2800      	cmp	r0, #0
 80017c2:	bf08      	it	eq
 80017c4:	4619      	moveq	r1, r3

      /* End of Switch: '<S36>/Switch2' */
      /* End of Outputs for SubSystem: '<S33>/Rate_Limiter' */

      /* DataTypeConversion: '<S33>/Data Type Conversion1' */
      rtDW->Merge1 = (int16_T)(rtb_Switch1 >> 12);
 80017c6:	131b      	asrs	r3, r3, #12
        rtDW->UnitDelay_DSTATE = rtb_DataTypeConversion;
 80017c8:	64e1      	str	r1, [r4, #76]	; 0x4c
      rtDW->Merge1 = (int16_T)(rtb_Switch1 >> 12);
 80017ca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
  }

  /* End of If: '<S1>/If4' */

  /* UnitDelay: '<S8>/UnitDelay5' */
  rtb_RelationalOperator9 = rtDW->UnitDelay5_DSTATE_l;
 80017ce:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c

  /* Saturate: '<S1>/Saturation' incorporates:
   *  Inport: '<Root>/i_phaAB'
   */
  rtb_Gain3 = rtU->i_phaAB << 4;
 80017d2:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
  rtb_RelationalOperator9 = rtDW->UnitDelay5_DSTATE_l;
 80017d6:	930d      	str	r3, [sp, #52]	; 0x34
  if (rtb_Gain3 >= 27200) {
 80017d8:	f646 233f 	movw	r3, #27199	; 0x6a3f
  rtb_Gain3 = rtU->i_phaAB << 4;
 80017dc:	0112      	lsls	r2, r2, #4
  if (rtb_Gain3 >= 27200) {
 80017de:	429a      	cmp	r2, r3
 80017e0:	f300 80a8 	bgt.w	8001934 <BLDC_controller_step+0x598>
    rtb_Merge = 27200;
  } else if (rtb_Gain3 <= -27200) {
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <BLDC_controller_step+0x6a4>)
 80017e6:	429a      	cmp	r2, r3
 80017e8:	f2c0 80a7 	blt.w	800193a <BLDC_controller_step+0x59e>
    rtb_Merge = -27200;
  } else {
    rtb_Merge = (int16_T)(rtU->i_phaAB << 4);
 80017ec:	b212      	sxth	r2, r2

  /* Saturate: '<S1>/Saturation1' incorporates:
   *  Inport: '<Root>/i_phaBC'
   */
  rtb_Gain3 = rtU->i_phaBC << 4;
  if (rtb_Gain3 >= 27200) {
 80017ee:	f646 233f 	movw	r3, #27199	; 0x6a3f
  rtb_Gain3 = rtU->i_phaBC << 4;
 80017f2:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
 80017f6:	0109      	lsls	r1, r1, #4
  if (rtb_Gain3 >= 27200) {
 80017f8:	4299      	cmp	r1, r3
 80017fa:	f300 80a0 	bgt.w	800193e <BLDC_controller_step+0x5a2>
    rtb_Saturation1 = 27200;
  } else if (rtb_Gain3 <= -27200) {
 80017fe:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <BLDC_controller_step+0x6a4>)
 8001800:	4299      	cmp	r1, r3
 8001802:	f2c0 809f 	blt.w	8001944 <BLDC_controller_step+0x5a8>
    rtb_Saturation1 = -27200;
  } else {
    rtb_Saturation1 = (int16_T)(rtU->i_phaBC << 4);
 8001806:	b209      	sxth	r1, r1
   *  Constant: '<S1>/z_ctrlTypSel1'
   *  Logic: '<S1>/Logical Operator1'
   *  RelationalOperator: '<S1>/Relational Operator1'
   *  UnitDelay: '<S8>/UnitDelay5'
   */
  if (rtP->b_fieldWeakEna && rtDW->UnitDelay5_DSTATE_l && (rtP->z_ctrlTypSel !=
 8001808:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
 800180c:	f895 e0f6 	ldrb.w	lr, [r5, #246]	; 0xf6
 8001810:	2b00      	cmp	r3, #0
 8001812:	d048      	beq.n	80018a6 <BLDC_controller_step+0x50a>
 8001814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001816:	2b00      	cmp	r3, #0
 8001818:	d045      	beq.n	80018a6 <BLDC_controller_step+0x50a>
 800181a:	f1be 0f00 	cmp.w	lr, #0
 800181e:	d042      	beq.n	80018a6 <BLDC_controller_step+0x50a>
     *  ActionPort: '<S5>/Action Port'
     */
    /* Abs: '<S5>/Abs5' incorporates:
     *  DataTypeConversion: '<S1>/Data Type Conversion2'
     */
    if (rtb_DataTypeConversion2 < 0) {
 8001820:	2f00      	cmp	r7, #0
      rtb_DataTypeConversion2 = (int16_T)-rtb_DataTypeConversion2;
 8001822:	bfb8      	it	lt
 8001824:	427f      	neglt	r7, r7
     *  Constant: '<S5>/r_fieldWeakLo'
     *  RelationalOperator: '<S39>/LowerRelop1'
     *  RelationalOperator: '<S39>/UpperRelop'
     *  Switch: '<S39>/Switch'
     */
    if (rtb_DataTypeConversion2 > rtP->r_fieldWeakHi) {
 8001826:	f9b5 c0de 	ldrsh.w	ip, [r5, #222]	; 0xde
      rtb_DataTypeConversion2 = (int16_T)-rtb_DataTypeConversion2;
 800182a:	bfb8      	it	lt
 800182c:	b23f      	sxthlt	r7, r7
    if (rtb_DataTypeConversion2 > rtP->r_fieldWeakHi) {
 800182e:	45bc      	cmp	ip, r7
 8001830:	f9b5 90e0 	ldrsh.w	r9, [r5, #224]	; 0xe0
 8001834:	f2c0 8088 	blt.w	8001948 <BLDC_controller_step+0x5ac>
 8001838:	454f      	cmp	r7, r9
 800183a:	bfb8      	it	lt
 800183c:	464f      	movlt	r7, r9
     *  Constant: '<S5>/n_fieldWeakAuthLo'
     *  RelationalOperator: '<S38>/LowerRelop1'
     *  RelationalOperator: '<S38>/UpperRelop'
     *  Switch: '<S38>/Switch'
     */
    if (rtb_Abs5 > rtP->n_fieldWeakAuthHi) {
 800183e:	f9b5 00d4 	ldrsh.w	r0, [r5, #212]	; 0xd4
    if (rtP->z_ctrlTypSel == 2) {
 8001842:	f1be 0f02 	cmp.w	lr, #2
      rtb_Merge_f_idx_1 = rtP->id_fieldWeakMax;
 8001846:	bf0c      	ite	eq
 8001848:	f9b5 80ce 	ldrsheq.w	r8, [r5, #206]	; 0xce
      rtb_Merge_f_idx_1 = rtP->a_phaAdvMax;
 800184c:	f9b5 80ca 	ldrshne.w	r8, [r5, #202]	; 0xca
    if (rtb_Abs5 > rtP->n_fieldWeakAuthHi) {
 8001850:	4558      	cmp	r0, fp
 8001852:	f9b5 a0d6 	ldrsh.w	sl, [r5, #214]	; 0xd6
 8001856:	db79      	blt.n	800194c <BLDC_controller_step+0x5b0>
 8001858:	45d3      	cmp	fp, sl
 800185a:	465b      	mov	r3, fp
 800185c:	bfb8      	it	lt
 800185e:	4653      	movlt	r3, sl
 8001860:	b21b      	sxth	r3, r3
     *  Sum: '<S5>/Sum2'
     *  Sum: '<S5>/Sum3'
     *  Sum: '<S5>/Sum4'
     */
    rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
      (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 8001862:	fa1f f989 	uxth.w	r9, r9
      (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
      (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 8001866:	fa1f fa8a 	uxth.w	sl, sl
      (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 800186a:	eba7 0709 	sub.w	r7, r7, r9
      (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 800186e:	eba3 030a 	sub.w	r3, r3, sl
    rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
 8001872:	b23f      	sxth	r7, r7
      (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
 8001874:	ebac 0909 	sub.w	r9, ip, r9
 8001878:	b21b      	sxth	r3, r3
      (rtP->n_fieldWeakAuthHi - rtP->n_fieldWeakAuthLo))) >> 15) *
 800187a:	eba0 0a0a 	sub.w	sl, r0, sl
      (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 800187e:	03ff      	lsls	r7, r7, #15
 8001880:	fa0f f989 	sxth.w	r9, r9
      (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 8001884:	03db      	lsls	r3, r3, #15
 8001886:	fa0f fa8a 	sxth.w	sl, sl
      (rtb_DataTypeConversion2 - rtP->r_fieldWeakLo) << 15) / (int16_T)
 800188a:	fb97 f7f9 	sdiv	r7, r7, r9
      (rtb_Switch2_l - rtP->n_fieldWeakAuthLo) << 15) / (int16_T)
 800188e:	fb93 f3fa 	sdiv	r3, r3, sl
    rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
 8001892:	b2bf      	uxth	r7, r7
      (rtP->r_fieldWeakHi - rtP->r_fieldWeakLo)) * (uint16_T)(((int16_T)
 8001894:	b29b      	uxth	r3, r3
 8001896:	435f      	muls	r7, r3
    rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
 8001898:	f3c7 37cf 	ubfx	r7, r7, #15, #16
      (rtP->n_fieldWeakAuthHi - rtP->n_fieldWeakAuthLo))) >> 15) *
 800189c:	fb08 f707 	mul.w	r7, r8, r7
      rtb_Merge_f_idx_1) >> 15);
 80018a0:	13ff      	asrs	r7, r7, #15
    rtDW->Divide3 = (int16_T)(((uint16_T)(((uint32_T)(uint16_T)(((int16_T)
 80018a2:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
  /* If: '<S1>/If1' incorporates:
   *  Constant: '<S1>/z_ctrlTypSel1'
   */
  rtb_Sum2_h = rtDW->If1_ActiveSubsystem;
  UnitDelay3 = -1;
  if (rtP->z_ctrlTypSel == 2) {
 80018a6:	f1be 0002 	subs.w	r0, lr, #2
 80018aa:	bf18      	it	ne
 80018ac:	f04f 30ff 	movne.w	r0, #4294967295
  rtb_Sum2_h = rtDW->If1_ActiveSubsystem;
 80018b0:	f994 308f 	ldrsb.w	r3, [r4, #143]	; 0x8f
    UnitDelay3 = 0;
  }

  rtDW->If1_ActiveSubsystem = UnitDelay3;
 80018b4:	f884 008f 	strb.w	r0, [r4, #143]	; 0x8f
  if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 80018b8:	4283      	cmp	r3, r0
 80018ba:	d009      	beq.n	80018d0 <BLDC_controller_step+0x534>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 82b0 	bne.w	8001e22 <BLDC_controller_step+0xa86>

      /* Disable for Outport: '<S41>/id' */
      rtDW->DataTypeConversion[1] = 0;
    }

    rtDW->If2_ActiveSubsystem_a = -1;
 80018c2:	20ff      	movs	r0, #255	; 0xff

    /* End of Disable for If: '<S6>/If2' */

    /* Disable for Outport: '<S6>/V_phaABC_FOC' */
    rtDW->Gain4[0] = 0;
    rtDW->Gain4[1] = 0;
 80018c4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
    rtDW->If2_ActiveSubsystem_a = -1;
 80018c8:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
    rtDW->Gain4[2] = 0;

    /* Disable for Outport: '<S6>/r_devSignal1' */
    rtDW->DataTypeConversion[0] = 0;
 80018cc:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58

    /* Disable for Outport: '<S6>/r_devSignal2' */
    rtDW->DataTypeConversion[1] = 0;
  }

  if (UnitDelay3 == 0) {
 80018d0:	f1be 0f02 	cmp.w	lr, #2
 80018d4:	f040 82a9 	bne.w	8001e2a <BLDC_controller_step+0xa8e>
 80018d8:	e03d      	b.n	8001956 <BLDC_controller_step+0x5ba>
        switch (rtDW->is_ACTIVE) {
 80018da:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d004      	beq.n	80018ec <BLDC_controller_step+0x550>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	f47f aea9 	bne.w	800163a <BLDC_controller_step+0x29e>
          rtDW->z_ctrlMod = TRQ_MODE;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e701      	b.n	80016f0 <BLDC_controller_step+0x354>
          rtDW->z_ctrlMod = SPD_MODE;
 80018ec:	2302      	movs	r3, #2
 80018ee:	e6ff      	b.n	80016f0 <BLDC_controller_step+0x354>
      rtDW->z_ctrlMod = OPEN_MODE;
 80018f0:	2200      	movs	r2, #0
 80018f2:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
      if ((!rtb_RelationalOperator1_m) && ((rtU->z_ctrlModReq == 1) ||
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f aefc 	bne.w	80016f4 <BLDC_controller_step+0x358>
 80018fc:	7873      	ldrb	r3, [r6, #1]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	2a02      	cmp	r2, #2
 8001902:	f63f aef7 	bhi.w	80016f4 <BLDC_controller_step+0x358>
           (rtU->z_ctrlModReq == 2) || (rtU->z_ctrlModReq == 3)) &&
 8001906:	45d9      	cmp	r9, fp
 8001908:	f77f aef4 	ble.w	80016f4 <BLDC_controller_step+0x358>
        rtDW->is_c1_BLDC_controller = IN_ACTIVE;
 800190c:	2201      	movs	r2, #1
        if (rtU->z_ctrlModReq == 3) {
 800190e:	2b03      	cmp	r3, #3
        rtDW->is_c1_BLDC_controller = IN_ACTIVE;
 8001910:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
        if (rtU->z_ctrlModReq == 3) {
 8001914:	d103      	bne.n	800191e <BLDC_controller_step+0x582>
          rtDW->is_ACTIVE = IN_TORQUE_MODE;
 8001916:	2202      	movs	r2, #2
          rtDW->is_ACTIVE = IN_SPEED_MODE;
 8001918:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 800191c:	e6e8      	b.n	80016f0 <BLDC_controller_step+0x354>
        } else if (rtU->z_ctrlModReq == 2) {
 800191e:	2b02      	cmp	r3, #2
 8001920:	d0fa      	beq.n	8001918 <BLDC_controller_step+0x57c>
          rtDW->is_ACTIVE = IN_VOLTAGE_MODE;
 8001922:	2303      	movs	r3, #3
 8001924:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8001928:	e687      	b.n	800163a <BLDC_controller_step+0x29e>
        rtb_Switch1 = rtb_DataTypeConversion;
 800192a:	460a      	mov	r2, r1
 800192c:	e72a      	b.n	8001784 <BLDC_controller_step+0x3e8>
      rtDW->Merge1 = rtb_Merge;
 800192e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
      break;
 8001932:	e74c      	b.n	80017ce <BLDC_controller_step+0x432>
    rtb_Merge = 27200;
 8001934:	f646 2240 	movw	r2, #27200	; 0x6a40
 8001938:	e759      	b.n	80017ee <BLDC_controller_step+0x452>
    rtb_Merge = -27200;
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <BLDC_controller_step+0x6a8>)
 800193c:	e757      	b.n	80017ee <BLDC_controller_step+0x452>
    rtb_Saturation1 = 27200;
 800193e:	f646 2140 	movw	r1, #27200	; 0x6a40
 8001942:	e761      	b.n	8001808 <BLDC_controller_step+0x46c>
    rtb_Saturation1 = -27200;
 8001944:	493f      	ldr	r1, [pc, #252]	; (8001a44 <BLDC_controller_step+0x6a8>)
 8001946:	e75f      	b.n	8001808 <BLDC_controller_step+0x46c>
 8001948:	4667      	mov	r7, ip
 800194a:	e778      	b.n	800183e <BLDC_controller_step+0x4a2>
 800194c:	4603      	mov	r3, r0
 800194e:	e788      	b.n	8001862 <BLDC_controller_step+0x4c6>
       *  ActionPort: '<S6>/Action Port'
       */
      /* InitializeConditions for If: '<S1>/If1' incorporates:
       *  UnitDelay: '<S6>/UnitDelay4'
       */
      rtDW->UnitDelay4_DSTATE_h = 0;
 8001950:	2300      	movs	r3, #0
 8001952:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a

    /* Outputs for IfAction SubSystem: '<S1>/F05_Field_Oriented_Control' incorporates:
     *  ActionPort: '<S6>/Action Port'
     */
    /* Abs: '<S6>/Abs1' */
    if (rtDW->Merge1 < 0) {
 8001956:	f9b4 705c 	ldrsh.w	r7, [r4, #92]	; 0x5c
    rtb_toNegative = (int16_T)-rtDW->Divide3;

    /* If: '<S40>/If1' incorporates:
     *  Constant: '<S40>/b_selPhaABCurrMeas'
     */
    if (rtP->b_selPhaABCurrMeas) {
 800195a:	f895 30f9 	ldrb.w	r3, [r5, #249]	; 0xf9
    if (rtDW->Merge1 < 0) {
 800195e:	2f00      	cmp	r7, #0
      rtb_Switch2_l = (int16_T)-rtDW->Merge1;
 8001960:	bfbc      	itt	lt
 8001962:	427f      	neglt	r7, r7
 8001964:	b23f      	sxthlt	r7, r7
    rtb_toNegative = (int16_T)-rtDW->Divide3;
 8001966:	f9b4 a05e 	ldrsh.w	sl, [r4, #94]	; 0x5e
    if (rtP->b_selPhaABCurrMeas) {
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03d      	beq.n	80019ea <BLDC_controller_step+0x64e>
      /* Outputs for IfAction SubSystem: '<S40>/Clarke_PhasesAB' incorporates:
       *  ActionPort: '<S48>/Action Port'
       */
      /* Gain: '<S48>/Gain4' */
      rtb_Gain3 = 18919 * rtb_Merge;
 800196e:	f644 13e7 	movw	r3, #18919	; 0x49e7

      /* Sum: '<S48>/Sum1' incorporates:
       *  Gain: '<S48>/Gain2'
       *  Gain: '<S48>/Gain4'
       */
      rtb_Gain3 = (((rtb_Gain3 < 0 ? 32767 : 0) + rtb_Gain3) >> 15) + (int16_T)
 8001972:	4618      	mov	r0, r3
 8001974:	f647 78ff 	movw	r8, #32767	; 0x7fff
 8001978:	4350      	muls	r0, r2
 800197a:	bf54      	ite	pl
 800197c:	f04f 0e00 	movpl.w	lr, #0
 8001980:	46c6      	movmi	lr, r8
        (((rtb_DataTypeConversion < 0 ? 16383 : 0) + rtb_DataTypeConversion) >>
 8001982:	4359      	muls	r1, r3
 8001984:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001988:	bf58      	it	pl
 800198a:	2300      	movpl	r3, #0
      rtb_Gain3 = (((rtb_Gain3 < 0 ? 32767 : 0) + rtb_Gain3) >> 15) + (int16_T)
 800198c:	4684      	mov	ip, r0
        (((rtb_DataTypeConversion < 0 ? 16383 : 0) + rtb_DataTypeConversion) >>
 800198e:	4419      	add	r1, r3
 8001990:	1389      	asrs	r1, r1, #14
      rtb_Gain3 = (((rtb_Gain3 < 0 ? 32767 : 0) + rtb_Gain3) >> 15) + (int16_T)
 8001992:	44f4      	add	ip, lr
 8001994:	eb01 33ec 	add.w	r3, r1, ip, asr #15
 8001998:	492b      	ldr	r1, [pc, #172]	; (8001a48 <BLDC_controller_step+0x6ac>)
 800199a:	428b      	cmp	r3, r1
 800199c:	bfb8      	it	lt
 800199e:	460b      	movlt	r3, r1
        if (rtb_Gain3 < -32768) {
          rtb_Gain3 = -32768;
        }
      }

      rtb_DataTypeConversion2 = (int16_T)rtb_Gain3;
 80019a0:	4543      	cmp	r3, r8
 80019a2:	bfa8      	it	ge
 80019a4:	4643      	movge	r3, r8
 80019a6:	b21b      	sxth	r3, r3
  if (u <= bp0) {
 80019a8:	9906      	ldr	r1, [sp, #24]
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d040      	beq.n	8001a30 <BLDC_controller_step+0x694>
    fbpIndex = (uint16_T)((uint32_T)(uint16_T)(u - bp0) / bpSpace);
 80019ae:	f3c1 19c8 	ubfx	r9, r1, #7, #9
    if (fbpIndex < maxIndex) {
 80019b2:	f1b9 0fb3 	cmp.w	r9, #179	; 0xb3
 80019b6:	d83e      	bhi.n	8001a36 <BLDC_controller_step+0x69a>
      bpIndex = (uint8_T)fbpIndex;
 80019b8:	fa5f f989 	uxtb.w	r9, r9
     *  Constant: '<S41>/cf_currFilt'
     *  Inport: '<Root>/b_motEna'
     */
    rtb_Sum2_h = rtDW->If2_ActiveSubsystem_a;
    UnitDelay3 = -1;
    if (rtU->b_motEna) {
 80019bc:	7830      	ldrb	r0, [r6, #0]
    rtb_Sum2_h = rtDW->If2_ActiveSubsystem_a;
 80019be:	f994 c091 	ldrsb.w	ip, [r4, #145]	; 0x91
    if (rtU->b_motEna) {
 80019c2:	fab0 f180 	clz	r1, r0
 80019c6:	0949      	lsrs	r1, r1, #5
 80019c8:	4249      	negs	r1, r1
      UnitDelay3 = 0;
    }

    rtDW->If2_ActiveSubsystem_a = UnitDelay3;
    if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 80019ca:	458c      	cmp	ip, r1
    rtDW->If2_ActiveSubsystem_a = UnitDelay3;
 80019cc:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
    if ((rtb_Sum2_h != UnitDelay3) && (rtb_Sum2_h == 0)) {
 80019d0:	d007      	beq.n	80019e2 <BLDC_controller_step+0x646>
 80019d2:	f1bc 0f00 	cmp.w	ip, #0
 80019d6:	f040 824f 	bne.w	8001e78 <BLDC_controller_step+0xadc>
      /* Disable for Outport: '<S41>/iq' */
      rtDW->DataTypeConversion[0] = 0;
 80019da:	f8a4 c056 	strh.w	ip, [r4, #86]	; 0x56

      /* Disable for Outport: '<S41>/id' */
      rtDW->DataTypeConversion[1] = 0;
 80019de:	f8a4 c058 	strh.w	ip, [r4, #88]	; 0x58
    }

    if (UnitDelay3 == 0) {
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f000 8284 	beq.w	8001ef0 <BLDC_controller_step+0xb54>
 80019e8:	e24a      	b.n	8001e80 <BLDC_controller_step+0xae4>
 80019ea:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001a48 <BLDC_controller_step+0x6ac>
      rtb_Gain3 = rtb_Merge - rtb_Saturation1;
 80019ee:	1a53      	subs	r3, r2, r1
 80019f0:	4563      	cmp	r3, ip
 80019f2:	f647 78ff 	movw	r8, #32767	; 0x7fff
 80019f6:	bfb8      	it	lt
 80019f8:	4663      	movlt	r3, ip
      rtb_Gain3 *= 18919;
 80019fa:	f644 1ee7 	movw	lr, #18919	; 0x49e7
 80019fe:	4543      	cmp	r3, r8
      rtb_DataTypeConversion2 = (int16_T)(((rtb_Gain3 < 0 ? 32767 : 0) +
 8001a00:	4670      	mov	r0, lr
 8001a02:	bfa8      	it	ge
 8001a04:	4643      	movge	r3, r8
 8001a06:	4358      	muls	r0, r3
      rtb_Gain3 = -rtb_Merge - rtb_Saturation1;
 8001a08:	f1c2 0200 	rsb	r2, r2, #0
 8001a0c:	eba2 0201 	sub.w	r2, r2, r1
      rtb_DataTypeConversion2 = (int16_T)(((rtb_Gain3 < 0 ? 32767 : 0) +
 8001a10:	bf54      	ite	pl
 8001a12:	f04f 0e00 	movpl.w	lr, #0
 8001a16:	46c6      	movmi	lr, r8
 8001a18:	4562      	cmp	r2, ip
 8001a1a:	bfb8      	it	lt
 8001a1c:	4662      	movlt	r2, ip
 8001a1e:	4603      	mov	r3, r0
      rtb_Merge = (int16_T)rtb_Gain3;
 8001a20:	4542      	cmp	r2, r8
 8001a22:	bfa8      	it	ge
 8001a24:	4642      	movge	r2, r8
      rtb_DataTypeConversion2 = (int16_T)(((rtb_Gain3 < 0 ? 32767 : 0) +
 8001a26:	4473      	add	r3, lr
 8001a28:	f343 33cf 	sbfx	r3, r3, #15, #16
      rtb_Merge = (int16_T)rtb_Gain3;
 8001a2c:	b212      	sxth	r2, r2
 8001a2e:	e7bb      	b.n	80019a8 <BLDC_controller_step+0x60c>
    bpIndex = 0U;
 8001a30:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001a34:	e7c2      	b.n	80019bc <BLDC_controller_step+0x620>
      bpIndex = (uint8_T)maxIndex;
 8001a36:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 8001a3a:	e7bf      	b.n	80019bc <BLDC_controller_step+0x620>
 8001a3c:	ffffc180 	.word	0xffffc180
 8001a40:	ffff95c1 	.word	0xffff95c1
 8001a44:	ffff95c0 	.word	0xffff95c0
 8001a48:	ffff8000 	.word	0xffff8000
    bpIndex = 0U;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e273      	b.n	8001f38 <BLDC_controller_step+0xb9c>
      bpIndex = (uint8_T)maxIndex;
 8001a50:	232d      	movs	r3, #45	; 0x2d
 8001a52:	e271      	b.n	8001f38 <BLDC_controller_step+0xb9c>
       *  Interpolation_n-D: '<S45>/iq_maxSca_M1'
       *  PreLookup: '<S45>/iq_maxSca_XA'
       *  Product: '<S45>/Divide4'
       */
      rtDW->Divide1_a = (int16_T)
        ((rtConstP.iq_maxSca_M1_Table[plook_u8u16_evencka((uint16_T)rtb_Gain3,
 8001a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a58:	e28f      	b.n	8001f7a <BLDC_controller_step+0xbde>
    bpIndex = 0U;
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	e294      	b.n	8001f88 <BLDC_controller_step+0xbec>
        /* Switch: '<S74>/Switch2' incorporates:
         *  RelationalOperator: '<S74>/LowerRelop1'
         *  RelationalOperator: '<S74>/UpperRelop'
         *  Switch: '<S74>/Switch'
         */
        if (rtDW->DataTypeConversion[0] > rtDW->Divide1_a) {
 8001a5e:	f9b4 3056 	ldrsh.w	r3, [r4, #86]	; 0x56
 8001a62:	4298      	cmp	r0, r3
 8001a64:	db03      	blt.n	8001a6e <BLDC_controller_step+0x6d2>
 8001a66:	429a      	cmp	r2, r3
 8001a68:	bfb8      	it	lt
 8001a6a:	461a      	movlt	r2, r3
 8001a6c:	4610      	mov	r0, r2
        /* Product: '<S71>/Divide1' incorporates:
         *  Constant: '<S71>/cf_iqKiLimProt'
         *  Sum: '<S71>/Sum3'
         */
        rtDW->Divide1 = (int16_T)(rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0])
          * rtP->cf_iqKiLimProt;
 8001a6e:	f8b5 20f0 	ldrh.w	r2, [r5, #240]	; 0xf0
        rtDW->Divide1 = (int16_T)(rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0])
 8001a72:	1ac3      	subs	r3, r0, r3
 8001a74:	b21b      	sxth	r3, r3
          * rtP->cf_iqKiLimProt;
 8001a76:	4353      	muls	r3, r2
        rtDW->Divide1 = (int16_T)(rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0])
 8001a78:	64a3      	str	r3, [r4, #72]	; 0x48
      }

      /* End of SwitchCase: '<S45>/Switch Case' */

      /* Gain: '<S45>/Gain4' */
      rtDW->Gain4_c = (int16_T)-rtDW->i_max;
 8001a7a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8001a7e:	425b      	negs	r3, r3
 8001a80:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
    /* End of If: '<S6>/If3' */

    /* If: '<S6>/If1' incorporates:
     *  UnitDelay: '<S8>/UnitDelay6'
     */
    if (rtDW->UnitDelay6_DSTATE) {
 8001a84:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d053      	beq.n	8001b34 <BLDC_controller_step+0x798>
       *  Constant: '<S54>/cf_idKi1'
       *  Constant: '<S54>/cf_idKp1'
       *  Constant: '<S54>/constant1'
       *  Sum: '<S54>/Sum3'
       */
      if (rtb_LogicalOperator) {
 8001a8c:	9b07      	ldr	r3, [sp, #28]
 8001a8e:	b353      	cbz	r3, 8001ae6 <BLDC_controller_step+0x74a>
    rtb_toNegative = (int16_T)-rtDW->Divide3;
 8001a90:	f1ca 0a00 	rsb	sl, sl, #0
        /* Switch: '<S66>/Switch2' incorporates:
         *  RelationalOperator: '<S66>/LowerRelop1'
         *  RelationalOperator: '<S66>/UpperRelop'
         *  Switch: '<S66>/Switch'
         */
        if (rtb_toNegative > rtDW->i_max) {
 8001a94:	f9b4 0068 	ldrsh.w	r0, [r4, #104]	; 0x68
    rtb_toNegative = (int16_T)-rtDW->Divide3;
 8001a98:	fa0f fa8a 	sxth.w	sl, sl
        if (rtb_toNegative > rtDW->i_max) {
 8001a9c:	4550      	cmp	r0, sl
 8001a9e:	db04      	blt.n	8001aaa <BLDC_controller_step+0x70e>
 8001aa0:	f9b4 006e 	ldrsh.w	r0, [r4, #110]	; 0x6e
 8001aa4:	4550      	cmp	r0, sl
 8001aa6:	bfb8      	it	lt
 8001aa8:	4650      	movlt	r0, sl
        }

        /* End of Switch: '<S66>/Switch2' */

        /* Sum: '<S54>/Sum3' */
        rtb_Gain3 = rtb_toNegative - rtDW->DataTypeConversion[1];
 8001aaa:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
            rtb_Gain3 = -32768;
          }
        }

        /* Outputs for Atomic SubSystem: '<S54>/PI_clamp_fixdt' */
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_idKp, rtP->cf_idKi,
 8001aae:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8001ab2:	f8b5 20ec 	ldrh.w	r2, [r5, #236]	; 0xec
 8001ab6:	f8b5 10e4 	ldrh.w	r1, [r5, #228]	; 0xe4
        rtb_Gain3 = rtb_toNegative - rtDW->DataTypeConversion[1];
 8001aba:	1ac0      	subs	r0, r0, r3
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_idKp, rtP->cf_idKi,
 8001abc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8001ac0:	f8cd c00c 	str.w	ip, [sp, #12]
 8001ac4:	f104 0c78 	add.w	ip, r4, #120	; 0x78
 8001ac8:	f8cd c008 	str.w	ip, [sp, #8]
 8001acc:	f04f 0c00 	mov.w	ip, #0
 8001ad0:	f8cd c004 	str.w	ip, [sp, #4]
 8001ad4:	f9b4 c062 	ldrsh.w	ip, [r4, #98]	; 0x62
 8001ad8:	f300 000f 	ssat	r0, #16, r0
 8001adc:	f8cd c000 	str.w	ip, [sp]
 8001ae0:	b200      	sxth	r0, r0
 8001ae2:	f7ff fb6d 	bl	80011c0 <PI_clamp_fixdt>
       *  Constant: '<S53>/constant2'
       *  Inport: '<S51>/r_inpTgtSca'
       *  Sum: '<S52>/Sum3'
       *  Sum: '<S53>/Sum2'
       */
      switch (rtDW->z_ctrlMod) {
 8001ae6:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8001aea:	f9b4 205c 	ldrsh.w	r2, [r4, #92]	; 0x5c
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	f000 8110 	beq.w	8001d14 <BLDC_controller_step+0x978>
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	f000 8126 	beq.w	8001d46 <BLDC_controller_step+0x9aa>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8152 	bne.w	8001da4 <BLDC_controller_step+0xa08>
 8001b00:	f9b4 3074 	ldrsh.w	r3, [r4, #116]	; 0x74
 8001b04:	f9b4 1072 	ldrsh.w	r1, [r4, #114]	; 0x72
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	bfa8      	it	ge
 8001b0c:	460b      	movge	r3, r1
 8001b0e:	429f      	cmp	r7, r3
 8001b10:	bfa8      	it	ge
 8001b12:	461f      	movge	r7, r3
        }

        /* End of MinMax: '<S55>/MinMax' */

        /* Signum: '<S55>/SignDeltaU2' */
        if (rtDW->Merge1 < 0) {
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	f2c0 80f2 	blt.w	8001cfe <BLDC_controller_step+0x962>
          rtb_Merge_f_idx_1 = -1;
        } else {
          rtb_Merge_f_idx_1 = (int16_T)(rtDW->Merge1 > 0);
 8001b1a:	bfcc      	ite	gt
 8001b1c:	2301      	movgt	r3, #1
 8001b1e:	2300      	movle	r3, #0
 8001b20:	b21b      	sxth	r3, r3
        }

        /* End of Signum: '<S55>/SignDeltaU2' */

        /* Product: '<S55>/Divide1' */
        rtb_Merge = (int16_T)(rtb_Switch2_l * rtb_Merge_f_idx_1);
 8001b22:	435f      	muls	r7, r3
        /* Switch: '<S70>/Switch2' incorporates:
         *  RelationalOperator: '<S70>/LowerRelop1'
         *  RelationalOperator: '<S70>/UpperRelop'
         *  Switch: '<S70>/Switch'
         */
        if (rtb_Merge > rtDW->Vq_max_M1) {
 8001b24:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
        rtb_Merge = (int16_T)(rtb_Switch2_l * rtb_Merge_f_idx_1);
 8001b28:	b23f      	sxth	r7, r7
        if (rtb_Merge > rtDW->Vq_max_M1) {
 8001b2a:	42bb      	cmp	r3, r7
 8001b2c:	f280 80ea 	bge.w	8001d04 <BLDC_controller_step+0x968>
          /* SignalConversion: '<S55>/Signal Conversion2' */
          rtDW->Merge = rtDW->Vq_max_M1;
 8001b30:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
     *  Interpolation_n-D: '<S47>/r_cos_M1'
     *  Interpolation_n-D: '<S47>/r_sin_M1'
     *  Product: '<S44>/Divide1'
     *  Product: '<S44>/Divide4'
     */
    rtb_Gain3 = (int16_T)((rtDW->Switch1 * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001b34:	4bce      	ldr	r3, [pc, #824]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001b36:	f509 7235 	add.w	r2, r9, #724	; 0x2d4
 8001b3a:	f9b4 8078 	ldrsh.w	r8, [r4, #120]	; 0x78
 8001b3e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
                          14) - (int16_T)((rtDW->Merge *
      rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
 8001b42:	eb03 0949 	add.w	r9, r3, r9, lsl #1
    rtb_Gain3 = (int16_T)((rtDW->Switch1 * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001b46:	fb02 f308 	mul.w	r3, r2, r8
      rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
 8001b4a:	f9b9 043e 	ldrsh.w	r0, [r9, #1086]	; 0x43e
                          14) - (int16_T)((rtDW->Merge *
 8001b4e:	f9b4 7076 	ldrsh.w	r7, [r4, #118]	; 0x76
    rtb_Gain3 = (int16_T)((rtDW->Switch1 * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001b52:	f343 318f 	sbfx	r1, r3, #14, #16
                          14) - (int16_T)((rtDW->Merge *
 8001b56:	fb00 f307 	mul.w	r3, r0, r7
 8001b5a:	f8df e318 	ldr.w	lr, [pc, #792]	; 8001e74 <BLDC_controller_step+0xad8>
 8001b5e:	f343 338f 	sbfx	r3, r3, #14, #16
    rtb_Gain3 = (int16_T)((rtDW->Switch1 * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4573      	cmp	r3, lr
 8001b66:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8001b6a:	bfb8      	it	lt
 8001b6c:	4673      	movlt	r3, lr
     *  Interpolation_n-D: '<S47>/r_cos_M1'
     *  Interpolation_n-D: '<S47>/r_sin_M1'
     *  Product: '<S44>/Divide2'
     *  Product: '<S44>/Divide3'
     */
    rtb_DataTypeConversion = (int16_T)((rtDW->Switch1 *
 8001b6e:	fb00 f008 	mul.w	r0, r0, r8
      rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14) + (int16_T)((rtDW->Merge *
 8001b72:	437a      	muls	r2, r7
    rtb_DataTypeConversion = (int16_T)((rtDW->Switch1 *
 8001b74:	f340 308f 	sbfx	r0, r0, #14, #16
      rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14) + (int16_T)((rtDW->Merge *
 8001b78:	f342 328f 	sbfx	r2, r2, #14, #16
    rtb_DataTypeConversion = (int16_T)((rtDW->Switch1 *
 8001b7c:	4410      	add	r0, r2
 8001b7e:	4563      	cmp	r3, ip
 8001b80:	bfa8      	it	ge
 8001b82:	4663      	movge	r3, ip
 8001b84:	4570      	cmp	r0, lr
 8001b86:	bfb8      	it	lt
 8001b88:	4670      	movlt	r0, lr
 8001b8a:	4560      	cmp	r0, ip
    }

    /* Gain: '<S43>/Gain1' incorporates:
     *  Sum: '<S44>/Sum1'
     */
    rtb_DataTypeConversion *= 14189;
 8001b8c:	f243 726d 	movw	r2, #14189	; 0x376d
 8001b90:	bfa8      	it	ge
 8001b92:	4660      	movge	r0, ip
    /* Sum: '<S43>/Sum6' incorporates:
     *  Gain: '<S43>/Gain1'
     *  Gain: '<S43>/Gain3'
     *  Sum: '<S44>/Sum6'
     */
    rtb_DataTypeConversion = (((rtb_DataTypeConversion < 0 ? 16383 : 0) +
 8001b94:	4350      	muls	r0, r2
 8001b96:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001b9a:	bf58      	it	pl
 8001b9c:	2200      	movpl	r2, #0
      rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 8001b9e:	b219      	sxth	r1, r3
    rtb_DataTypeConversion = (((rtb_DataTypeConversion < 0 ? 16383 : 0) +
 8001ba0:	4410      	add	r0, r2
      rtb_DataTypeConversion) >> 14) - ((int16_T)(((int16_T)rtb_Gain3 < 0) +
 8001ba2:	eb03 72d1 	add.w	r2, r3, r1, lsr #31
      (int16_T)rtb_Gain3) >> 1);
 8001ba6:	f342 024e 	sbfx	r2, r2, #1, #15
    rtb_DataTypeConversion = (((rtb_DataTypeConversion < 0 ? 16383 : 0) +
 8001baa:	ebc2 32a0 	rsb	r2, r2, r0, asr #14
 8001bae:	4572      	cmp	r2, lr
 8001bb0:	bfb8      	it	lt
 8001bb2:	4672      	movlt	r2, lr
 8001bb4:	4562      	cmp	r2, ip
 8001bb6:	bfa8      	it	ge
 8001bb8:	4662      	movge	r2, ip

    /* Sum: '<S43>/Sum2' incorporates:
     *  Sum: '<S43>/Sum6'
     *  Sum: '<S44>/Sum6'
     */
    rtb_Switch1 = -(int16_T)rtb_Gain3 - (int16_T)rtb_DataTypeConversion;
 8001bba:	4258      	negs	r0, r3
 8001bbc:	1a80      	subs	r0, r0, r2
 8001bbe:	4570      	cmp	r0, lr
 8001bc0:	bfb8      	it	lt
 8001bc2:	4670      	movlt	r0, lr
 8001bc4:	4560      	cmp	r0, ip
 8001bc6:	bfa8      	it	ge
 8001bc8:	4660      	movge	r0, ip
 8001bca:	fa0f fa82 	sxth.w	sl, r2
 8001bce:	4551      	cmp	r1, sl
 8001bd0:	900a      	str	r0, [sp, #40]	; 0x28
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	bfa8      	it	ge
 8001bd6:	4650      	movge	r0, sl
 8001bd8:	4551      	cmp	r1, sl
 8001bda:	bfb8      	it	lt
 8001bdc:	4651      	movlt	r1, sl
    rtb_Switch2_l = (int16_T)rtb_Gain3;
    if (!((int16_T)rtb_Gain3 < (int16_T)rtb_DataTypeConversion)) {
      rtb_Switch2_l = (int16_T)rtb_DataTypeConversion;
    }

    if (!(rtb_Switch2_l < (int16_T)rtb_Switch1)) {
 8001bde:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
    }

    /* Gain: '<S43>/Gain4' incorporates:
     *  Sum: '<S43>/Add1'
     */
    rtDW->Gain4[0] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001be2:	f644 1ae7 	movw	sl, #18919	; 0x49e7
    rtb_Sum1 = rtb_Switch2_l + rtb_Merge;
 8001be6:	4549      	cmp	r1, r9
 8001be8:	bfb8      	it	lt
 8001bea:	4649      	movlt	r1, r9
 8001bec:	4548      	cmp	r0, r9
 8001bee:	bfd4      	ite	le
 8001bf0:	1809      	addle	r1, r1, r0
 8001bf2:	4449      	addgt	r1, r9
 8001bf4:	4571      	cmp	r1, lr
 8001bf6:	bfb8      	it	lt
 8001bf8:	4671      	movlt	r1, lr
    rtb_DataTypeConversion2 = (int16_T)(rtb_Sum1 >> 1);
 8001bfa:	4561      	cmp	r1, ip
 8001bfc:	bfa8      	it	ge
 8001bfe:	4661      	movge	r1, ip
 8001c00:	1049      	asrs	r1, r1, #1
    rtb_Gain3 = (int16_T)rtb_Gain3 - rtb_DataTypeConversion2;
 8001c02:	1a5b      	subs	r3, r3, r1
 8001c04:	4573      	cmp	r3, lr
 8001c06:	bfb8      	it	lt
 8001c08:	4673      	movlt	r3, lr
    rtDW->Gain4[0] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c0a:	4563      	cmp	r3, ip
 8001c0c:	bfa8      	it	ge
 8001c0e:	4663      	movge	r3, ip

    /* Sum: '<S43>/Add1' incorporates:
     *  Sum: '<S43>/Sum6'
     */
    rtb_Gain3 = (int16_T)rtb_DataTypeConversion - rtb_DataTypeConversion2;
 8001c10:	1a52      	subs	r2, r2, r1
 8001c12:	4572      	cmp	r2, lr
 8001c14:	bfb8      	it	lt
 8001c16:	4672      	movlt	r2, lr
    rtDW->Gain4[0] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c18:	fb0a f303 	mul.w	r3, sl, r3
 8001c1c:	139b      	asrs	r3, r3, #14
 8001c1e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);

    /* Sum: '<S43>/Add1' incorporates:
     *  Sum: '<S43>/Sum2'
     */
    rtb_Gain3 = (int16_T)rtb_Switch1 - rtb_DataTypeConversion2;
 8001c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c24:	4562      	cmp	r2, ip
    rtb_Gain3 = (int16_T)rtb_Switch1 - rtb_DataTypeConversion2;
 8001c26:	eba3 0001 	sub.w	r0, r3, r1
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c2a:	bfa8      	it	ge
 8001c2c:	4662      	movge	r2, ip
 8001c2e:	4570      	cmp	r0, lr
 8001c30:	bfb8      	it	lt
 8001c32:	4670      	movlt	r0, lr
    }

    /* Gain: '<S43>/Gain4' incorporates:
     *  Sum: '<S43>/Add1'
     */
    rtDW->Gain4[2] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c34:	4560      	cmp	r0, ip
 8001c36:	bfa8      	it	ge
 8001c38:	4660      	movge	r0, ip
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c3a:	fb0a f202 	mul.w	r2, sl, r2
    rtDW->Gain4[2] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c3e:	fb0a f000 	mul.w	r0, sl, r0
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c42:	1392      	asrs	r2, r2, #14
    rtDW->Gain4[2] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c44:	1380      	asrs	r0, r0, #14
    rtDW->Gain4[1] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c46:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    rtDW->Gain4[2] = (int16_T)((18919 * rtb_Gain3) >> 14);
 8001c4a:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54

    /* Update for UnitDelay: '<S6>/UnitDelay4' */
    rtDW->UnitDelay4_DSTATE_h = rtDW->Switch1;
 8001c4e:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
  /* Switch: '<S7>/Switch2' incorporates:
   *  Constant: '<S1>/z_ctrlTypSel1'
   *  Constant: '<S7>/CTRL_COMM1'
   *  RelationalOperator: '<S7>/Relational Operator6'
   */
  if (rtP->z_ctrlTypSel == 2) {
 8001c52:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80e9 	bne.w	8001e2e <BLDC_controller_step+0xa92>
   *  Selector: '<S10>/Selector'
   *
   * About '<S84>/z_commutMap_M1':
   *  2-dimensional Direct Look-Up returning a Column
   */
  if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 2)) {
 8001c5c:	9b07      	ldr	r3, [sp, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80ea 	beq.w	8001e38 <BLDC_controller_step+0xa9c>
    /* Outputs for IfAction SubSystem: '<S7>/FOC_Method' incorporates:
     *  ActionPort: '<S85>/Action Port'
     */
    rtb_DataTypeConversion2 = rtDW->Gain4[0];
 8001c64:	f9b4 1050 	ldrsh.w	r1, [r4, #80]	; 0x50
    rtb_Merge_f_idx_1 = rtDW->Gain4[1];
 8001c68:	f9b4 2052 	ldrsh.w	r2, [r4, #82]	; 0x52
    rtb_Saturation1 = rtDW->Gain4[2];
 8001c6c:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
  /* End of If: '<S7>/If' */

  /* Outport: '<Root>/DC_phaA' incorporates:
   *  DataTypeConversion: '<S7>/Data Type Conversion6'
   */
  rtY->DC_phaA = (int16_T)(rtb_DataTypeConversion2 >> 4);
 8001c70:	9804      	ldr	r0, [sp, #16]
 8001c72:	1109      	asrs	r1, r1, #4

  /* Outport: '<Root>/DC_phaB' incorporates:
   *  DataTypeConversion: '<S7>/Data Type Conversion6'
   */
  rtY->DC_phaB = (int16_T)(rtb_Merge_f_idx_1 >> 4);
 8001c74:	1112      	asrs	r2, r2, #4
  rtY->DC_phaA = (int16_T)(rtb_DataTypeConversion2 >> 4);
 8001c76:	8001      	strh	r1, [r0, #0]
  rtY->DC_phaB = (int16_T)(rtb_Merge_f_idx_1 >> 4);
 8001c78:	8042      	strh	r2, [r0, #2]

  /* Update for UnitDelay: '<S9>/UnitDelay3' incorporates:
   *  Inport: '<Root>/b_hallA '
   */
  rtDW->UnitDelay3_DSTATE_fy = rtU->b_hallA;
 8001c7a:	7932      	ldrb	r2, [r6, #4]
  rtDW->UnitDelay6_DSTATE = rtb_RelationalOperator9;

  /* Outport: '<Root>/DC_phaC' incorporates:
   *  DataTypeConversion: '<S7>/Data Type Conversion6'
   */
  rtY->DC_phaC = (int16_T)(rtb_Saturation1 >> 4);
 8001c7c:	111b      	asrs	r3, r3, #4
  rtDW->UnitDelay3_DSTATE_fy = rtU->b_hallA;
 8001c7e:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
  rtDW->UnitDelay1_DSTATE = rtU->b_hallB;
 8001c82:	7972      	ldrb	r2, [r6, #5]
 8001c84:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
  rtDW->UnitDelay2_DSTATE_f = rtU->b_hallC;
 8001c88:	79b2      	ldrb	r2, [r6, #6]
  rtDW->UnitDelay4_DSTATE_e = rtb_Abs5;
 8001c8a:	f8a4 b086 	strh.w	fp, [r4, #134]	; 0x86
  rtDW->UnitDelay2_DSTATE_f = rtU->b_hallC;
 8001c8e:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
  rtDW->UnitDelay3_DSTATE = rtb_Switch1_l;
 8001c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
  rtDW->UnitDelay4_DSTATE_eu = rtb_Merge;
 8001c94:	f8a4 7088 	strh.w	r7, [r4, #136]	; 0x88
  rtDW->UnitDelay3_DSTATE = rtb_Switch1_l;
 8001c98:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
  rtDW->UnitDelay2_DSTATE_g = rtDW->UnitDelay6_DSTATE;
 8001c9c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8001ca0:	f884 209b 	strb.w	r2, [r4, #155]	; 0x9b
  rtDW->UnitDelay5_DSTATE_l = rtb_RelationalOperator4_d;
 8001ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ca6:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
  rtDW->UnitDelay6_DSTATE = rtb_RelationalOperator9;
 8001caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001cac:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
  rtY->DC_phaC = (int16_T)(rtb_Saturation1 >> 4);
 8001cb0:	8083      	strh	r3, [r0, #4]

  /* Outport: '<Root>/n_mot' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion1'
   */
  rtY->n_mot = (int16_T)(rtb_Switch2_k >> 4);
 8001cb2:	9b05      	ldr	r3, [sp, #20]
 8001cb4:	111b      	asrs	r3, r3, #4
 8001cb6:	8103      	strh	r3, [r0, #8]

  /* Outport: '<Root>/a_elecAngle' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion7'
   */
  rtY->a_elecAngle = (int16_T)(rtb_Switch2_fl >> 6);
 8001cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cba:	119b      	asrs	r3, r3, #6
 8001cbc:	8143      	strh	r3, [r0, #10]

  /* Outport: '<Root>/r_devSignal1' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion4'
   */
  rtY->r_devSignal1 = (int16_T)(rtDW->DataTypeConversion[0] >> 4);
 8001cbe:	f9b4 3056 	ldrsh.w	r3, [r4, #86]	; 0x56
 8001cc2:	111b      	asrs	r3, r3, #4
 8001cc4:	8183      	strh	r3, [r0, #12]

  /* Outport: '<Root>/r_devSignal2' incorporates:
   *  DataTypeConversion: '<S1>/Data Type Conversion5'
   */
  rtY->r_devSignal2 = (int16_T)(rtDW->DataTypeConversion[1] >> 4);
 8001cc6:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8001cca:	111b      	asrs	r3, r3, #4
 8001ccc:	81c3      	strh	r3, [r0, #14]

  /* End of Outputs for SubSystem: '<Root>/BLDC_controller' */
}
 8001cce:	b013      	add	sp, #76	; 0x4c
 8001cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        I_backCalc_fixdt((int16_T)(rtP->n_max - rtb_Abs5), rtP->cf_nKiLimProt,
 8001cd4:	f104 0c0c 	add.w	ip, r4, #12
 8001cd8:	f8b5 00d8 	ldrh.w	r0, [r5, #216]	; 0xd8
 8001cdc:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8001ce0:	f8b5 10f4 	ldrh.w	r1, [r5, #244]	; 0xf4
 8001ce4:	f8cd c008 	str.w	ip, [sp, #8]
 8001ce8:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8001cec:	f8cd c004 	str.w	ip, [sp, #4]
 8001cf0:	f04f 0c00 	mov.w	ip, #0
 8001cf4:	eba0 000b 	sub.w	r0, r0, fp
 8001cf8:	f8cd c000 	str.w	ip, [sp]
 8001cfc:	e18a      	b.n	8002014 <BLDC_controller_step+0xc78>
          rtb_Merge_f_idx_1 = -1;
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e70e      	b.n	8001b22 <BLDC_controller_step+0x786>
        } else if (rtb_Merge < rtDW->Gain5) {
 8001d04:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
          rtDW->Merge = rtDW->Gain5;
 8001d08:	429f      	cmp	r7, r3
 8001d0a:	bfb8      	it	lt
 8001d0c:	461f      	movlt	r7, r3
 8001d0e:	f8a4 7076 	strh.w	r7, [r4, #118]	; 0x76
 8001d12:	e70f      	b.n	8001b34 <BLDC_controller_step+0x798>
        rtb_Gain3 = rtDW->Merge1 - rtb_Switch2_k;
 8001d14:	9b05      	ldr	r3, [sp, #20]
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_nKp, rtP->cf_nKi,
 8001d16:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8001d1a:	f8b5 10e8 	ldrh.w	r1, [r5, #232]	; 0xe8
        rtb_Gain3 = rtDW->Merge1 - rtb_Switch2_k;
 8001d1e:	1ad0      	subs	r0, r2, r3
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_nKp, rtP->cf_nKi,
 8001d20:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8001d24:	f8b5 20f2 	ldrh.w	r2, [r5, #242]	; 0xf2
 8001d28:	9703      	str	r7, [sp, #12]
 8001d2a:	f104 0776 	add.w	r7, r4, #118	; 0x76
 8001d2e:	9702      	str	r7, [sp, #8]
 8001d30:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001d32:	f300 000f 	ssat	r0, #16, r0
 8001d36:	9701      	str	r7, [sp, #4]
 8001d38:	f9b4 7066 	ldrsh.w	r7, [r4, #102]	; 0x66
 8001d3c:	9700      	str	r7, [sp, #0]
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_iqKp, rtP->cf_iqKi,
 8001d3e:	b200      	sxth	r0, r0
 8001d40:	f7ff fa3e 	bl	80011c0 <PI_clamp_fixdt>
        break;
 8001d44:	e6f6      	b.n	8001b34 <BLDC_controller_step+0x798>
        rtb_Merge = (int16_T)-rtDW->Switch2;
 8001d46:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
        if (rtDW->Merge1 > rtDW->Divide1_a) {
 8001d4a:	f9b4 006a 	ldrsh.w	r0, [r4, #106]	; 0x6a
        rtb_Merge = (int16_T)-rtDW->Switch2;
 8001d4e:	425f      	negs	r7, r3
        if (rtDW->Merge1 > rtDW->Divide1_a) {
 8001d50:	4290      	cmp	r0, r2
        rtb_Merge = (int16_T)-rtDW->Switch2;
 8001d52:	b23f      	sxth	r7, r7
        if (rtDW->Merge1 > rtDW->Divide1_a) {
 8001d54:	db04      	blt.n	8001d60 <BLDC_controller_step+0x9c4>
 8001d56:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 8001d5a:	4290      	cmp	r0, r2
 8001d5c:	bfb8      	it	lt
 8001d5e:	4610      	movlt	r0, r2
        rtb_Gain3 = rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0];
 8001d60:	f9b4 2056 	ldrsh.w	r2, [r4, #86]	; 0x56
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_iqKp, rtP->cf_iqKi,
 8001d64:	f104 0e2c 	add.w	lr, r4, #44	; 0x2c
 8001d68:	f9b4 c064 	ldrsh.w	ip, [r4, #100]	; 0x64
 8001d6c:	f8b5 10e6 	ldrh.w	r1, [r5, #230]	; 0xe6
        rtb_Gain3 = rtb_Merge_f_idx_1 - rtDW->DataTypeConversion[0];
 8001d70:	1a80      	subs	r0, r0, r2
        PI_clamp_fixdt((int16_T)rtb_Gain3, rtP->cf_iqKp, rtP->cf_iqKi,
 8001d72:	f8b5 20ee 	ldrh.w	r2, [r5, #238]	; 0xee
 8001d76:	f8cd e00c 	str.w	lr, [sp, #12]
 8001d7a:	f104 0e76 	add.w	lr, r4, #118	; 0x76
 8001d7e:	f8cd e008 	str.w	lr, [sp, #8]
 8001d82:	f04f 0e00 	mov.w	lr, #0
 8001d86:	f8cd e004 	str.w	lr, [sp, #4]
 8001d8a:	f9b4 e066 	ldrsh.w	lr, [r4, #102]	; 0x66
 8001d8e:	f300 000f 	ssat	r0, #16, r0
 8001d92:	45be      	cmp	lr, r7
 8001d94:	bfac      	ite	ge
 8001d96:	f8cd e000 	strge.w	lr, [sp]
 8001d9a:	9700      	strlt	r7, [sp, #0]
 8001d9c:	4563      	cmp	r3, ip
 8001d9e:	bfa8      	it	ge
 8001da0:	4663      	movge	r3, ip
 8001da2:	e7cc      	b.n	8001d3e <BLDC_controller_step+0x9a2>
        rtDW->Merge = rtDW->Merge1;
 8001da4:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
        break;
 8001da8:	e6c4      	b.n	8001b34 <BLDC_controller_step+0x798>
  } else if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 1)) {
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d144      	bne.n	8001e38 <BLDC_controller_step+0xa9c>
    if (rtP->b_fieldWeakEna) {
 8001dae:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
 8001db2:	b383      	cbz	r3, 8001e16 <BLDC_controller_step+0xa7a>
      rtb_Saturation1 = (int16_T)((int16_T)((int16_T)(rtDW->Divide3 *
 8001db4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
        rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
 8001db8:	f994 208c 	ldrsb.w	r2, [r4, #140]	; 0x8c
      rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
 8001dbc:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
      rtb_Saturation1 = (int16_T)((int16_T)((int16_T)(rtDW->Divide3 *
 8001dc0:	435a      	muls	r2, r3
        rtDW->Switch2_e) << 2) + rtb_Switch2_fl);
 8001dc2:	9b06      	ldr	r3, [sp, #24]
 8001dc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001dc8:	b292      	uxth	r2, r2
      rtb_Saturation1 -= (int16_T)(23040 * (int16_T)div_nde_s32_floor
 8001dca:	b210      	sxth	r0, r2
 8001dcc:	f7ff f9dc 	bl	8001188 <div_nde_s32_floor>
 8001dd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001dd4:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8001dd8:	eba2 2343 	sub.w	r3, r2, r3, lsl #9
 8001ddc:	b21b      	sxth	r3, r3
  if (u <= bp0) {
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dd1b      	ble.n	8001e1a <BLDC_controller_step+0xa7e>
    fbpIndex = (uint16_T)((uint32_T)(uint16_T)(u - bp0) / bpSpace);
 8001de2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
    if (fbpIndex < maxIndex) {
 8001de6:	2bb3      	cmp	r3, #179	; 0xb3
 8001de8:	d819      	bhi.n	8001e1e <BLDC_controller_step+0xa82>
      bpIndex = (uint8_T)fbpIndex;
 8001dea:	b2db      	uxtb	r3, r3
      rtConstP.r_sin3PhaA_M1_Table[rtb_Sum]) >> 14);
 8001dec:	4820      	ldr	r0, [pc, #128]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001dee:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
      rtConstP.r_sin3PhaB_M1_Table[rtb_Sum]) >> 14);
 8001df2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
      rtConstP.r_sin3PhaC_M1_Table[rtb_Sum]) >> 14);
 8001df6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
      rtConstP.r_sin3PhaB_M1_Table[rtb_Sum]) >> 14);
 8001dfa:	f9b2 216a 	ldrsh.w	r2, [r2, #362]	; 0x16a
      rtConstP.r_sin3PhaC_M1_Table[rtb_Sum]) >> 14);
 8001dfe:	f9b3 32d4 	ldrsh.w	r3, [r3, #724]	; 0x2d4
    rtb_DataTypeConversion2 = (int16_T)((rtDW->Merge1 *
 8001e02:	4379      	muls	r1, r7
    rtb_Merge_f_idx_1 = (int16_T)((rtDW->Merge1 *
 8001e04:	437a      	muls	r2, r7
    rtb_Saturation1 = (int16_T)((rtDW->Merge1 *
 8001e06:	437b      	muls	r3, r7
    rtb_DataTypeConversion2 = (int16_T)((rtDW->Merge1 *
 8001e08:	f341 318f 	sbfx	r1, r1, #14, #16
    rtb_Merge_f_idx_1 = (int16_T)((rtDW->Merge1 *
 8001e0c:	f342 328f 	sbfx	r2, r2, #14, #16
    rtb_Saturation1 = (int16_T)((rtDW->Merge1 *
 8001e10:	f343 338f 	sbfx	r3, r3, #14, #16
 8001e14:	e72c      	b.n	8001c70 <BLDC_controller_step+0x8d4>
  rtb_Switch2_fl = (int16_T)((15 * rtb_Switch2_fl) >> 4);
 8001e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e18:	e7e1      	b.n	8001dde <BLDC_controller_step+0xa42>
    bpIndex = 0U;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e7e6      	b.n	8001dec <BLDC_controller_step+0xa50>
      bpIndex = (uint8_T)maxIndex;
 8001e1e:	23b4      	movs	r3, #180	; 0xb4
 8001e20:	e7e4      	b.n	8001dec <BLDC_controller_step+0xa50>
  if (UnitDelay3 == 0) {
 8001e22:	f1be 0f02 	cmp.w	lr, #2
 8001e26:	f43f ad93 	beq.w	8001950 <BLDC_controller_step+0x5b4>
  if (rtP->z_ctrlTypSel == 2) {
 8001e2a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
  } else if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 1)) {
 8001e2e:	9a07      	ldr	r2, [sp, #28]
    rtb_Merge = rtDW->Merge1;
 8001e30:	f9b4 705c 	ldrsh.w	r7, [r4, #92]	; 0x5c
  } else if (rtb_LogicalOperator && (rtP->z_ctrlTypSel == 1)) {
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d1b8      	bne.n	8001daa <BLDC_controller_step+0xa0e>
    if (rtConstP.vec_hallToPos_Value[rtb_Sum] > 5) {
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001e3a:	9b08      	ldr	r3, [sp, #32]
    rtb_DataTypeConversion2 = (int16_T)(rtb_Merge *
 8001e3c:	b2bd      	uxth	r5, r7
    if (rtConstP.vec_hallToPos_Value[rtb_Sum] > 5) {
 8001e3e:	4403      	add	r3, r0
    rtb_DataTypeConversion = rtb_Sum2_h * 3;
 8001e40:	f993 3788 	ldrsb.w	r3, [r3, #1928]	; 0x788
 8001e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	bfa8      	it	ge
 8001e4c:	2305      	movge	r3, #5
 8001e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      rtConstP.z_commutMap_M1_table[rtb_DataTypeConversion]);
 8001e52:	4418      	add	r0, r3
 8001e54:	f990 1776 	ldrsb.w	r1, [r0, #1910]	; 0x776
    rtb_Merge_f_idx_1 = (int16_T)(rtConstP.z_commutMap_M1_table[1 +
 8001e58:	f990 2777 	ldrsb.w	r2, [r0, #1911]	; 0x777
    rtb_Saturation1 = (int16_T)(rtConstP.z_commutMap_M1_table[2 +
 8001e5c:	f990 3778 	ldrsb.w	r3, [r0, #1912]	; 0x778
    rtb_DataTypeConversion2 = (int16_T)(rtb_Merge *
 8001e60:	4369      	muls	r1, r5
      rtb_DataTypeConversion] * rtb_Merge);
 8001e62:	436a      	muls	r2, r5
      rtb_DataTypeConversion] * rtb_Merge);
 8001e64:	436b      	muls	r3, r5
    rtb_DataTypeConversion2 = (int16_T)(rtb_Merge *
 8001e66:	b209      	sxth	r1, r1
    rtb_Merge_f_idx_1 = (int16_T)(rtConstP.z_commutMap_M1_table[1 +
 8001e68:	b212      	sxth	r2, r2
    rtb_Saturation1 = (int16_T)(rtConstP.z_commutMap_M1_table[2 +
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	e700      	b.n	8001c70 <BLDC_controller_step+0x8d4>
 8001e6e:	bf00      	nop
 8001e70:	0800c1d0 	.word	0x0800c1d0
 8001e74:	ffff8000 	.word	0xffff8000
    if (UnitDelay3 == 0) {
 8001e78:	b3d0      	cbz	r0, 8001ef0 <BLDC_controller_step+0xb54>
  localDW->UnitDelay1_DSTATE[0] = 0;
 8001e7a:	2100      	movs	r1, #0
  localDW->UnitDelay1_DSTATE[1] = 0;
 8001e7c:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
        rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 8001e80:	4866      	ldr	r0, [pc, #408]	; (800201c <BLDC_controller_step+0xc80>)
 8001e82:	f509 7135 	add.w	r1, r9, #724	; 0x2d4
 8001e86:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
        rtConstP.r_sin_M1_Table[rtb_Sum_l]) >> 14);
 8001e8a:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8001e8e:	f9b0 c43e 	ldrsh.w	ip, [r0, #1086]	; 0x43e
      rtb_Gain3 = (int16_T)((rtb_DataTypeConversion2 *
 8001e92:	fb01 f003 	mul.w	r0, r1, r3
 8001e96:	f340 3e8f 	sbfx	lr, r0, #14, #16
        rtConstP.r_cos_M1_Table[rtb_Sum_l]) >> 14) - (int16_T)((rtb_Merge *
 8001e9a:	fb0c f002 	mul.w	r0, ip, r2
 8001e9e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002020 <BLDC_controller_step+0xc84>
 8001ea2:	f340 308f 	sbfx	r0, r0, #14, #16
      rtb_Gain3 = (int16_T)((rtb_DataTypeConversion2 *
 8001ea6:	ebae 0000 	sub.w	r0, lr, r0
 8001eaa:	4540      	cmp	r0, r8
      rtb_TmpSignalConversionAtLow_Pa[0] = (int16_T)rtb_Gain3;
 8001eac:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8001eb0:	bfb8      	it	lt
 8001eb2:	4640      	movlt	r0, r8
      rtb_Gain3 = (int16_T)((rtb_Merge * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001eb4:	434a      	muls	r2, r1
                            14) + (int16_T)((rtb_DataTypeConversion2 *
 8001eb6:	fb0c f303 	mul.w	r3, ip, r3
      rtb_Gain3 = (int16_T)((rtb_Merge * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001eba:	f342 328f 	sbfx	r2, r2, #14, #16
                            14) + (int16_T)((rtb_DataTypeConversion2 *
 8001ebe:	f343 338f 	sbfx	r3, r3, #14, #16
      rtb_Gain3 = (int16_T)((rtb_Merge * rtConstP.r_cos_M1_Table[rtb_Sum_l]) >>
 8001ec2:	4413      	add	r3, r2
      rtb_TmpSignalConversionAtLow_Pa[0] = (int16_T)rtb_Gain3;
 8001ec4:	4570      	cmp	r0, lr
 8001ec6:	bfa8      	it	ge
 8001ec8:	4670      	movge	r0, lr
 8001eca:	4543      	cmp	r3, r8
 8001ecc:	bfb8      	it	lt
 8001ece:	4643      	movlt	r3, r8
      rtb_TmpSignalConversionAtLow_Pa[1] = (int16_T)rtb_Gain3;
 8001ed0:	459e      	cmp	lr, r3
 8001ed2:	bfa8      	it	ge
 8001ed4:	469e      	movge	lr, r3
      rtb_TmpSignalConversionAtLow_Pa[0] = (int16_T)rtb_Gain3;
 8001ed6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
      Low_Pass_Filter(rtb_TmpSignalConversionAtLow_Pa, rtP->cf_currFilt,
 8001eda:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001ede:	f104 0256 	add.w	r2, r4, #86	; 0x56
 8001ee2:	f8b5 10ea 	ldrh.w	r1, [r5, #234]	; 0xea
 8001ee6:	a80f      	add	r0, sp, #60	; 0x3c
      rtb_TmpSignalConversionAtLow_Pa[1] = (int16_T)rtb_Gain3;
 8001ee8:	f8ad e03e 	strh.w	lr, [sp, #62]	; 0x3e
      Low_Pass_Filter(rtb_TmpSignalConversionAtLow_Pa, rtP->cf_currFilt,
 8001eec:	f7ff f9d0 	bl	8001290 <Low_Pass_Filter>
    if (rtDW->UnitDelay5_DSTATE_l) {
 8001ef0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f43f adc5 	beq.w	8001a84 <BLDC_controller_step+0x6e8>
      rtDW->Vd_max1 = rtP->Vd_max;
 8001efa:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
      rtDW->Vq_max_M1 = rtP->Vq_max_M1[plook_u8s16_evencka(rtb_Merge_f_idx_1,
 8001efe:	f9b5 106e 	ldrsh.w	r1, [r5, #110]	; 0x6e
      rtDW->Vd_max1 = rtP->Vd_max;
 8001f02:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
      rtDW->Gain3 = (int16_T)-rtDW->Vd_max1;
 8001f06:	425b      	negs	r3, r3
 8001f08:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
      if (rtDW->UnitDelay4_DSTATE_h < 0) {
 8001f0c:	f9b4 308a 	ldrsh.w	r3, [r4, #138]	; 0x8a
        rtP->Vq_max_XA[0], (uint16_T)(rtP->Vq_max_XA[1] - rtP->Vq_max_XA[0]),
 8001f10:	f9b5 2070 	ldrsh.w	r2, [r5, #112]	; 0x70
      if (rtDW->UnitDelay4_DSTATE_h < 0) {
 8001f14:	2b00      	cmp	r3, #0
        rtb_Merge_f_idx_1 = (int16_T)-rtDW->UnitDelay4_DSTATE_h;
 8001f16:	bfbc      	itt	lt
 8001f18:	425b      	neglt	r3, r3
 8001f1a:	b21b      	sxthlt	r3, r3
  if (u <= bp0) {
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	f6bf ad95 	bge.w	8001a4c <BLDC_controller_step+0x6b0>
        rtP->Vq_max_XA[0], (uint16_T)(rtP->Vq_max_XA[1] - rtP->Vq_max_XA[0]),
 8001f22:	b289      	uxth	r1, r1
    fbpIndex = (uint16_T)((uint32_T)(uint16_T)(u - bp0) / bpSpace);
 8001f24:	1a5b      	subs	r3, r3, r1
      rtDW->Vq_max_M1 = rtP->Vq_max_M1[plook_u8s16_evencka(rtb_Merge_f_idx_1,
 8001f26:	1a52      	subs	r2, r2, r1
    fbpIndex = (uint16_T)((uint32_T)(uint16_T)(u - bp0) / bpSpace);
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	fbb3 f3f2 	udiv	r3, r3, r2
    if (fbpIndex < maxIndex) {
 8001f30:	2b2c      	cmp	r3, #44	; 0x2c
 8001f32:	f63f ad8d 	bhi.w	8001a50 <BLDC_controller_step+0x6b4>
      bpIndex = (uint8_T)fbpIndex;
 8001f36:	b2db      	uxtb	r3, r3
      rtDW->Vq_max_M1 = rtP->Vq_max_M1[plook_u8s16_evencka(rtb_Merge_f_idx_1,
 8001f38:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
      rtDW->i_max = rtP->i_max;
 8001f40:	f9b5 10cc 	ldrsh.w	r1, [r5, #204]	; 0xcc
      rtDW->Gain5 = (int16_T)-rtDW->Vq_max_M1;
 8001f44:	425a      	negs	r2, r3
 8001f46:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
      rtb_Gain3 = rtDW->Divide3 << 16;
 8001f4a:	f9b4 205e 	ldrsh.w	r2, [r4, #94]	; 0x5e
      rtDW->Vq_max_M1 = rtP->Vq_max_M1[plook_u8s16_evencka(rtb_Merge_f_idx_1,
 8001f4e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
      rtb_Gain3 = rtDW->Divide3 << 16;
 8001f52:	0412      	lsls	r2, r2, #16
        MAX_int32_T : rtb_Gain3 / rtDW->i_max;
 8001f54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
      rtDW->i_max = rtP->i_max;
 8001f58:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
        MAX_int32_T : rtb_Gain3 / rtDW->i_max;
 8001f5c:	d102      	bne.n	8001f64 <BLDC_controller_step+0xbc8>
      rtb_Gain3 = (rtb_Gain3 == MIN_int32_T) && (rtDW->i_max == -1) ?
 8001f5e:	1c48      	adds	r0, r1, #1
 8001f60:	f43f ad78 	beq.w	8001a54 <BLDC_controller_step+0x6b8>
        MAX_int32_T : rtb_Gain3 / rtDW->i_max;
 8001f64:	fb92 f2f1 	sdiv	r2, r2, r1
  if (u <= bp0) {
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	f77f ad76 	ble.w	8001a5a <BLDC_controller_step+0x6be>
        ((rtConstP.iq_maxSca_M1_Table[plook_u8u16_evencka((uint16_T)rtb_Gain3,
 8001f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f72:	4282      	cmp	r2, r0
 8001f74:	bfa8      	it	ge
 8001f76:	4602      	movge	r2, r0
 8001f78:	b292      	uxth	r2, r2
    fbpIndex = (uint16_T)((uint32_T)(uint16_T)((uint32_T)u - bp0) / bpSpace);
 8001f7a:	f240 501f 	movw	r0, #1311	; 0x51f
 8001f7e:	fbb2 f2f0 	udiv	r2, r2, r0
    if (fbpIndex < maxIndex) {
 8001f82:	2a31      	cmp	r2, #49	; 0x31
 8001f84:	d000      	beq.n	8001f88 <BLDC_controller_step+0xbec>
      bpIndex = (uint8_T)fbpIndex;
 8001f86:	b2d2      	uxtb	r2, r2
        ((rtConstP.iq_maxSca_M1_Table[plook_u8u16_evencka((uint16_T)rtb_Gain3,
 8001f88:	4824      	ldr	r0, [pc, #144]	; (800201c <BLDC_controller_step+0xc80>)
 8001f8a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001f8e:	f8b2 0712 	ldrh.w	r0, [r2, #1810]	; 0x712
           0U, 1311U, 49U)] * rtDW->i_max) >> 16);
 8001f92:	4341      	muls	r1, r0
 8001f94:	1409      	asrs	r1, r1, #16
      rtDW->Divide1_a = (int16_T)
 8001f96:	b208      	sxth	r0, r1
      rtDW->Gain1 = (int16_T)-rtDW->Divide1_a;
 8001f98:	fa1f fc81 	uxth.w	ip, r1
      switch (rtDW->z_ctrlMod) {
 8001f9c:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
      rtDW->Gain1 = (int16_T)-rtDW->Divide1_a;
 8001fa0:	f1cc 0200 	rsb	r2, ip, #0
 8001fa4:	b212      	sxth	r2, r2
      switch (rtDW->z_ctrlMod) {
 8001fa6:	2902      	cmp	r1, #2
      rtDW->Divide1_a = (int16_T)
 8001fa8:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
      rtDW->Gain1 = (int16_T)-rtDW->Divide1_a;
 8001fac:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
      switch (rtDW->z_ctrlMod) {
 8001fb0:	f43f ad55 	beq.w	8001a5e <BLDC_controller_step+0x6c2>
 8001fb4:	2903      	cmp	r1, #3
 8001fb6:	f43f ae8d 	beq.w	8001cd4 <BLDC_controller_step+0x938>
 8001fba:	2901      	cmp	r1, #1
 8001fbc:	f47f ad5d 	bne.w	8001a7a <BLDC_controller_step+0x6de>
        I_backCalc_fixdt((int16_T)(rtDW->Divide1_a - rtb_Merge_f_idx_1),
 8001fc0:	f04f 0800 	mov.w	r8, #0
        if (rtDW->DataTypeConversion[0] < 0) {
 8001fc4:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
        I_backCalc_fixdt((int16_T)(rtDW->Divide1_a - rtb_Merge_f_idx_1),
 8001fc8:	f104 031c 	add.w	r3, r4, #28
        if (rtDW->DataTypeConversion[0] < 0) {
 8001fcc:	2800      	cmp	r0, #0
          rtb_Merge_f_idx_1 = (int16_T)-rtDW->DataTypeConversion[0];
 8001fce:	bfbc      	itt	lt
 8001fd0:	4240      	neglt	r0, r0
 8001fd2:	b200      	sxthlt	r0, r0
        I_backCalc_fixdt((int16_T)(rtDW->Divide1_a - rtb_Merge_f_idx_1),
 8001fd4:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8001fd8:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 8001fdc:	ebac 0000 	sub.w	r0, ip, r0
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	b200      	sxth	r0, r0
 8001fea:	463b      	mov	r3, r7
 8001fec:	f8cd 8000 	str.w	r8, [sp]
 8001ff0:	f7ff f976 	bl	80012e0 <I_backCalc_fixdt>
        I_backCalc_fixdt((int16_T)(rtP->n_max - rtb_Abs5), rtP->cf_nKiLimProt,
 8001ff4:	f104 0314 	add.w	r3, r4, #20
 8001ff8:	f8b5 00d8 	ldrh.w	r0, [r5, #216]	; 0xd8
 8001ffc:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8002000:	f8b5 10f4 	ldrh.w	r1, [r5, #244]	; 0xf4
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	f104 0372 	add.w	r3, r4, #114	; 0x72
 800200a:	e9cd 8300 	strd	r8, r3, [sp]
 800200e:	463b      	mov	r3, r7
 8002010:	eba0 000b 	sub.w	r0, r0, fp
        I_backCalc_fixdt((int16_T)(rtP->n_max - rtb_Abs5), rtP->cf_nKiLimProt,
 8002014:	b200      	sxth	r0, r0
 8002016:	f7ff f963 	bl	80012e0 <I_backCalc_fixdt>
        break;
 800201a:	e52e      	b.n	8001a7a <BLDC_controller_step+0x6de>
 800201c:	0800c1d0 	.word	0x0800c1d0
 8002020:	ffff8000 	.word	0xffff8000

08002024 <BLDC_controller_initialize>:
  P *rtP = ((P *) rtM->defaultParam);
  DW *rtDW = ((DW *) rtM->dwork);

  /* Start for Atomic SubSystem: '<Root>/BLDC_controller' */
  /* Start for If: '<S1>/If4' */
  rtDW->If4_ActiveSubsystem = -1;
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
  DW *rtDW = ((DW *) rtM->dwork);
 8002028:	68c3      	ldr	r3, [r0, #12]
  P *rtP = ((P *) rtM->defaultParam);
 800202a:	6801      	ldr	r1, [r0, #0]
  rtDW->If4_ActiveSubsystem = -1;
 800202c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
  rtDW->If2_ActiveSubsystem = -1;

  /* End of Start for SubSystem: '<S1>/F03_Control_Mode_Manager' */

  /* Start for If: '<S1>/If1' */
  rtDW->If1_ActiveSubsystem = -1;
 8002030:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
  /* End of Start for SubSystem: '<S1>/F05_Field_Oriented_Control' */
  /* End of Start for SubSystem: '<Root>/BLDC_controller' */

  /* SystemInitialize for Atomic SubSystem: '<Root>/BLDC_controller' */
  /* InitializeConditions for UnitDelay: '<S12>/UnitDelay3' */
  rtDW->UnitDelay3_DSTATE = rtP->z_maxCntRst;
 8002034:	f9b1 2008 	ldrsh.w	r2, [r1, #8]

  /* InitializeConditions for UnitDelay: '<S8>/UnitDelay2' */
  rtDW->UnitDelay2_DSTATE_g = true;
 8002038:	2101      	movs	r1, #1
  rtDW->UnitDelay3_DSTATE = rtP->z_maxCntRst;
 800203a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c

  /* SystemInitialize for IfAction SubSystem: '<S12>/Raw_Motor_Speed_Estimation' */
  /* SystemInitialize for Outport: '<S15>/z_counter' */
  rtDW->z_counterRawPrev = rtP->z_maxCntRst;
 800203e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  localDW->UnitDelay_DSTATE = rtp_z_cntInit;
 8002042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  localDW->UnitDelay_DSTATE = rtp_z_cntInit;
 8002046:	2200      	movs	r2, #0
 8002048:	80da      	strh	r2, [r3, #6]
 800204a:	809a      	strh	r2, [r3, #4]
  localDW->UnitDelay_DSTATE_h = rtp_yInit;
 800204c:	621a      	str	r2, [r3, #32]
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	611a      	str	r2, [r3, #16]
  /* End of SystemInitialize for SubSystem: '<S72>/I_backCalc_fixdt' */

  /* End of SystemInitialize for SubSystem: '<S45>/Torque_Mode_Protection' */

  /* SystemInitialize for Outport: '<S45>/Vd_max' */
  rtDW->Vd_max1 = 14400;
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <BLDC_controller_initialize+0x48>)
  rtDW->UnitDelay2_DSTATE_g = true;
 8002054:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
  rtDW->UnitDelay_DSTATE_e = true;
 8002058:	f883 109e 	strb.w	r1, [r3, #158]	; 0x9e

  /* SystemInitialize for Outport: '<S45>/Vd_min' */
  rtDW->Gain3 = -14400;
 800205c:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60

  /* SystemInitialize for Outport: '<S45>/id_min' */
  rtDW->Gain4_c = -12000;

  /* SystemInitialize for Outport: '<S45>/iq_max' */
  rtDW->Divide1_a = 12000;
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <BLDC_controller_initialize+0x4c>)
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <BLDC_controller_initialize+0x50>)
 8002064:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
  rtDW->Gain1 = -12000;

  /* End of SystemInitialize for SubSystem: '<S6>/Motor_Limitations' */
  /* End of SystemInitialize for SubSystem: '<S1>/F05_Field_Oriented_Control' */
  /* End of SystemInitialize for SubSystem: '<Root>/BLDC_controller' */
}
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	c7c03840 	.word	0xc7c03840
 8002070:	2ee02ee0 	.word	0x2ee02ee0
 8002074:	d120d120 	.word	0xd120d120

08002078 <DMA1_Channel1_IRQHandler>:

extern port_str port;
//scan 8 channels with 2ADCs @ 20 clk cycles per sample
//meaning ~80 ADC clock cycles @ 8MHz until new DMA interrupt =~ 100KHz
//=640 cpu cycles
void DMA1_Channel1_IRQHandler() {
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  DMA1->IFCR = DMA_IFCR_CTCIF1;
 800207a:	2402      	movs	r4, #2
 800207c:	4b63      	ldr	r3, [pc, #396]	; (800220c <DMA1_Channel1_IRQHandler+0x194>)
  // HAL_GPIO_WritePin(LED_PORT, LED_PIN, 1);


  if(offsetcount < 1000) {  // calibrate ADC offsets
 800207e:	4e64      	ldr	r6, [pc, #400]	; (8002210 <DMA1_Channel1_IRQHandler+0x198>)
  DMA1->IFCR = DMA_IFCR_CTCIF1;
 8002080:	605c      	str	r4, [r3, #4]
  if(offsetcount < 1000) {  // calibrate ADC offsets
 8002082:	6831      	ldr	r1, [r6, #0]
 8002084:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800224c <DMA1_Channel1_IRQHandler+0x1d4>
 8002088:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8002250 <DMA1_Channel1_IRQHandler+0x1d8>
 800208c:	4d61      	ldr	r5, [pc, #388]	; (8002214 <DMA1_Channel1_IRQHandler+0x19c>)
 800208e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002092:	f8de 3000 	ldr.w	r3, [lr]
 8002096:	f8dc 2000 	ldr.w	r2, [ip]
 800209a:	6828      	ldr	r0, [r5, #0]
 800209c:	495e      	ldr	r1, [pc, #376]	; (8002218 <DMA1_Channel1_IRQHandler+0x1a0>)
 800209e:	da29      	bge.n	80020f4 <DMA1_Channel1_IRQHandler+0x7c>
    offsetcount++;
 80020a0:	6837      	ldr	r7, [r6, #0]
 80020a2:	3701      	adds	r7, #1
 80020a4:	6037      	str	r7, [r6, #0]
    offset_curr_a = (adc_buffer.curr_a + offset_curr_a) / 2;
 80020a6:	880e      	ldrh	r6, [r1, #0]
 80020a8:	4433      	add	r3, r6
 80020aa:	fb93 f3f4 	sdiv	r3, r3, r4
 80020ae:	f8ce 3000 	str.w	r3, [lr]
    offset_curr_b = (adc_buffer.curr_b + offset_curr_b) / 2;
 80020b2:	884b      	ldrh	r3, [r1, #2]
 80020b4:	441a      	add	r2, r3
    offset_curr_c = (adc_buffer.curr_c + offset_curr_c) / 2;
 80020b6:	888b      	ldrh	r3, [r1, #4]
    offset_curr_b = (adc_buffer.curr_b + offset_curr_b) / 2;
 80020b8:	fb92 f2f4 	sdiv	r2, r2, r4
    offset_curr_c = (adc_buffer.curr_c + offset_curr_c) / 2;
 80020bc:	4418      	add	r0, r3
 80020be:	fb90 f0f4 	sdiv	r0, r0, r4
    offset_curr_b = (adc_buffer.curr_b + offset_curr_b) / 2;
 80020c2:	f8cc 2000 	str.w	r2, [ip]
    offset_volt_a = (adc_buffer.volt_a + offset_volt_a) / 2;
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <DMA1_Channel1_IRQHandler+0x1a4>)
    offset_curr_c = (adc_buffer.curr_c + offset_curr_c) / 2;
 80020c8:	6028      	str	r0, [r5, #0]
    offset_volt_a = (adc_buffer.volt_a + offset_volt_a) / 2;
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	88c8      	ldrh	r0, [r1, #6]
 80020ce:	4403      	add	r3, r0
 80020d0:	fb93 f3f4 	sdiv	r3, r3, r4
 80020d4:	6013      	str	r3, [r2, #0]
    offset_volt_b = (adc_buffer.volt_b + offset_volt_b) / 2;
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <DMA1_Channel1_IRQHandler+0x1a8>)
 80020d8:	8908      	ldrh	r0, [r1, #8]
 80020da:	6813      	ldr	r3, [r2, #0]
    offset_volt_c = (adc_buffer.volt_c + offset_volt_c) / 2;
 80020dc:	8949      	ldrh	r1, [r1, #10]
    offset_volt_b = (adc_buffer.volt_b + offset_volt_b) / 2;
 80020de:	4403      	add	r3, r0
 80020e0:	fb93 f3f4 	sdiv	r3, r3, r4
 80020e4:	6013      	str	r3, [r2, #0]
    offset_volt_c = (adc_buffer.volt_c + offset_volt_c) / 2;
 80020e6:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <DMA1_Channel1_IRQHandler+0x1ac>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	440b      	add	r3, r1
 80020ec:	fb93 f4f4 	sdiv	r4, r3, r4
 80020f0:	6014      	str	r4, [r2, #0]
  htim1.Instance->CCR3 = CLAMP(wl + pwm_res / 2, 10, pwm_res-10);

  /* Indicate task complete */
  OverrunFlag = false;

}
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  analog.curr_a_cnt = (offset_curr_a - adc_buffer.curr_a);
 80020f4:	880c      	ldrh	r4, [r1, #0]
 80020f6:	4d4c      	ldr	r5, [pc, #304]	; (8002228 <DMA1_Channel1_IRQHandler+0x1b0>)
 80020f8:	1b1b      	subs	r3, r3, r4
  analog.curr_b_cnt = (offset_curr_b - adc_buffer.curr_b);
 80020fa:	884c      	ldrh	r4, [r1, #2]
  analog.curr_c_cnt = (offset_curr_c - adc_buffer.curr_c);
 80020fc:	8889      	ldrh	r1, [r1, #4]
  analog.curr_a_cnt = (offset_curr_a - adc_buffer.curr_a);
 80020fe:	b21b      	sxth	r3, r3
  analog.curr_c_cnt = (offset_curr_c - adc_buffer.curr_c);
 8002100:	1a40      	subs	r0, r0, r1
  analog.curr_a = analog.curr_a_cnt * PHASE_CURR_mA_CNT;
 8002102:	2132      	movs	r1, #50	; 0x32
  analog.curr_b_cnt = (offset_curr_b - adc_buffer.curr_b);
 8002104:	1b12      	subs	r2, r2, r4
  analog.curr_a = analog.curr_a_cnt * PHASE_CURR_mA_CNT;
 8002106:	fb01 f403 	mul.w	r4, r1, r3
  analog.curr_b_cnt = (offset_curr_b - adc_buffer.curr_b);
 800210a:	b212      	sxth	r2, r2
  analog.curr_c_cnt = (offset_curr_c - adc_buffer.curr_c);
 800210c:	b200      	sxth	r0, r0
  analog.curr_a_cnt = (offset_curr_a - adc_buffer.curr_a);
 800210e:	81ab      	strh	r3, [r5, #12]
  filtLowPass32((analog.curr_a_cnt+analog.curr_b_cnt+analog.curr_c_cnt)/3, 20, &filter_buffer);
 8002110:	4413      	add	r3, r2
  analog.curr_c_cnt = (offset_curr_c - adc_buffer.curr_c);
 8002112:	8228      	strh	r0, [r5, #16]
  analog.curr_a = analog.curr_a_cnt * PHASE_CURR_mA_CNT;
 8002114:	602c      	str	r4, [r5, #0]
  analog.curr_b = analog.curr_b_cnt * PHASE_CURR_mA_CNT;
 8002116:	fb01 f402 	mul.w	r4, r1, r2
  analog.curr_c = analog.curr_c_cnt * PHASE_CURR_mA_CNT;
 800211a:	4341      	muls	r1, r0
  filtLowPass32((analog.curr_a_cnt+analog.curr_b_cnt+analog.curr_c_cnt)/3, 20, &filter_buffer);
 800211c:	4418      	add	r0, r3
 800211e:	2303      	movs	r3, #3
  analog.curr_b = analog.curr_b_cnt * PHASE_CURR_mA_CNT;
 8002120:	606c      	str	r4, [r5, #4]
  filtLowPass32((analog.curr_a_cnt+analog.curr_b_cnt+analog.curr_c_cnt)/3, 20, &filter_buffer);
 8002122:	4c42      	ldr	r4, [pc, #264]	; (800222c <DMA1_Channel1_IRQHandler+0x1b4>)
  analog.curr_b_cnt = (offset_curr_b - adc_buffer.curr_b);
 8002124:	81ea      	strh	r2, [r5, #14]
  analog.curr_c = analog.curr_c_cnt * PHASE_CURR_mA_CNT;
 8002126:	60a9      	str	r1, [r5, #8]
  filtLowPass32((analog.curr_a_cnt+analog.curr_b_cnt+analog.curr_c_cnt)/3, 20, &filter_buffer);
 8002128:	4622      	mov	r2, r4
 800212a:	fb90 f0f3 	sdiv	r0, r0, r3
 800212e:	2114      	movs	r1, #20
 8002130:	f002 fad6 	bl	80046e0 <filtLowPass32>
  analog.curr_dc = ((filter_buffer>>16)*(PHASE_CURR_mA_CNT*173)/100);
 8002134:	f242 13ca 	movw	r3, #8650	; 0x21ca
 8002138:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   if (OverrunFlag) {
 800213c:	4c3c      	ldr	r4, [pc, #240]	; (8002230 <DMA1_Channel1_IRQHandler+0x1b8>)
  analog.curr_dc = ((filter_buffer>>16)*(PHASE_CURR_mA_CNT*173)/100);
 800213e:	4353      	muls	r3, r2
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	fb93 f3f2 	sdiv	r3, r3, r2
 8002146:	616b      	str	r3, [r5, #20]
   if (OverrunFlag) {
 8002148:	7823      	ldrb	r3, [r4, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1d1      	bne.n	80020f2 <DMA1_Channel1_IRQHandler+0x7a>
   OverrunFlag = true;
 800214e:	2301      	movs	r3, #1
 8002150:	7023      	strb	r3, [r4, #0]
     rtU_Left.b_motEna     = enable && !rtY_Left.z_errCode;
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <DMA1_Channel1_IRQHandler+0x1bc>)
 8002154:	4e38      	ldr	r6, [pc, #224]	; (8002238 <DMA1_Channel1_IRQHandler+0x1c0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b11b      	cbz	r3, 8002162 <DMA1_Channel1_IRQHandler+0xea>
 800215a:	79b3      	ldrb	r3, [r6, #6]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	4a36      	ldr	r2, [pc, #216]	; (800223c <DMA1_Channel1_IRQHandler+0x1c4>)
     rtU_Left.b_hallA      = !(HALL_A_GPIO_Port->IDR & HALL_A_Pin);
 8002164:	4936      	ldr	r1, [pc, #216]	; (8002240 <DMA1_Channel1_IRQHandler+0x1c8>)
     rtU_Left.b_motEna     = enable && !rtY_Left.z_errCode;
 8002166:	7013      	strb	r3, [r2, #0]
     rtU_Left.b_hallA      = !(HALL_A_GPIO_Port->IDR & HALL_A_Pin);
 8002168:	688b      	ldr	r3, [r1, #8]
 800216a:	f083 0310 	eor.w	r3, r3, #16
 800216e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002172:	7113      	strb	r3, [r2, #4]
     rtU_Left.b_hallB      = !(HALL_B_GPIO_Port->IDR & HALL_B_Pin);
 8002174:	688b      	ldr	r3, [r1, #8]
 8002176:	f083 0320 	eor.w	r3, r3, #32
 800217a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800217e:	7153      	strb	r3, [r2, #5]
     rtU_Left.b_hallC      = !(HALL_C_GPIO_Port->IDR & HALL_C_Pin);
 8002180:	688b      	ldr	r3, [r1, #8]
 8002182:	43db      	mvns	r3, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	7193      	strb	r3, [r2, #6]
     rtU_Left.i_phaAB      = analog.curr_a_cnt;
 800218a:	89ab      	ldrh	r3, [r5, #12]
 800218c:	8113      	strh	r3, [r2, #8]
     rtU_Left.i_phaBC      = analog.curr_b_cnt;
 800218e:	89eb      	ldrh	r3, [r5, #14]
 8002190:	8153      	strh	r3, [r2, #10]
     BLDC_controller_step(rtM_Left);
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <DMA1_Channel1_IRQHandler+0x1cc>)
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f7ff f901 	bl	800139c <BLDC_controller_step>
  htim1.Instance->CCR1 = CLAMP(ul + pwm_res / 2, 10, pwm_res-10);
 800219a:	f240 30de 	movw	r0, #990	; 0x3de
     ul            = rtY_Left.DC_phaA;
 800219e:	f9b6 1000 	ldrsh.w	r1, [r6]
     vl            = rtY_Left.DC_phaB;
 80021a2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
  htim1.Instance->CCR1 = CLAMP(ul + pwm_res / 2, 10, pwm_res-10);
 80021a6:	4281      	cmp	r1, r0
     wl            = rtY_Left.DC_phaC;
 80021a8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
  htim1.Instance->CCR1 = CLAMP(ul + pwm_res / 2, 10, pwm_res-10);
 80021ac:	dc24      	bgt.n	80021f8 <DMA1_Channel1_IRQHandler+0x180>
 80021ae:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
 80021b2:	4281      	cmp	r1, r0
 80021b4:	bfb8      	it	lt
 80021b6:	4601      	movlt	r1, r0
 80021b8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80021bc:	4822      	ldr	r0, [pc, #136]	; (8002248 <DMA1_Channel1_IRQHandler+0x1d0>)
 80021be:	6800      	ldr	r0, [r0, #0]
 80021c0:	6341      	str	r1, [r0, #52]	; 0x34
  htim1.Instance->CCR2 = CLAMP(vl + pwm_res / 2, 10, pwm_res-10);
 80021c2:	f240 31de 	movw	r1, #990	; 0x3de
 80021c6:	428a      	cmp	r2, r1
 80021c8:	dc19      	bgt.n	80021fe <DMA1_Channel1_IRQHandler+0x186>
 80021ca:	f2a1 71bc 	subw	r1, r1, #1980	; 0x7bc
 80021ce:	428a      	cmp	r2, r1
 80021d0:	bfb8      	it	lt
 80021d2:	460a      	movlt	r2, r1
 80021d4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80021d8:	6382      	str	r2, [r0, #56]	; 0x38
  htim1.Instance->CCR3 = CLAMP(wl + pwm_res / 2, 10, pwm_res-10);
 80021da:	f240 32de 	movw	r2, #990	; 0x3de
 80021de:	4293      	cmp	r3, r2
 80021e0:	dc10      	bgt.n	8002204 <DMA1_Channel1_IRQHandler+0x18c>
 80021e2:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
 80021e6:	4293      	cmp	r3, r2
 80021e8:	bfb8      	it	lt
 80021ea:	4613      	movlt	r3, r2
 80021ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021f0:	63c3      	str	r3, [r0, #60]	; 0x3c
  OverrunFlag = false;
 80021f2:	2300      	movs	r3, #0
 80021f4:	7023      	strb	r3, [r4, #0]
 80021f6:	e77c      	b.n	80020f2 <DMA1_Channel1_IRQHandler+0x7a>
  htim1.Instance->CCR1 = CLAMP(ul + pwm_res / 2, 10, pwm_res-10);
 80021f8:	f240 71c6 	movw	r1, #1990	; 0x7c6
 80021fc:	e7de      	b.n	80021bc <DMA1_Channel1_IRQHandler+0x144>
  htim1.Instance->CCR2 = CLAMP(vl + pwm_res / 2, 10, pwm_res-10);
 80021fe:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8002202:	e7e9      	b.n	80021d8 <DMA1_Channel1_IRQHandler+0x160>
  htim1.Instance->CCR3 = CLAMP(wl + pwm_res / 2, 10, pwm_res-10);
 8002204:	f240 73c6 	movw	r3, #1990	; 0x7c6
 8002208:	e7f2      	b.n	80021f0 <DMA1_Channel1_IRQHandler+0x178>
 800220a:	bf00      	nop
 800220c:	40020000 	.word	0x40020000
 8002210:	200005e0 	.word	0x200005e0
 8002214:	20000108 	.word	0x20000108
 8002218:	20004368 	.word	0x20004368
 800221c:	200005d4 	.word	0x200005d4
 8002220:	200005d8 	.word	0x200005d8
 8002224:	200005dc 	.word	0x200005dc
 8002228:	2000419c 	.word	0x2000419c
 800222c:	200005d0 	.word	0x200005d0
 8002230:	200005cc 	.word	0x200005cc
 8002234:	200000fc 	.word	0x200000fc
 8002238:	2000449c 	.word	0x2000449c
 800223c:	200044ac 	.word	0x200044ac
 8002240:	40010c00 	.word	0x40010c00
 8002244:	0800d1e0 	.word	0x0800d1e0
 8002248:	20004378 	.word	0x20004378
 800224c:	20000100 	.word	0x20000100
 8002250:	20000104 	.word	0x20000104

08002254 <EEPROM_1_ReadByte>:
uint16_t byte_cnt;


uint8_t EEPROM_1_ReadByte(uint8_t x){
	uint8_t data[4];
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_63+((x/4)*4)));
 8002254:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8002258:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800225c:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8002260:	681b      	ldr	r3, [r3, #0]
uint8_t EEPROM_1_ReadByte(uint8_t x){
 8002262:	b082      	sub	sp, #8
	*(uint32_t*)data = (*(__IO uint32_t*)(ADDR_FLASH_PAGE_63+((x/4)*4)));
 8002264:	9301      	str	r3, [sp, #4]
	return data[x%4];
 8002266:	f000 0003 	and.w	r0, r0, #3
 800226a:	ab02      	add	r3, sp, #8
 800226c:	4418      	add	r0, r3
}
 800226e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8002272:	b002      	add	sp, #8
 8002274:	4770      	bx	lr

08002276 <EEPROM_1_Write>:

uint8_t EEPROM_1_Write(uint8_t* y, uint16_t x){
 8002276:	b510      	push	{r4, lr}
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, ADDR_FLASH_PAGE_63+(x*4), *(uint32_t*)y);
 8002278:	2400      	movs	r4, #0
 800227a:	0089      	lsls	r1, r1, #2
 800227c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8002280:	6802      	ldr	r2, [r0, #0]
 8002282:	4623      	mov	r3, r4
 8002284:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8002288:	2002      	movs	r0, #2
 800228a:	f004 fbff 	bl	8006a8c <HAL_FLASH_Program>
	return 0;
}
 800228e:	4620      	mov	r0, r4
 8002290:	bd10      	pop	{r4, pc}
	...

08002294 <n_number>:
#define EEPROM_READ_BYTE(x) EEPROM_1_ReadByte(x)
#define EEPROM_WRITE_ROW(x,y) EEPROM_1_Write(y,x)


uint8_t n_number(uint32_t n){
  if(n < 100000) {
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <n_number+0x54>)
 8002296:	4298      	cmp	r0, r3
 8002298:	d810      	bhi.n	80022bc <n_number+0x28>
    if(n < 1000) {
 800229a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800229e:	d206      	bcs.n	80022ae <n_number+0x1a>
      if(n < 100) {
 80022a0:	2863      	cmp	r0, #99	; 0x63
 80022a2:	d81d      	bhi.n	80022e0 <n_number+0x4c>
        if(n < 10)
          return 1;
        return 2;
 80022a4:	280a      	cmp	r0, #10
 80022a6:	bf34      	ite	cc
 80022a8:	2001      	movcc	r0, #1
 80022aa:	2002      	movcs	r0, #2
 80022ac:	4770      	bx	lr
      return 3;
    }
    if(n < 10000)
      return 4;
    else
      return 5;
 80022ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80022b2:	4298      	cmp	r0, r3
 80022b4:	bf94      	ite	ls
 80022b6:	2004      	movls	r0, #4
 80022b8:	2005      	movhi	r0, #5
 80022ba:	4770      	bx	lr
  }
  if(n < 100000000) {
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <n_number+0x58>)
 80022be:	4298      	cmp	r0, r3
 80022c0:	d808      	bhi.n	80022d4 <n_number+0x40>
    if(n < 10000000) {
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <n_number+0x5c>)
 80022c4:	4298      	cmp	r0, r3
 80022c6:	d80d      	bhi.n	80022e4 <n_number+0x50>
      if(n < 1000000)
        return 6;
      return 7;
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <n_number+0x60>)
 80022ca:	4298      	cmp	r0, r3
 80022cc:	bf94      	ite	ls
 80022ce:	2006      	movls	r0, #6
 80022d0:	2007      	movhi	r0, #7
 80022d2:	4770      	bx	lr
    return 8;
  }
  if(n < 1000000000)
    return 9;
  else
    return 10;   
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <n_number+0x64>)
 80022d6:	4298      	cmp	r0, r3
 80022d8:	bf94      	ite	ls
 80022da:	2009      	movls	r0, #9
 80022dc:	200a      	movhi	r0, #10
 80022de:	4770      	bx	lr
      return 3;
 80022e0:	2003      	movs	r0, #3
 80022e2:	4770      	bx	lr
    return 8;
 80022e4:	2008      	movs	r0, #8
}
 80022e6:	4770      	bx	lr
 80022e8:	0001869f 	.word	0x0001869f
 80022ec:	05f5e0ff 	.word	0x05f5e0ff
 80022f0:	0098967f 	.word	0x0098967f
 80022f4:	000f423f 	.word	0x000f423f
 80022f8:	3b9ac9ff 	.word	0x3b9ac9ff

080022fc <print_param_buffer>:
            break;
        }
}


void print_param_buffer(char * buffer, parameter_entry * params, uint8_t index){
 80022fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    uint32_t u_temp_buffer=0;
    int32_t i_temp_buffer=0;
    float f_temp_buffer=0.0;
    switch (params[index].type){
 8002300:	2424      	movs	r4, #36	; 0x24
 8002302:	fb04 1402 	mla	r4, r4, r2, r1
 8002306:	7b63      	ldrb	r3, [r4, #13]
void print_param_buffer(char * buffer, parameter_entry * params, uint8_t index){
 8002308:	b088      	sub	sp, #32
 800230a:	4605      	mov	r5, r0
    switch (params[index].type){
 800230c:	2b04      	cmp	r3, #4
 800230e:	d830      	bhi.n	8002372 <print_param_buffer+0x76>
 8002310:	e8df f003 	tbb	[pc, r3]
 8002314:	94804403 	.word	0x94804403
 8002318:	a0          	.byte	0xa0
 8002319:	00          	.byte	0x00
        case TYPE_UNSIGNED:
            switch (params[index].size){
 800231a:	7b27      	ldrb	r7, [r4, #12]
 800231c:	2f02      	cmp	r7, #2
 800231e:	d02b      	beq.n	8002378 <print_param_buffer+0x7c>
 8002320:	2f04      	cmp	r7, #4
 8002322:	d02c      	beq.n	800237e <print_param_buffer+0x82>
 8002324:	2f01      	cmp	r7, #1
 8002326:	d12d      	bne.n	8002384 <print_param_buffer+0x88>
                case 1:
                    u_temp_buffer = *(uint8_t*)params[index].value;
 8002328:	68a3      	ldr	r3, [r4, #8]
 800232a:	781e      	ldrb	r6, [r3, #0]
                    break;
                case 4:
                    u_temp_buffer = *(uint32_t*)params[index].value;
                    break;
            }
            if(params[index].div){
 800232c:	8b21      	ldrh	r1, [r4, #24]
 800232e:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 8002332:	6862      	ldr	r2, [r4, #4]
 8002334:	b341      	cbz	r1, 8002388 <print_param_buffer+0x8c>
                sprintf(buffer, "%s;%u.%0*u;%u;%u;%i.%u;%i.%u",
                    params[index].name,
                    (u_temp_buffer/params[index].div),
                    n_number(params[index].div)-1,
 8002336:	4608      	mov	r0, r1
                sprintf(buffer, "%s;%u.%0*u;%u;%u;%i.%u;%i.%u",
 8002338:	fbb6 faf1 	udiv	sl, r6, r1
                    n_number(params[index].div)-1,
 800233c:	f7ff ffaa 	bl	8002294 <n_number>
                sprintf(buffer, "%s;%u.%0*u;%u;%u;%i.%u;%i.%u",
 8002340:	fb99 f3f1 	sdiv	r3, r9, r1
 8002344:	fb01 9413 	mls	r4, r1, r3, r9
 8002348:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800234c:	fb98 f3f1 	sdiv	r3, r8, r1
 8002350:	fb01 8413 	mls	r4, r1, r3, r8
 8002354:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002358:	2300      	movs	r3, #0
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	4653      	mov	r3, sl
 800235e:	fb01 611a 	mls	r1, r1, sl, r6
 8002362:	3801      	subs	r0, #1
 8002364:	9101      	str	r1, [sp, #4]
 8002366:	4941      	ldr	r1, [pc, #260]	; (800246c <print_param_buffer+0x170>)
 8002368:	9703      	str	r7, [sp, #12]
 800236a:	9000      	str	r0, [sp, #0]
            case 4:
                i_temp_buffer = *(int32_t*)params[index].value;
                break;
            }
            if(params[index].div){
                sprintf(buffer, "%s;%i.%0*u;%u;%u;%i.%u;%i.%u",
 800236c:	4628      	mov	r0, r5
 800236e:	f002 fe2f 	bl	8004fd0 <sprintf_>
                params[index].size,
                "NULL",
                "NULL");
            break;
        }
}
 8002372:	b008      	add	sp, #32
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                    u_temp_buffer = *(uint16_t*)params[index].value;
 8002378:	68a3      	ldr	r3, [r4, #8]
 800237a:	881e      	ldrh	r6, [r3, #0]
                    break;
 800237c:	e7d6      	b.n	800232c <print_param_buffer+0x30>
                    u_temp_buffer = *(uint32_t*)params[index].value;
 800237e:	68a3      	ldr	r3, [r4, #8]
 8002380:	681e      	ldr	r6, [r3, #0]
                    break;
 8002382:	e7d3      	b.n	800232c <print_param_buffer+0x30>
    uint32_t u_temp_buffer=0;
 8002384:	2600      	movs	r6, #0
 8002386:	e7d1      	b.n	800232c <print_param_buffer+0x30>
                sprintf(buffer, "%s;%u;%u;%u;%u;%u",
 8002388:	4633      	mov	r3, r6
 800238a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800238e:	e9cd 1700 	strd	r1, r7, [sp]
 8002392:	4937      	ldr	r1, [pc, #220]	; (8002470 <print_param_buffer+0x174>)
            sprintf(buffer, "%s;%s;%u;%u;%s;%s",
 8002394:	4628      	mov	r0, r5
 8002396:	f002 fe1b 	bl	8004fd0 <sprintf_>
}
 800239a:	e7ea      	b.n	8002372 <print_param_buffer+0x76>
            switch (params[index].size){
 800239c:	7b27      	ldrb	r7, [r4, #12]
 800239e:	2f02      	cmp	r7, #2
 80023a0:	d027      	beq.n	80023f2 <print_param_buffer+0xf6>
 80023a2:	2f04      	cmp	r7, #4
 80023a4:	d029      	beq.n	80023fa <print_param_buffer+0xfe>
 80023a6:	2f01      	cmp	r7, #1
 80023a8:	d12a      	bne.n	8002400 <print_param_buffer+0x104>
                i_temp_buffer = *(int8_t*)params[index].value;
 80023aa:	68a3      	ldr	r3, [r4, #8]
 80023ac:	f993 6000 	ldrsb.w	r6, [r3]
            if(params[index].div){
 80023b0:	8b21      	ldrh	r1, [r4, #24]
 80023b2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 80023b6:	6862      	ldr	r2, [r4, #4]
 80023b8:	b321      	cbz	r1, 8002404 <print_param_buffer+0x108>
                    n_number(params[index].div)-1,
 80023ba:	4608      	mov	r0, r1
                sprintf(buffer, "%s;%i.%0*u;%u;%u;%i.%u;%i.%u",
 80023bc:	fb96 faf1 	sdiv	sl, r6, r1
                    n_number(params[index].div)-1,
 80023c0:	f7ff ff68 	bl	8002294 <n_number>
                sprintf(buffer, "%s;%i.%0*u;%u;%u;%i.%u;%i.%u",
 80023c4:	fb99 f3f1 	sdiv	r3, r9, r1
 80023c8:	fb01 9413 	mls	r4, r1, r3, r9
 80023cc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80023d0:	fb98 f3f1 	sdiv	r3, r8, r1
 80023d4:	fb01 8413 	mls	r4, r1, r3, r8
 80023d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80023dc:	2301      	movs	r3, #1
 80023de:	fb01 611a 	mls	r1, r1, sl, r6
 80023e2:	3801      	subs	r0, #1
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	9101      	str	r1, [sp, #4]
 80023e8:	9703      	str	r7, [sp, #12]
 80023ea:	9000      	str	r0, [sp, #0]
 80023ec:	4653      	mov	r3, sl
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <print_param_buffer+0x178>)
 80023f0:	e7bc      	b.n	800236c <print_param_buffer+0x70>
                i_temp_buffer = *(int16_t*)params[index].value;
 80023f2:	68a3      	ldr	r3, [r4, #8]
 80023f4:	f9b3 6000 	ldrsh.w	r6, [r3]
                break;
 80023f8:	e7da      	b.n	80023b0 <print_param_buffer+0xb4>
                i_temp_buffer = *(int32_t*)params[index].value;
 80023fa:	68a3      	ldr	r3, [r4, #8]
 80023fc:	681e      	ldr	r6, [r3, #0]
                break;
 80023fe:	e7d7      	b.n	80023b0 <print_param_buffer+0xb4>
    int32_t i_temp_buffer=0;
 8002400:	2600      	movs	r6, #0
 8002402:	e7d5      	b.n	80023b0 <print_param_buffer+0xb4>
                sprintf(buffer, "%s;%i;%u;%u;%i;%i",
 8002404:	2301      	movs	r3, #1
 8002406:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	9701      	str	r7, [sp, #4]
 800240e:	4633      	mov	r3, r6
 8002410:	4919      	ldr	r1, [pc, #100]	; (8002478 <print_param_buffer+0x17c>)
 8002412:	e7bf      	b.n	8002394 <print_param_buffer+0x98>
            sprintf(buffer, "%s;%f;%u;%u;%li;%li",
 8002414:	6963      	ldr	r3, [r4, #20]
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	6923      	ldr	r3, [r4, #16]
 800241a:	9304      	str	r3, [sp, #16]
 800241c:	7b23      	ldrb	r3, [r4, #12]
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	2302      	movs	r3, #2
 8002422:	9302      	str	r3, [sp, #8]
            f_temp_buffer = *(float*)params[index].value;
 8002424:	68a3      	ldr	r3, [r4, #8]
            sprintf(buffer, "%s;%f;%u;%u;%li;%li",
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	f7fd fffe 	bl	8000428 <__aeabi_f2d>
 800242c:	e9cd 0100 	strd	r0, r1, [sp]
 8002430:	4912      	ldr	r1, [pc, #72]	; (800247c <print_param_buffer+0x180>)
 8002432:	6862      	ldr	r2, [r4, #4]
 8002434:	4628      	mov	r0, r5
 8002436:	f002 fdcb 	bl	8004fd0 <sprintf_>
            break;
 800243a:	e79a      	b.n	8002372 <print_param_buffer+0x76>
                *(char*)params[index].value,
 800243c:	68a3      	ldr	r3, [r4, #8]
            sprintf(buffer, "%s;%c;%u;%u;%s;%s",
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <print_param_buffer+0x184>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002446:	7b22      	ldrb	r2, [r4, #12]
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <print_param_buffer+0x188>)
 800244a:	9201      	str	r2, [sp, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	9200      	str	r2, [sp, #0]
 8002450:	6862      	ldr	r2, [r4, #4]
 8002452:	e79f      	b.n	8002394 <print_param_buffer+0x98>
            sprintf(buffer, "%s;%s;%u;%u;%s;%s",
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <print_param_buffer+0x184>)
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <print_param_buffer+0x18c>)
 8002458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800245c:	7b23      	ldrb	r3, [r4, #12]
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2304      	movs	r3, #4
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002468:	e794      	b.n	8002394 <print_param_buffer+0x98>
 800246a:	bf00      	nop
 800246c:	0800caef 	.word	0x0800caef
 8002470:	0800cb0c 	.word	0x0800cb0c
 8002474:	0800cb1e 	.word	0x0800cb1e
 8002478:	0800cb3b 	.word	0x0800cb3b
 800247c:	0800cb4d 	.word	0x0800cb4d
 8002480:	0800cb73 	.word	0x0800cb73
 8002484:	0800cb61 	.word	0x0800cb61
 8002488:	0800cb78 	.word	0x0800cb78

0800248c <EEPROM_Read_Row>:


uint8_t EEPROM_Read_Row(uint16_t row, uint8_t * buffer){
    uint16_t addr;
    addr = row * CY_EEPROM_SIZEOF_ROW;
 800248c:	0082      	lsls	r2, r0, #2
 800248e:	b292      	uxth	r2, r2
uint8_t EEPROM_Read_Row(uint16_t row, uint8_t * buffer){
 8002490:	b510      	push	{r4, lr}
    for(uint8_t i = 0; i<CY_EEPROM_SIZEOF_ROW;i++){
        *buffer=EEPROM_READ_BYTE(addr+i);
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	1d0c      	adds	r4, r1, #4
 8002496:	1888      	adds	r0, r1, r2
 8002498:	b2c0      	uxtb	r0, r0
 800249a:	f7ff fedb 	bl	8002254 <EEPROM_1_ReadByte>
 800249e:	f801 0b01 	strb.w	r0, [r1], #1
    for(uint8_t i = 0; i<CY_EEPROM_SIZEOF_ROW;i++){
 80024a2:	42a1      	cmp	r1, r4
 80024a4:	d1f7      	bne.n	8002496 <EEPROM_Read_Row+0xa>
        buffer++;
    }
    return 1;
}
 80024a6:	2001      	movs	r0, #1
 80024a8:	bd10      	pop	{r4, pc}
	...

080024ac <EEPROM_buffer_write>:

uint8_t EEPROM_buffer_write(uint8_t byte, uint16_t address, uint8_t flush){
 80024ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b0:	4617      	mov	r7, r2
    byte_cnt++;
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <EEPROM_buffer_write+0x88>)
    uint8_t ret_change=0;
    uint16_t rowNumber;
    uint16_t byteNumber;
    rowNumber = address/(uint16_t)CY_EEPROM_SIZEOF_ROW;
    byteNumber = address - (rowNumber * ((uint16_t)CY_EEPROM_SIZEOF_ROW));
    if(last_row==0xFFFF){
 80024b4:	4c20      	ldr	r4, [pc, #128]	; (8002538 <EEPROM_buffer_write+0x8c>)
    byte_cnt++;
 80024b6:	8813      	ldrh	r3, [r2, #0]
    rowNumber = address/(uint16_t)CY_EEPROM_SIZEOF_ROW;
 80024b8:	088d      	lsrs	r5, r1, #2
    byte_cnt++;
 80024ba:	3301      	adds	r3, #1
 80024bc:	8013      	strh	r3, [r2, #0]
    if(last_row==0xFFFF){
 80024be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c2:	f001 0603 	and.w	r6, r1, #3
 80024c6:	8821      	ldrh	r1, [r4, #0]
uint8_t EEPROM_buffer_write(uint8_t byte, uint16_t address, uint8_t flush){
 80024c8:	4680      	mov	r8, r0
    if(last_row==0xFFFF){
 80024ca:	4299      	cmp	r1, r3
 80024cc:	d120      	bne.n	8002510 <EEPROM_buffer_write+0x64>
        last_row=rowNumber;
        EEPROM_Read_Row(rowNumber,eeprom_buffer);
 80024ce:	491b      	ldr	r1, [pc, #108]	; (800253c <EEPROM_buffer_write+0x90>)
 80024d0:	4628      	mov	r0, r5
        last_row=rowNumber;
 80024d2:	8025      	strh	r5, [r4, #0]
        EEPROM_Read_Row(rowNumber,eeprom_buffer);
 80024d4:	f7ff ffda 	bl	800248c <EEPROM_Read_Row>
            EEPROM_WRITE_ROW(last_row,eeprom_buffer);
        }
        EEPROM_Read_Row(rowNumber,eeprom_buffer);
        changed=0;
    }
    if(eeprom_buffer[byteNumber]!=byte){
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <EEPROM_buffer_write+0x90>)
       eeprom_buffer[byteNumber]=byte;
       changed=1;
       ret_change=1;
    }

    last_row = rowNumber;
 80024da:	8025      	strh	r5, [r4, #0]
    if(eeprom_buffer[byteNumber]!=byte){
 80024dc:	5d9a      	ldrb	r2, [r3, r6]
 80024de:	4542      	cmp	r2, r8
       eeprom_buffer[byteNumber]=byte;
 80024e0:	bf1d      	ittte	ne
 80024e2:	f803 8006 	strbne.w	r8, [r3, r6]
       changed=1;
 80024e6:	2601      	movne	r6, #1
 80024e8:	4b15      	ldrne	r3, [pc, #84]	; (8002540 <EEPROM_buffer_write+0x94>)
    uint8_t ret_change=0;
 80024ea:	2600      	moveq	r6, #0
       changed=1;
 80024ec:	bf18      	it	ne
 80024ee:	701e      	strbne	r6, [r3, #0]

    if(flush && changed){
 80024f0:	b15f      	cbz	r7, 800250a <EEPROM_buffer_write+0x5e>
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	4f12      	ldr	r7, [pc, #72]	; (8002540 <EEPROM_buffer_write+0x94>)
        last_row = 0xFFFF;
 80024f8:	8023      	strh	r3, [r4, #0]
    if(flush && changed){
 80024fa:	783a      	ldrb	r2, [r7, #0]
 80024fc:	b12a      	cbz	r2, 800250a <EEPROM_buffer_write+0x5e>
        EEPROM_WRITE_ROW(rowNumber,eeprom_buffer);
 80024fe:	4629      	mov	r1, r5
 8002500:	480e      	ldr	r0, [pc, #56]	; (800253c <EEPROM_buffer_write+0x90>)
 8002502:	f7ff feb8 	bl	8002276 <EEPROM_1_Write>
        changed = 0;
 8002506:	2300      	movs	r3, #0
 8002508:	703b      	strb	r3, [r7, #0]
    }else if(flush){
        last_row = 0xFFFF;
    }
    return ret_change;
}
 800250a:	4630      	mov	r0, r6
 800250c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    }else if(last_row!=rowNumber){
 8002510:	42a9      	cmp	r1, r5
 8002512:	d0e1      	beq.n	80024d8 <EEPROM_buffer_write+0x2c>
        if(changed){
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <EEPROM_buffer_write+0x94>)
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	4699      	mov	r9, r3
 800251a:	b112      	cbz	r2, 8002522 <EEPROM_buffer_write+0x76>
            EEPROM_WRITE_ROW(last_row,eeprom_buffer);
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <EEPROM_buffer_write+0x90>)
 800251e:	f7ff feaa 	bl	8002276 <EEPROM_1_Write>
        EEPROM_Read_Row(rowNumber,eeprom_buffer);
 8002522:	4906      	ldr	r1, [pc, #24]	; (800253c <EEPROM_buffer_write+0x90>)
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff ffb1 	bl	800248c <EEPROM_Read_Row>
        changed=0;
 800252a:	2300      	movs	r3, #0
 800252c:	f889 3000 	strb.w	r3, [r9]
 8002530:	e7d2      	b.n	80024d8 <EEPROM_buffer_write+0x2c>
 8002532:	bf00      	nop
 8002534:	200041b4 	.word	0x200041b4
 8002538:	2000010c 	.word	0x2000010c
 800253c:	200005e5 	.word	0x200005e5
 8002540:	200005e4 	.word	0x200005e4

08002544 <djb_hash>:

uint32_t djb_hash(const char* cp)
{
 8002544:	1e42      	subs	r2, r0, #1
    uint32_t hash = 5381;
 8002546:	f241 5005 	movw	r0, #5381	; 0x1505
    while (*cp)
 800254a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800254e:	b903      	cbnz	r3, 8002552 <djb_hash+0xe>
        hash = 33 * hash ^ (unsigned char) *cp++;
    return hash;
}
 8002550:	4770      	bx	lr
        hash = 33 * hash ^ (unsigned char) *cp++;
 8002552:	eb00 1040 	add.w	r0, r0, r0, lsl #5
 8002556:	4058      	eors	r0, r3
 8002558:	e7f7      	b.n	800254a <djb_hash+0x6>

0800255a <getch>:
	SEND_CONST_STRING("\033[?25h", ptr);
}


uint8_t getch(port_str *ptr, TickType_t xTicksToWait){
    uint8_t c=0;
 800255a:	2300      	movs	r3, #0
uint8_t getch(port_str *ptr, TickType_t xTicksToWait){
 800255c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800255e:	4604      	mov	r4, r0
    uint8_t c=0;
 8002560:	f88d 3007 	strb.w	r3, [sp, #7]
    if(xTicksToWait>0){
 8002564:	460d      	mov	r5, r1
 8002566:	b121      	cbz	r1, 8002572 <getch+0x18>
        xSemaphoreGive(ptr->term_block);
 8002568:	461a      	mov	r2, r3
 800256a:	4619      	mov	r1, r3
 800256c:	68c0      	ldr	r0, [r0, #12]
 800256e:	f005 ffa7 	bl	80084c0 <xQueueGenericSend>
    }
    xStreamBufferReceive(ptr->rx,&c,1,xTicksToWait);
 8002572:	462b      	mov	r3, r5
 8002574:	2201      	movs	r2, #1
 8002576:	f10d 0107 	add.w	r1, sp, #7
 800257a:	68a0      	ldr	r0, [r4, #8]
 800257c:	f006 fbf8 	bl	8008d70 <xStreamBufferReceive>
    if(xTicksToWait>0){
 8002580:	b125      	cbz	r5, 800258c <getch+0x32>
        xSemaphoreTake(ptr->term_block, portMAX_DELAY);
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	68e0      	ldr	r0, [r4, #12]
 8002588:	f006 f94e 	bl	8008828 <xQueueSemaphoreTake>
    }
    return c;
}
 800258c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002590:	b003      	add	sp, #12
 8002592:	bd30      	pop	{r4, r5, pc}

08002594 <send_char>:
}

/********************************************
* Sends char to transmit queue
*********************************************/
void send_char(uint8_t c, port_str *ptr) {
 8002594:	b507      	push	{r0, r1, r2, lr}
 8002596:	f88d 0007 	strb.w	r0, [sp, #7]
    if (ptr->tx != NULL)
 800259a:	6848      	ldr	r0, [r1, #4]
 800259c:	b130      	cbz	r0, 80025ac <send_char+0x18>
        xStreamBufferSend(ptr->tx,&c, 1,portMAX_DELAY);
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	2201      	movs	r2, #1
 80025a4:	f10d 0107 	add.w	r1, sp, #7
 80025a8:	f006 fb55 	bl	8008c56 <xStreamBufferSend>
}
 80025ac:	b003      	add	sp, #12
 80025ae:	f85d fb04 	ldr.w	pc, [sp], #4

080025b2 <send_string>:

/********************************************
* Sends string to transmit queue
*********************************************/
void send_string(char *data, port_str *ptr) {
 80025b2:	b570      	push	{r4, r5, r6, lr}
 80025b4:	460e      	mov	r6, r1
 80025b6:	4605      	mov	r5, r0
    uint16_t len = ntlibc_strlen(data);
 80025b8:	f002 fdd3 	bl	8005162 <ntlibc_strlen>
    if (ptr->tx != NULL) {
 80025bc:	6873      	ldr	r3, [r6, #4]
 80025be:	b10b      	cbz	r3, 80025c4 <send_string+0x12>
    uint16_t len = ntlibc_strlen(data);
 80025c0:	b284      	uxth	r4, r0
    	while(len){
 80025c2:	b904      	cbnz	r4, 80025c6 <send_string+0x14>
			data+=count;
			len-=count;
			if(!count) vTaskDelay(5);
    	}
    }
}
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
			uint16_t space = xStreamBufferSpacesAvailable(ptr->tx);
 80025c6:	6870      	ldr	r0, [r6, #4]
 80025c8:	f006 fb31 	bl	8008c2e <xStreamBufferSpacesAvailable>
			uint16_t count = xStreamBufferSend(ptr->tx,data, len_t,0);
 80025cc:	b282      	uxth	r2, r0
 80025ce:	42a2      	cmp	r2, r4
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	bf28      	it	cs
 80025d6:	4622      	movcs	r2, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	6870      	ldr	r0, [r6, #4]
 80025dc:	f006 fb3b 	bl	8008c56 <xStreamBufferSend>
 80025e0:	b283      	uxth	r3, r0
			len-=count;
 80025e2:	1ae4      	subs	r4, r4, r3
			data+=count;
 80025e4:	441d      	add	r5, r3
			len-=count;
 80025e6:	b2a4      	uxth	r4, r4
			if(!count) vTaskDelay(5);
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ea      	bne.n	80025c2 <send_string+0x10>
 80025ec:	2005      	movs	r0, #5
 80025ee:	f006 feef 	bl	80093d0 <vTaskDelay>
 80025f2:	e7e6      	b.n	80025c2 <send_string+0x10>

080025f4 <send_buffer>:
/********************************************
* Sends buffer to transmit queue
*********************************************/
void send_buffer(uint8_t *data, uint16_t len, port_str *ptr) {
    if (ptr->tx != NULL) {
 80025f4:	6853      	ldr	r3, [r2, #4]
void send_buffer(uint8_t *data, uint16_t len, port_str *ptr) {
 80025f6:	b570      	push	{r4, r5, r6, lr}
 80025f8:	4605      	mov	r5, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	4616      	mov	r6, r2
    if (ptr->tx != NULL) {
 80025fe:	b9ab      	cbnz	r3, 800262c <send_buffer+0x38>
			data+=count;
			len-=count;
			if(!count) vTaskDelay(5);
    	}
	}
}
 8002600:	bd70      	pop	{r4, r5, r6, pc}
			uint16_t space = xStreamBufferSpacesAvailable(ptr->tx);
 8002602:	6870      	ldr	r0, [r6, #4]
 8002604:	f006 fb13 	bl	8008c2e <xStreamBufferSpacesAvailable>
			uint16_t count = xStreamBufferSend(ptr->tx,data, len_t,0);
 8002608:	b282      	uxth	r2, r0
 800260a:	42a2      	cmp	r2, r4
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	bf28      	it	cs
 8002612:	4622      	movcs	r2, r4
 8002614:	4629      	mov	r1, r5
 8002616:	6870      	ldr	r0, [r6, #4]
 8002618:	f006 fb1d 	bl	8008c56 <xStreamBufferSend>
 800261c:	b283      	uxth	r3, r0
			len-=count;
 800261e:	1ae4      	subs	r4, r4, r3
			data+=count;
 8002620:	441d      	add	r5, r3
			len-=count;
 8002622:	b2a4      	uxth	r4, r4
			if(!count) vTaskDelay(5);
 8002624:	b913      	cbnz	r3, 800262c <send_buffer+0x38>
 8002626:	2005      	movs	r0, #5
 8002628:	f006 fed2 	bl	80093d0 <vTaskDelay>
    	while(len){
 800262c:	2c00      	cmp	r4, #0
 800262e:	d1e8      	bne.n	8002602 <send_buffer+0xe>
 8002630:	e7e6      	b.n	8002600 <send_buffer+0xc>
	...

08002634 <updateDefaultFunction>:
uint8_t updateDefaultFunction(parameter_entry * params, char * newValue, uint8_t index, port_str *ptr) {
 8002634:	b570      	push	{r4, r5, r6, lr}
    switch (params[index].type){
 8002636:	2424      	movs	r4, #36	; 0x24
 8002638:	fb04 0402 	mla	r4, r4, r2, r0
uint8_t updateDefaultFunction(parameter_entry * params, char * newValue, uint8_t index, port_str *ptr) {
 800263c:	461e      	mov	r6, r3
    switch (params[index].type){
 800263e:	7b63      	ldrb	r3, [r4, #13]
uint8_t updateDefaultFunction(parameter_entry * params, char * newValue, uint8_t index, port_str *ptr) {
 8002640:	b094      	sub	sp, #80	; 0x50
 8002642:	460d      	mov	r5, r1
    switch (params[index].type){
 8002644:	2b04      	cmp	r3, #4
 8002646:	d863      	bhi.n	8002710 <updateDefaultFunction+0xdc>
 8002648:	e8df f003 	tbb	[pc, r3]
 800264c:	5f463310 	.word	0x5f463310
 8002650:	03          	.byte	0x03
 8002651:	00          	.byte	0x00
        for(int i=0;i<params[index].size;i++){
 8002652:	2300      	movs	r3, #0
 8002654:	1e4d      	subs	r5, r1, #1
 8002656:	7b22      	ldrb	r2, [r4, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	dd27      	ble.n	80026ac <updateDefaultFunction+0x78>
            *(i+(char*)params[index].value) = newValue[i];
 800265c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002660:	68a2      	ldr	r2, [r4, #8]
 8002662:	54d1      	strb	r1, [r2, r3]
            if(!newValue[i]) break;
 8002664:	782a      	ldrb	r2, [r5, #0]
 8002666:	b30a      	cbz	r2, 80026ac <updateDefaultFunction+0x78>
        for(int i=0;i<params[index].size;i++){
 8002668:	3301      	adds	r3, #1
 800266a:	e7f4      	b.n	8002656 <updateDefaultFunction+0x22>
        if(params[index].div){
 800266c:	8b23      	ldrh	r3, [r4, #24]
 800266e:	b16b      	cbz	r3, 800268c <updateDefaultFunction+0x58>
            fvalue=strtof(newValue,&ch_ptr);
 8002670:	a904      	add	r1, sp, #16
 8002672:	4628      	mov	r0, r5
 8002674:	f008 fc48 	bl	800af08 <strtof>
 8002678:	4605      	mov	r5, r0
            value = fvalue*params[index].div;
 800267a:	8b20      	ldrh	r0, [r4, #24]
 800267c:	f7fe fb2e 	bl	8000cdc <__aeabi_i2f>
 8002680:	4629      	mov	r1, r5
 8002682:	f7fe fb7f 	bl	8000d84 <__aeabi_fmul>
 8002686:	f7fe fd59 	bl	800113c <__aeabi_f2iz>
 800268a:	e004      	b.n	8002696 <updateDefaultFunction+0x62>
            value = strtoul(newValue,&ch_ptr,10);
 800268c:	220a      	movs	r2, #10
 800268e:	a904      	add	r1, sp, #16
 8002690:	4628      	mov	r0, r5
 8002692:	f008 fd93 	bl	800b1bc <strtoul>
        if (value >= params[index].min && value <= params[index].max){
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	4283      	cmp	r3, r0
 800269a:	dc3b      	bgt.n	8002714 <updateDefaultFunction+0xe0>
 800269c:	6963      	ldr	r3, [r4, #20]
 800269e:	4298      	cmp	r0, r3
 80026a0:	dc38      	bgt.n	8002714 <updateDefaultFunction+0xe0>
            if(params[index].size==1){
 80026a2:	7b23      	ldrb	r3, [r4, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10d      	bne.n	80026c4 <updateDefaultFunction+0x90>
                *(int8_t*)params[index].value = value;
 80026a8:	68a2      	ldr	r2, [r4, #8]
 80026aa:	7010      	strb	r0, [r2, #0]
        return 1;
 80026ac:	2001      	movs	r0, #1
}
 80026ae:	b014      	add	sp, #80	; 0x50
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
        if(params[index].div){
 80026b2:	8b23      	ldrh	r3, [r4, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1db      	bne.n	8002670 <updateDefaultFunction+0x3c>
            value = strtol(newValue,&ch_ptr,10);
 80026b8:	220a      	movs	r2, #10
 80026ba:	a904      	add	r1, sp, #16
 80026bc:	4628      	mov	r0, r5
 80026be:	f008 fced 	bl	800b09c <strtol>
 80026c2:	e7e8      	b.n	8002696 <updateDefaultFunction+0x62>
            if(params[index].size==2){
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d102      	bne.n	80026ce <updateDefaultFunction+0x9a>
                *(int16_t*)params[index].value = value;
 80026c8:	68a3      	ldr	r3, [r4, #8]
 80026ca:	8018      	strh	r0, [r3, #0]
 80026cc:	e7ee      	b.n	80026ac <updateDefaultFunction+0x78>
            if(params[index].size==4){
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d11e      	bne.n	8002710 <updateDefaultFunction+0xdc>
                *(int32_t*)params[index].value = value;
 80026d2:	68a3      	ldr	r3, [r4, #8]
 80026d4:	6018      	str	r0, [r3, #0]
 80026d6:	e7e9      	b.n	80026ac <updateDefaultFunction+0x78>
            if(params[index].size==4){
 80026d8:	7b23      	ldrb	r3, [r4, #12]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d118      	bne.n	8002710 <updateDefaultFunction+0xdc>
                fvalue=strtof(newValue,&ch_ptr);
 80026de:	a904      	add	r1, sp, #16
 80026e0:	4628      	mov	r0, r5
 80026e2:	f008 fc11 	bl	800af08 <strtof>
 80026e6:	4605      	mov	r5, r0
                if (fvalue >= (float)params[index].min && fvalue <= (float)params[index].max){
 80026e8:	6920      	ldr	r0, [r4, #16]
 80026ea:	f7fe faf7 	bl	8000cdc <__aeabi_i2f>
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fe fcf0 	bl	80010d4 <__aeabi_fcmple>
 80026f4:	b170      	cbz	r0, 8002714 <updateDefaultFunction+0xe0>
 80026f6:	6960      	ldr	r0, [r4, #20]
 80026f8:	f7fe faf0 	bl	8000cdc <__aeabi_i2f>
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fe fcf3 	bl	80010e8 <__aeabi_fcmpge>
 8002702:	b138      	cbz	r0, 8002714 <updateDefaultFunction+0xe0>
                    *(float*)params[index].value = fvalue;
 8002704:	68a3      	ldr	r3, [r4, #8]
 8002706:	601d      	str	r5, [r3, #0]
 8002708:	e7d0      	b.n	80026ac <updateDefaultFunction+0x78>
        *(char*)params[index].value = *newValue;
 800270a:	68a3      	ldr	r3, [r4, #8]
 800270c:	780a      	ldrb	r2, [r1, #0]
 800270e:	701a      	strb	r2, [r3, #0]
    return 0;
 8002710:	2000      	movs	r0, #0
 8002712:	e7cc      	b.n	80026ae <updateDefaultFunction+0x7a>
        if(params[index].div){
 8002714:	8b22      	ldrh	r2, [r4, #24]
 8002716:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800271a:	b1b2      	cbz	r2, 800274a <updateDefaultFunction+0x116>
            ret = snprintf(buffer, sizeof(buffer),
 800271c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002720:	fb91 f4f2 	sdiv	r4, r1, r2
 8002724:	fb02 1114 	mls	r1, r2, r4, r1
 8002728:	fb02 3210 	mls	r2, r2, r0, r3
 800272c:	e9cd 4101 	strd	r4, r1, [sp, #4]
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	4603      	mov	r3, r0
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <updateDefaultFunction+0x124>)
 8002736:	213c      	movs	r1, #60	; 0x3c
 8002738:	a805      	add	r0, sp, #20
 800273a:	f002 fc5d 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 800273e:	b281      	uxth	r1, r0
 8002740:	4632      	mov	r2, r6
 8002742:	a805      	add	r0, sp, #20
 8002744:	f7ff ff56 	bl	80025f4 <send_buffer>
 8002748:	e7e2      	b.n	8002710 <updateDefaultFunction+0xdc>
            ret = snprintf(buffer, sizeof(buffer), "E:Range %i-%i\r\n", params[index].min, params[index].max);
 800274a:	9100      	str	r1, [sp, #0]
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <updateDefaultFunction+0x128>)
 800274e:	213c      	movs	r1, #60	; 0x3c
 8002750:	a805      	add	r0, sp, #20
 8002752:	f002 fc51 	bl	8004ff8 <snprintf_>
 8002756:	e7f2      	b.n	800273e <updateDefaultFunction+0x10a>
 8002758:	0800cc3f 	.word	0x0800cc3f
 800275c:	0800cc55 	.word	0x0800cc55

08002760 <print_param>:
void print_param(parameter_entry * params, uint8_t index, port_str *ptr){
 8002760:	b570      	push	{r4, r5, r6, lr}
    switch (params[index].type){
 8002762:	2424      	movs	r4, #36	; 0x24
 8002764:	fb04 0401 	mla	r4, r4, r1, r0
 8002768:	7b63      	ldrb	r3, [r4, #13]
void print_param(parameter_entry * params, uint8_t index, port_str *ptr){
 800276a:	b09e      	sub	sp, #120	; 0x78
 800276c:	4615      	mov	r5, r2
    switch (params[index].type){
 800276e:	2b04      	cmp	r3, #4
 8002770:	d826      	bhi.n	80027c0 <print_param+0x60>
 8002772:	e8df f003 	tbb	[pc, r3]
 8002776:	3703      	.short	0x3703
 8002778:	7265      	.short	0x7265
 800277a:	78          	.byte	0x78
 800277b:	00          	.byte	0x00
            switch (params[index].size){
 800277c:	7b23      	ldrb	r3, [r4, #12]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d020      	beq.n	80027c4 <print_param+0x64>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d021      	beq.n	80027ca <print_param+0x6a>
 8002786:	2b01      	cmp	r3, #1
 8002788:	d122      	bne.n	80027d0 <print_param+0x70>
                    u_temp_buffer = *(uint8_t*)params[index].value;
 800278a:	68a3      	ldr	r3, [r4, #8]
 800278c:	781a      	ldrb	r2, [r3, #0]
            if(params[index].div){
 800278e:	8b21      	ldrh	r1, [r4, #24]
 8002790:	6864      	ldr	r4, [r4, #4]
 8002792:	b1f9      	cbz	r1, 80027d4 <print_param+0x74>
                                n_number(params[index].div)-1,
 8002794:	4608      	mov	r0, r1
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%u.%0*u\r\n",
 8002796:	fbb2 f6f1 	udiv	r6, r2, r1
                                n_number(params[index].div)-1,
 800279a:	f7ff fd7b 	bl	8002294 <n_number>
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%u.%0*u\r\n",
 800279e:	4623      	mov	r3, r4
 80027a0:	fb01 2216 	mls	r2, r1, r6, r2
 80027a4:	3801      	subs	r0, #1
 80027a6:	e9cd 6000 	strd	r6, r0, [sp]
 80027aa:	9202      	str	r2, [sp, #8]
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <print_param+0x110>)
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%i.%0*u\r\n",
 80027ae:	2164      	movs	r1, #100	; 0x64
 80027b0:	a805      	add	r0, sp, #20
 80027b2:	f002 fc21 	bl	8004ff8 <snprintf_>
            send_buffer((uint8_t*)buffer,ret,ptr);
 80027b6:	b281      	uxth	r1, r0
 80027b8:	462a      	mov	r2, r5
 80027ba:	a805      	add	r0, sp, #20
 80027bc:	f7ff ff1a 	bl	80025f4 <send_buffer>
}
 80027c0:	b01e      	add	sp, #120	; 0x78
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
                    u_temp_buffer = *(uint16_t*)params[index].value;
 80027c4:	68a3      	ldr	r3, [r4, #8]
 80027c6:	881a      	ldrh	r2, [r3, #0]
                    break;
 80027c8:	e7e1      	b.n	800278e <print_param+0x2e>
                    u_temp_buffer = *(uint32_t*)params[index].value;
 80027ca:	68a3      	ldr	r3, [r4, #8]
 80027cc:	681a      	ldr	r2, [r3, #0]
                    break;
 80027ce:	e7de      	b.n	800278e <print_param+0x2e>
    uint32_t u_temp_buffer=0;
 80027d0:	2200      	movs	r2, #0
 80027d2:	e7dc      	b.n	800278e <print_param+0x2e>
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%u\r\n", params[index].name,u_temp_buffer);
 80027d4:	4623      	mov	r3, r4
 80027d6:	9200      	str	r2, [sp, #0]
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <print_param+0x114>)
            ret = snprintf(buffer, sizeof(buffer), "\t%s=%s\r\n", params[index].name,(char*)params[index].value);
 80027da:	2164      	movs	r1, #100	; 0x64
 80027dc:	a805      	add	r0, sp, #20
 80027de:	f002 fc0b 	bl	8004ff8 <snprintf_>
 80027e2:	e7e8      	b.n	80027b6 <print_param+0x56>
            switch (params[index].size){
 80027e4:	7b23      	ldrb	r3, [r4, #12]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d01d      	beq.n	8002826 <print_param+0xc6>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d01f      	beq.n	800282e <print_param+0xce>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d120      	bne.n	8002834 <print_param+0xd4>
                i_temp_buffer = *(int8_t*)params[index].value;
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	f993 2000 	ldrsb.w	r2, [r3]
            if(params[index].div){
 80027f8:	8b20      	ldrh	r0, [r4, #24]
 80027fa:	6861      	ldr	r1, [r4, #4]
 80027fc:	b1e0      	cbz	r0, 8002838 <print_param+0xd8>
                if(i_temp_buffer<0){
 80027fe:	2a00      	cmp	r2, #0
 8002800:	fb92 f4f0 	sdiv	r4, r2, r0
                    mod=(i_temp_buffer*-1)%params[index].div;
 8002804:	bfbb      	ittet	lt
 8002806:	4252      	neglt	r2, r2
 8002808:	fb92 f3f0 	sdivlt	r3, r2, r0
                    mod=i_temp_buffer%params[index].div;
 800280c:	fb00 2214 	mlsge	r2, r0, r4, r2
                    mod=(i_temp_buffer*-1)%params[index].div;
 8002810:	fb00 2213 	mlslt	r2, r0, r3, r2
                                n_number(params[index].div)-1,
 8002814:	f7ff fd3e 	bl	8002294 <n_number>
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%i.%0*u\r\n",
 8002818:	3801      	subs	r0, #1
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	e9cd 4000 	strd	r4, r0, [sp]
 8002820:	460b      	mov	r3, r1
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <print_param+0x118>)
 8002824:	e7c3      	b.n	80027ae <print_param+0x4e>
                i_temp_buffer = *(int16_t*)params[index].value;
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	f9b3 2000 	ldrsh.w	r2, [r3]
                break;
 800282c:	e7e4      	b.n	80027f8 <print_param+0x98>
                i_temp_buffer = *(int32_t*)params[index].value;
 800282e:	68a3      	ldr	r3, [r4, #8]
 8002830:	681a      	ldr	r2, [r3, #0]
                break;
 8002832:	e7e1      	b.n	80027f8 <print_param+0x98>
    int32_t i_temp_buffer=0;
 8002834:	2200      	movs	r2, #0
 8002836:	e7df      	b.n	80027f8 <print_param+0x98>
                ret = snprintf(buffer, sizeof(buffer), "\t%s=%i\r\n", params[index].name,i_temp_buffer);
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	460b      	mov	r3, r1
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <print_param+0x11c>)
 800283e:	e7cc      	b.n	80027da <print_param+0x7a>
            f_temp_buffer = *(float*)params[index].value;
 8002840:	68a3      	ldr	r3, [r4, #8]
            ret = snprintf(buffer, sizeof(buffer), "\t%s=%f\r\n", params[index].name,f_temp_buffer);
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f7fd fdf0 	bl	8000428 <__aeabi_f2d>
 8002848:	e9cd 0100 	strd	r0, r1, [sp]
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <print_param+0x120>)
 800284e:	6863      	ldr	r3, [r4, #4]
 8002850:	2164      	movs	r1, #100	; 0x64
 8002852:	a805      	add	r0, sp, #20
 8002854:	f002 fbd0 	bl	8004ff8 <snprintf_>
 8002858:	e7ad      	b.n	80027b6 <print_param+0x56>
            ret = snprintf(buffer, sizeof(buffer), "\t%s=%c\r\n", params[index].name,*(char*)params[index].value);
 800285a:	68a3      	ldr	r3, [r4, #8]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <print_param+0x124>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	e7b9      	b.n	80027da <print_param+0x7a>
            ret = snprintf(buffer, sizeof(buffer), "\t%s=%s\r\n", params[index].name,(char*)params[index].value);
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <print_param+0x128>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	e7b4      	b.n	80027da <print_param+0x7a>
 8002870:	0800caa6 	.word	0x0800caa6
 8002874:	0800cab4 	.word	0x0800cab4
 8002878:	0800cabd 	.word	0x0800cabd
 800287c:	0800cacb 	.word	0x0800cacb
 8002880:	0800cad4 	.word	0x0800cad4
 8002884:	0800cadd 	.word	0x0800cadd
 8002888:	0800cae6 	.word	0x0800cae6

0800288c <EEPROM_write_conf>:
void EEPROM_write_conf(parameter_entry * params, uint8_t param_size, uint16_t eeprom_offset ,port_str *ptr){
 800288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    byte_cnt=0;
 8002890:	2500      	movs	r5, #0
void EEPROM_write_conf(parameter_entry * params, uint8_t param_size, uint16_t eeprom_offset ,port_str *ptr){
 8002892:	4614      	mov	r4, r2
 8002894:	b099      	sub	sp, #100	; 0x64
 8002896:	9305      	str	r3, [sp, #20]
    byte_cnt=0;
 8002898:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <EEPROM_write_conf+0x168>)
void EEPROM_write_conf(parameter_entry * params, uint8_t param_size, uint16_t eeprom_offset ,port_str *ptr){
 800289a:	460e      	mov	r6, r1
 800289c:	4683      	mov	fp, r0
        EEPROM_buffer_write(0x00, count,0);
 800289e:	4621      	mov	r1, r4
 80028a0:	462a      	mov	r2, r5
 80028a2:	4628      	mov	r0, r5
    byte_cnt=0;
 80028a4:	801d      	strh	r5, [r3, #0]
        EEPROM_buffer_write(0x00, count,0);
 80028a6:	f7ff fe01 	bl	80024ac <EEPROM_buffer_write>
		count++;
 80028aa:	1c61      	adds	r1, r4, #1
		EEPROM_buffer_write(0xC0, count,0);
 80028ac:	462a      	mov	r2, r5
 80028ae:	b289      	uxth	r1, r1
 80028b0:	20c0      	movs	r0, #192	; 0xc0
 80028b2:	f7ff fdfb 	bl	80024ac <EEPROM_buffer_write>
		count++;
 80028b6:	1ca1      	adds	r1, r4, #2
		EEPROM_buffer_write(0xFF, count,0);
 80028b8:	462a      	mov	r2, r5
 80028ba:	b289      	uxth	r1, r1
 80028bc:	20ff      	movs	r0, #255	; 0xff
 80028be:	f7ff fdf5 	bl	80024ac <EEPROM_buffer_write>
		count++;
 80028c2:	1ce1      	adds	r1, r4, #3
		EEPROM_buffer_write(0xEE, count,0);
 80028c4:	462a      	mov	r2, r5
 80028c6:	b289      	uxth	r1, r1
 80028c8:	20ee      	movs	r0, #238	; 0xee
 80028ca:	f7ff fdef 	bl	80024ac <EEPROM_buffer_write>
		count++;
 80028ce:	1d21      	adds	r1, r4, #4
		EEPROM_buffer_write(0x00, count,0);
 80028d0:	462a      	mov	r2, r5
 80028d2:	b289      	uxth	r1, r1
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff fde9 	bl	80024ac <EEPROM_buffer_write>
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	fb02 b306 	mla	r3, r2, r6, fp
	uint16_t change_count = 0;
 80028e0:	462e      	mov	r6, r5
		count++;
 80028e2:	3405      	adds	r4, #5
 80028e4:	b2a4      	uxth	r4, r4
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	1d27      	adds	r7, r4, #4
 80028ea:	b2bb      	uxth	r3, r7
 80028ec:	9303      	str	r3, [sp, #12]
		for (uint8_t  current_parameter = 0; current_parameter < param_size; current_parameter++) {
 80028ee:	9b04      	ldr	r3, [sp, #16]
 80028f0:	f104 0a01 	add.w	sl, r4, #1
 80028f4:	f104 0902 	add.w	r9, r4, #2
 80028f8:	f104 0803 	add.w	r8, r4, #3
 80028fc:	459b      	cmp	fp, r3
 80028fe:	fa1f fa8a 	uxth.w	sl, sl
 8002902:	fa1f f989 	uxth.w	r9, r9
 8002906:	fa1f f888 	uxth.w	r8, r8
 800290a:	d12a      	bne.n	8002962 <EEPROM_write_conf+0xd6>
		EEPROM_buffer_write(0xDE, count,0);
 800290c:	4621      	mov	r1, r4
 800290e:	2200      	movs	r2, #0
 8002910:	20de      	movs	r0, #222	; 0xde
 8002912:	f7ff fdcb 	bl	80024ac <EEPROM_buffer_write>
		EEPROM_buffer_write(0xAD, count,0);
 8002916:	4651      	mov	r1, sl
 8002918:	2200      	movs	r2, #0
 800291a:	20ad      	movs	r0, #173	; 0xad
 800291c:	f7ff fdc6 	bl	80024ac <EEPROM_buffer_write>
		EEPROM_buffer_write(0xBE, count,0);
 8002920:	4649      	mov	r1, r9
 8002922:	2200      	movs	r2, #0
 8002924:	20be      	movs	r0, #190	; 0xbe
 8002926:	f7ff fdc1 	bl	80024ac <EEPROM_buffer_write>
		EEPROM_buffer_write(0xEF, count,0);
 800292a:	4641      	mov	r1, r8
 800292c:	2200      	movs	r2, #0
 800292e:	20ef      	movs	r0, #239	; 0xef
 8002930:	f7ff fdbc 	bl	80024ac <EEPROM_buffer_write>
		EEPROM_buffer_write(0x00, count,1);
 8002934:	9903      	ldr	r1, [sp, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff fdb7 	bl	80024ac <EEPROM_buffer_write>
		ret = snprintf(buffer, sizeof(buffer),"%i / %i new config params written. %i bytes from 1024 used.\r\n", change_count, param_count, byte_cnt);
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <EEPROM_write_conf+0x168>)
 8002940:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <EEPROM_write_conf+0x16c>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	2146      	movs	r1, #70	; 0x46
 8002946:	e9cd 5300 	strd	r5, r3, [sp]
 800294a:	a806      	add	r0, sp, #24
 800294c:	4633      	mov	r3, r6
 800294e:	f002 fb53 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer, ret, ptr);
 8002952:	9a05      	ldr	r2, [sp, #20]
 8002954:	b281      	uxth	r1, r0
 8002956:	a806      	add	r0, sp, #24
 8002958:	f7ff fe4c 	bl	80025f4 <send_buffer>
}
 800295c:	b019      	add	sp, #100	; 0x64
 800295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if(params[current_parameter].parameter_type == PARAM_CONFIG){
 8002962:	f89b 2000 	ldrb.w	r2, [fp]
 8002966:	2a01      	cmp	r2, #1
 8002968:	d135      	bne.n	80029d6 <EEPROM_write_conf+0x14a>
                temp_hash=djb_hash(params[current_parameter].name);
 800296a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800296e:	f7ff fde9 	bl	8002544 <djb_hash>
 8002972:	4607      	mov	r7, r0
                EEPROM_buffer_write(temp_hash, count ,0);
 8002974:	4621      	mov	r1, r4
 8002976:	2200      	movs	r2, #0
 8002978:	b2c0      	uxtb	r0, r0
 800297a:	f7ff fd97 	bl	80024ac <EEPROM_buffer_write>
                EEPROM_buffer_write(temp_hash>>8,count,0);
 800297e:	2200      	movs	r2, #0
 8002980:	4651      	mov	r1, sl
 8002982:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8002986:	f7ff fd91 	bl	80024ac <EEPROM_buffer_write>
                EEPROM_buffer_write(temp_hash>>16,count,0);
 800298a:	2200      	movs	r2, #0
 800298c:	4649      	mov	r1, r9
 800298e:	f3c7 4007 	ubfx	r0, r7, #16, #8
 8002992:	f7ff fd8b 	bl	80024ac <EEPROM_buffer_write>
                EEPROM_buffer_write(temp_hash>>24,count,0);
 8002996:	4641      	mov	r1, r8
 8002998:	2200      	movs	r2, #0
 800299a:	0e38      	lsrs	r0, r7, #24
 800299c:	f7ff fd86 	bl	80024ac <EEPROM_buffer_write>
                EEPROM_buffer_write(params[current_parameter].size,count,0);
 80029a0:	2200      	movs	r2, #0
 80029a2:	9903      	ldr	r1, [sp, #12]
 80029a4:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80029a8:	f7ff fd80 	bl	80024ac <EEPROM_buffer_write>
                for(uint8_t i=0;i<params[current_parameter].size;i++){
 80029ac:	2200      	movs	r2, #0
                change_flag = 0;
 80029ae:	4617      	mov	r7, r2
                param_count++;
 80029b0:	3501      	adds	r5, #1
                count++;
 80029b2:	3405      	adds	r4, #5
                param_count++;
 80029b4:	b2ad      	uxth	r5, r5
                count++;
 80029b6:	fa1f f884 	uxth.w	r8, r4
                for(uint8_t i=0;i<params[current_parameter].size;i++){
 80029ba:	f89b 100c 	ldrb.w	r1, [fp, #12]
 80029be:	fa5f fc82 	uxtb.w	ip, r2
 80029c2:	eb08 0402 	add.w	r4, r8, r2
 80029c6:	4561      	cmp	r1, ip
 80029c8:	b2a4      	uxth	r4, r4
 80029ca:	f102 0901 	add.w	r9, r2, #1
 80029ce:	d805      	bhi.n	80029dc <EEPROM_write_conf+0x150>
                if (change_flag) {
 80029d0:	b10f      	cbz	r7, 80029d6 <EEPROM_write_conf+0x14a>
                    change_count++;
 80029d2:	3601      	adds	r6, #1
 80029d4:	b2b6      	uxth	r6, r6
 80029d6:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
 80029da:	e785      	b.n	80028e8 <EEPROM_write_conf+0x5c>
                    change_flag |= EEPROM_buffer_write(*(i+(uint8_t *)params[current_parameter].value), count,0);
 80029dc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	4621      	mov	r1, r4
 80029e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80029e8:	f7ff fd60 	bl	80024ac <EEPROM_buffer_write>
 80029ec:	4307      	orrs	r7, r0
 80029ee:	b2ff      	uxtb	r7, r7
 80029f0:	464a      	mov	r2, r9
 80029f2:	e7e2      	b.n	80029ba <EEPROM_write_conf+0x12e>
 80029f4:	200041b4 	.word	0x200041b4
 80029f8:	0800ca02 	.word	0x0800ca02

080029fc <EEPROM_read_conf>:
uint8_t EEPROM_read_conf(parameter_entry * params, uint8_t param_size, uint16_t eeprom_offset ,port_str *ptr){
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	4688      	mov	r8, r1
 8002a02:	4605      	mov	r5, r0
 8002a04:	461f      	mov	r7, r3
        for(int i=0;i<DATASET_BYTES;i++){
 8002a06:	2100      	movs	r1, #0
uint8_t EEPROM_read_conf(parameter_entry * params, uint8_t param_size, uint16_t eeprom_offset ,port_str *ptr){
 8002a08:	b099      	sub	sp, #100	; 0x64
            data[i] = EEPROM_READ_BYTE(addr);
 8002a0a:	ac07      	add	r4, sp, #28
 8002a0c:	1888      	adds	r0, r1, r2
 8002a0e:	b2c0      	uxtb	r0, r0
 8002a10:	f7ff fc20 	bl	8002254 <EEPROM_1_ReadByte>
 8002a14:	5460      	strb	r0, [r4, r1]
        for(int i=0;i<DATASET_BYTES;i++){
 8002a16:	3101      	adds	r1, #1
 8002a18:	2905      	cmp	r1, #5
 8002a1a:	d1f7      	bne.n	8002a0c <EEPROM_read_conf+0x10>
 8002a1c:	3205      	adds	r2, #5
 8002a1e:	b293      	uxth	r3, r2
 8002a20:	9303      	str	r3, [sp, #12]
        if(!(data[0]== 0x00 && data[1] == 0xC0 && data[2] == 0xFF && data[3] == 0xEE)) {
 8002a22:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002a26:	b963      	cbnz	r3, 8002a42 <EEPROM_read_conf+0x46>
 8002a28:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002a2c:	2ac0      	cmp	r2, #192	; 0xc0
 8002a2e:	d108      	bne.n	8002a42 <EEPROM_read_conf+0x46>
 8002a30:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8002a34:	2aff      	cmp	r2, #255	; 0xff
 8002a36:	d104      	bne.n	8002a42 <EEPROM_read_conf+0x46>
 8002a38:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8002a3c:	2aee      	cmp	r2, #238	; 0xee
 8002a3e:	f000 808c 	beq.w	8002b5a <EEPROM_read_conf+0x15e>
            SEND_CONST_STRING("WARNING: No or old EEPROM dataset found\r\n",ptr);
 8002a42:	4873      	ldr	r0, [pc, #460]	; (8002c10 <EEPROM_read_conf+0x214>)
 8002a44:	f002 fb8d 	bl	8005162 <ntlibc_strlen>
 8002a48:	463a      	mov	r2, r7
 8002a4a:	b281      	uxth	r1, r0
 8002a4c:	4870      	ldr	r0, [pc, #448]	; (8002c10 <EEPROM_read_conf+0x214>)
 8002a4e:	f7ff fdd1 	bl	80025f4 <send_buffer>
            return pdFAIL;
 8002a52:	2000      	movs	r0, #0
}
 8002a54:	b019      	add	sp, #100	; 0x64
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if(data[0]== 0xDE && data[1] == 0xAD && data[2] == 0xBE && data[3] == 0xEF) break;
 8002a5a:	f1bb 0fbe 	cmp.w	fp, #190	; 0xbe
 8002a5e:	d162      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002a60:	2bef      	cmp	r3, #239	; 0xef
 8002a62:	d160      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002a64:	2324      	movs	r3, #36	; 0x24
            addr = DATASET_BYTES + eeprom_offset; //Skip header
 8002a66:	2400      	movs	r4, #0
 8002a68:	3504      	adds	r5, #4
 8002a6a:	fb03 5308 	mla	r3, r3, r8, r5
 8002a6e:	9305      	str	r3, [sp, #20]
    for (uint8_t current_parameter = 0; current_parameter < param_size; current_parameter++) {
 8002a70:	9b05      	ldr	r3, [sp, #20]
 8002a72:	42ab      	cmp	r3, r5
 8002a74:	d174      	bne.n	8002b60 <EEPROM_read_conf+0x164>
    ret = snprintf(buffer, sizeof(buffer), "%i / %i config params loaded\r\n", change_count, param_count);
 8002a76:	464b      	mov	r3, r9
 8002a78:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <EEPROM_read_conf+0x218>)
 8002a7a:	213c      	movs	r1, #60	; 0x3c
 8002a7c:	9400      	str	r4, [sp, #0]
 8002a7e:	a809      	add	r0, sp, #36	; 0x24
 8002a80:	f002 faba 	bl	8004ff8 <snprintf_>
    send_buffer((uint8_t*)buffer, ret, ptr);
 8002a84:	463a      	mov	r2, r7
 8002a86:	b281      	uxth	r1, r0
 8002a88:	a809      	add	r0, sp, #36	; 0x24
 8002a8a:	f7ff fdb3 	bl	80025f4 <send_buffer>
    return pdPASS;
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7e0      	b.n	8002a54 <EEPROM_read_conf+0x58>
            if(params[current_parameter].parameter_type==PARAM_CONFIG){
 8002a92:	7830      	ldrb	r0, [r6, #0]
 8002a94:	2801      	cmp	r0, #1
 8002a96:	d15d      	bne.n	8002b54 <EEPROM_read_conf+0x158>
                temp_hash=djb_hash(params[current_parameter].name);
 8002a98:	6870      	ldr	r0, [r6, #4]
 8002a9a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002a9e:	f7ff fd51 	bl	8002544 <djb_hash>
                if((uint8_t)temp_hash == data[0] && (uint8_t)(temp_hash>>8) == data[1]&& (uint8_t)(temp_hash>>16) == data[2]&& (uint8_t)(temp_hash>>24) == data[3]){
 8002aa2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8002aa6:	fa5f fc80 	uxtb.w	ip, r0
 8002aaa:	45e2      	cmp	sl, ip
 8002aac:	d152      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002aae:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8002ab2:	4594      	cmp	ip, r2
 8002ab4:	d14e      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002ab6:	f3c0 4c07 	ubfx	ip, r0, #16, #8
 8002aba:	45e3      	cmp	fp, ip
 8002abc:	d14a      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002abe:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
 8002ac2:	d147      	bne.n	8002b54 <EEPROM_read_conf+0x158>
            addr++;
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	e007      	b.n	8002ad8 <EEPROM_read_conf+0xdc>
                        *(i+(uint8_t * )params[current_parameter].value) = EEPROM_READ_BYTE(addr);
 8002ac8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8002acc:	f7ff fbc2 	bl	8002254 <EEPROM_1_ReadByte>
                        addr++;
 8002ad0:	3401      	adds	r4, #1
                        *(i+(uint8_t * )params[current_parameter].value) = EEPROM_READ_BYTE(addr);
 8002ad2:	f80a 0002 	strb.w	r0, [sl, r2]
                        addr++;
 8002ad6:	b2a4      	uxth	r4, r4
 8002ad8:	b2e0      	uxtb	r0, r4
 8002ada:	1a42      	subs	r2, r0, r1
                    for(uint8_t i=0;i<data[4];i++){
 8002adc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d8f0      	bhi.n	8002ac8 <EEPROM_read_conf+0xcc>
                    change_count++;
 8002ae6:	f109 0301 	add.w	r3, r9, #1
 8002aea:	fa1f f983 	uxth.w	r9, r3
    while(addr<CY_EEPROM_SIZE){
 8002aee:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002af2:	d2b7      	bcs.n	8002a64 <EEPROM_read_conf+0x68>
        for(int i=0;i<DATASET_BYTES;i++){
 8002af4:	2200      	movs	r2, #0
            data[i] = EEPROM_READ_BYTE(addr);
 8002af6:	18a0      	adds	r0, r4, r2
 8002af8:	b2c0      	uxtb	r0, r0
 8002afa:	f7ff fbab 	bl	8002254 <EEPROM_1_ReadByte>
 8002afe:	ab07      	add	r3, sp, #28
 8002b00:	5498      	strb	r0, [r3, r2]
        for(int i=0;i<DATASET_BYTES;i++){
 8002b02:	3201      	adds	r2, #1
 8002b04:	2a05      	cmp	r2, #5
 8002b06:	d1f6      	bne.n	8002af6 <EEPROM_read_conf+0xfa>
        if(data[0]== 0xDE && data[1] == 0xAD && data[2] == 0xBE && data[3] == 0xEF) break;
 8002b08:	f89d a01c 	ldrb.w	sl, [sp, #28]
 8002b0c:	3405      	adds	r4, #5
 8002b0e:	f1ba 0fde 	cmp.w	sl, #222	; 0xde
 8002b12:	b2a1      	uxth	r1, r4
 8002b14:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002b18:	f89d b01e 	ldrb.w	fp, [sp, #30]
 8002b1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002b20:	d101      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002b22:	2aad      	cmp	r2, #173	; 0xad
 8002b24:	d099      	beq.n	8002a5a <EEPROM_read_conf+0x5e>
 8002b26:	462e      	mov	r6, r5
            addr++;
 8002b28:	2400      	movs	r4, #0
        for ( current_parameter = 0; current_parameter < param_size; current_parameter++) {
 8002b2a:	45a0      	cmp	r8, r4
 8002b2c:	b2e0      	uxtb	r0, r4
 8002b2e:	d1b0      	bne.n	8002a92 <EEPROM_read_conf+0x96>
        if(!change_flag) addr+=data[4];
 8002b30:	f89d 4020 	ldrb.w	r4, [sp, #32]
        if(current_parameter == param_size){
 8002b34:	4540      	cmp	r0, r8
        if(!change_flag) addr+=data[4];
 8002b36:	440c      	add	r4, r1
 8002b38:	b2a4      	uxth	r4, r4
        if(current_parameter == param_size){
 8002b3a:	d1d8      	bne.n	8002aee <EEPROM_read_conf+0xf2>
            ret = snprintf(buffer, sizeof(buffer), "WARNING: Unknown param ID %i found in EEPROM\r\n", data[0]);
 8002b3c:	4653      	mov	r3, sl
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <EEPROM_read_conf+0x21c>)
 8002b40:	213c      	movs	r1, #60	; 0x3c
 8002b42:	a809      	add	r0, sp, #36	; 0x24
 8002b44:	f002 fa58 	bl	8004ff8 <snprintf_>
            send_buffer((uint8_t*)buffer, ret, ptr);
 8002b48:	463a      	mov	r2, r7
 8002b4a:	b281      	uxth	r1, r0
 8002b4c:	a809      	add	r0, sp, #36	; 0x24
 8002b4e:	f7ff fd51 	bl	80025f4 <send_buffer>
 8002b52:	e7cc      	b.n	8002aee <EEPROM_read_conf+0xf2>
 8002b54:	3401      	adds	r4, #1
 8002b56:	3624      	adds	r6, #36	; 0x24
 8002b58:	e7e7      	b.n	8002b2a <EEPROM_read_conf+0x12e>
            addr++;
 8002b5a:	9c03      	ldr	r4, [sp, #12]
    uint16_t change_count=0;
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	e7c6      	b.n	8002aee <EEPROM_read_conf+0xf2>
        if(params[current_parameter].parameter_type==PARAM_CONFIG){
 8002b60:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13f      	bne.n	8002be8 <EEPROM_read_conf+0x1ec>
            temp_hash=djb_hash(params[current_parameter].name);
 8002b68:	6828      	ldr	r0, [r5, #0]
 8002b6a:	f7ff fceb 	bl	8002544 <djb_hash>
            found_param=0;
 8002b6e:	f04f 0800 	mov.w	r8, #0
            param_count++;
 8002b72:	3401      	adds	r4, #1
                if((uint8_t)temp_hash == data[0] && (uint8_t)(temp_hash>>8) == data[1]&& (uint8_t)(temp_hash>>16) == data[2]&& (uint8_t)(temp_hash>>24) == data[3]){
 8002b74:	f3c0 2307 	ubfx	r3, r0, #8, #8
            addr = DATASET_BYTES + eeprom_offset; //Skip header
 8002b78:	9e03      	ldr	r6, [sp, #12]
            param_count++;
 8002b7a:	b2a4      	uxth	r4, r4
                if((uint8_t)temp_hash == data[0] && (uint8_t)(temp_hash>>8) == data[1]&& (uint8_t)(temp_hash>>16) == data[2]&& (uint8_t)(temp_hash>>24) == data[3]){
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 8002b82:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8002b86:	b2c2      	uxtb	r2, r0
            while(addr<CY_EEPROM_SIZE){
 8002b88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002b8c:	d21e      	bcs.n	8002bcc <EEPROM_read_conf+0x1d0>
                for(int i=0;i<DATASET_BYTES;i++){
 8002b8e:	2100      	movs	r1, #0
                    data[i] = EEPROM_READ_BYTE(addr);
 8002b90:	1988      	adds	r0, r1, r6
 8002b92:	b2c0      	uxtb	r0, r0
 8002b94:	f7ff fb5e 	bl	8002254 <EEPROM_1_ReadByte>
 8002b98:	ab07      	add	r3, sp, #28
 8002b9a:	5458      	strb	r0, [r3, r1]
                for(int i=0;i<DATASET_BYTES;i++){
 8002b9c:	3101      	adds	r1, #1
 8002b9e:	2905      	cmp	r1, #5
 8002ba0:	d1f6      	bne.n	8002b90 <EEPROM_read_conf+0x194>
                    addr += data[4];
 8002ba2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002ba6:	3305      	adds	r3, #5
 8002ba8:	441e      	add	r6, r3
                if(data[0] == 0xDE && data[1] == 0xAD && data[2] == 0xBE && data[3] == 0xEF) break;
 8002baa:	f89d 301c 	ldrb.w	r3, [sp, #28]
                    addr += data[4];
 8002bae:	b2b6      	uxth	r6, r6
                if(data[0] == 0xDE && data[1] == 0xAD && data[2] == 0xBE && data[3] == 0xEF) break;
 8002bb0:	2bde      	cmp	r3, #222	; 0xde
 8002bb2:	d11b      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bb4:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8002bb8:	29ad      	cmp	r1, #173	; 0xad
 8002bba:	d117      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bbc:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8002bc0:	29be      	cmp	r1, #190	; 0xbe
 8002bc2:	d113      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bc4:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8002bc8:	29ef      	cmp	r1, #239	; 0xef
 8002bca:	d10f      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
            if(!found_param){
 8002bcc:	f1b8 0f00 	cmp.w	r8, #0
 8002bd0:	d10a      	bne.n	8002be8 <EEPROM_read_conf+0x1ec>
                ret = snprintf(buffer, sizeof(buffer), "WARNING: Param [%s] not found in EEPROM\r\n",params[current_parameter].name);
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <EEPROM_read_conf+0x220>)
 8002bd4:	213c      	movs	r1, #60	; 0x3c
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	a809      	add	r0, sp, #36	; 0x24
 8002bda:	f002 fa0d 	bl	8004ff8 <snprintf_>
                send_buffer((uint8_t*)buffer, ret, ptr);
 8002bde:	463a      	mov	r2, r7
 8002be0:	b281      	uxth	r1, r0
 8002be2:	a809      	add	r0, sp, #36	; 0x24
 8002be4:	f7ff fd06 	bl	80025f4 <send_buffer>
 8002be8:	3524      	adds	r5, #36	; 0x24
 8002bea:	e741      	b.n	8002a70 <EEPROM_read_conf+0x74>
                if((uint8_t)temp_hash == data[0] && (uint8_t)(temp_hash>>8) == data[1]&& (uint8_t)(temp_hash>>16) == data[2]&& (uint8_t)(temp_hash>>24) == data[3]){
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d1cb      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002bf0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002bf4:	9904      	ldr	r1, [sp, #16]
 8002bf6:	428b      	cmp	r3, r1
 8002bf8:	d1c6      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002bfa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002bfe:	4553      	cmp	r3, sl
 8002c00:	d1c2      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002c02:	f89d 301f 	ldrb.w	r3, [sp, #31]
                        found_param = 1;
 8002c06:	455b      	cmp	r3, fp
 8002c08:	bf08      	it	eq
 8002c0a:	f04f 0801 	moveq.w	r8, #1
 8002c0e:	e7bb      	b.n	8002b88 <EEPROM_read_conf+0x18c>
 8002c10:	0800c960 	.word	0x0800c960
 8002c14:	0800c9e3 	.word	0x0800c9e3
 8002c18:	0800c98a 	.word	0x0800c98a
 8002c1c:	0800c9b9 	.word	0x0800c9b9

08002c20 <Term_Erase_Screen>:
void Term_Erase_Screen(port_str *ptr) {
 8002c20:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[2J\033[1;1H", ptr);
 8002c22:	4c06      	ldr	r4, [pc, #24]	; (8002c3c <Term_Erase_Screen+0x1c>)
void Term_Erase_Screen(port_str *ptr) {
 8002c24:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[2J\033[1;1H", ptr);
 8002c26:	4620      	mov	r0, r4
 8002c28:	f002 fa9b 	bl	8005162 <ntlibc_strlen>
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	b281      	uxth	r1, r0
 8002c30:	4620      	mov	r0, r4
}
 8002c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[2J\033[1;1H", ptr);
 8002c36:	f7ff bcdd 	b.w	80025f4 <send_buffer>
 8002c3a:	bf00      	nop
 8002c3c:	0800ca84 	.word	0x0800ca84

08002c40 <Term_Color_Green>:
void Term_Color_Green(port_str *ptr) {
 8002c40:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[32m", ptr);
 8002c42:	4c06      	ldr	r4, [pc, #24]	; (8002c5c <Term_Color_Green+0x1c>)
void Term_Color_Green(port_str *ptr) {
 8002c44:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[32m", ptr);
 8002c46:	4620      	mov	r0, r4
 8002c48:	f002 fa8b 	bl	8005162 <ntlibc_strlen>
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	b281      	uxth	r1, r0
 8002c50:	4620      	mov	r0, r4
}
 8002c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[32m", ptr);
 8002c56:	f7ff bccd 	b.w	80025f4 <send_buffer>
 8002c5a:	bf00      	nop
 8002c5c:	0800ca64 	.word	0x0800ca64

08002c60 <Term_Color_Red>:
void Term_Color_Red(port_str *ptr) {
 8002c60:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[31m", ptr);
 8002c62:	4c06      	ldr	r4, [pc, #24]	; (8002c7c <Term_Color_Red+0x1c>)
void Term_Color_Red(port_str *ptr) {
 8002c64:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[31m", ptr);
 8002c66:	4620      	mov	r0, r4
 8002c68:	f002 fa7b 	bl	8005162 <ntlibc_strlen>
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	b281      	uxth	r1, r0
 8002c70:	4620      	mov	r0, r4
}
 8002c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[31m", ptr);
 8002c76:	f7ff bcbd 	b.w	80025f4 <send_buffer>
 8002c7a:	bf00      	nop
 8002c7c:	0800ca6a 	.word	0x0800ca6a

08002c80 <Term_Color_White>:
void Term_Color_White(port_str *ptr) {
 8002c80:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[37m", ptr);
 8002c82:	4c06      	ldr	r4, [pc, #24]	; (8002c9c <Term_Color_White+0x1c>)
void Term_Color_White(port_str *ptr) {
 8002c84:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[37m", ptr);
 8002c86:	4620      	mov	r0, r4
 8002c88:	f002 fa6b 	bl	8005162 <ntlibc_strlen>
 8002c8c:	462a      	mov	r2, r5
 8002c8e:	b281      	uxth	r1, r0
 8002c90:	4620      	mov	r0, r4
}
 8002c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[37m", ptr);
 8002c96:	f7ff bcad 	b.w	80025f4 <send_buffer>
 8002c9a:	bf00      	nop
 8002c9c:	0800ca70 	.word	0x0800ca70

08002ca0 <Term_Color_Cyan>:
void Term_Color_Cyan(port_str *ptr) {
 8002ca0:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[36m", ptr);
 8002ca2:	4c06      	ldr	r4, [pc, #24]	; (8002cbc <Term_Color_Cyan+0x1c>)
void Term_Color_Cyan(port_str *ptr) {
 8002ca4:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[36m", ptr);
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f002 fa5b 	bl	8005162 <ntlibc_strlen>
 8002cac:	462a      	mov	r2, r5
 8002cae:	b281      	uxth	r1, r0
 8002cb0:	4620      	mov	r0, r4
}
 8002cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[36m", ptr);
 8002cb6:	f7ff bc9d 	b.w	80025f4 <send_buffer>
 8002cba:	bf00      	nop
 8002cbc:	0800ca5e 	.word	0x0800ca5e

08002cc0 <Term_BGColor_Blue>:
void Term_BGColor_Blue(port_str *ptr) {
 8002cc0:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[44m", ptr);
 8002cc2:	4c06      	ldr	r4, [pc, #24]	; (8002cdc <Term_BGColor_Blue+0x1c>)
void Term_BGColor_Blue(port_str *ptr) {
 8002cc4:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[44m", ptr);
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f002 fa4b 	bl	8005162 <ntlibc_strlen>
 8002ccc:	462a      	mov	r2, r5
 8002cce:	b281      	uxth	r1, r0
 8002cd0:	4620      	mov	r0, r4
}
 8002cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[44m", ptr);
 8002cd6:	f7ff bc8d 	b.w	80025f4 <send_buffer>
 8002cda:	bf00      	nop
 8002cdc:	0800ca40 	.word	0x0800ca40

08002ce0 <Term_Move_cursor_right>:
void Term_Move_cursor_right(uint8_t column, port_str *ptr) {
 8002ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ret = snprintf(buffer, sizeof(buffer), "\033[%i`", column);
 8002ce2:	4603      	mov	r3, r0
void Term_Move_cursor_right(uint8_t column, port_str *ptr) {
 8002ce4:	460c      	mov	r4, r1
	ret = snprintf(buffer, sizeof(buffer), "\033[%i`", column);
 8002ce6:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <Term_Move_cursor_right+0x20>)
 8002ce8:	210a      	movs	r1, #10
 8002cea:	a801      	add	r0, sp, #4
 8002cec:	f002 f984 	bl	8004ff8 <snprintf_>
	send_buffer((uint8_t*)buffer, ret, ptr);
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	b281      	uxth	r1, r0
 8002cf4:	a801      	add	r0, sp, #4
 8002cf6:	f7ff fc7d 	bl	80025f4 <send_buffer>
}
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800ca98 	.word	0x0800ca98

08002d04 <print_param_helperfunc>:
void print_param_helperfunc(parameter_entry * params, uint8_t param_size, port_str *ptr, uint8_t param_type){
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	b09d      	sub	sp, #116	; 0x74
 8002d0c:	4689      	mov	r9, r1
    Term_Move_cursor_right(COL_A,ptr);
 8002d0e:	2009      	movs	r0, #9
 8002d10:	4611      	mov	r1, r2
void print_param_helperfunc(parameter_entry * params, uint8_t param_size, port_str *ptr, uint8_t param_type){
 8002d12:	4698      	mov	r8, r3
 8002d14:	4615      	mov	r5, r2
    Term_Move_cursor_right(COL_A,ptr);
 8002d16:	f7ff ffe3 	bl	8002ce0 <Term_Move_cursor_right>
    SEND_CONST_STRING("Parameter", ptr);
 8002d1a:	486b      	ldr	r0, [pc, #428]	; (8002ec8 <print_param_helperfunc+0x1c4>)
 8002d1c:	f002 fa21 	bl	8005162 <ntlibc_strlen>
 8002d20:	462a      	mov	r2, r5
 8002d22:	b281      	uxth	r1, r0
 8002d24:	4868      	ldr	r0, [pc, #416]	; (8002ec8 <print_param_helperfunc+0x1c4>)
 8002d26:	f7ff fc65 	bl	80025f4 <send_buffer>
    Term_Move_cursor_right(COL_B,ptr);
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	2021      	movs	r0, #33	; 0x21
 8002d2e:	f7ff ffd7 	bl	8002ce0 <Term_Move_cursor_right>
    SEND_CONST_STRING("| Value", ptr);
 8002d32:	4866      	ldr	r0, [pc, #408]	; (8002ecc <print_param_helperfunc+0x1c8>)
 8002d34:	f002 fa15 	bl	8005162 <ntlibc_strlen>
 8002d38:	462a      	mov	r2, r5
 8002d3a:	b281      	uxth	r1, r0
 8002d3c:	4863      	ldr	r0, [pc, #396]	; (8002ecc <print_param_helperfunc+0x1c8>)
 8002d3e:	f7ff fc59 	bl	80025f4 <send_buffer>
    Term_Move_cursor_right(COL_C,ptr);
 8002d42:	4629      	mov	r1, r5
 8002d44:	2040      	movs	r0, #64	; 0x40
 8002d46:	f7ff ffcb 	bl	8002ce0 <Term_Move_cursor_right>
    SEND_CONST_STRING("| Text\r\n", ptr);
 8002d4a:	4861      	ldr	r0, [pc, #388]	; (8002ed0 <print_param_helperfunc+0x1cc>)
 8002d4c:	f002 fa09 	bl	8005162 <ntlibc_strlen>
    int32_t i_temp_buffer=0;
 8002d50:	2600      	movs	r6, #0
    SEND_CONST_STRING("| Text\r\n", ptr);
 8002d52:	b281      	uxth	r1, r0
 8002d54:	462a      	mov	r2, r5
 8002d56:	485e      	ldr	r0, [pc, #376]	; (8002ed0 <print_param_helperfunc+0x1cc>)
 8002d58:	f7ff fc4c 	bl	80025f4 <send_buffer>
 8002d5c:	2324      	movs	r3, #36	; 0x24
    uint32_t u_temp_buffer=0;
 8002d5e:	4637      	mov	r7, r6
 8002d60:	fb03 4909 	mla	r9, r3, r9, r4
			ret = snprintf(buffer, sizeof(buffer), "\033[37m| %s\r\n", params[current_parameter].help);
 8002d64:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002ef0 <print_param_helperfunc+0x1ec>
				ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%s", (char*)params[current_parameter].value);
 8002d68:	f8df b188 	ldr.w	fp, [pc, #392]	; 8002ef4 <print_param_helperfunc+0x1f0>
    for (current_parameter = 0; current_parameter < param_size; current_parameter++) {
 8002d6c:	454c      	cmp	r4, r9
 8002d6e:	d102      	bne.n	8002d76 <print_param_helperfunc+0x72>
}
 8002d70:	b01d      	add	sp, #116	; 0x74
 8002d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    	if(params[current_parameter].parameter_type==param_type){
 8002d76:	7823      	ldrb	r3, [r4, #0]
 8002d78:	4543      	cmp	r3, r8
 8002d7a:	d149      	bne.n	8002e10 <print_param_helperfunc+0x10c>
			Term_Move_cursor_right(COL_A,ptr);
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	2009      	movs	r0, #9
 8002d80:	f7ff ffae 	bl	8002ce0 <Term_Move_cursor_right>
			ret = snprintf(buffer,sizeof(buffer), "\033[36m%s", params[current_parameter].name);
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <print_param_helperfunc+0x1d0>)
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	a803      	add	r0, sp, #12
 8002d8c:	f002 f934 	bl	8004ff8 <snprintf_>
			send_buffer((uint8_t*)buffer,ret,ptr);
 8002d90:	462a      	mov	r2, r5
 8002d92:	b281      	uxth	r1, r0
 8002d94:	a803      	add	r0, sp, #12
 8002d96:	f7ff fc2d 	bl	80025f4 <send_buffer>
			switch (params[current_parameter].type){
 8002d9a:	7b63      	ldrb	r3, [r4, #13]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d828      	bhi.n	8002df2 <print_param_helperfunc+0xee>
 8002da0:	e8df f003 	tbb	[pc, r3]
 8002da4:	83734503 	.word	0x83734503
 8002da8:	8b          	.byte	0x8b
 8002da9:	00          	.byte	0x00
				switch (params[current_parameter].size){
 8002daa:	7b23      	ldrb	r3, [r4, #12]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d031      	beq.n	8002e14 <print_param_helperfunc+0x110>
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d032      	beq.n	8002e1a <print_param_helperfunc+0x116>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <print_param_helperfunc+0xb8>
					u_temp_buffer = *(uint8_t*)params[current_parameter].value;
 8002db8:	68a3      	ldr	r3, [r4, #8]
 8002dba:	781f      	ldrb	r7, [r3, #0]
				Term_Move_cursor_right(COL_B,ptr);
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	2021      	movs	r0, #33	; 0x21
 8002dc0:	f7ff ff8e 	bl	8002ce0 <Term_Move_cursor_right>
				if(params[current_parameter].div){
 8002dc4:	8b22      	ldrh	r2, [r4, #24]
 8002dc6:	b35a      	cbz	r2, 8002e20 <print_param_helperfunc+0x11c>
						n_number(params[current_parameter].div)-1,
 8002dc8:	4610      	mov	r0, r2
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%u.%0*u",
 8002dca:	fbb7 f1f2 	udiv	r1, r7, r2
						n_number(params[current_parameter].div)-1,
 8002dce:	f7ff fa61 	bl	8002294 <n_number>
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%u.%0*u",
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	fb02 7211 	mls	r2, r2, r1, r7
 8002dd8:	3801      	subs	r0, #1
 8002dda:	9201      	str	r2, [sp, #4]
 8002ddc:	4a3e      	ldr	r2, [pc, #248]	; (8002ed8 <print_param_helperfunc+0x1d4>)
 8002dde:	9000      	str	r0, [sp, #0]
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%i.%0*u",
 8002de0:	2164      	movs	r1, #100	; 0x64
 8002de2:	a803      	add	r0, sp, #12
 8002de4:	f002 f908 	bl	8004ff8 <snprintf_>
				send_buffer((uint8_t*)buffer,ret,ptr);
 8002de8:	b281      	uxth	r1, r0
 8002dea:	462a      	mov	r2, r5
 8002dec:	a803      	add	r0, sp, #12
 8002dee:	f7ff fc01 	bl	80025f4 <send_buffer>
			Term_Move_cursor_right(COL_C,ptr);
 8002df2:	4629      	mov	r1, r5
 8002df4:	2040      	movs	r0, #64	; 0x40
 8002df6:	f7ff ff73 	bl	8002ce0 <Term_Move_cursor_right>
			ret = snprintf(buffer, sizeof(buffer), "\033[37m| %s\r\n", params[current_parameter].help);
 8002dfa:	4652      	mov	r2, sl
 8002dfc:	2164      	movs	r1, #100	; 0x64
 8002dfe:	6a23      	ldr	r3, [r4, #32]
 8002e00:	a803      	add	r0, sp, #12
 8002e02:	f002 f8f9 	bl	8004ff8 <snprintf_>
			send_buffer((uint8_t*)buffer,ret,ptr);
 8002e06:	462a      	mov	r2, r5
 8002e08:	b281      	uxth	r1, r0
 8002e0a:	a803      	add	r0, sp, #12
 8002e0c:	f7ff fbf2 	bl	80025f4 <send_buffer>
 8002e10:	3424      	adds	r4, #36	; 0x24
 8002e12:	e7ab      	b.n	8002d6c <print_param_helperfunc+0x68>
					u_temp_buffer = *(uint16_t*)params[current_parameter].value;
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	881f      	ldrh	r7, [r3, #0]
					break;
 8002e18:	e7d0      	b.n	8002dbc <print_param_helperfunc+0xb8>
					u_temp_buffer = *(uint32_t*)params[current_parameter].value;
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	681f      	ldr	r7, [r3, #0]
					break;
 8002e1e:	e7cd      	b.n	8002dbc <print_param_helperfunc+0xb8>
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%u", u_temp_buffer);
 8002e20:	463b      	mov	r3, r7
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <print_param_helperfunc+0x1d8>)
				ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%s", (char*)params[current_parameter].value);
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	a803      	add	r0, sp, #12
 8002e28:	f002 f8e6 	bl	8004ff8 <snprintf_>
 8002e2c:	e7dc      	b.n	8002de8 <print_param_helperfunc+0xe4>
				switch (params[current_parameter].size){
 8002e2e:	7b23      	ldrb	r3, [r4, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d020      	beq.n	8002e76 <print_param_helperfunc+0x172>
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d022      	beq.n	8002e7e <print_param_helperfunc+0x17a>
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <print_param_helperfunc+0x13e>
					i_temp_buffer = *(int8_t*)params[current_parameter].value;
 8002e3c:	68a3      	ldr	r3, [r4, #8]
 8002e3e:	f993 6000 	ldrsb.w	r6, [r3]
				Term_Move_cursor_right(COL_B,ptr);
 8002e42:	2021      	movs	r0, #33	; 0x21
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7ff ff4b 	bl	8002ce0 <Term_Move_cursor_right>
				if(params[current_parameter].div){
 8002e4a:	8b20      	ldrh	r0, [r4, #24]
 8002e4c:	b1d0      	cbz	r0, 8002e84 <print_param_helperfunc+0x180>
					if(i_temp_buffer<0){
 8002e4e:	2e00      	cmp	r6, #0
						mod=(i_temp_buffer*-1)%params[current_parameter].div;
 8002e50:	bfbc      	itt	lt
 8002e52:	4273      	neglt	r3, r6
 8002e54:	fb93 f2f0 	sdivlt	r2, r3, r0
 8002e58:	fb96 f1f0 	sdiv	r1, r6, r0
 8002e5c:	bfb4      	ite	lt
 8002e5e:	fb00 3212 	mlslt	r2, r0, r2, r3
						mod=i_temp_buffer%params[current_parameter].div;
 8002e62:	fb00 6211 	mlsge	r2, r0, r1, r6
					n_number(params[current_parameter].div)-1,
 8002e66:	f7ff fa15 	bl	8002294 <n_number>
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%i.%0*u",
 8002e6a:	3801      	subs	r0, #1
 8002e6c:	9201      	str	r2, [sp, #4]
 8002e6e:	9000      	str	r0, [sp, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <print_param_helperfunc+0x1dc>)
 8002e74:	e7b4      	b.n	8002de0 <print_param_helperfunc+0xdc>
					i_temp_buffer = *(int16_t*)params[current_parameter].value;
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	f9b3 6000 	ldrsh.w	r6, [r3]
					break;
 8002e7c:	e7e1      	b.n	8002e42 <print_param_helperfunc+0x13e>
					i_temp_buffer = *(int32_t*)params[current_parameter].value;
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	681e      	ldr	r6, [r3, #0]
					break;
 8002e82:	e7de      	b.n	8002e42 <print_param_helperfunc+0x13e>
					ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%i", i_temp_buffer);
 8002e84:	4633      	mov	r3, r6
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <print_param_helperfunc+0x1e0>)
 8002e88:	e7cc      	b.n	8002e24 <print_param_helperfunc+0x120>
				Term_Move_cursor_right(COL_B,ptr);
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	2021      	movs	r0, #33	; 0x21
 8002e8e:	f7ff ff27 	bl	8002ce0 <Term_Move_cursor_right>
				ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%f", *(float*)params[current_parameter].value);
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f7fd fac7 	bl	8000428 <__aeabi_f2d>
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <print_param_helperfunc+0x1e4>)
 8002e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	a803      	add	r0, sp, #12
 8002ea4:	f002 f8a8 	bl	8004ff8 <snprintf_>
 8002ea8:	e79e      	b.n	8002de8 <print_param_helperfunc+0xe4>
				Term_Move_cursor_right(COL_B,ptr);
 8002eaa:	4629      	mov	r1, r5
 8002eac:	2021      	movs	r0, #33	; 0x21
 8002eae:	f7ff ff17 	bl	8002ce0 <Term_Move_cursor_right>
				ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%c", *(char*)params[current_parameter].value);
 8002eb2:	68a3      	ldr	r3, [r4, #8]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <print_param_helperfunc+0x1e8>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	e7b4      	b.n	8002e24 <print_param_helperfunc+0x120>
				Term_Move_cursor_right(COL_B,ptr);
 8002eba:	4629      	mov	r1, r5
 8002ebc:	2021      	movs	r0, #33	; 0x21
 8002ebe:	f7ff ff0f 	bl	8002ce0 <Term_Move_cursor_right>
				ret = snprintf(buffer, sizeof(buffer), "\033[37m| \033[32m%s", (char*)params[current_parameter].value);
 8002ec2:	68a3      	ldr	r3, [r4, #8]
 8002ec4:	465a      	mov	r2, fp
 8002ec6:	e7ad      	b.n	8002e24 <print_param_helperfunc+0x120>
 8002ec8:	0800cb9d 	.word	0x0800cb9d
 8002ecc:	0800cba7 	.word	0x0800cba7
 8002ed0:	0800cbaf 	.word	0x0800cbaf
 8002ed4:	0800cbb8 	.word	0x0800cbb8
 8002ed8:	0800cbc0 	.word	0x0800cbc0
 8002edc:	0800cbd4 	.word	0x0800cbd4
 8002ee0:	0800cbe3 	.word	0x0800cbe3
 8002ee4:	0800cbf7 	.word	0x0800cbf7
 8002ee8:	0800cc06 	.word	0x0800cc06
 8002eec:	0800cc15 	.word	0x0800cc15
 8002ef0:	0800cc33 	.word	0x0800cc33
 8002ef4:	0800cc24 	.word	0x0800cc24

08002ef8 <print_param_help>:
void print_param_help(parameter_entry * params, uint8_t param_size, port_str *ptr){
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    SEND_CONST_STRING("Parameters:\r\n", ptr);
 8002efc:	4f11      	ldr	r7, [pc, #68]	; (8002f44 <print_param_help+0x4c>)
void print_param_help(parameter_entry * params, uint8_t param_size, port_str *ptr){
 8002efe:	4605      	mov	r5, r0
    SEND_CONST_STRING("Parameters:\r\n", ptr);
 8002f00:	4638      	mov	r0, r7
void print_param_help(parameter_entry * params, uint8_t param_size, port_str *ptr){
 8002f02:	4614      	mov	r4, r2
 8002f04:	460e      	mov	r6, r1
    SEND_CONST_STRING("Parameters:\r\n", ptr);
 8002f06:	f002 f92c 	bl	8005162 <ntlibc_strlen>
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	b281      	uxth	r1, r0
 8002f0e:	4638      	mov	r0, r7
    SEND_CONST_STRING("\r\nConfiguration:\r\n", ptr);
 8002f10:	4f0d      	ldr	r7, [pc, #52]	; (8002f48 <print_param_help+0x50>)
    SEND_CONST_STRING("Parameters:\r\n", ptr);
 8002f12:	f7ff fb6f 	bl	80025f4 <send_buffer>
    print_param_helperfunc(params, param_size, ptr,PARAM_DEFAULT);
 8002f16:	2300      	movs	r3, #0
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f7ff fef1 	bl	8002d04 <print_param_helperfunc>
    SEND_CONST_STRING("\r\nConfiguration:\r\n", ptr);
 8002f22:	4638      	mov	r0, r7
 8002f24:	f002 f91d 	bl	8005162 <ntlibc_strlen>
 8002f28:	4622      	mov	r2, r4
 8002f2a:	b281      	uxth	r1, r0
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	f7ff fb61 	bl	80025f4 <send_buffer>
    print_param_helperfunc(params, param_size, ptr,PARAM_CONFIG);
 8002f32:	4622      	mov	r2, r4
 8002f34:	4631      	mov	r1, r6
 8002f36:	4628      	mov	r0, r5
}
 8002f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    print_param_helperfunc(params, param_size, ptr,PARAM_CONFIG);
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f7ff bee1 	b.w	8002d04 <print_param_helperfunc>
 8002f42:	bf00      	nop
 8002f44:	0800cca7 	.word	0x0800cca7
 8002f48:	0800cb8a 	.word	0x0800cb8a

08002f4c <Term_Move_Cursor>:
void Term_Move_Cursor(uint8_t row, uint8_t column, port_str *ptr) {
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	b088      	sub	sp, #32
	ret = snprintf(buffer, sizeof(buffer), "\033[%i;%iH", row, column);
 8002f50:	4603      	mov	r3, r0
void Term_Move_Cursor(uint8_t row, uint8_t column, port_str *ptr) {
 8002f52:	4614      	mov	r4, r2
	ret = snprintf(buffer, sizeof(buffer), "\033[%i;%iH", row, column);
 8002f54:	9100      	str	r1, [sp, #0]
 8002f56:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <Term_Move_Cursor+0x24>)
 8002f58:	2114      	movs	r1, #20
 8002f5a:	a803      	add	r0, sp, #12
 8002f5c:	f002 f84c 	bl	8004ff8 <snprintf_>
	send_buffer((uint8_t*)buffer, ret, ptr);
 8002f60:	4622      	mov	r2, r4
 8002f62:	b281      	uxth	r1, r0
 8002f64:	a803      	add	r0, sp, #12
 8002f66:	f7ff fb45 	bl	80025f4 <send_buffer>
}
 8002f6a:	b008      	add	sp, #32
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	0800ca8f 	.word	0x0800ca8f

08002f74 <Term_Box>:
void Term_Box(uint8_t row1, uint8_t col1, uint8_t row2, uint8_t col2, port_str *ptr) {
 8002f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002f7a:	4691      	mov	r9, r2
	Term_Move_Cursor(row1, col1, ptr);
 8002f7c:	4622      	mov	r2, r4
void Term_Box(uint8_t row1, uint8_t col1, uint8_t row2, uint8_t col2, port_str *ptr) {
 8002f7e:	460f      	mov	r7, r1
 8002f80:	469b      	mov	fp, r3
 8002f82:	4682      	mov	sl, r0
	Term_Move_Cursor(row1, col1, ptr);
 8002f84:	f7ff ffe2 	bl	8002f4c <Term_Move_Cursor>
	Term_BGColor_Blue(ptr);
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fe99 	bl	8002cc0 <Term_BGColor_Blue>
	SEND_CONST_STRING("\xE2\x95\x94", ptr); //edge upper left
 8002f8e:	4839      	ldr	r0, [pc, #228]	; (8003074 <Term_Box+0x100>)
 8002f90:	f002 f8e7 	bl	8005162 <ntlibc_strlen>
 8002f94:	4622      	mov	r2, r4
 8002f96:	b281      	uxth	r1, r0
 8002f98:	4836      	ldr	r0, [pc, #216]	; (8003074 <Term_Box+0x100>)
 8002f9a:	f7ff fb2b 	bl	80025f4 <send_buffer>
	for (i = 1; i < (col2 - col1); i++) {
 8002f9e:	2501      	movs	r5, #1
		SEND_CONST_STRING("\xE2\x95\x90", ptr); //=
 8002fa0:	4e35      	ldr	r6, [pc, #212]	; (8003078 <Term_Box+0x104>)
	for (i = 1; i < (col2 - col1); i++) {
 8002fa2:	ebab 0807 	sub.w	r8, fp, r7
 8002fa6:	45a8      	cmp	r8, r5
 8002fa8:	dc2e      	bgt.n	8003008 <Term_Box+0x94>
	SEND_CONST_STRING("\xE2\x95\x97", ptr); //edge upper right
 8002faa:	4834      	ldr	r0, [pc, #208]	; (800307c <Term_Box+0x108>)
 8002fac:	f002 f8d9 	bl	8005162 <ntlibc_strlen>
	for (i = 1; i < (row2 - row1); i++) {
 8002fb0:	2501      	movs	r5, #1
	SEND_CONST_STRING("\xE2\x95\x97", ptr); //edge upper right
 8002fb2:	b281      	uxth	r1, r0
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	4831      	ldr	r0, [pc, #196]	; (800307c <Term_Box+0x108>)
 8002fb8:	f7ff fb1c 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("\xE2\x95\x91", ptr); //left ||
 8002fbc:	4e30      	ldr	r6, [pc, #192]	; (8003080 <Term_Box+0x10c>)
	for (i = 1; i < (row2 - row1); i++) {
 8002fbe:	eba9 030a 	sub.w	r3, r9, sl
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	9b00      	ldr	r3, [sp, #0]
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	dc28      	bgt.n	800301c <Term_Box+0xa8>
	Term_Move_Cursor(row2, col1, ptr);
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4639      	mov	r1, r7
 8002fce:	4648      	mov	r0, r9
 8002fd0:	f7ff ffbc 	bl	8002f4c <Term_Move_Cursor>
	SEND_CONST_STRING("\xE2\x95\x9A", ptr); //edge lower left
 8002fd4:	482b      	ldr	r0, [pc, #172]	; (8003084 <Term_Box+0x110>)
 8002fd6:	f002 f8c4 	bl	8005162 <ntlibc_strlen>
 8002fda:	4622      	mov	r2, r4
 8002fdc:	b281      	uxth	r1, r0
 8002fde:	4829      	ldr	r0, [pc, #164]	; (8003084 <Term_Box+0x110>)
 8002fe0:	f7ff fb08 	bl	80025f4 <send_buffer>
	for (i = 1; i < (col2 - col1); i++) {
 8002fe4:	2501      	movs	r5, #1
		SEND_CONST_STRING("\xE2\x95\x90", ptr); //=
 8002fe6:	4e24      	ldr	r6, [pc, #144]	; (8003078 <Term_Box+0x104>)
	for (i = 1; i < (col2 - col1); i++) {
 8002fe8:	45a8      	cmp	r8, r5
 8002fea:	dc38      	bgt.n	800305e <Term_Box+0xea>
	SEND_CONST_STRING("\xE2\x95\x9D", ptr); //edge lower right
 8002fec:	4826      	ldr	r0, [pc, #152]	; (8003088 <Term_Box+0x114>)
 8002fee:	f002 f8b8 	bl	8005162 <ntlibc_strlen>
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	b281      	uxth	r1, r0
 8002ff6:	4824      	ldr	r0, [pc, #144]	; (8003088 <Term_Box+0x114>)
 8002ff8:	f7ff fafc 	bl	80025f4 <send_buffer>
	Term_Color_White(ptr);
 8002ffc:	4620      	mov	r0, r4
}
 8002ffe:	b003      	add	sp, #12
 8003000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Term_Color_White(ptr);
 8003004:	f7ff be3c 	b.w	8002c80 <Term_Color_White>
		SEND_CONST_STRING("\xE2\x95\x90", ptr); //=
 8003008:	4630      	mov	r0, r6
 800300a:	f002 f8aa 	bl	8005162 <ntlibc_strlen>
 800300e:	4622      	mov	r2, r4
 8003010:	b281      	uxth	r1, r0
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff faee 	bl	80025f4 <send_buffer>
	for (i = 1; i < (col2 - col1); i++) {
 8003018:	3501      	adds	r5, #1
 800301a:	e7c4      	b.n	8002fa6 <Term_Box+0x32>
 800301c:	eb0a 0305 	add.w	r3, sl, r5
 8003020:	b2db      	uxtb	r3, r3
		Term_Move_Cursor(row1 + i, col1, ptr);
 8003022:	4618      	mov	r0, r3
 8003024:	4622      	mov	r2, r4
 8003026:	4639      	mov	r1, r7
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	f7ff ff8f 	bl	8002f4c <Term_Move_Cursor>
		SEND_CONST_STRING("\xE2\x95\x91", ptr); //left ||
 800302e:	4630      	mov	r0, r6
 8003030:	f002 f897 	bl	8005162 <ntlibc_strlen>
 8003034:	4622      	mov	r2, r4
 8003036:	b281      	uxth	r1, r0
 8003038:	4630      	mov	r0, r6
 800303a:	f7ff fadb 	bl	80025f4 <send_buffer>
		Term_Move_Cursor(row1 + i, col2, ptr);
 800303e:	9b01      	ldr	r3, [sp, #4]
 8003040:	4622      	mov	r2, r4
 8003042:	4618      	mov	r0, r3
 8003044:	4659      	mov	r1, fp
 8003046:	f7ff ff81 	bl	8002f4c <Term_Move_Cursor>
		SEND_CONST_STRING("\xE2\x95\x91", ptr); //right ||
 800304a:	4630      	mov	r0, r6
 800304c:	f002 f889 	bl	8005162 <ntlibc_strlen>
 8003050:	4622      	mov	r2, r4
 8003052:	b281      	uxth	r1, r0
 8003054:	4630      	mov	r0, r6
 8003056:	f7ff facd 	bl	80025f4 <send_buffer>
	for (i = 1; i < (row2 - row1); i++) {
 800305a:	3501      	adds	r5, #1
 800305c:	e7b2      	b.n	8002fc4 <Term_Box+0x50>
		SEND_CONST_STRING("\xE2\x95\x90", ptr); //=
 800305e:	4630      	mov	r0, r6
 8003060:	f002 f87f 	bl	8005162 <ntlibc_strlen>
 8003064:	4622      	mov	r2, r4
 8003066:	b281      	uxth	r1, r0
 8003068:	4630      	mov	r0, r6
 800306a:	f7ff fac3 	bl	80025f4 <send_buffer>
	for (i = 1; i < (col2 - col1); i++) {
 800306e:	3501      	adds	r5, #1
 8003070:	e7ba      	b.n	8002fe8 <Term_Box+0x74>
 8003072:	bf00      	nop
 8003074:	0800ca46 	.word	0x0800ca46
 8003078:	0800ca4a 	.word	0x0800ca4a
 800307c:	0800ca4e 	.word	0x0800ca4e
 8003080:	0800ca52 	.word	0x0800ca52
 8003084:	0800ca56 	.word	0x0800ca56
 8003088:	0800ca5a 	.word	0x0800ca5a

0800308c <Term_Save_Cursor>:
void Term_Save_Cursor(port_str *ptr) {
 800308c:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[s", ptr);
 800308e:	4c06      	ldr	r4, [pc, #24]	; (80030a8 <Term_Save_Cursor+0x1c>)
void Term_Save_Cursor(port_str *ptr) {
 8003090:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[s", ptr);
 8003092:	4620      	mov	r0, r4
 8003094:	f002 f865 	bl	8005162 <ntlibc_strlen>
 8003098:	462a      	mov	r2, r5
 800309a:	b281      	uxth	r1, r0
 800309c:	4620      	mov	r0, r4
}
 800309e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[s", ptr);
 80030a2:	f7ff baa7 	b.w	80025f4 <send_buffer>
 80030a6:	bf00      	nop
 80030a8:	0800caa2 	.word	0x0800caa2

080030ac <Term_Restore_Cursor>:
void Term_Restore_Cursor(port_str *ptr) {
 80030ac:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[u", ptr);
 80030ae:	4c06      	ldr	r4, [pc, #24]	; (80030c8 <Term_Restore_Cursor+0x1c>)
void Term_Restore_Cursor(port_str *ptr) {
 80030b0:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[u", ptr);
 80030b2:	4620      	mov	r0, r4
 80030b4:	f002 f855 	bl	8005162 <ntlibc_strlen>
 80030b8:	462a      	mov	r2, r5
 80030ba:	b281      	uxth	r1, r0
 80030bc:	4620      	mov	r0, r4
}
 80030be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[u", ptr);
 80030c2:	f7ff ba97 	b.w	80025f4 <send_buffer>
 80030c6:	bf00      	nop
 80030c8:	0800ca9e 	.word	0x0800ca9e

080030cc <Term_Disable_Cursor>:
void Term_Disable_Cursor(port_str *ptr) {
 80030cc:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[?25l", ptr);
 80030ce:	4c06      	ldr	r4, [pc, #24]	; (80030e8 <Term_Disable_Cursor+0x1c>)
void Term_Disable_Cursor(port_str *ptr) {
 80030d0:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[?25l", ptr);
 80030d2:	4620      	mov	r0, r4
 80030d4:	f002 f845 	bl	8005162 <ntlibc_strlen>
 80030d8:	462a      	mov	r2, r5
 80030da:	b281      	uxth	r1, r0
 80030dc:	4620      	mov	r0, r4
}
 80030de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[?25l", ptr);
 80030e2:	f7ff ba87 	b.w	80025f4 <send_buffer>
 80030e6:	bf00      	nop
 80030e8:	0800ca76 	.word	0x0800ca76

080030ec <Term_Enable_Cursor>:
void Term_Enable_Cursor(port_str *ptr) {
 80030ec:	b538      	push	{r3, r4, r5, lr}
	SEND_CONST_STRING("\033[?25h", ptr);
 80030ee:	4c06      	ldr	r4, [pc, #24]	; (8003108 <Term_Enable_Cursor+0x1c>)
void Term_Enable_Cursor(port_str *ptr) {
 80030f0:	4605      	mov	r5, r0
	SEND_CONST_STRING("\033[?25h", ptr);
 80030f2:	4620      	mov	r0, r4
 80030f4:	f002 f835 	bl	8005162 <ntlibc_strlen>
 80030f8:	462a      	mov	r2, r5
 80030fa:	b281      	uxth	r1, r0
 80030fc:	4620      	mov	r0, r4
}
 80030fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	SEND_CONST_STRING("\033[?25h", ptr);
 8003102:	f7ff ba77 	b.w	80025f4 <send_buffer>
 8003106:	bf00      	nop
 8003108:	0800ca7d 	.word	0x0800ca7d

0800310c <callback_ConfigFunction>:
/*****************************************************************************
* Callback if a configuration relevant parameter is changed
******************************************************************************/
uint8_t callback_ConfigFunction(parameter_entry * params, uint8_t index, port_str *ptr){

	rtU_Left.r_inpTgt = 0;
 800310c:	2200      	movs	r2, #0
 800310e:	4b02      	ldr	r3, [pc, #8]	; (8003118 <callback_ConfigFunction+0xc>)
	recalc_params();

	return 1;
}
 8003110:	2001      	movs	r0, #1
	rtU_Left.r_inpTgt = 0;
 8003112:	805a      	strh	r2, [r3, #2]
}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200044ac 	.word	0x200044ac

0800311c <command_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800311c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003120:	4905      	ldr	r1, [pc, #20]	; (8003138 <command_reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <command_reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003124:	68ca      	ldr	r2, [r1, #12]
 8003126:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800312a:	4313      	orrs	r3, r2
 800312c:	60cb      	str	r3, [r1, #12]
 800312e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003132:	bf00      	nop
 8003134:	e7fd      	b.n	8003132 <command_reset+0x16>
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	05fa0004 	.word	0x05fa0004

08003140 <callback_ComFunction>:

/*****************************************************************************
* Callback if a communication relevant parameter is changed
******************************************************************************/
uint8_t callback_ComFunction(parameter_entry * params, uint8_t index, port_str *ptr){
 8003140:	b508      	push	{r3, lr}

	HAL_UART_Init(&huart3);
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <callback_ComFunction+0xc>)
 8003144:	f004 fd96 	bl	8007c74 <HAL_UART_Init>

	return 1;
}
 8003148:	2001      	movs	r0, #1
 800314a:	bd08      	pop	{r3, pc}
 800314c:	20004200 	.word	0x20004200

08003150 <command_config_get>:


/*****************************************************************************
* Sends the configuration to teslaterm
******************************************************************************/
uint8_t command_config_get(char *commandline, port_str *ptr){
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	460d      	mov	r5, r1
 8003154:	2400      	movs	r4, #0
    char buffer[80];
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {

		print_param_buffer(buffer, confparam, current_parameter);
		send_config(buffer,confparam[current_parameter].help, ptr);
 8003156:	2724      	movs	r7, #36	; 0x24
		print_param_buffer(buffer, confparam, current_parameter);
 8003158:	4e0c      	ldr	r6, [pc, #48]	; (800318c <command_config_get+0x3c>)
uint8_t command_config_get(char *commandline, port_str *ptr){
 800315a:	b095      	sub	sp, #84	; 0x54
		print_param_buffer(buffer, confparam, current_parameter);
 800315c:	b2e2      	uxtb	r2, r4
 800315e:	490b      	ldr	r1, [pc, #44]	; (800318c <command_config_get+0x3c>)
 8003160:	4668      	mov	r0, sp
 8003162:	f7ff f8cb 	bl	80022fc <print_param_buffer>
		send_config(buffer,confparam[current_parameter].help, ptr);
 8003166:	fb07 6304 	mla	r3, r7, r4, r6
 800316a:	462a      	mov	r2, r5
 800316c:	6a19      	ldr	r1, [r3, #32]
 800316e:	4668      	mov	r0, sp
 8003170:	3401      	adds	r4, #1
 8003172:	f001 ffcf 	bl	8005114 <send_config>
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 8003176:	2c0b      	cmp	r4, #11
 8003178:	d1f0      	bne.n	800315c <command_config_get+0xc>

    }
    send_config("NULL","NULL", ptr);
 800317a:	4905      	ldr	r1, [pc, #20]	; (8003190 <command_config_get+0x40>)
 800317c:	462a      	mov	r2, r5
 800317e:	4608      	mov	r0, r1
 8003180:	f001 ffc8 	bl	8005114 <send_config>
    return 1; 
}
 8003184:	2001      	movs	r0, #1
 8003186:	b015      	add	sp, #84	; 0x54
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	bf00      	nop
 800318c:	200001ac 	.word	0x200001ac
 8003190:	0800cb73 	.word	0x0800cb73

08003194 <command_shutdown>:


uint8_t command_shutdown(char *commandline, port_str *ptr){
 8003194:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, pdFALSE);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <command_shutdown+0x14>)
 800319e:	f003 fe1b 	bl	8006dd8 <HAL_GPIO_WritePin>
	return 1;
}
 80031a2:	2001      	movs	r0, #1
 80031a4:	bd08      	pop	{r3, pc}
 80031a6:	bf00      	nop
 80031a8:	40011000 	.word	0x40011000

080031ac <command_tasks>:

/*****************************************************************************
* Prints the task list needs to be enabled in FreeRTOSConfig.h
* only use it for debugging reasons
******************************************************************************/
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031ac:	b530      	push	{r4, r5, lr}
        vPortFree(buff);
        return 0;
    #endif
    
    #if !configUSE_STATS_FORMATTING_FUNCTIONS && !configUSE_TRACE_FACILITY
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031ae:	4d0c      	ldr	r5, [pc, #48]	; (80031e0 <command_tasks+0x34>)
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031b0:	b089      	sub	sp, #36	; 0x24
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031b2:	4628      	mov	r0, r5
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031b4:	460c      	mov	r4, r1
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031b6:	f001 ffd4 	bl	8005162 <ntlibc_strlen>
 80031ba:	4622      	mov	r2, r4
 80031bc:	b281      	uxth	r1, r0
 80031be:	4628      	mov	r0, r5
 80031c0:	f7ff fa18 	bl	80025f4 <send_buffer>
	    char buff[30];
        sprintf(buff, "Free heap: %d\r\n",xPortGetFreeHeapSize());
 80031c4:	f007 f820 	bl	800a208 <xPortGetFreeHeapSize>
 80031c8:	4906      	ldr	r1, [pc, #24]	; (80031e4 <command_tasks+0x38>)
 80031ca:	4602      	mov	r2, r0
 80031cc:	4668      	mov	r0, sp
 80031ce:	f001 feff 	bl	8004fd0 <sprintf_>
        send_string(buff,ptr);
 80031d2:	4668      	mov	r0, sp
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7ff f9ec 	bl	80025b2 <send_string>
        return 0;
	#endif
    return 0;
	
}
 80031da:	2000      	movs	r0, #0
 80031dc:	b009      	add	sp, #36	; 0x24
 80031de:	bd30      	pop	{r4, r5, pc}
 80031e0:	0800ce28 	.word	0x0800ce28
 80031e4:	0800ce5f 	.word	0x0800ce5f

080031e8 <command_set>:
}

/*****************************************************************************
* Set a new value to a parameter
******************************************************************************/
uint8_t command_set(char *commandline, port_str *ptr) {
 80031e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SKIP_SPACE(commandline);
 80031ec:	7803      	ldrb	r3, [r0, #0]
uint8_t command_set(char *commandline, port_str *ptr) {
 80031ee:	4606      	mov	r6, r0
	SKIP_SPACE(commandline);
 80031f0:	2b20      	cmp	r3, #32
uint8_t command_set(char *commandline, port_str *ptr) {
 80031f2:	460c      	mov	r4, r1
	SKIP_SPACE(commandline);
 80031f4:	d111      	bne.n	800321a <command_set+0x32>
	char *param_value;

	if (commandline == NULL) {
 80031f6:	1c46      	adds	r6, r0, #1
 80031f8:	d10f      	bne.n	800321a <command_set+0x32>
		//if (!port)
		Term_Color_Red(ptr);
 80031fa:	4608      	mov	r0, r1
 80031fc:	f7ff fd30 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no name\r\n", ptr);
 8003200:	483d      	ldr	r0, [pc, #244]	; (80032f8 <command_set+0x110>)
 8003202:	f001 ffae 	bl	8005162 <ntlibc_strlen>
 8003206:	4622      	mov	r2, r4
 8003208:	b281      	uxth	r1, r0
 800320a:	483b      	ldr	r0, [pc, #236]	; (80032f8 <command_set+0x110>)
				return 1;
			}
		}
	}
	Term_Color_Red(ptr);
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 800320c:	f7ff f9f2 	bl	80025f4 <send_buffer>
	Term_Color_White(ptr);
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff fd35 	bl	8002c80 <Term_Color_White>
	return 0;
 8003216:	2000      	movs	r0, #0
 8003218:	e054      	b.n	80032c4 <command_set+0xdc>
	param_value = ntlibc_strchr(commandline, ' ');
 800321a:	2120      	movs	r1, #32
 800321c:	4630      	mov	r0, r6
 800321e:	f001 fff1 	bl	8005204 <ntlibc_strchr>
	if (param_value == NULL) {
 8003222:	4607      	mov	r7, r0
 8003224:	b948      	cbnz	r0, 800323a <command_set+0x52>
		Term_Color_Red(ptr);
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fd1a 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no value\r\n", ptr);
 800322c:	4833      	ldr	r0, [pc, #204]	; (80032fc <command_set+0x114>)
 800322e:	f001 ff98 	bl	8005162 <ntlibc_strlen>
 8003232:	4622      	mov	r2, r4
 8003234:	b281      	uxth	r1, r0
 8003236:	4831      	ldr	r0, [pc, #196]	; (80032fc <command_set+0x114>)
 8003238:	e7e8      	b.n	800320c <command_set+0x24>
	*param_value = 0;
 800323a:	2300      	movs	r3, #0
	if (*param_value == '\0') {
 800323c:	7845      	ldrb	r5, [r0, #1]
	*param_value = 0;
 800323e:	7003      	strb	r3, [r0, #0]
	if (*param_value == '\0') {
 8003240:	b94d      	cbnz	r5, 8003256 <command_set+0x6e>
		Term_Color_Red(ptr);
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff fd0c 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no val\r\n", ptr);
 8003248:	482d      	ldr	r0, [pc, #180]	; (8003300 <command_set+0x118>)
 800324a:	f001 ff8a 	bl	8005162 <ntlibc_strlen>
 800324e:	4622      	mov	r2, r4
 8003250:	b281      	uxth	r1, r0
 8003252:	482b      	ldr	r0, [pc, #172]	; (8003300 <command_set+0x118>)
 8003254:	e7da      	b.n	800320c <command_set+0x24>
 8003256:	461d      	mov	r5, r3
		if (ntlibc_stricmp(commandline, confparam[current_parameter].name) == 0) {
 8003258:	f04f 0b24 	mov.w	fp, #36	; 0x24
 800325c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8003304 <command_set+0x11c>
 8003260:	fb0b a905 	mla	r9, fp, r5, sl
 8003264:	4630      	mov	r0, r6
 8003266:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800326a:	fa5f f885 	uxtb.w	r8, r5
 800326e:	f001 ffa9 	bl	80051c4 <ntlibc_stricmp>
 8003272:	bb98      	cbnz	r0, 80032dc <command_set+0xf4>
			if (updateDefaultFunction(confparam, param_value,current_parameter, ptr)){
 8003274:	4623      	mov	r3, r4
 8003276:	4642      	mov	r2, r8
 8003278:	1c79      	adds	r1, r7, #1
 800327a:	4822      	ldr	r0, [pc, #136]	; (8003304 <command_set+0x11c>)
 800327c:	f7ff f9da 	bl	8002634 <updateDefaultFunction>
 8003280:	b310      	cbz	r0, 80032c8 <command_set+0xe0>
                if(confparam[current_parameter].callback_function){
 8003282:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003286:	b123      	cbz	r3, 8003292 <command_set+0xaa>
                    if (confparam[current_parameter].callback_function(confparam, current_parameter, ptr)){
 8003288:	4622      	mov	r2, r4
 800328a:	4641      	mov	r1, r8
 800328c:	481d      	ldr	r0, [pc, #116]	; (8003304 <command_set+0x11c>)
 800328e:	4798      	blx	r3
 8003290:	b148      	cbz	r0, 80032a6 <command_set+0xbe>
                    Term_Color_Green(ptr);
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fcd4 	bl	8002c40 <Term_Color_Green>
                    SEND_CONST_STRING("OK\r\n", ptr);
 8003298:	481b      	ldr	r0, [pc, #108]	; (8003308 <command_set+0x120>)
 800329a:	f001 ff62 	bl	8005162 <ntlibc_strlen>
 800329e:	4622      	mov	r2, r4
 80032a0:	b281      	uxth	r1, r0
 80032a2:	4819      	ldr	r0, [pc, #100]	; (8003308 <command_set+0x120>)
 80032a4:	e008      	b.n	80032b8 <command_set+0xd0>
                        Term_Color_Red(ptr);
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fcda 	bl	8002c60 <Term_Color_Red>
                        SEND_CONST_STRING("ERROR: Callback\r\n", ptr);
 80032ac:	4817      	ldr	r0, [pc, #92]	; (800330c <command_set+0x124>)
 80032ae:	f001 ff58 	bl	8005162 <ntlibc_strlen>
 80032b2:	4622      	mov	r2, r4
 80032b4:	b281      	uxth	r1, r0
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <command_set+0x124>)
				SEND_CONST_STRING("NOK\r\n", ptr);
 80032b8:	f7ff f99c 	bl	80025f4 <send_buffer>
				Term_Color_White(ptr);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fcdf 	bl	8002c80 <Term_Color_White>
				return 1;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				Term_Color_Red(ptr);
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff fcc9 	bl	8002c60 <Term_Color_Red>
				SEND_CONST_STRING("NOK\r\n", ptr);
 80032ce:	4810      	ldr	r0, [pc, #64]	; (8003310 <command_set+0x128>)
 80032d0:	f001 ff47 	bl	8005162 <ntlibc_strlen>
 80032d4:	4622      	mov	r2, r4
 80032d6:	b281      	uxth	r1, r0
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <command_set+0x128>)
 80032da:	e7ed      	b.n	80032b8 <command_set+0xd0>
 80032dc:	3501      	adds	r5, #1
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 80032de:	2d0b      	cmp	r5, #11
 80032e0:	d1be      	bne.n	8003260 <command_set+0x78>
	Term_Color_Red(ptr);
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7ff fcbc 	bl	8002c60 <Term_Color_Red>
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 80032e8:	480a      	ldr	r0, [pc, #40]	; (8003314 <command_set+0x12c>)
 80032ea:	f001 ff3a 	bl	8005162 <ntlibc_strlen>
 80032ee:	4622      	mov	r2, r4
 80032f0:	b281      	uxth	r1, r0
 80032f2:	4808      	ldr	r0, [pc, #32]	; (8003314 <command_set+0x12c>)
 80032f4:	e78a      	b.n	800320c <command_set+0x24>
 80032f6:	bf00      	nop
 80032f8:	0800ccd1 	.word	0x0800ccd1
 80032fc:	0800ccde 	.word	0x0800ccde
 8003300:	0800ccec 	.word	0x0800ccec
 8003304:	200001ac 	.word	0x200001ac
 8003308:	0800cd0b 	.word	0x0800cd0b
 800330c:	0800ccf8 	.word	0x0800ccf8
 8003310:	0800cd0a 	.word	0x0800cd0a
 8003314:	0800cd10 	.word	0x0800cd10

08003318 <command_help>:
}

/*****************************************************************************
* Prints the help text
******************************************************************************/
uint8_t command_help(char *commandline, port_str *ptr) {
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UNUSED_VARIABLE(commandline);
	SEND_CONST_STRING("\r\nCommands:\r\n", ptr);
 800331c:	4867      	ldr	r0, [pc, #412]	; (80034bc <command_help+0x1a4>)
uint8_t command_help(char *commandline, port_str *ptr) {
 800331e:	460c      	mov	r4, r1
	SEND_CONST_STRING("\r\nCommands:\r\n", ptr);
 8003320:	f001 ff1f 	bl	8005162 <ntlibc_strlen>
 8003324:	4622      	mov	r2, r4
 8003326:	b281      	uxth	r1, r0
 8003328:	4864      	ldr	r0, [pc, #400]	; (80034bc <command_help+0x1a4>)
 800332a:	f7ff f963 	bl	80025f4 <send_buffer>
 800332e:	2500      	movs	r5, #0
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 8003330:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80034dc <command_help+0x1c4>
		Term_Color_Cyan(ptr);
		send_string((char *)commands[current_command].text, ptr);
 8003334:	4e62      	ldr	r6, [pc, #392]	; (80034c0 <command_help+0x1a8>)
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
		}
		send_string((char *)commands[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 8003336:	4f63      	ldr	r7, [pc, #396]	; (80034c4 <command_help+0x1ac>)
		SEND_CONST_STRING("\t", ptr);
 8003338:	4640      	mov	r0, r8
 800333a:	f001 ff12 	bl	8005162 <ntlibc_strlen>
 800333e:	4622      	mov	r2, r4
 8003340:	b281      	uxth	r1, r0
 8003342:	4640      	mov	r0, r8
 8003344:	f7ff f956 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 8003348:	4620      	mov	r0, r4
 800334a:	f7ff fca9 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)commands[current_command].text, ptr);
 800334e:	4621      	mov	r1, r4
 8003350:	59a8      	ldr	r0, [r5, r6]
 8003352:	f7ff f92e 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fc92 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(commands[current_command].text) > 7) {
 800335c:	59a8      	ldr	r0, [r5, r6]
 800335e:	f001 ff00 	bl	8005162 <ntlibc_strlen>
 8003362:	2807      	cmp	r0, #7
 8003364:	f340 8095 	ble.w	8003492 <command_help+0x17a>
			SEND_CONST_STRING("\t-> ", ptr);
 8003368:	4857      	ldr	r0, [pc, #348]	; (80034c8 <command_help+0x1b0>)
 800336a:	f001 fefa 	bl	8005162 <ntlibc_strlen>
 800336e:	4622      	mov	r2, r4
 8003370:	b281      	uxth	r1, r0
 8003372:	4855      	ldr	r0, [pc, #340]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 8003374:	f7ff f93e 	bl	80025f4 <send_buffer>
		send_string((char *)commands[current_command].help, ptr);
 8003378:	1973      	adds	r3, r6, r5
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	4621      	mov	r1, r4
 800337e:	f7ff f918 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003382:	4638      	mov	r0, r7
 8003384:	f001 feed 	bl	8005162 <ntlibc_strlen>
 8003388:	350c      	adds	r5, #12
 800338a:	b281      	uxth	r1, r0
 800338c:	4622      	mov	r2, r4
 800338e:	4638      	mov	r0, r7
 8003390:	f7ff f930 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
 8003394:	2d9c      	cmp	r5, #156	; 0x9c
 8003396:	d1cf      	bne.n	8003338 <command_help+0x20>
	}

	SEND_CONST_STRING("\r\nParameters:\r\n", ptr);
 8003398:	484c      	ldr	r0, [pc, #304]	; (80034cc <command_help+0x1b4>)
 800339a:	f001 fee2 	bl	8005162 <ntlibc_strlen>
 800339e:	4d4c      	ldr	r5, [pc, #304]	; (80034d0 <command_help+0x1b8>)
 80033a0:	b281      	uxth	r1, r0
 80033a2:	4622      	mov	r2, r4
 80033a4:	4849      	ldr	r0, [pc, #292]	; (80034cc <command_help+0x1b4>)
 80033a6:	f7ff f925 	bl	80025f4 <send_buffer>
 80033aa:	462e      	mov	r6, r5
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 80033ac:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80034dc <command_help+0x1c4>
		send_string((char *)confparam[current_command].name, ptr);
		Term_Color_White(ptr);
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
 80033b0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80034d8 <command_help+0x1c0>
		}

		send_string((char *)confparam[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 80033b4:	4f43      	ldr	r7, [pc, #268]	; (80034c4 <command_help+0x1ac>)
 80033b6:	f505 7ac6 	add.w	sl, r5, #396	; 0x18c
		SEND_CONST_STRING("\t", ptr);
 80033ba:	4640      	mov	r0, r8
 80033bc:	f001 fed1 	bl	8005162 <ntlibc_strlen>
 80033c0:	4622      	mov	r2, r4
 80033c2:	b281      	uxth	r1, r0
 80033c4:	4640      	mov	r0, r8
 80033c6:	f7ff f915 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff fc68 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)confparam[current_command].name, ptr);
 80033d0:	4621      	mov	r1, r4
 80033d2:	6870      	ldr	r0, [r6, #4]
 80033d4:	f7ff f8ed 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff fc51 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
 80033de:	6870      	ldr	r0, [r6, #4]
 80033e0:	f001 febf 	bl	8005162 <ntlibc_strlen>
 80033e4:	2807      	cmp	r0, #7
 80033e6:	dd5b      	ble.n	80034a0 <command_help+0x188>
			SEND_CONST_STRING("\t-> ", ptr);
 80033e8:	4837      	ldr	r0, [pc, #220]	; (80034c8 <command_help+0x1b0>)
 80033ea:	f001 feba 	bl	8005162 <ntlibc_strlen>
 80033ee:	4622      	mov	r2, r4
 80033f0:	b281      	uxth	r1, r0
 80033f2:	4835      	ldr	r0, [pc, #212]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 80033f4:	f7ff f8fe 	bl	80025f4 <send_buffer>
		send_string((char *)confparam[current_command].help, ptr);
 80033f8:	6a30      	ldr	r0, [r6, #32]
 80033fa:	4621      	mov	r1, r4
 80033fc:	f7ff f8d9 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003400:	4638      	mov	r0, r7
 8003402:	f001 feae 	bl	8005162 <ntlibc_strlen>
 8003406:	3624      	adds	r6, #36	; 0x24
 8003408:	b281      	uxth	r1, r0
 800340a:	4622      	mov	r2, r4
 800340c:	4638      	mov	r0, r7
 800340e:	f7ff f8f1 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
 8003412:	4556      	cmp	r6, sl
 8003414:	d1d1      	bne.n	80033ba <command_help+0xa2>
	}

	SEND_CONST_STRING("\r\nConfiguration:\r\n", ptr);
 8003416:	482f      	ldr	r0, [pc, #188]	; (80034d4 <command_help+0x1bc>)
 8003418:	f001 fea3 	bl	8005162 <ntlibc_strlen>
 800341c:	4622      	mov	r2, r4
 800341e:	b281      	uxth	r1, r0
 8003420:	482c      	ldr	r0, [pc, #176]	; (80034d4 <command_help+0x1bc>)
 8003422:	f7ff f8e7 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 8003426:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80034dc <command_help+0x1c4>
		send_string((char *)confparam[current_command].name, ptr);
		Term_Color_White(ptr);
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
 800342a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80034d8 <command_help+0x1c0>
		}

		send_string((char *)confparam[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 800342e:	4f25      	ldr	r7, [pc, #148]	; (80034c4 <command_help+0x1ac>)
		SEND_CONST_STRING("\t", ptr);
 8003430:	4640      	mov	r0, r8
 8003432:	f001 fe96 	bl	8005162 <ntlibc_strlen>
 8003436:	4622      	mov	r2, r4
 8003438:	b281      	uxth	r1, r0
 800343a:	4640      	mov	r0, r8
 800343c:	f7ff f8da 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fc2d 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)confparam[current_command].name, ptr);
 8003446:	4621      	mov	r1, r4
 8003448:	6868      	ldr	r0, [r5, #4]
 800344a:	f7ff f8b2 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff fc16 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
 8003454:	6868      	ldr	r0, [r5, #4]
 8003456:	f001 fe84 	bl	8005162 <ntlibc_strlen>
 800345a:	2807      	cmp	r0, #7
 800345c:	dd27      	ble.n	80034ae <command_help+0x196>
			SEND_CONST_STRING("\t-> ", ptr);
 800345e:	481a      	ldr	r0, [pc, #104]	; (80034c8 <command_help+0x1b0>)
 8003460:	f001 fe7f 	bl	8005162 <ntlibc_strlen>
 8003464:	4622      	mov	r2, r4
 8003466:	b281      	uxth	r1, r0
 8003468:	4817      	ldr	r0, [pc, #92]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 800346a:	f7ff f8c3 	bl	80025f4 <send_buffer>
		send_string((char *)confparam[current_command].help, ptr);
 800346e:	6a28      	ldr	r0, [r5, #32]
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff f89e 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003476:	4638      	mov	r0, r7
 8003478:	f001 fe73 	bl	8005162 <ntlibc_strlen>
 800347c:	3524      	adds	r5, #36	; 0x24
 800347e:	b281      	uxth	r1, r0
 8003480:	4622      	mov	r2, r4
 8003482:	4638      	mov	r0, r7
 8003484:	f7ff f8b6 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
 8003488:	42b5      	cmp	r5, r6
 800348a:	d1d1      	bne.n	8003430 <command_help+0x118>
	}

	return 0;
}
 800348c:	2000      	movs	r0, #0
 800348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			SEND_CONST_STRING("\t\t-> ", ptr);
 8003492:	4811      	ldr	r0, [pc, #68]	; (80034d8 <command_help+0x1c0>)
 8003494:	f001 fe65 	bl	8005162 <ntlibc_strlen>
 8003498:	4622      	mov	r2, r4
 800349a:	b281      	uxth	r1, r0
 800349c:	480e      	ldr	r0, [pc, #56]	; (80034d8 <command_help+0x1c0>)
 800349e:	e769      	b.n	8003374 <command_help+0x5c>
			SEND_CONST_STRING("\t\t-> ", ptr);
 80034a0:	4648      	mov	r0, r9
 80034a2:	f001 fe5e 	bl	8005162 <ntlibc_strlen>
 80034a6:	4622      	mov	r2, r4
 80034a8:	b281      	uxth	r1, r0
 80034aa:	4648      	mov	r0, r9
 80034ac:	e7a2      	b.n	80033f4 <command_help+0xdc>
			SEND_CONST_STRING("\t\t-> ", ptr);
 80034ae:	4648      	mov	r0, r9
 80034b0:	f001 fe57 	bl	8005162 <ntlibc_strlen>
 80034b4:	4622      	mov	r2, r4
 80034b6:	b281      	uxth	r1, r0
 80034b8:	4648      	mov	r0, r9
 80034ba:	e7d6      	b.n	800346a <command_help+0x152>
 80034bc:	0800cc8f 	.word	0x0800cc8f
 80034c0:	20000110 	.word	0x20000110
 80034c4:	0800cc67 	.word	0x0800cc67
 80034c8:	0800cca0 	.word	0x0800cca0
 80034cc:	0800cca5 	.word	0x0800cca5
 80034d0:	200001ac 	.word	0x200001ac
 80034d4:	0800cb8a 	.word	0x0800cb8a
 80034d8:	0800cc9f 	.word	0x0800cc9f
 80034dc:	0800cc9d 	.word	0x0800cc9d

080034e0 <command_cls>:
}

/*****************************************************************************
* Clears the terminal screen and displays the logo
******************************************************************************/
uint8_t command_cls(char *commandline, port_str *ptr) {
 80034e0:	b538      	push	{r3, r4, r5, lr}
    //tsk_overlay_chart_start();
	Term_Erase_Screen(ptr);

    SEND_CONST_STRING("\r\n\r\n",ptr);
 80034e2:	4c07      	ldr	r4, [pc, #28]	; (8003500 <command_cls+0x20>)
	Term_Erase_Screen(ptr);
 80034e4:	4608      	mov	r0, r1
uint8_t command_cls(char *commandline, port_str *ptr) {
 80034e6:	460d      	mov	r5, r1
	Term_Erase_Screen(ptr);
 80034e8:	f7ff fb9a 	bl	8002c20 <Term_Erase_Screen>
    SEND_CONST_STRING("\r\n\r\n",ptr);
 80034ec:	4620      	mov	r0, r4
 80034ee:	f001 fe38 	bl	8005162 <ntlibc_strlen>
 80034f2:	462a      	mov	r2, r5
 80034f4:	b281      	uxth	r1, r0
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff f87c 	bl	80025f4 <send_buffer>
	return 1;
}
 80034fc:	2001      	movs	r0, #1
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	0800cc65 	.word	0x0800cc65

08003504 <command_get>:
uint8_t command_get(char *commandline, port_str *ptr) {
 8003504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	4606      	mov	r6, r0
	SKIP_SPACE(commandline);
 800350a:	7803      	ldrb	r3, [r0, #0]
uint8_t command_get(char *commandline, port_str *ptr) {
 800350c:	460c      	mov	r4, r1
	SKIP_SPACE(commandline);
 800350e:	2b20      	cmp	r3, #32
 8003510:	bf08      	it	eq
 8003512:	3601      	addeq	r6, #1
	if (*commandline == 0 || commandline == 0) //no param --> show help text
 8003514:	7833      	ldrb	r3, [r6, #0]
 8003516:	b93b      	cbnz	r3, 8003528 <command_get+0x24>
		print_param_help(confparam, PARAM_SIZE(confparam), ptr);
 8003518:	460a      	mov	r2, r1
 800351a:	4816      	ldr	r0, [pc, #88]	; (8003574 <command_get+0x70>)
 800351c:	210b      	movs	r1, #11
 800351e:	f7ff fceb 	bl	8002ef8 <print_param_help>
			return 1;
 8003522:	2001      	movs	r0, #1
}
 8003524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003528:	2500      	movs	r5, #0
		if (ntlibc_stricmp(commandline, confparam[current_parameter].name) == 0) {
 800352a:	f04f 0824 	mov.w	r8, #36	; 0x24
 800352e:	4f11      	ldr	r7, [pc, #68]	; (8003574 <command_get+0x70>)
 8003530:	fb08 7305 	mla	r3, r8, r5, r7
 8003534:	4630      	mov	r0, r6
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	fa5f f985 	uxtb.w	r9, r5
 800353c:	f001 fe42 	bl	80051c4 <ntlibc_stricmp>
 8003540:	b928      	cbnz	r0, 800354e <command_get+0x4a>
			print_param(confparam,current_parameter,ptr);
 8003542:	4622      	mov	r2, r4
 8003544:	4649      	mov	r1, r9
 8003546:	480b      	ldr	r0, [pc, #44]	; (8003574 <command_get+0x70>)
 8003548:	f7ff f90a 	bl	8002760 <print_param>
 800354c:	e7e9      	b.n	8003522 <command_get+0x1e>
 800354e:	3501      	adds	r5, #1
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 8003550:	2d0b      	cmp	r5, #11
 8003552:	d1ed      	bne.n	8003530 <command_get+0x2c>
	Term_Color_Red(ptr);
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff fb83 	bl	8002c60 <Term_Color_Red>
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 800355a:	4807      	ldr	r0, [pc, #28]	; (8003578 <command_get+0x74>)
 800355c:	f001 fe01 	bl	8005162 <ntlibc_strlen>
 8003560:	4622      	mov	r2, r4
 8003562:	b281      	uxth	r1, r0
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <command_get+0x74>)
 8003566:	f7ff f845 	bl	80025f4 <send_buffer>
	Term_Color_White(ptr);
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff fb88 	bl	8002c80 <Term_Color_White>
	return 0;
 8003570:	2000      	movs	r0, #0
 8003572:	e7d7      	b.n	8003524 <command_get+0x20>
 8003574:	200001ac 	.word	0x200001ac
 8003578:	0800cd10 	.word	0x0800cd10

0800357c <command_eprom>:
uint8_t command_eprom(char *commandline, port_str *ptr) {
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4605      	mov	r5, r0
	SKIP_SPACE(commandline);
 8003580:	7803      	ldrb	r3, [r0, #0]
uint8_t command_eprom(char *commandline, port_str *ptr) {
 8003582:	b086      	sub	sp, #24
	SKIP_SPACE(commandline);
 8003584:	2b20      	cmp	r3, #32
 8003586:	bf08      	it	eq
 8003588:	3501      	addeq	r5, #1
    CHECK_NULL(commandline);
 800358a:	782b      	ldrb	r3, [r5, #0]
uint8_t command_eprom(char *commandline, port_str *ptr) {
 800358c:	460e      	mov	r6, r1
    CHECK_NULL(commandline);
 800358e:	b36b      	cbz	r3, 80035ec <command_eprom+0x70>
	if (ntlibc_stricmp(commandline, "save") == 0) {
 8003590:	491c      	ldr	r1, [pc, #112]	; (8003604 <command_eprom+0x88>)
 8003592:	4628      	mov	r0, r5
 8003594:	f001 fe16 	bl	80051c4 <ntlibc_stricmp>
 8003598:	4604      	mov	r4, r0
 800359a:	b9d0      	cbnz	r0, 80035d2 <command_eprom+0x56>
		taskENTER_CRITICAL();
 800359c:	f006 fc3a 	bl	8009e14 <vPortEnterCritical>
		HAL_FLASH_Unlock();
 80035a0:	f003 fa2e 	bl	8006a00 <HAL_FLASH_Unlock>
		s_eraseinit.NbPages     = 1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <command_eprom+0x8c>)
		HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80035a8:	a901      	add	r1, sp, #4
 80035aa:	a802      	add	r0, sp, #8
		s_eraseinit.NbPages     = 1;
 80035ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
		s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80035b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
		HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80035b4:	f003 fade 	bl	8006b74 <HAL_FLASHEx_Erase>
	    EEPROM_write_conf(confparam, PARAM_SIZE(confparam),0, ptr);
 80035b8:	4633      	mov	r3, r6
 80035ba:	4622      	mov	r2, r4
 80035bc:	210b      	movs	r1, #11
 80035be:	4813      	ldr	r0, [pc, #76]	; (800360c <command_eprom+0x90>)
 80035c0:	f7ff f964 	bl	800288c <EEPROM_write_conf>
	    HAL_FLASH_Lock();
 80035c4:	f003 fa2e 	bl	8006a24 <HAL_FLASH_Lock>
	    taskEXIT_CRITICAL();
 80035c8:	f006 fc46 	bl	8009e58 <vPortExitCritical>
		return 0;
 80035cc:	4620      	mov	r0, r4
}
 80035ce:	b006      	add	sp, #24
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
	if (ntlibc_stricmp(commandline, "load") == 0) {
 80035d2:	490f      	ldr	r1, [pc, #60]	; (8003610 <command_eprom+0x94>)
 80035d4:	4628      	mov	r0, r5
 80035d6:	f001 fdf5 	bl	80051c4 <ntlibc_stricmp>
 80035da:	4604      	mov	r4, r0
 80035dc:	b930      	cbnz	r0, 80035ec <command_eprom+0x70>
		EEPROM_read_conf(confparam, PARAM_SIZE(confparam) ,0,ptr);
 80035de:	4602      	mov	r2, r0
 80035e0:	4633      	mov	r3, r6
 80035e2:	210b      	movs	r1, #11
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <command_eprom+0x90>)
 80035e6:	f7ff fa09 	bl	80029fc <EEPROM_read_conf>
 80035ea:	e7ef      	b.n	80035cc <command_eprom+0x50>
	HELP_TEXT("Usage: eprom [load|save]\r\n");
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff fb37 	bl	8002c60 <Term_Color_Red>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <command_eprom+0x98>)
 80035f6:	f7fe ffdc 	bl	80025b2 <send_string>
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff fb40 	bl	8002c80 <Term_Color_White>
 8003600:	2001      	movs	r0, #1
 8003602:	e7e4      	b.n	80035ce <command_eprom+0x52>
 8003604:	0800cc6a 	.word	0x0800cc6a
 8003608:	0800fc00 	.word	0x0800fc00
 800360c:	200001ac 	.word	0x200001ac
 8003610:	0800cc6f 	.word	0x0800cc6f
 8003614:	0800cc74 	.word	0x0800cc74

08003618 <command_status>:
uint8_t command_status(char *commandline, port_str *ptr) {
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4604      	mov	r4, r0
    SKIP_SPACE(commandline);
 800361c:	7803      	ldrb	r3, [r0, #0]
uint8_t command_status(char *commandline, port_str *ptr) {
 800361e:	460d      	mov	r5, r1
    SKIP_SPACE(commandline);
 8003620:	2b20      	cmp	r3, #32
 8003622:	bf08      	it	eq
 8003624:	3401      	addeq	r4, #1
    CHECK_NULL(commandline);
 8003626:	7823      	ldrb	r3, [r4, #0]
 8003628:	b18b      	cbz	r3, 800364e <command_status+0x36>
	if (ntlibc_stricmp(commandline, "start") == 0) {
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <command_status+0x4c>)
 800362c:	4620      	mov	r0, r4
 800362e:	f001 fdc9 	bl	80051c4 <ntlibc_stricmp>
 8003632:	b920      	cbnz	r0, 800363e <command_status+0x26>
	telemetry = 1;
 8003634:	2201      	movs	r2, #1
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <command_status+0x50>)
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	2001      	movs	r0, #1
 800363c:	bd38      	pop	{r3, r4, r5, pc}
	if (ntlibc_stricmp(commandline, "stop") == 0) {
 800363e:	490b      	ldr	r1, [pc, #44]	; (800366c <command_status+0x54>)
 8003640:	4620      	mov	r0, r4
 8003642:	f001 fdbf 	bl	80051c4 <ntlibc_stricmp>
 8003646:	b910      	cbnz	r0, 800364e <command_status+0x36>
	telemetry = 0;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <command_status+0x50>)
 800364a:	7018      	strb	r0, [r3, #0]
        return 1;
 800364c:	e7f5      	b.n	800363a <command_status+0x22>
	HELP_TEXT("Usage: status [start|stop]\r\n");
 800364e:	4628      	mov	r0, r5
 8003650:	f7ff fb06 	bl	8002c60 <Term_Color_Red>
 8003654:	4629      	mov	r1, r5
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <command_status+0x58>)
 8003658:	f7fe ffab 	bl	80025b2 <send_string>
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff fb0f 	bl	8002c80 <Term_Color_White>
 8003662:	e7ea      	b.n	800363a <command_status+0x22>
 8003664:	0800ce00 	.word	0x0800ce00
 8003668:	200005f0 	.word	0x200005f0
 800366c:	0800ce06 	.word	0x0800ce06
 8003670:	0800ce0b 	.word	0x0800ce0b

08003674 <recalc_params>:
}
 8003674:	4770      	bx	lr
	...

08003678 <init_config>:
    rtU_Left.z_ctrlModReq 		= 1;
 8003678:	2201      	movs	r2, #1
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <init_config+0x38>)
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 800367c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    rtU_Left.z_ctrlModReq 		= 1;
 8003680:	705a      	strb	r2, [r3, #1]
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <init_config+0x3c>)
    rtP_Left.b_fieldWeakEna 	= FIELD_WEAK_ENA;
 8003684:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    rtP_Left.r_fieldWeakHi  	= FIELD_WEAK_HI<<4;
 8003688:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800368c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    rtP_Left.r_fieldWeakLo  	= FIELD_WEAK_LO<<4;
 8003690:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003694:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    rtP_Left.id_fieldWeakMax 	= (FIELD_WEAK_MAX * A2BIT_CONV) << 4;
 8003698:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800369c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    rtP_Left.a_phaAdvMax     	= PHASE_ADV_MAX << 4;                   // fixdt(1,16,4)
 80036a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 80036a4:	f8a3 10cc 	strh.w	r1, [r3, #204]	; 0xcc
    rtP_Left.a_phaAdvMax     	= PHASE_ADV_MAX << 4;                   // fixdt(1,16,4)
 80036a8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200044ac 	.word	0x200044ac
 80036b4:	20000000 	.word	0x20000000

080036b8 <command_load_default>:
uint8_t command_load_default(char *commandline, port_str *ptr) {
 80036b8:	b538      	push	{r3, r4, r5, lr}
    SEND_CONST_STRING("Default parameters loaded\r\n", ptr);
 80036ba:	4c07      	ldr	r4, [pc, #28]	; (80036d8 <command_load_default+0x20>)
uint8_t command_load_default(char *commandline, port_str *ptr) {
 80036bc:	460d      	mov	r5, r1
    SEND_CONST_STRING("Default parameters loaded\r\n", ptr);
 80036be:	4620      	mov	r0, r4
 80036c0:	f001 fd4f 	bl	8005162 <ntlibc_strlen>
 80036c4:	462a      	mov	r2, r5
 80036c6:	b281      	uxth	r1, r0
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7fe ff93 	bl	80025f4 <send_buffer>
    init_config();
 80036ce:	f7ff ffd3 	bl	8003678 <init_config>
}
 80036d2:	2001      	movs	r0, #1
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
 80036d6:	bf00      	nop
 80036d8:	0800ccb5 	.word	0x0800ccb5

080036dc <eeprom_load>:
    return EEPROM_read_conf(confparam, PARAM_SIZE(confparam) ,0,ptr);
 80036dc:	4603      	mov	r3, r0
 80036de:	2200      	movs	r2, #0
 80036e0:	210b      	movs	r1, #11
 80036e2:	4801      	ldr	r0, [pc, #4]	; (80036e8 <eeprom_load+0xc>)
 80036e4:	f7ff b98a 	b.w	80029fc <EEPROM_read_conf>
 80036e8:	200001ac 	.word	0x200001ac

080036ec <init_tt>:
void init_tt(uint8_t with_chart, port_str *ptr){
 80036ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	4606      	mov	r6, r0
    send_gauge_config(0, GAUGE0_MIN, GAUGE0_MAX, GAUGE0_NAME, ptr);
 80036f2:	9100      	str	r1, [sp, #0]
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <init_tt+0xdc>)
 80036f6:	2232      	movs	r2, #50	; 0x32
 80036f8:	f06f 0131 	mvn.w	r1, #49	; 0x31
 80036fc:	2000      	movs	r0, #0
 80036fe:	f001 fce1 	bl	80050c4 <send_gauge_config>
    send_gauge_config(1, GAUGE1_MIN, GAUGE1_MAX, GAUGE1_NAME, ptr);
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <init_tt+0xe0>)
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800370a:	2001      	movs	r0, #1
 800370c:	9400      	str	r4, [sp, #0]
 800370e:	f001 fcd9 	bl	80050c4 <send_gauge_config>
    send_gauge_config(2, GAUGE2_MIN, GAUGE2_MAX, GAUGE2_NAME, ptr);
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <init_tt+0xe4>)
 8003714:	2232      	movs	r2, #50	; 0x32
 8003716:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800371a:	2002      	movs	r0, #2
 800371c:	9400      	str	r4, [sp, #0]
 800371e:	f001 fcd1 	bl	80050c4 <send_gauge_config>
    send_gauge_config(3, GAUGE3_MIN, GAUGE3_MAX, GAUGE3_NAME, ptr);
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <init_tt+0xe8>)
 8003724:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003728:	492b      	ldr	r1, [pc, #172]	; (80037d8 <init_tt+0xec>)
 800372a:	2003      	movs	r0, #3
 800372c:	9400      	str	r4, [sp, #0]
 800372e:	f001 fcc9 	bl	80050c4 <send_gauge_config>
    send_gauge_config(4, GAUGE4_MIN, GAUGE4_MAX, GAUGE4_NAME, ptr);
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <init_tt+0xf0>)
 8003734:	2232      	movs	r2, #50	; 0x32
 8003736:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800373a:	2004      	movs	r0, #4
 800373c:	9400      	str	r4, [sp, #0]
 800373e:	f001 fcc1 	bl	80050c4 <send_gauge_config>
    send_gauge_config(5, GAUGE5_MIN, GAUGE5_MAX, GAUGE5_NAME, ptr);
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <init_tt+0xf4>)
 8003744:	2250      	movs	r2, #80	; 0x50
 8003746:	2100      	movs	r1, #0
 8003748:	2005      	movs	r0, #5
 800374a:	9400      	str	r4, [sp, #0]
 800374c:	f001 fcba 	bl	80050c4 <send_gauge_config>
    send_gauge_config(6, GAUGE6_MIN, GAUGE6_MAX, GAUGE6_NAME, ptr);
 8003750:	9400      	str	r4, [sp, #0]
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <init_tt+0xf8>)
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	f06f 0109 	mvn.w	r1, #9
 800375a:	2006      	movs	r0, #6
 800375c:	f001 fcb2 	bl	80050c4 <send_gauge_config>
    if(with_chart==pdTRUE){
 8003760:	2e01      	cmp	r6, #1
 8003762:	d12c      	bne.n	80037be <init_tt+0xd2>
        send_chart_config(0, CHART0_MIN, CHART0_MAX, CHART0_OFFSET, CHART0_UNIT, CHART0_NAME, ptr);
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <init_tt+0xfc>)
 8003766:	2502      	movs	r5, #2
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2300      	movs	r3, #0
 800376c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003770:	4618      	mov	r0, r3
 8003772:	491e      	ldr	r1, [pc, #120]	; (80037ec <init_tt+0x100>)
 8003774:	9402      	str	r4, [sp, #8]
 8003776:	9500      	str	r5, [sp, #0]
 8003778:	f001 fc72 	bl	8005060 <send_chart_config>
        send_chart_config(1, CHART1_MIN, CHART1_MAX, CHART1_OFFSET, CHART1_UNIT, CHART1_NAME, ptr);
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <init_tt+0x104>)
 800377e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003782:	e9cd 5300 	strd	r5, r3, [sp]
 8003786:	4919      	ldr	r1, [pc, #100]	; (80037ec <init_tt+0x100>)
 8003788:	2300      	movs	r3, #0
 800378a:	4630      	mov	r0, r6
 800378c:	9402      	str	r4, [sp, #8]
 800378e:	f001 fc67 	bl	8005060 <send_chart_config>
        send_chart_config(2, CHART2_MIN, CHART2_MAX, CHART2_OFFSET, CHART2_UNIT, CHART2_NAME, ptr);
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <init_tt+0x108>)
 8003794:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003798:	e9cd 5300 	strd	r5, r3, [sp]
 800379c:	4913      	ldr	r1, [pc, #76]	; (80037ec <init_tt+0x100>)
 800379e:	2300      	movs	r3, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	9402      	str	r4, [sp, #8]
 80037a4:	f001 fc5c 	bl	8005060 <send_chart_config>
        send_chart_config(3, CHART3_MIN, CHART3_MAX, CHART3_OFFSET, CHART3_UNIT, CHART3_NAME, ptr);
 80037a8:	2003      	movs	r0, #3
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <init_tt+0x10c>)
 80037ac:	9402      	str	r4, [sp, #8]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	9000      	str	r0, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037b8:	4910      	ldr	r1, [pc, #64]	; (80037fc <init_tt+0x110>)
 80037ba:	f001 fc51 	bl	8005060 <send_chart_config>
	telemetry = 1;
 80037be:	2201      	movs	r2, #1
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <init_tt+0x114>)
 80037c2:	701a      	strb	r2, [r3, #0]
}
 80037c4:	b004      	add	sp, #16
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	0800ce8b 	.word	0x0800ce8b
 80037cc:	0800ce92 	.word	0x0800ce92
 80037d0:	0800ce99 	.word	0x0800ce99
 80037d4:	0800cea0 	.word	0x0800cea0
 80037d8:	fffff830 	.word	0xfffff830
 80037dc:	0800cea6 	.word	0x0800cea6
 80037e0:	0800ceb1 	.word	0x0800ceb1
 80037e4:	0800ceb9 	.word	0x0800ceb9
 80037e8:	0800cec5 	.word	0x0800cec5
 80037ec:	fffffe0c 	.word	0xfffffe0c
 80037f0:	0800cecd 	.word	0x0800cecd
 80037f4:	0800ced5 	.word	0x0800ced5
 80037f8:	0800cedd 	.word	0x0800cedd
 80037fc:	fffffe70 	.word	0xfffffe70
 8003800:	200005f0 	.word	0x200005f0

08003804 <command_tterm>:
uint8_t command_tterm(char *commandline, port_str *ptr){
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4605      	mov	r5, r0
    SKIP_SPACE(commandline);
 8003808:	7803      	ldrb	r3, [r0, #0]
uint8_t command_tterm(char *commandline, port_str *ptr){
 800380a:	460c      	mov	r4, r1
    SKIP_SPACE(commandline);
 800380c:	2b20      	cmp	r3, #32
 800380e:	bf08      	it	eq
 8003810:	3501      	addeq	r5, #1
    CHECK_NULL(commandline);
 8003812:	782b      	ldrb	r3, [r5, #0]
 8003814:	b1a3      	cbz	r3, 8003840 <command_tterm+0x3c>
	if (ntlibc_stricmp(commandline, "start") == 0) {
 8003816:	4910      	ldr	r1, [pc, #64]	; (8003858 <command_tterm+0x54>)
 8003818:	4628      	mov	r0, r5
 800381a:	f001 fcd3 	bl	80051c4 <ntlibc_stricmp>
 800381e:	b930      	cbnz	r0, 800382e <command_tterm+0x2a>
        ptr->term_mode = PORT_TERM_TT;
 8003820:	2001      	movs	r0, #1
        init_tt(pdTRUE,ptr);
 8003822:	4621      	mov	r1, r4
        ptr->term_mode = PORT_TERM_TT;
 8003824:	70a0      	strb	r0, [r4, #2]
        init_tt(pdTRUE,ptr);
 8003826:	f7ff ff61 	bl	80036ec <init_tt>
}
 800382a:	2001      	movs	r0, #1
 800382c:	bd38      	pop	{r3, r4, r5, pc}
	if (ntlibc_stricmp(commandline, "stop") == 0) {
 800382e:	490b      	ldr	r1, [pc, #44]	; (800385c <command_tterm+0x58>)
 8003830:	4628      	mov	r0, r5
 8003832:	f001 fcc7 	bl	80051c4 <ntlibc_stricmp>
 8003836:	b918      	cbnz	r0, 8003840 <command_tterm+0x3c>
	telemetry = 0;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <command_tterm+0x5c>)
        ptr->term_mode = PORT_TERM_VT100;
 800383a:	70a0      	strb	r0, [r4, #2]
	telemetry = 0;
 800383c:	7018      	strb	r0, [r3, #0]
        return 1;
 800383e:	e7f4      	b.n	800382a <command_tterm+0x26>
    HELP_TEXT("Usage: tterm [start|stop]\r\n");
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fa0d 	bl	8002c60 <Term_Color_Red>
 8003846:	4621      	mov	r1, r4
 8003848:	4806      	ldr	r0, [pc, #24]	; (8003864 <command_tterm+0x60>)
 800384a:	f7fe feb2 	bl	80025b2 <send_string>
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fa16 	bl	8002c80 <Term_Color_White>
 8003854:	e7e9      	b.n	800382a <command_tterm+0x26>
 8003856:	bf00      	nop
 8003858:	0800ce00 	.word	0x0800ce00
 800385c:	0800ce06 	.word	0x0800ce06
 8003860:	200005f0 	.word	0x200005f0
 8003864:	0800ce6f 	.word	0x0800ce6f

08003868 <send_signal_state>:

/*****************************************************************************
* Signal debugging
******************************************************************************/

void send_signal_state(uint8_t signal, uint8_t inverted, port_str *ptr){
 8003868:	b510      	push	{r4, lr}
 800386a:	4614      	mov	r4, r2
    if(inverted) signal = !signal; 
 800386c:	b111      	cbz	r1, 8003874 <send_signal_state+0xc>
 800386e:	fab0 f080 	clz	r0, r0
 8003872:	0940      	lsrs	r0, r0, #5
    if(signal){
 8003874:	b178      	cbz	r0, 8003896 <send_signal_state+0x2e>
        Term_Color_Red(ptr);
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff f9f2 	bl	8002c60 <Term_Color_Red>
        SEND_CONST_STRING("true \r\n",ptr);
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <send_signal_state+0x44>)
 800387e:	f001 fc70 	bl	8005162 <ntlibc_strlen>
 8003882:	4622      	mov	r2, r4
 8003884:	b281      	uxth	r1, r0
 8003886:	4809      	ldr	r0, [pc, #36]	; (80038ac <send_signal_state+0x44>)
        Term_Color_White(ptr);  
    }else{
        Term_Color_Green(ptr);
        SEND_CONST_STRING("false\r\n",ptr);
 8003888:	f7fe feb4 	bl	80025f4 <send_buffer>
        Term_Color_White(ptr);
 800388c:	4620      	mov	r0, r4
    }
}
 800388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Term_Color_White(ptr);
 8003892:	f7ff b9f5 	b.w	8002c80 <Term_Color_White>
        Term_Color_Green(ptr);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff f9d2 	bl	8002c40 <Term_Color_Green>
        SEND_CONST_STRING("false\r\n",ptr);
 800389c:	4804      	ldr	r0, [pc, #16]	; (80038b0 <send_signal_state+0x48>)
 800389e:	f001 fc60 	bl	8005162 <ntlibc_strlen>
 80038a2:	4622      	mov	r2, r4
 80038a4:	b281      	uxth	r1, r0
 80038a6:	4802      	ldr	r0, [pc, #8]	; (80038b0 <send_signal_state+0x48>)
 80038a8:	e7ee      	b.n	8003888 <send_signal_state+0x20>
 80038aa:	bf00      	nop
 80038ac:	0800cef3 	.word	0x0800cef3
 80038b0:	0800cefb 	.word	0x0800cefb

080038b4 <send_signal_state_wo>:
void send_signal_state_wo(uint8_t signal, uint8_t inverted, port_str *ptr){
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4614      	mov	r4, r2
    if(inverted) signal = !signal; 
 80038b8:	b111      	cbz	r1, 80038c0 <send_signal_state_wo+0xc>
 80038ba:	fab0 f080 	clz	r0, r0
 80038be:	0940      	lsrs	r0, r0, #5
    if(signal){
 80038c0:	b178      	cbz	r0, 80038e2 <send_signal_state_wo+0x2e>
        Term_Color_Red(ptr);
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff f9cc 	bl	8002c60 <Term_Color_Red>
        SEND_CONST_STRING("true ",ptr);
 80038c8:	480b      	ldr	r0, [pc, #44]	; (80038f8 <send_signal_state_wo+0x44>)
 80038ca:	f001 fc4a 	bl	8005162 <ntlibc_strlen>
 80038ce:	4622      	mov	r2, r4
 80038d0:	b281      	uxth	r1, r0
 80038d2:	4809      	ldr	r0, [pc, #36]	; (80038f8 <send_signal_state_wo+0x44>)
        Term_Color_White(ptr);  
    }else{
        Term_Color_Green(ptr);
        SEND_CONST_STRING("false",ptr);
 80038d4:	f7fe fe8e 	bl	80025f4 <send_buffer>
        Term_Color_White(ptr);
 80038d8:	4620      	mov	r0, r4
    }
}
 80038da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Term_Color_White(ptr);
 80038de:	f7ff b9cf 	b.w	8002c80 <Term_Color_White>
        Term_Color_Green(ptr);
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff f9ac 	bl	8002c40 <Term_Color_Green>
        SEND_CONST_STRING("false",ptr);
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <send_signal_state_wo+0x48>)
 80038ea:	f001 fc3a 	bl	8005162 <ntlibc_strlen>
 80038ee:	4622      	mov	r2, r4
 80038f0:	b281      	uxth	r1, r0
 80038f2:	4802      	ldr	r0, [pc, #8]	; (80038fc <send_signal_state_wo+0x48>)
 80038f4:	e7ee      	b.n	80038d4 <send_signal_state_wo+0x20>
 80038f6:	bf00      	nop
 80038f8:	0800cf03 	.word	0x0800cf03
 80038fc:	0800cf09 	.word	0x0800cf09

08003900 <command_signals>:
extern ADC_HandleTypeDef hadc2;

extern volatile adc_buf_t adc_buffer;


uint8_t command_signals(char *commandline, port_str *ptr) {
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		send_buffer((uint8_t*)buf, ret, ptr);

		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
		send_buffer((uint8_t*)buf, ret, ptr);

		ret = snprintf_(buf, sizeof(buf), "VBAT: %f\r\n",DC_BUS_CNTtoV(adc_buffer.vbat));
 8003904:	f20f 2948 	addw	r9, pc, #584	; 0x248
 8003908:	e9d9 8900 	ldrd	r8, r9, [r9]
uint8_t command_signals(char *commandline, port_str *ptr) {
 800390c:	468a      	mov	sl, r1
    Term_Disable_Cursor(ptr);
 800390e:	4608      	mov	r0, r1
uint8_t command_signals(char *commandline, port_str *ptr) {
 8003910:	b093      	sub	sp, #76	; 0x4c
    Term_Disable_Cursor(ptr);
 8003912:	f7ff fbdb 	bl	80030cc <Term_Disable_Cursor>
    Term_Erase_Screen(ptr);
 8003916:	4650      	mov	r0, sl
 8003918:	f7ff f982 	bl	8002c20 <Term_Erase_Screen>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 800391c:	2400      	movs	r4, #0
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 800391e:	2600      	movs	r6, #0
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 8003920:	4d8d      	ldr	r5, [pc, #564]	; (8003b58 <command_signals+0x258>)
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8003922:	4f8e      	ldr	r7, [pc, #568]	; (8003b5c <command_signals+0x25c>)
    while(getch(ptr,100 /portTICK_RATE_MS) != 'q'){
 8003924:	2164      	movs	r1, #100	; 0x64
 8003926:	4650      	mov	r0, sl
 8003928:	f7fe fe17 	bl	800255a <getch>
 800392c:	2871      	cmp	r0, #113	; 0x71
 800392e:	d106      	bne.n	800393e <command_signals+0x3e>
		send_signal_state(HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin), pdFALSE, ptr);



    }
    Term_Enable_Cursor(ptr);
 8003930:	4650      	mov	r0, sl
 8003932:	f7ff fbdb 	bl	80030ec <Term_Enable_Cursor>
	return 1;
}
 8003936:	2001      	movs	r0, #1
 8003938:	b013      	add	sp, #76	; 0x4c
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Term_Move_Cursor(1,1,ptr);
 800393e:	2101      	movs	r1, #1
 8003940:	4652      	mov	r2, sl
 8003942:	4608      	mov	r0, r1
 8003944:	f7ff fb02 	bl	8002f4c <Term_Move_Cursor>
		SEND_CONST_STRING("Signal state (q for quit):\r\n", ptr);
 8003948:	4885      	ldr	r0, [pc, #532]	; (8003b60 <command_signals+0x260>)
 800394a:	f001 fc0a 	bl	8005162 <ntlibc_strlen>
 800394e:	4652      	mov	r2, sl
 8003950:	b281      	uxth	r1, r0
 8003952:	4883      	ldr	r0, [pc, #524]	; (8003b60 <command_signals+0x260>)
 8003954:	f7fe fe4e 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("**************************\r\n", ptr);
 8003958:	4882      	ldr	r0, [pc, #520]	; (8003b64 <command_signals+0x264>)
 800395a:	f001 fc02 	bl	8005162 <ntlibc_strlen>
 800395e:	4652      	mov	r2, sl
 8003960:	b281      	uxth	r1, r0
 8003962:	4880      	ldr	r0, [pc, #512]	; (8003b64 <command_signals+0x264>)
 8003964:	f7fe fe46 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("HALL A:", ptr);
 8003968:	487f      	ldr	r0, [pc, #508]	; (8003b68 <command_signals+0x268>)
 800396a:	f001 fbfa 	bl	8005162 <ntlibc_strlen>
 800396e:	4652      	mov	r2, sl
 8003970:	b281      	uxth	r1, r0
 8003972:	487d      	ldr	r0, [pc, #500]	; (8003b68 <command_signals+0x268>)
 8003974:	f7fe fe3e 	bl	80025f4 <send_buffer>
		send_signal_state_wo(HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin), pdFALSE, ptr);
 8003978:	2110      	movs	r1, #16
 800397a:	487c      	ldr	r0, [pc, #496]	; (8003b6c <command_signals+0x26c>)
 800397c:	f003 fa26 	bl	8006dcc <HAL_GPIO_ReadPin>
 8003980:	4652      	mov	r2, sl
 8003982:	2100      	movs	r1, #0
 8003984:	f7ff ff96 	bl	80038b4 <send_signal_state_wo>
		SEND_CONST_STRING("HALL B:", ptr);
 8003988:	4879      	ldr	r0, [pc, #484]	; (8003b70 <command_signals+0x270>)
 800398a:	f001 fbea 	bl	8005162 <ntlibc_strlen>
 800398e:	4652      	mov	r2, sl
 8003990:	b281      	uxth	r1, r0
 8003992:	4877      	ldr	r0, [pc, #476]	; (8003b70 <command_signals+0x270>)
 8003994:	f7fe fe2e 	bl	80025f4 <send_buffer>
		send_signal_state_wo(HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin), pdFALSE, ptr);
 8003998:	2120      	movs	r1, #32
 800399a:	4874      	ldr	r0, [pc, #464]	; (8003b6c <command_signals+0x26c>)
 800399c:	f003 fa16 	bl	8006dcc <HAL_GPIO_ReadPin>
 80039a0:	4652      	mov	r2, sl
 80039a2:	2100      	movs	r1, #0
 80039a4:	f7ff ff86 	bl	80038b4 <send_signal_state_wo>
		SEND_CONST_STRING("HALL C:", ptr);
 80039a8:	4872      	ldr	r0, [pc, #456]	; (8003b74 <command_signals+0x274>)
 80039aa:	f001 fbda 	bl	8005162 <ntlibc_strlen>
 80039ae:	4652      	mov	r2, sl
 80039b0:	b281      	uxth	r1, r0
 80039b2:	4870      	ldr	r0, [pc, #448]	; (8003b74 <command_signals+0x274>)
 80039b4:	f7fe fe1e 	bl	80025f4 <send_buffer>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 80039b8:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8003ba4 <command_signals+0x2a4>
		send_signal_state(HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin), pdFALSE, ptr);
 80039bc:	2101      	movs	r1, #1
 80039be:	486b      	ldr	r0, [pc, #428]	; (8003b6c <command_signals+0x26c>)
 80039c0:	f003 fa04 	bl	8006dcc <HAL_GPIO_ReadPin>
 80039c4:	4652      	mov	r2, sl
 80039c6:	2100      	movs	r1, #0
 80039c8:	f7ff ff4e 	bl	8003868 <send_signal_state>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 80039cc:	f8db 0000 	ldr.w	r0, [fp]
 80039d0:	f7fd f984 	bl	8000cdc <__aeabi_i2f>
 80039d4:	f7fc fd28 	bl	8000428 <__aeabi_f2d>
 80039d8:	462b      	mov	r3, r5
 80039da:	4622      	mov	r2, r4
 80039dc:	f7fc fea6 	bl	800072c <__aeabi_ddiv>
 80039e0:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <command_signals+0x278>)
 80039e2:	e9cd 0100 	strd	r0, r1, [sp]
 80039e6:	213c      	movs	r1, #60	; 0x3c
 80039e8:	a803      	add	r0, sp, #12
 80039ea:	f001 fb05 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 80039ee:	4652      	mov	r2, sl
 80039f0:	b2c1      	uxtb	r1, r0
 80039f2:	a803      	add	r0, sp, #12
 80039f4:	f7fe fdfe 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current B: %+f\r\n",(float)analog.curr_b/1000.0);
 80039f8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80039fc:	f7fd f96e 	bl	8000cdc <__aeabi_i2f>
 8003a00:	f7fc fd12 	bl	8000428 <__aeabi_f2d>
 8003a04:	462b      	mov	r3, r5
 8003a06:	4622      	mov	r2, r4
 8003a08:	f7fc fe90 	bl	800072c <__aeabi_ddiv>
 8003a0c:	4a5b      	ldr	r2, [pc, #364]	; (8003b7c <command_signals+0x27c>)
 8003a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a12:	213c      	movs	r1, #60	; 0x3c
 8003a14:	a803      	add	r0, sp, #12
 8003a16:	f001 faef 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	b2c1      	uxtb	r1, r0
 8003a1e:	a803      	add	r0, sp, #12
 8003a20:	f7fe fde8 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current C: %+f\r\n",(float)analog.curr_c/1000.0);
 8003a24:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003a28:	f7fd f958 	bl	8000cdc <__aeabi_i2f>
 8003a2c:	f7fc fcfc 	bl	8000428 <__aeabi_f2d>
 8003a30:	462b      	mov	r3, r5
 8003a32:	4622      	mov	r2, r4
 8003a34:	f7fc fe7a 	bl	800072c <__aeabi_ddiv>
 8003a38:	4a51      	ldr	r2, [pc, #324]	; (8003b80 <command_signals+0x280>)
 8003a3a:	e9cd 0100 	strd	r0, r1, [sp]
 8003a3e:	213c      	movs	r1, #60	; 0x3c
 8003a40:	a803      	add	r0, sp, #12
 8003a42:	f001 fad9 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a46:	4652      	mov	r2, sl
 8003a48:	b2c1      	uxtb	r1, r0
 8003a4a:	a803      	add	r0, sp, #12
 8003a4c:	f7fe fdd2 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current DC: %+f\r\n",(float)analog.curr_dc/1000.0);
 8003a50:	f8db 0014 	ldr.w	r0, [fp, #20]
 8003a54:	f7fd f942 	bl	8000cdc <__aeabi_i2f>
 8003a58:	f7fc fce6 	bl	8000428 <__aeabi_f2d>
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	4622      	mov	r2, r4
 8003a60:	f7fc fe64 	bl	800072c <__aeabi_ddiv>
 8003a64:	4a47      	ldr	r2, [pc, #284]	; (8003b84 <command_signals+0x284>)
 8003a66:	e9cd 0100 	strd	r0, r1, [sp]
 8003a6a:	213c      	movs	r1, #60	; 0x3c
 8003a6c:	a803      	add	r0, sp, #12
 8003a6e:	f001 fac3 	bl	8004ff8 <snprintf_>
		ret = snprintf_(buf, sizeof(buf), "Volt_A %u\r\n",adc_buffer.volt_a);
 8003a72:	f8df b134 	ldr.w	fp, [pc, #308]	; 8003ba8 <command_signals+0x2a8>
				send_buffer((uint8_t*)buf, ret, ptr);
 8003a76:	4652      	mov	r2, sl
 8003a78:	b2c1      	uxtb	r1, r0
 8003a7a:	a803      	add	r0, sp, #12
 8003a7c:	f7fe fdba 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_A %u\r\n",adc_buffer.volt_a);
 8003a80:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8003a84:	4a40      	ldr	r2, [pc, #256]	; (8003b88 <command_signals+0x288>)
 8003a86:	213c      	movs	r1, #60	; 0x3c
 8003a88:	a803      	add	r0, sp, #12
 8003a8a:	f001 fab5 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a8e:	4652      	mov	r2, sl
 8003a90:	b2c1      	uxtb	r1, r0
 8003a92:	a803      	add	r0, sp, #12
 8003a94:	f7fe fdae 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_B %u\r\n",adc_buffer.volt_b);
 8003a98:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8003a9c:	4a3b      	ldr	r2, [pc, #236]	; (8003b8c <command_signals+0x28c>)
 8003a9e:	213c      	movs	r1, #60	; 0x3c
 8003aa0:	a803      	add	r0, sp, #12
 8003aa2:	f001 faa9 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003aa6:	4652      	mov	r2, sl
 8003aa8:	b2c1      	uxtb	r1, r0
 8003aaa:	a803      	add	r0, sp, #12
 8003aac:	f7fe fda2 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_C %u\r\n",adc_buffer.volt_c);
 8003ab0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8003ab4:	4a36      	ldr	r2, [pc, #216]	; (8003b90 <command_signals+0x290>)
 8003ab6:	213c      	movs	r1, #60	; 0x3c
 8003ab8:	a803      	add	r0, sp, #12
 8003aba:	f001 fa9d 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003abe:	4652      	mov	r2, sl
 8003ac0:	b2c1      	uxtb	r1, r0
 8003ac2:	a803      	add	r0, sp, #12
 8003ac4:	f7fe fd96 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8003ac8:	f8bb 000c 	ldrh.w	r0, [fp, #12]
 8003acc:	f000 fe28 	bl	8004720 <NTC_ADC2Temperature>
 8003ad0:	f7fd f904 	bl	8000cdc <__aeabi_i2f>
 8003ad4:	f7fc fca8 	bl	8000428 <__aeabi_f2d>
 8003ad8:	463b      	mov	r3, r7
 8003ada:	4632      	mov	r2, r6
 8003adc:	f7fc fe26 	bl	800072c <__aeabi_ddiv>
 8003ae0:	4a2c      	ldr	r2, [pc, #176]	; (8003b94 <command_signals+0x294>)
 8003ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ae6:	213c      	movs	r1, #60	; 0x3c
 8003ae8:	a803      	add	r0, sp, #12
 8003aea:	f001 fa85 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003aee:	4652      	mov	r2, sl
 8003af0:	b2c1      	uxtb	r1, r0
 8003af2:	a803      	add	r0, sp, #12
 8003af4:	f7fe fd7e 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "VBAT: %f\r\n",DC_BUS_CNTtoV(adc_buffer.vbat));
 8003af8:	f643 005f 	movw	r0, #14431	; 0x385f
 8003afc:	f8bb 300e 	ldrh.w	r3, [fp, #14]
 8003b00:	4358      	muls	r0, r3
 8003b02:	f7fd f8e7 	bl	8000cd4 <__aeabi_ui2f>
 8003b06:	f7fc fc8f 	bl	8000428 <__aeabi_f2d>
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	f7fc fe0d 	bl	800072c <__aeabi_ddiv>
 8003b12:	4a21      	ldr	r2, [pc, #132]	; (8003b98 <command_signals+0x298>)
 8003b14:	e9cd 0100 	strd	r0, r1, [sp]
 8003b18:	213c      	movs	r1, #60	; 0x3c
 8003b1a:	a803      	add	r0, sp, #12
 8003b1c:	f001 fa6c 	bl	8004ff8 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003b20:	4652      	mov	r2, sl
 8003b22:	b2c1      	uxtb	r1, r0
 8003b24:	a803      	add	r0, sp, #12
 8003b26:	f7fe fd65 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("Power button:", ptr);
 8003b2a:	481c      	ldr	r0, [pc, #112]	; (8003b9c <command_signals+0x29c>)
 8003b2c:	f001 fb19 	bl	8005162 <ntlibc_strlen>
 8003b30:	4652      	mov	r2, sl
 8003b32:	b281      	uxth	r1, r0
 8003b34:	4819      	ldr	r0, [pc, #100]	; (8003b9c <command_signals+0x29c>)
 8003b36:	f7fe fd5d 	bl	80025f4 <send_buffer>
		send_signal_state(HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin), pdFALSE, ptr);
 8003b3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b3e:	4818      	ldr	r0, [pc, #96]	; (8003ba0 <command_signals+0x2a0>)
 8003b40:	f003 f944 	bl	8006dcc <HAL_GPIO_ReadPin>
 8003b44:	4652      	mov	r2, sl
 8003b46:	2100      	movs	r1, #0
 8003b48:	f7ff fe8e 	bl	8003868 <send_signal_state>
 8003b4c:	e6ea      	b.n	8003924 <command_signals+0x24>
 8003b4e:	bf00      	nop
 8003b50:	00000000 	.word	0x00000000
 8003b54:	412e8480 	.word	0x412e8480
 8003b58:	408f4000 	.word	0x408f4000
 8003b5c:	40240000 	.word	0x40240000
 8003b60:	0800cd23 	.word	0x0800cd23
 8003b64:	0800cd40 	.word	0x0800cd40
 8003b68:	0800cd5d 	.word	0x0800cd5d
 8003b6c:	40010c00 	.word	0x40010c00
 8003b70:	0800cd65 	.word	0x0800cd65
 8003b74:	0800cd6d 	.word	0x0800cd6d
 8003b78:	0800cd75 	.word	0x0800cd75
 8003b7c:	0800cd86 	.word	0x0800cd86
 8003b80:	0800cd97 	.word	0x0800cd97
 8003b84:	0800cda8 	.word	0x0800cda8
 8003b88:	0800cdba 	.word	0x0800cdba
 8003b8c:	0800cdc6 	.word	0x0800cdc6
 8003b90:	0800cdd2 	.word	0x0800cdd2
 8003b94:	0800cdde 	.word	0x0800cdde
 8003b98:	0800cde7 	.word	0x0800cde7
 8003b9c:	0800cdf2 	.word	0x0800cdf2
 8003ba0:	40011000 	.word	0x40011000
 8003ba4:	2000419c 	.word	0x2000419c
 8003ba8:	20004368 	.word	0x20004368

08003bac <nt_interpret>:


/*****************************************************************************
* Interprets the Input String
******************************************************************************/
void nt_interpret(char *text, port_str *ptr) {
 8003bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bb0:	4607      	mov	r7, r0
 8003bb2:	460d      	mov	r5, r1
 8003bb4:	1e46      	subs	r6, r0, #1
    int8_t max_len=-1;
    int8_t max_index=-1;
    
    char* p_text=text;
    while(*p_text){
 8003bb6:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8003bba:	f010 04df 	ands.w	r4, r0, #223	; 0xdf
 8003bbe:	d131      	bne.n	8003c24 <nt_interpret+0x78>
 8003bc0:	f04f 36ff 	mov.w	r6, #4294967295
 8003bc4:	230c      	movs	r3, #12
 8003bc6:	46b1      	mov	r9, r6
        *p_text=ntlibc_tolower(*p_text);
        p_text++;
    }
    
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
        uint8_t text_len = ntlibc_strlen(commands[current_command].text);
 8003bc8:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003c70 <nt_interpret+0xc4>
 8003bcc:	fb03 f104 	mul.w	r1, r3, r4
 8003bd0:	f851 0008 	ldr.w	r0, [r1, r8]
 8003bd4:	9301      	str	r3, [sp, #4]
 8003bd6:	9100      	str	r1, [sp, #0]
 8003bd8:	f001 fac3 	bl	8005162 <ntlibc_strlen>
		if (memcmp(text, commands[current_command].text, text_len) == 0) {
 8003bdc:	9900      	ldr	r1, [sp, #0]
 8003bde:	fa5f fb80 	uxtb.w	fp, r0
        uint8_t text_len = ntlibc_strlen(commands[current_command].text);
 8003be2:	4682      	mov	sl, r0
		if (memcmp(text, commands[current_command].text, text_len) == 0) {
 8003be4:	465a      	mov	r2, fp
 8003be6:	f851 1008 	ldr.w	r1, [r1, r8]
 8003bea:	4638      	mov	r0, r7
 8003bec:	f006 fb3c 	bl	800a268 <memcmp>
 8003bf0:	9b01      	ldr	r3, [sp, #4]
 8003bf2:	b920      	cbnz	r0, 8003bfe <nt_interpret+0x52>
            if(text_len > max_len){
 8003bf4:	45d9      	cmp	r9, fp
			    max_len = text_len;
 8003bf6:	bfbc      	itt	lt
 8003bf8:	fa4f f98a 	sxtblt.w	r9, sl
                max_index = current_command;
 8003bfc:	b266      	sxtblt	r6, r4
 8003bfe:	3401      	adds	r4, #1
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
 8003c00:	2c0d      	cmp	r4, #13
 8003c02:	d1e3      	bne.n	8003bcc <nt_interpret+0x20>
            }
		}
	}
    
    if(max_index != -1){
 8003c04:	1c73      	adds	r3, r6, #1
 8003c06:	d011      	beq.n	8003c2c <nt_interpret+0x80>
       commands[max_index].commandFunction((char *)strchr(text, ' '), ptr);
 8003c08:	2120      	movs	r1, #32
 8003c0a:	4638      	mov	r0, r7
 8003c0c:	f006 fb4e 	bl	800a2ac <strchr>
 8003c10:	230c      	movs	r3, #12
 8003c12:	4629      	mov	r1, r5
 8003c14:	4a16      	ldr	r2, [pc, #88]	; (8003c70 <nt_interpret+0xc4>)
 8003c16:	fb03 2606 	mla	r6, r3, r6, r2
 8003c1a:	6873      	ldr	r3, [r6, #4]
		SEND_CONST_STRING("Unknown Command: ", ptr);
		send_string(text, ptr);
		SEND_CONST_STRING("\r\n", ptr);
		Term_Color_White(ptr);
	}
}
 8003c1c:	b003      	add	sp, #12
 8003c1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       commands[max_index].commandFunction((char *)strchr(text, ' '), ptr);
 8003c22:	4718      	bx	r3
        *p_text=ntlibc_tolower(*p_text);
 8003c24:	f001 fae8 	bl	80051f8 <ntlibc_tolower>
 8003c28:	7030      	strb	r0, [r6, #0]
 8003c2a:	e7c4      	b.n	8003bb6 <nt_interpret+0xa>
	if (*text) {
 8003c2c:	783b      	ldrb	r3, [r7, #0]
 8003c2e:	b1e3      	cbz	r3, 8003c6a <nt_interpret+0xbe>
		Term_Color_Red(ptr);
 8003c30:	4628      	mov	r0, r5
 8003c32:	f7ff f815 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("Unknown Command: ", ptr);
 8003c36:	480f      	ldr	r0, [pc, #60]	; (8003c74 <nt_interpret+0xc8>)
 8003c38:	f001 fa93 	bl	8005162 <ntlibc_strlen>
 8003c3c:	462a      	mov	r2, r5
 8003c3e:	b281      	uxth	r1, r0
 8003c40:	480c      	ldr	r0, [pc, #48]	; (8003c74 <nt_interpret+0xc8>)
 8003c42:	f7fe fcd7 	bl	80025f4 <send_buffer>
		send_string(text, ptr);
 8003c46:	4629      	mov	r1, r5
 8003c48:	4638      	mov	r0, r7
 8003c4a:	f7fe fcb2 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003c4e:	480a      	ldr	r0, [pc, #40]	; (8003c78 <nt_interpret+0xcc>)
 8003c50:	f001 fa87 	bl	8005162 <ntlibc_strlen>
 8003c54:	462a      	mov	r2, r5
 8003c56:	b281      	uxth	r1, r0
 8003c58:	4807      	ldr	r0, [pc, #28]	; (8003c78 <nt_interpret+0xcc>)
 8003c5a:	f7fe fccb 	bl	80025f4 <send_buffer>
		Term_Color_White(ptr);
 8003c5e:	4628      	mov	r0, r5
}
 8003c60:	b003      	add	sp, #12
 8003c62:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Term_Color_White(ptr);
 8003c66:	f7ff b80b 	b.w	8002c80 <Term_Color_White>
}
 8003c6a:	b003      	add	sp, #12
 8003c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c70:	20000110 	.word	0x20000110
 8003c74:	0800cee1 	.word	0x0800cee1
 8003c78:	0800cc67 	.word	0x0800cc67

08003c7c <StartDefaultTask>:
/* USER CODE END Header_StartDefaultTask */
uint8_t led_pattern=LED_OK;
extern ExtY     rtY_Left;

void StartDefaultTask(void *argument)
{
 8003c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	for(;;)
	{
		if(rtY_Left.z_errCode) led_pattern = LED_MOTOR_ERROR;
 8003c80:	f04f 0802 	mov.w	r8, #2
 8003c84:	4f10      	ldr	r7, [pc, #64]	; (8003cc8 <StartDefaultTask+0x4c>)
 8003c86:	4d11      	ldr	r5, [pc, #68]	; (8003ccc <StartDefaultTask+0x50>)
 8003c88:	79bb      	ldrb	r3, [r7, #6]
 8003c8a:	b10b      	cbz	r3, 8003c90 <StartDefaultTask+0x14>
 8003c8c:	f885 8000 	strb.w	r8, [r5]
{
 8003c90:	2400      	movs	r4, #0
		for(uint8_t i=0;i<led_pattern;i++){
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 8003c92:	4e0f      	ldr	r6, [pc, #60]	; (8003cd0 <StartDefaultTask+0x54>)
		for(uint8_t i=0;i<led_pattern;i++){
 8003c94:	782a      	ldrb	r2, [r5, #0]
 8003c96:	b2e3      	uxtb	r3, r4
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	f104 0401 	add.w	r4, r4, #1
 8003c9e:	d804      	bhi.n	8003caa <StartDefaultTask+0x2e>
			vTaskDelay(200 / portTICK_PERIOD_MS);
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdTRUE);
		}
		vTaskDelay(1000 / portTICK_PERIOD_MS);
 8003ca0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ca4:	f005 fb94 	bl	80093d0 <vTaskDelay>
		if(rtY_Left.z_errCode) led_pattern = LED_MOTOR_ERROR;
 8003ca8:	e7ee      	b.n	8003c88 <StartDefaultTask+0xc>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdFALSE);
 8003caa:	2200      	movs	r2, #0
 8003cac:	2102      	movs	r1, #2
 8003cae:	4630      	mov	r0, r6
 8003cb0:	f003 f892 	bl	8006dd8 <HAL_GPIO_WritePin>
			vTaskDelay(200 / portTICK_PERIOD_MS);
 8003cb4:	20c8      	movs	r0, #200	; 0xc8
 8003cb6:	f005 fb8b 	bl	80093d0 <vTaskDelay>
			HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, pdTRUE);
 8003cba:	2201      	movs	r2, #1
 8003cbc:	2102      	movs	r1, #2
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	f003 f88a 	bl	8006dd8 <HAL_GPIO_WritePin>
 8003cc4:	e7e6      	b.n	8003c94 <StartDefaultTask+0x18>
 8003cc6:	bf00      	nop
 8003cc8:	2000449c 	.word	0x2000449c
 8003ccc:	20000338 	.word	0x20000338
 8003cd0:	40011400 	.word	0x40011400

08003cd4 <SystemClock_Config>:
{
 8003cd4:	b530      	push	{r4, r5, lr}
 8003cd6:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003cd8:	2220      	movs	r2, #32
 8003cda:	2100      	movs	r1, #0
 8003cdc:	a80b      	add	r0, sp, #44	; 0x2c
 8003cde:	f006 fadd 	bl	800a29c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ce2:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ce4:	2510      	movs	r5, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ce6:	eb0d 0002 	add.w	r0, sp, r2
 8003cea:	2100      	movs	r1, #0
 8003cec:	f006 fad6 	bl	800a29c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cf0:	462a      	mov	r2, r5
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	a801      	add	r0, sp, #4
 8003cf6:	f006 fad1 	bl	800a29c <memset>
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003cfa:	2301      	movs	r3, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003cfc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003cfe:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003d02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d06:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8003d08:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003d0a:	940a      	str	r4, [sp, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d0c:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003d0e:	f003 f869 	bl	8006de4 <HAL_RCC_OscConfig>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003d12:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003d18:	e9cd 3405 	strd	r3, r4, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d1c:	2300      	movs	r3, #0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d1e:	4621      	mov	r1, r4
 8003d20:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003d22:	e9cd 3207 	strd	r3, r2, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003d26:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003d28:	f003 fa34 	bl	8007194 <HAL_RCC_ClockConfig>
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003d2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d30:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003d32:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8003d34:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d36:	f003 fb07 	bl	8007348 <HAL_RCCEx_PeriphCLKConfig>
}
 8003d3a:	b015      	add	sp, #84	; 0x54
 8003d3c:	bd30      	pop	{r4, r5, pc}
	...

08003d40 <main>:
{
 8003d40:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d44:	f04f 0b10 	mov.w	fp, #16
{
 8003d48:	b09d      	sub	sp, #116	; 0x74
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d4a:	4dcd      	ldr	r5, [pc, #820]	; (8004080 <main+0x340>)
  HAL_Init();
 8003d4c:	f002 fa0e 	bl	800616c <HAL_Init>
  SystemClock_Config();
 8003d50:	f7ff ffc0 	bl	8003cd4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d54:	465a      	mov	r2, fp
 8003d56:	2100      	movs	r1, #0
 8003d58:	a814      	add	r0, sp, #80	; 0x50
 8003d5a:	f006 fa9f 	bl	800a29c <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d5e:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8003d60:	2201      	movs	r2, #1
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d62:	ea43 030b 	orr.w	r3, r3, fp
 8003d66:	61ab      	str	r3, [r5, #24]
 8003d68:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8003d6a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d6e:	ea03 030b 	and.w	r3, r3, fp
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	9b03      	ldr	r3, [sp, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d76:	69ab      	ldr	r3, [r5, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8003d78:	48c2      	ldr	r0, [pc, #776]	; (8004084 <main+0x344>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d7a:	f043 0320 	orr.w	r3, r3, #32
 8003d7e:	61ab      	str	r3, [r5, #24]
 8003d80:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d82:	2400      	movs	r4, #0
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003d84:	f003 0320 	and.w	r3, r3, #32
 8003d88:	9304      	str	r3, [sp, #16]
 8003d8a:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8c:	69ab      	ldr	r3, [r5, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d8e:	f04f 0a02 	mov.w	sl, #2
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d92:	f043 0304 	orr.w	r3, r3, #4
 8003d96:	61ab      	str	r3, [r5, #24]
 8003d98:	69ab      	ldr	r3, [r5, #24]
  hadc1.Instance = ADC1;
 8003d9a:	4ebb      	ldr	r6, [pc, #748]	; (8004088 <main+0x348>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9c:	f003 0304 	and.w	r3, r3, #4
 8003da0:	9305      	str	r3, [sp, #20]
 8003da2:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da4:	69ab      	ldr	r3, [r5, #24]
  hadc1.Init.NbrOfConversion = 4;
 8003da6:	f04f 0804 	mov.w	r8, #4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003daa:	f043 0308 	orr.w	r3, r3, #8
 8003dae:	61ab      	str	r3, [r5, #24]
 8003db0:	69ab      	ldr	r3, [r5, #24]
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8003db2:	f10d 0970 	add.w	r9, sp, #112	; 0x70
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	9306      	str	r3, [sp, #24]
 8003dbc:	9b06      	ldr	r3, [sp, #24]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, GPIO_PIN_SET);
 8003dbe:	f003 f80b 	bl	8006dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	2102      	movs	r1, #2
 8003dc6:	48b1      	ldr	r0, [pc, #708]	; (800408c <main+0x34c>)
 8003dc8:	f003 f806 	bl	8006dd8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LIGHT_GPIO_Port, LIGHT_Pin, GPIO_PIN_RESET);
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dd2:	48af      	ldr	r0, [pc, #700]	; (8004090 <main+0x350>)
 8003dd4:	f003 f800 	bl	8006dd8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003dd8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
  HAL_GPIO_Init(PWR_BTN_GPIO_Port, &GPIO_InitStruct);
 8003ddc:	a914      	add	r1, sp, #80	; 0x50
 8003dde:	48a9      	ldr	r0, [pc, #676]	; (8004084 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de0:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de4:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(PWR_BTN_GPIO_Port, &GPIO_InitStruct);
 8003de6:	f002 ff11 	bl	8006c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003dea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003dee:	2301      	movs	r3, #1
  HAL_GPIO_Init(TPS_ENA_GPIO_Port, &GPIO_InitStruct);
 8003df0:	a914      	add	r1, sp, #80	; 0x50
 8003df2:	48a4      	ldr	r0, [pc, #656]	; (8004084 <main+0x344>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003df4:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfc:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(TPS_ENA_GPIO_Port, &GPIO_InitStruct);
 8003dfe:	f002 ff05 	bl	8006c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e02:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e04:	a914      	add	r1, sp, #80	; 0x50
 8003e06:	48a1      	ldr	r0, [pc, #644]	; (800408c <main+0x34c>)
  GPIO_InitStruct.Pin = LED_Pin;
 8003e08:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e0c:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e10:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003e14:	f002 fefa 	bl	8006c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = HALL_C_Pin|HALL_A_Pin|HALL_B_Pin;
 8003e18:	2331      	movs	r3, #49	; 0x31
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1a:	a914      	add	r1, sp, #80	; 0x50
 8003e1c:	489d      	ldr	r0, [pc, #628]	; (8004094 <main+0x354>)
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e1e:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e22:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e24:	f002 fef2 	bl	8006c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  HAL_GPIO_Init(LIGHT_GPIO_Port, &GPIO_InitStruct);
 8003e2e:	4898      	ldr	r0, [pc, #608]	; (8004090 <main+0x350>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e30:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(LIGHT_GPIO_Port, &GPIO_InitStruct);
 8003e34:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e36:	e9cd 4a16 	strd	r4, sl, [sp, #88]	; 0x58
  HAL_GPIO_Init(LIGHT_GPIO_Port, &GPIO_InitStruct);
 8003e3a:	f002 fee7 	bl	8006c0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003e3e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e40:	e9cd 3a14 	strd	r3, sl, [sp, #80]	; 0x50
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e44:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e46:	a914      	add	r1, sp, #80	; 0x50
 8003e48:	4892      	ldr	r0, [pc, #584]	; (8004094 <main+0x354>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e4a:	9317      	str	r3, [sp, #92]	; 0x5c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e4c:	f002 fede 	bl	8006c0c <HAL_GPIO_Init>
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003e50:	4a91      	ldr	r2, [pc, #580]	; (8004098 <main+0x358>)
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003e52:	2105      	movs	r1, #5
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003e54:	6853      	ldr	r3, [r2, #4]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003e56:	200b      	movs	r0, #11
  __HAL_AFIO_REMAP_PD01_ENABLE();
 8003e58:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e60:	6053      	str	r3, [r2, #4]
  __HAL_AFIO_REMAP_USART1_ENABLE();
 8003e62:	6853      	ldr	r3, [r2, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003e64:	2703      	movs	r7, #3
  __HAL_AFIO_REMAP_USART1_ENABLE();
 8003e66:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e6a:	f043 0304 	orr.w	r3, r3, #4
 8003e6e:	6053      	str	r3, [r2, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e70:	696b      	ldr	r3, [r5, #20]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003e72:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003e74:	f043 0301 	orr.w	r3, r3, #1
 8003e78:	616b      	str	r3, [r5, #20]
 8003e7a:	696b      	ldr	r3, [r5, #20]
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	9b02      	ldr	r3, [sp, #8]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003e84:	f002 fc08 	bl	8006698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8003e88:	200b      	movs	r0, #11
 8003e8a:	f002 fc39 	bl	8006700 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 8003e8e:	4622      	mov	r2, r4
 8003e90:	2105      	movs	r1, #5
 8003e92:	200c      	movs	r0, #12
 8003e94:	f002 fc00 	bl	8006698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8003e98:	200c      	movs	r0, #12
 8003e9a:	f002 fc31 	bl	8006700 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003e9e:	2105      	movs	r1, #5
 8003ea0:	4622      	mov	r2, r4
 8003ea2:	200d      	movs	r0, #13
 8003ea4:	f002 fbf8 	bl	8006698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003ea8:	200d      	movs	r0, #13
 8003eaa:	f002 fc29 	bl	8006700 <HAL_NVIC_EnableIRQ>
  hadc1.Instance = ADC1;
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <main+0x35c>)
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003eb0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
  hadc1.Instance = ADC1;
 8003eb4:	6033      	str	r3, [r6, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003eba:	4630      	mov	r0, r6
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003ebc:	60b3      	str	r3, [r6, #8]
 8003ebe:	9301      	str	r3, [sp, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003ec0:	61f2      	str	r2, [r6, #28]
  ADC_MultiModeTypeDef multimode = {0};
 8003ec2:	940d      	str	r4, [sp, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8003ec4:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8003ec8:	9416      	str	r4, [sp, #88]	; 0x58
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003eca:	7334      	strb	r4, [r6, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003ecc:	7534      	strb	r4, [r6, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ece:	6074      	str	r4, [r6, #4]
  hadc1.Init.NbrOfConversion = 4;
 8003ed0:	f8c6 8010 	str.w	r8, [r6, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ed4:	f002 fb20 	bl	8006518 <HAL_ADC_Init>
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8003ed8:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003edc:	f849 2d3c 	str.w	r2, [r9, #-60]!
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003ee0:	4649      	mov	r1, r9
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	f002 fb9a 	bl	800661c <HAL_ADCEx_MultiModeConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ee8:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003eea:	a914      	add	r1, sp, #80	; 0x50
 8003eec:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003eee:	e9cd 7314 	strd	r7, r3, [sp, #80]	; 0x50
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ef2:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ef4:	f002 f9d6 	bl	80062a4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_5;
 8003ef8:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003efa:	a914      	add	r1, sp, #80	; 0x50
 8003efc:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003efe:	e9cd 3a14 	strd	r3, sl, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f02:	f002 f9cf 	bl	80062a4 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f06:	2207      	movs	r2, #7
 8003f08:	2303      	movs	r3, #3
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f0a:	a914      	add	r1, sp, #80	; 0x50
 8003f0c:	4630      	mov	r0, r6
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f0e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f12:	f002 f9c7 	bl	80062a4 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f16:	a914      	add	r1, sp, #80	; 0x50
 8003f18:	4630      	mov	r0, r6
  hadc2.Instance = ADC2;
 8003f1a:	4f61      	ldr	r7, [pc, #388]	; (80040a0 <main+0x360>)
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f1c:	e9cd 4814 	strd	r4, r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003f20:	f002 f9c0 	bl	80062a4 <HAL_ADC_ConfigChannel>
  hadc2.Instance = ADC2;
 8003f24:	4a5f      	ldr	r2, [pc, #380]	; (80040a4 <main+0x364>)
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f26:	9b01      	ldr	r3, [sp, #4]
  hadc2.Instance = ADC2;
 8003f28:	603a      	str	r2, [r7, #0]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f2a:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f2e:	4638      	mov	r0, r7
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f30:	61fa      	str	r2, [r7, #28]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8003f32:	60bb      	str	r3, [r7, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f34:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8003f38:	9416      	str	r4, [sp, #88]	; 0x58
  hadc2.Init.ContinuousConvMode = DISABLE;
 8003f3a:	733c      	strb	r4, [r7, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8003f3c:	753c      	strb	r4, [r7, #20]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003f3e:	607c      	str	r4, [r7, #4]
  hadc2.Init.NbrOfConversion = 4;
 8003f40:	f8c7 8010 	str.w	r8, [r7, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8003f44:	f002 fae8 	bl	8006518 <HAL_ADC_Init>
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003f48:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f4a:	a914      	add	r1, sp, #80	; 0x50
 8003f4c:	4638      	mov	r0, r7
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003f4e:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
  sConfig.Channel = ADC_CHANNEL_4;
 8003f52:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f56:	f002 f9a5 	bl	80062a4 <HAL_ADC_ConfigChannel>
  sConfig.Channel = ADC_CHANNEL_6;
 8003f5a:	2206      	movs	r2, #6
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f5c:	a914      	add	r1, sp, #80	; 0x50
 8003f5e:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8003f60:	e9cd 2a14 	strd	r2, sl, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f64:	f002 f99e 	bl	80062a4 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f68:	2303      	movs	r3, #3
 8003f6a:	2209      	movs	r2, #9
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f6c:	a914      	add	r1, sp, #80	; 0x50
 8003f6e:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8003f70:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f74:	f002 f996 	bl	80062a4 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f78:	a914      	add	r1, sp, #80	; 0x50
 8003f7a:	4638      	mov	r0, r7
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8003f7c:	e9cd a814 	strd	sl, r8, [sp, #80]	; 0x50
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8003f80:	f002 f990 	bl	80062a4 <HAL_ADC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003f84:	465a      	mov	r2, fp
 8003f86:	4621      	mov	r1, r4
 8003f88:	a809      	add	r0, sp, #36	; 0x24
 8003f8a:	f006 f987 	bl	800a29c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f8e:	221c      	movs	r2, #28
 8003f90:	4621      	mov	r1, r4
 8003f92:	4648      	mov	r0, r9
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f94:	e9cd 4407 	strd	r4, r4, [sp, #28]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f98:	f006 f980 	bl	800a29c <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f9c:	4621      	mov	r1, r4
 8003f9e:	2220      	movs	r2, #32
 8003fa0:	a814      	add	r0, sp, #80	; 0x50
 8003fa2:	f006 f97b 	bl	800a29c <memset>
  htim1.Init.Period = 64000000 / 2 / PWM_FREQ;
 8003fa6:	f04f 0c20 	mov.w	ip, #32
 8003faa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim1.Instance = TIM1;
 8003fae:	f8df a104 	ldr.w	sl, [pc, #260]	; 80040b4 <main+0x374>
 8003fb2:	4a3d      	ldr	r2, [pc, #244]	; (80040a8 <main+0x368>)
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fb4:	4650      	mov	r0, sl
  htim1.Init.Period = 64000000 / 2 / PWM_FREQ;
 8003fb6:	e9ca c302 	strd	ip, r3, [sl, #8]
  htim1.Init.Prescaler = 0;
 8003fba:	e9ca 2400 	strd	r2, r4, [sl]
  htim1.Init.RepetitionCounter = 0;
 8003fbe:	e9ca 4404 	strd	r4, r4, [sl, #16]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003fc2:	f8ca 4018 	str.w	r4, [sl, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003fc6:	f003 fb9b 	bl	8007700 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fce:	a909      	add	r1, sp, #36	; 0x24
 8003fd0:	4650      	mov	r0, sl
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003fd2:	9309      	str	r3, [sp, #36]	; 0x24
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003fd4:	f003 fc60 	bl	8007898 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003fd8:	4650      	mov	r0, sl
 8003fda:	f003 fbab 	bl	8007734 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fde:	a907      	add	r1, sp, #28
 8003fe0:	4650      	mov	r0, sl
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fe2:	e9cd b407 	strd	fp, r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003fe6:	f003 fdb7 	bl	8007b58 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003fea:	9b01      	ldr	r3, [sp, #4]
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fec:	2260      	movs	r2, #96	; 0x60
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_SET;
 8003fee:	9312      	str	r3, [sp, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003ff0:	f44f 7300 	mov.w	r3, #512	; 0x200
  sConfigOC.Pulse = 0;
 8003ff4:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ff8:	4649      	mov	r1, r9
 8003ffa:	4622      	mov	r2, r4
 8003ffc:	4650      	mov	r0, sl
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_SET;
 8003ffe:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8004000:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004004:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004006:	f003 fbdb 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800400a:	4642      	mov	r2, r8
 800400c:	4649      	mov	r1, r9
 800400e:	4650      	mov	r0, sl
 8004010:	f003 fbd6 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8004014:	2208      	movs	r2, #8
 8004016:	4649      	mov	r1, r9
 8004018:	4650      	mov	r0, sl
 800401a:	f003 fbd1 	bl	80077c0 <HAL_TIM_PWM_ConfigChannel>
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 800401e:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 8004022:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004026:	e9cd e314 	strd	lr, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = DEAD_TIME;
 800402a:	2330      	movs	r3, #48	; 0x30
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800402c:	e9cd 3417 	strd	r3, r4, [sp, #92]	; 0x5c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004030:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8004034:	a914      	add	r1, sp, #80	; 0x50
 8004036:	4650      	mov	r0, sl
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8004038:	9319      	str	r3, [sp, #100]	; 0x64
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800403a:	9416      	str	r4, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800403c:	941b      	str	r4, [sp, #108]	; 0x6c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800403e:	f003 fda9 	bl	8007b94 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8004042:	4650      	mov	r0, sl
 8004044:	f000 f9d8 	bl	80043f8 <HAL_TIM_MspPostInit>
  huart3.Init.BaudRate = 115200;
 8004048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart3.Instance = USART3;
 800404c:	4b17      	ldr	r3, [pc, #92]	; (80040ac <main+0x36c>)
  huart3.Init.BaudRate = 115200;
 800404e:	4918      	ldr	r1, [pc, #96]	; (80040b0 <main+0x370>)
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004050:	4618      	mov	r0, r3
  huart3.Init.BaudRate = 115200;
 8004052:	e9c3 1200 	strd	r1, r2, [r3]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004056:	220c      	movs	r2, #12
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004058:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800405c:	e9c3 2405 	strd	r2, r4, [r3, #20]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004060:	611c      	str	r4, [r3, #16]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004062:	61dc      	str	r4, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004064:	9301      	str	r3, [sp, #4]
 8004066:	f003 fe05 	bl	8007c74 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800406a:	465a      	mov	r2, fp
 800406c:	4621      	mov	r1, r4
 800406e:	4648      	mov	r0, r9
 8004070:	f006 f914 	bl	800a29c <memset>
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8004074:	4621      	mov	r1, r4
 8004076:	2214      	movs	r2, #20
 8004078:	a814      	add	r0, sp, #80	; 0x50
 800407a:	f006 f90f 	bl	800a29c <memset>
 800407e:	e01b      	b.n	80040b8 <main+0x378>
 8004080:	40021000 	.word	0x40021000
 8004084:	40011000 	.word	0x40011000
 8004088:	200042f4 	.word	0x200042f4
 800408c:	40011400 	.word	0x40011400
 8004090:	40010800 	.word	0x40010800
 8004094:	40010c00 	.word	0x40010c00
 8004098:	40010000 	.word	0x40010000
 800409c:	40012400 	.word	0x40012400
 80040a0:	20004240 	.word	0x20004240
 80040a4:	40012800 	.word	0x40012800
 80040a8:	40012c00 	.word	0x40012c00
 80040ac:	20004200 	.word	0x20004200
 80040b0:	40004800 	.word	0x40004800
 80040b4:	20004378 	.word	0x20004378
  htim3.Init.Period = 64000000 / 2 / PWM_FREQ;
 80040b8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
  htim3.Instance = TIM3;
 80040bc:	f8df b174 	ldr.w	fp, [pc, #372]	; 8004234 <main+0x4f4>
 80040c0:	4a53      	ldr	r2, [pc, #332]	; (8004210 <main+0x4d0>)
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040c2:	4658      	mov	r0, fp
  htim3.Init.Prescaler = 0;
 80040c4:	e9cb 2400 	strd	r2, r4, [fp]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040c8:	e9cb 3403 	strd	r3, r4, [fp, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80040cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80040d0:	f8cb 4008 	str.w	r4, [fp, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040d4:	f8cb 4018 	str.w	r4, [fp, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80040d8:	f003 fb12 	bl	8007700 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040e0:	4649      	mov	r1, r9
 80040e2:	4658      	mov	r0, fp
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80040e4:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80040e6:	f003 fbd7 	bl	8007898 <HAL_TIM_ConfigClockSource>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80040ea:	2305      	movs	r3, #5
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80040ec:	a914      	add	r1, sp, #80	; 0x50
 80040ee:	4658      	mov	r0, fp
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80040f0:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80040f4:	f003 fcb6 	bl	8007a64 <HAL_TIM_SlaveConfigSynchro>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80040f8:	2320      	movs	r3, #32
 80040fa:	2280      	movs	r2, #128	; 0x80
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80040fc:	a909      	add	r1, sp, #36	; 0x24
 80040fe:	4658      	mov	r0, fp
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8004100:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8004104:	f003 fd28 	bl	8007b58 <HAL_TIMEx_MasterConfigSynchronization>
  DBGMCU->CR |= DBGMCU_CR_DBG_TIM1_STOP;
 8004108:	4942      	ldr	r1, [pc, #264]	; (8004214 <main+0x4d4>)
 800410a:	684a      	ldr	r2, [r1, #4]
 800410c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004110:	604a      	str	r2, [r1, #4]
  osKernelInitialize();
 8004112:	f003 ffab 	bl	800806c <osKernelInitialize>
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, pdTRUE);
 8004116:	2201      	movs	r2, #1
 8004118:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800411c:	483e      	ldr	r0, [pc, #248]	; (8004218 <main+0x4d8>)
 800411e:	f002 fe5b 	bl	8006dd8 <HAL_GPIO_WritePin>
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004122:	4a3e      	ldr	r2, [pc, #248]	; (800421c <main+0x4dc>)
 8004124:	4621      	mov	r1, r4
 8004126:	483e      	ldr	r0, [pc, #248]	; (8004220 <main+0x4e0>)
 8004128:	f003 ffdc 	bl	80080e4 <osThreadNew>
 800412c:	4a3d      	ldr	r2, [pc, #244]	; (8004224 <main+0x4e4>)
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, pdTRUE);
 800412e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004132:	6010      	str	r0, [r2, #0]
  HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, pdTRUE);
 8004134:	2201      	movs	r2, #1
 8004136:	4838      	ldr	r0, [pc, #224]	; (8004218 <main+0x4d8>)
 8004138:	f002 fe4e 	bl	8006dd8 <HAL_GPIO_WritePin>
  tsk_cli_Start(&huart3);
 800413c:	9b01      	ldr	r3, [sp, #4]
 800413e:	4618      	mov	r0, r3
 8004140:	f001 fdfa 	bl	8005d38 <tsk_cli_Start>
  HAL_ADC_Start(&hadc1);
 8004144:	4630      	mov	r0, r6
 8004146:	f002 f963 	bl	8006410 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 800414a:	4638      	mov	r0, r7
 800414c:	f002 f960 	bl	8006410 <HAL_ADC_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8004150:	4621      	mov	r1, r4
 8004152:	4650      	mov	r0, sl
 8004154:	f003 fcd8 	bl	8007b08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8004158:	4641      	mov	r1, r8
 800415a:	4650      	mov	r0, sl
 800415c:	f003 fcd4 	bl	8007b08 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8004160:	2108      	movs	r1, #8
 8004162:	4650      	mov	r0, sl
 8004164:	f003 fcd0 	bl	8007b08 <HAL_TIM_PWM_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8004168:	4621      	mov	r1, r4
 800416a:	4650      	mov	r0, sl
 800416c:	f003 fcf2 	bl	8007b54 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8004170:	4641      	mov	r1, r8
 8004172:	4650      	mov	r0, sl
 8004174:	f003 fcee 	bl	8007b54 <HAL_TIMEx_PWMN_Start>
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8004178:	2108      	movs	r1, #8
 800417a:	4650      	mov	r0, sl
 800417c:	f003 fcea 	bl	8007b54 <HAL_TIMEx_PWMN_Start>
  htim1.Instance->RCR = 1;
 8004180:	2201      	movs	r2, #1
 8004182:	f8da 3000 	ldr.w	r3, [sl]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8004186:	4621      	mov	r1, r4
  htim1.Instance->RCR = 1;
 8004188:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_TIM_ENABLE(&htim1);
 800418a:	681a      	ldr	r2, [r3, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800418c:	200b      	movs	r0, #11
  __HAL_TIM_ENABLE(&htim1);
 800418e:	f042 0201 	orr.w	r2, r2, #1
 8004192:	601a      	str	r2, [r3, #0]
  htim3.Instance->RCR = 1;
 8004194:	2201      	movs	r2, #1
 8004196:	f8db 3000 	ldr.w	r3, [fp]
 800419a:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_TIM_ENABLE(&htim3);
 800419c:	681a      	ldr	r2, [r3, #0]
 800419e:	f042 0201 	orr.w	r2, r2, #1
 80041a2:	601a      	str	r2, [r3, #0]
  hadc1.Instance->CR2 |= ADC_CR2_DMA | ADC_CR2_TSVREFE;
 80041a4:	6832      	ldr	r2, [r6, #0]
 80041a6:	6893      	ldr	r3, [r2, #8]
 80041a8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041b0:	6093      	str	r3, [r2, #8]
  __HAL_ADC_ENABLE(&hadc1);
 80041b2:	6893      	ldr	r3, [r2, #8]
 80041b4:	f043 0301 	orr.w	r3, r3, #1
 80041b8:	6093      	str	r3, [r2, #8]
  hadc2.Instance->CR2 |= ADC_CR2_DMA;
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	689a      	ldr	r2, [r3, #8]
 80041be:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c2:	609a      	str	r2, [r3, #8]
  __HAL_ADC_ENABLE(&hadc2);
 80041c4:	689a      	ldr	r2, [r3, #8]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	609a      	str	r2, [r3, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041cc:	696b      	ldr	r3, [r5, #20]
  DMA1_Channel1->CPAR  = (uint32_t) & (ADC1->DR);
 80041ce:	4a16      	ldr	r2, [pc, #88]	; (8004228 <main+0x4e8>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 80041d0:	f043 0301 	orr.w	r3, r3, #1
 80041d4:	616b      	str	r3, [r5, #20]
 80041d6:	696b      	ldr	r3, [r5, #20]
 80041d8:	f003 0301 	and.w	r3, r3, #1
 80041dc:	9314      	str	r3, [sp, #80]	; 0x50
 80041de:	9b14      	ldr	r3, [sp, #80]	; 0x50
  DMA1_Channel1->CCR   = 0;
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <main+0x4ec>)
 80041e2:	601c      	str	r4, [r3, #0]
  DMA1_Channel1->CNDTR = 4;
 80041e4:	f8c3 8004 	str.w	r8, [r3, #4]
  DMA1_Channel1->CPAR  = (uint32_t) & (ADC1->DR);
 80041e8:	609a      	str	r2, [r3, #8]
  DMA1_Channel1->CMAR  = (uint32_t)&adc_buffer;
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <main+0x4f0>)
 80041ec:	60da      	str	r2, [r3, #12]
  DMA1_Channel1->CCR   = DMA_CCR_MSIZE_1 | DMA_CCR_PSIZE_1 | DMA_CCR_MINC | DMA_CCR_CIRC | DMA_CCR_TCIE;
 80041ee:	f640 22a2 	movw	r2, #2722	; 0xaa2
 80041f2:	601a      	str	r2, [r3, #0]
  DMA1_Channel1->CCR |= DMA_CCR_EN;
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	f042 0201 	orr.w	r2, r2, #1
 80041fa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80041fc:	4622      	mov	r2, r4
 80041fe:	f002 fa4b 	bl	8006698 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004202:	200b      	movs	r0, #11
 8004204:	f002 fa7c 	bl	8006700 <HAL_NVIC_EnableIRQ>
  osKernelStart();
 8004208:	f003 ff4c 	bl	80080a4 <osKernelStart>
 800420c:	e7fe      	b.n	800420c <main+0x4cc>
 800420e:	bf00      	nop
 8004210:	40000400 	.word	0x40000400
 8004214:	e0042000 	.word	0xe0042000
 8004218:	40011000 	.word	0x40011000
 800421c:	0800d198 	.word	0x0800d198
 8004220:	08003c7d 	.word	0x08003c7d
 8004224:	200041b8 	.word	0x200041b8
 8004228:	4001244c 	.word	0x4001244c
 800422c:	40020008 	.word	0x40020008
 8004230:	20004368 	.word	0x20004368
 8004234:	200042b4 	.word	0x200042b4

08004238 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8004238:	6802      	ldr	r2, [r0, #0]
 800423a:	4b03      	ldr	r3, [pc, #12]	; (8004248 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800423c:	429a      	cmp	r2, r3
 800423e:	d101      	bne.n	8004244 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8004240:	f001 bfa6 	b.w	8006190 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40000800 	.word	0x40000800

0800424c <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800424c:	4770      	bx	lr
	...

08004250 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004250:	4b11      	ldr	r3, [pc, #68]	; (8004298 <HAL_MspInit+0x48>)
{
 8004252:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004254:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004256:	210f      	movs	r1, #15
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	619a      	str	r2, [r3, #24]
 800425e:	699a      	ldr	r2, [r3, #24]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004260:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_AFIO_CLK_ENABLE();
 8004264:	f002 0201 	and.w	r2, r2, #1
 8004268:	9200      	str	r2, [sp, #0]
 800426a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800426c:	69da      	ldr	r2, [r3, #28]
 800426e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004272:	61da      	str	r2, [r3, #28]
 8004274:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004276:	2200      	movs	r2, #0
  __HAL_RCC_PWR_CLK_ENABLE();
 8004278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004280:	f002 fa0a 	bl	8006698 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004284:	4a05      	ldr	r2, [pc, #20]	; (800429c <HAL_MspInit+0x4c>)
 8004286:	6853      	ldr	r3, [r2, #4]
 8004288:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800428c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004290:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004292:	b003      	add	sp, #12
 8004294:	f85d fb04 	ldr.w	pc, [sp], #4
 8004298:	40021000 	.word	0x40021000
 800429c:	40010000 	.word	0x40010000

080042a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80042a0:	b530      	push	{r4, r5, lr}
 80042a2:	4605      	mov	r5, r0
 80042a4:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a6:	2210      	movs	r2, #16
 80042a8:	2100      	movs	r1, #0
 80042aa:	a806      	add	r0, sp, #24
 80042ac:	f005 fff6 	bl	800a29c <memset>
  if(hadc->Instance==ADC1)
 80042b0:	682b      	ldr	r3, [r5, #0]
 80042b2:	4a37      	ldr	r2, [pc, #220]	; (8004390 <HAL_ADC_MspInit+0xf0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d13c      	bne.n	8004332 <HAL_ADC_MspInit+0x92>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042b8:	4b36      	ldr	r3, [pc, #216]	; (8004394 <HAL_ADC_MspInit+0xf4>)
    PA7     ------> ADC1_IN7 
    */
    GPIO_InitStruct.Pin = NTC_Pin|VBAT_Pin|CURR_A_Pin|CURR_B_Pin 
                          |CURR_C_Pin|VOLT_B_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ba:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042bc:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042be:	4836      	ldr	r0, [pc, #216]	; (8004398 <HAL_ADC_MspInit+0xf8>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c4:	619a      	str	r2, [r3, #24]
 80042c6:	699a      	ldr	r2, [r3, #24]

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80042c8:	4c34      	ldr	r4, [pc, #208]	; (800439c <HAL_ADC_MspInit+0xfc>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 80042ca:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80042ce:	9201      	str	r2, [sp, #4]
 80042d0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d2:	699a      	ldr	r2, [r3, #24]
 80042d4:	f042 0204 	orr.w	r2, r2, #4
 80042d8:	619a      	str	r2, [r3, #24]
 80042da:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042dc:	22bd      	movs	r2, #189	; 0xbd
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042de:	f003 0304 	and.w	r3, r3, #4
 80042e2:	9302      	str	r3, [sp, #8]
 80042e4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ec:	f002 fc8e 	bl	8006c0c <HAL_GPIO_Init>
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042f0:	2080      	movs	r0, #128	; 0x80
 80042f2:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80042f6:	2300      	movs	r3, #0
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042f8:	e9c4 0203 	strd	r0, r2, [r4, #12]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80042fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004300:	4927      	ldr	r1, [pc, #156]	; (80043a0 <HAL_ADC_MspInit+0x100>)
    hdma_adc1.Init.Mode = DMA_NORMAL;
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004302:	4620      	mov	r0, r4
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004304:	e9c4 1300 	strd	r1, r3, [r4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004308:	60a3      	str	r3, [r4, #8]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800430a:	e9c4 2305 	strd	r2, r3, [r4, #20]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800430e:	61e3      	str	r3, [r4, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004310:	f002 fa04 	bl	800671c <HAL_DMA_Init>
 8004314:	b108      	cbz	r0, 800431a <HAL_ADC_MspInit+0x7a>
    {
      Error_Handler();
 8004316:	f7ff ff99 	bl	800424c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800431a:	622c      	str	r4, [r5, #32]
 800431c:	6265      	str	r5, [r4, #36]	; 0x24
    GPIO_InitStruct.Pin = VOLT_C_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(VOLT_C_GPIO_Port, &GPIO_InitStruct);

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 800431e:	2012      	movs	r0, #18
 8004320:	2200      	movs	r2, #0
 8004322:	2105      	movs	r1, #5
 8004324:	f002 f9b8 	bl	8006698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8004328:	2012      	movs	r0, #18
 800432a:	f002 f9e9 	bl	8006700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800432e:	b00b      	add	sp, #44	; 0x2c
 8004330:	bd30      	pop	{r4, r5, pc}
  else if(hadc->Instance==ADC2)
 8004332:	4a1c      	ldr	r2, [pc, #112]	; (80043a4 <HAL_ADC_MspInit+0x104>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d1fa      	bne.n	800432e <HAL_ADC_MspInit+0x8e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004338:	4b16      	ldr	r3, [pc, #88]	; (8004394 <HAL_ADC_MspInit+0xf4>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800433a:	2403      	movs	r4, #3
    __HAL_RCC_ADC2_CLK_ENABLE();
 800433c:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800433e:	a906      	add	r1, sp, #24
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004340:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004344:	619a      	str	r2, [r3, #24]
 8004346:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004348:	4813      	ldr	r0, [pc, #76]	; (8004398 <HAL_ADC_MspInit+0xf8>)
    __HAL_RCC_ADC2_CLK_ENABLE();
 800434a:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 800434e:	9203      	str	r2, [sp, #12]
 8004350:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	f042 0204 	orr.w	r2, r2, #4
 8004358:	619a      	str	r2, [r3, #24]
 800435a:	699a      	ldr	r2, [r3, #24]
 800435c:	f002 0204 	and.w	r2, r2, #4
 8004360:	9204      	str	r2, [sp, #16]
 8004362:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	f042 0208 	orr.w	r2, r2, #8
 800436a:	619a      	str	r2, [r3, #24]
 800436c:	699b      	ldr	r3, [r3, #24]
 800436e:	f003 0308 	and.w	r3, r3, #8
 8004372:	9305      	str	r3, [sp, #20]
 8004374:	9b05      	ldr	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004376:	23dc      	movs	r3, #220	; 0xdc
 8004378:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800437c:	f002 fc46 	bl	8006c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VOLT_C_Pin;
 8004380:	2302      	movs	r3, #2
    HAL_GPIO_Init(VOLT_C_GPIO_Port, &GPIO_InitStruct);
 8004382:	a906      	add	r1, sp, #24
 8004384:	4808      	ldr	r0, [pc, #32]	; (80043a8 <HAL_ADC_MspInit+0x108>)
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004386:	e9cd 3406 	strd	r3, r4, [sp, #24]
    HAL_GPIO_Init(VOLT_C_GPIO_Port, &GPIO_InitStruct);
 800438a:	f002 fc3f 	bl	8006c0c <HAL_GPIO_Init>
 800438e:	e7c6      	b.n	800431e <HAL_ADC_MspInit+0x7e>
 8004390:	40012400 	.word	0x40012400
 8004394:	40021000 	.word	0x40021000
 8004398:	40010800 	.word	0x40010800
 800439c:	20004324 	.word	0x20004324
 80043a0:	40020008 	.word	0x40020008
 80043a4:	40012800 	.word	0x40012800
 80043a8:	40010c00 	.word	0x40010c00

080043ac <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM1)
 80043ac:	6803      	ldr	r3, [r0, #0]
 80043ae:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <HAL_TIM_Base_MspInit+0x40>)
{
 80043b0:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM1)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d10b      	bne.n	80043ce <HAL_TIM_Base_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80043b6:	4b0e      	ldr	r3, [pc, #56]	; (80043f0 <HAL_TIM_Base_MspInit+0x44>)
 80043b8:	699a      	ldr	r2, [r3, #24]
 80043ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043be:	619a      	str	r2, [r3, #24]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043c6:	9300      	str	r3, [sp, #0]
 80043c8:	9b00      	ldr	r3, [sp, #0]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043ca:	b002      	add	sp, #8
 80043cc:	4770      	bx	lr
  else if(htim_base->Instance==TIM3)
 80043ce:	4a09      	ldr	r2, [pc, #36]	; (80043f4 <HAL_TIM_Base_MspInit+0x48>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d1fa      	bne.n	80043ca <HAL_TIM_Base_MspInit+0x1e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043d4:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_TIM_Base_MspInit+0x44>)
 80043d6:	69da      	ldr	r2, [r3, #28]
 80043d8:	f042 0202 	orr.w	r2, r2, #2
 80043dc:	61da      	str	r2, [r3, #28]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	f003 0302 	and.w	r3, r3, #2
 80043e4:	9301      	str	r3, [sp, #4]
 80043e6:	9b01      	ldr	r3, [sp, #4]
}
 80043e8:	e7ef      	b.n	80043ca <HAL_TIM_Base_MspInit+0x1e>
 80043ea:	bf00      	nop
 80043ec:	40012c00 	.word	0x40012c00
 80043f0:	40021000 	.word	0x40021000
 80043f4:	40000400 	.word	0x40000400

080043f8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043f8:	b510      	push	{r4, lr}
 80043fa:	4604      	mov	r4, r0
 80043fc:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043fe:	2210      	movs	r2, #16
 8004400:	2100      	movs	r1, #0
 8004402:	a802      	add	r0, sp, #8
 8004404:	f005 ff4a 	bl	800a29c <memset>
  if(htim->Instance==TIM1)
 8004408:	6822      	ldr	r2, [r4, #0]
 800440a:	4b16      	ldr	r3, [pc, #88]	; (8004464 <HAL_TIM_MspPostInit+0x6c>)
 800440c:	429a      	cmp	r2, r3
 800440e:	d126      	bne.n	800445e <HAL_TIM_MspPostInit+0x66>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004410:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8004414:	699a      	ldr	r2, [r3, #24]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3 
    */
    GPIO_InitStruct.Pin = PHA_A_L_Pin|PHA_B_L_Pin|PHA_C_L_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004416:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004418:	f042 0208 	orr.w	r2, r2, #8
 800441c:	619a      	str	r2, [r3, #24]
 800441e:	699a      	ldr	r2, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004420:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004422:	f002 0208 	and.w	r2, r2, #8
 8004426:	9200      	str	r2, [sp, #0]
 8004428:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442a:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800442c:	480e      	ldr	r0, [pc, #56]	; (8004468 <HAL_TIM_MspPostInit+0x70>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800442e:	f042 0204 	orr.w	r2, r2, #4
 8004432:	619a      	str	r2, [r3, #24]
 8004434:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004436:	9405      	str	r4, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004438:	f003 0304 	and.w	r3, r3, #4
 800443c:	9301      	str	r3, [sp, #4]
 800443e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004440:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8004444:	e9cd 3402 	strd	r3, r4, [sp, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004448:	f002 fbe0 	bl	8006c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PHA_A_H_Pin|PHA_B_H_Pin|PHA_C_H_Pin;
 800444c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004450:	a902      	add	r1, sp, #8
 8004452:	4806      	ldr	r0, [pc, #24]	; (800446c <HAL_TIM_MspPostInit+0x74>)
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004454:	e9cd 3402 	strd	r3, r4, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004458:	9405      	str	r4, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800445a:	f002 fbd7 	bl	8006c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800445e:	b006      	add	sp, #24
 8004460:	bd10      	pop	{r4, pc}
 8004462:	bf00      	nop
 8004464:	40012c00 	.word	0x40012c00
 8004468:	40010c00 	.word	0x40010c00
 800446c:	40010800 	.word	0x40010800

08004470 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004470:	b570      	push	{r4, r5, r6, lr}
 8004472:	4606      	mov	r6, r0
 8004474:	b086      	sub	sp, #24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004476:	2210      	movs	r2, #16
 8004478:	2100      	movs	r1, #0
 800447a:	a802      	add	r0, sp, #8
 800447c:	f005 ff0e 	bl	800a29c <memset>
  if(huart->Instance==USART3)
 8004480:	6832      	ldr	r2, [r6, #0]
 8004482:	4b2f      	ldr	r3, [pc, #188]	; (8004540 <HAL_UART_MspInit+0xd0>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d159      	bne.n	800453c <HAL_UART_MspInit+0xcc>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8004488:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 800448c:	69da      	ldr	r2, [r3, #28]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448e:	f44f 6180 	mov.w	r1, #1024	; 0x400
    __HAL_RCC_USART3_CLK_ENABLE();
 8004492:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004496:	61da      	str	r2, [r3, #28]
 8004498:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800449a:	482a      	ldr	r0, [pc, #168]	; (8004544 <HAL_UART_MspInit+0xd4>)
    __HAL_RCC_USART3_CLK_ENABLE();
 800449c:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80044a0:	9200      	str	r2, [sp, #0]
 80044a2:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a4:	699a      	ldr	r2, [r3, #24]

    GPIO_InitStruct.Pin = GPIO_PIN_11;
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044a6:	2500      	movs	r5, #0
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044a8:	f042 0208 	orr.w	r2, r2, #8
 80044ac:	619a      	str	r2, [r3, #24]
 80044ae:	699b      	ldr	r3, [r3, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80044b0:	4c25      	ldr	r4, [pc, #148]	; (8004548 <HAL_UART_MspInit+0xd8>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044b2:	f003 0308 	and.w	r3, r3, #8
 80044b6:	9301      	str	r3, [sp, #4]
 80044b8:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044ba:	2302      	movs	r3, #2
 80044bc:	e9cd 1302 	strd	r1, r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044c0:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044c4:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044c6:	f002 fba1 	bl	8006c0c <HAL_GPIO_Init>
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ce:	481d      	ldr	r0, [pc, #116]	; (8004544 <HAL_UART_MspInit+0xd4>)
 80044d0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80044d2:	e9cd 3502 	strd	r3, r5, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044d6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044d8:	f002 fb98 	bl	8006c0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Channel3;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	; (800454c <HAL_UART_MspInit+0xdc>)
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044de:	4620      	mov	r0, r4
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80044e0:	e9c4 3500 	strd	r3, r5, [r4]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80044e4:	2380      	movs	r3, #128	; 0x80
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80044e6:	e9c4 3503 	strd	r3, r5, [r4, #12]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80044ea:	2320      	movs	r3, #32
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80044ec:	60a5      	str	r5, [r4, #8]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80044ee:	6165      	str	r5, [r4, #20]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80044f0:	e9c4 3506 	strd	r3, r5, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80044f4:	f002 f912 	bl	800671c <HAL_DMA_Init>
 80044f8:	b108      	cbz	r0, 80044fe <HAL_UART_MspInit+0x8e>
    {
      Error_Handler();
 80044fa:	f7ff fea7 	bl	800424c <Error_Handler>

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Channel2;
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80044fe:	2310      	movs	r3, #16
 8004500:	4a13      	ldr	r2, [pc, #76]	; (8004550 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004502:	6374      	str	r4, [r6, #52]	; 0x34
 8004504:	6266      	str	r6, [r4, #36]	; 0x24
    hdma_usart3_tx.Instance = DMA1_Channel2;
 8004506:	4c13      	ldr	r4, [pc, #76]	; (8004554 <HAL_UART_MspInit+0xe4>)
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004508:	e9c4 2300 	strd	r2, r3, [r4]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 800450c:	2300      	movs	r3, #0
 800450e:	2280      	movs	r2, #128	; 0x80
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8004510:	4620      	mov	r0, r4
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004512:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004516:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 800451a:	e9c4 3306 	strd	r3, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800451e:	f002 f8fd 	bl	800671c <HAL_DMA_Init>
 8004522:	b108      	cbz	r0, 8004528 <HAL_UART_MspInit+0xb8>
    {
      Error_Handler();
 8004524:	f7ff fe92 	bl	800424c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004528:	2027      	movs	r0, #39	; 0x27
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800452a:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800452c:	2200      	movs	r2, #0
 800452e:	2105      	movs	r1, #5
    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8004530:	6266      	str	r6, [r4, #36]	; 0x24
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8004532:	f002 f8b1 	bl	8006698 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004536:	2027      	movs	r0, #39	; 0x27
 8004538:	f002 f8e2 	bl	8006700 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800453c:	b006      	add	sp, #24
 800453e:	bd70      	pop	{r4, r5, r6, pc}
 8004540:	40004800 	.word	0x40004800
 8004544:	40010c00 	.word	0x40010c00
 8004548:	200041bc 	.word	0x200041bc
 800454c:	40020030 	.word	0x40020030
 8004550:	4002001c 	.word	0x4002001c
 8004554:	20004270 	.word	0x20004270

08004558 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004558:	b510      	push	{r4, lr}
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800455a:	4601      	mov	r1, r0
{
 800455c:	b088      	sub	sp, #32
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 800455e:	2200      	movs	r2, #0
 8004560:	201e      	movs	r0, #30
 8004562:	f002 f899 	bl	8006698 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 8004566:	201e      	movs	r0, #30
 8004568:	f002 f8ca 	bl	8006700 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800456c:	4b14      	ldr	r3, [pc, #80]	; (80045c0 <HAL_InitTick+0x68>)
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800456e:	a901      	add	r1, sp, #4
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004570:	69da      	ldr	r2, [r3, #28]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004572:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM4_CLK_ENABLE();
 8004574:	f042 0204 	orr.w	r2, r2, #4
 8004578:	61da      	str	r2, [r3, #28]
 800457a:	69db      	ldr	r3, [r3, #28]
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 800457c:	4c11      	ldr	r4, [pc, #68]	; (80045c4 <HAL_InitTick+0x6c>)
  __HAL_RCC_TIM4_CLK_ENABLE();
 800457e:	f003 0304 	and.w	r3, r3, #4
 8004582:	9302      	str	r3, [sp, #8]
 8004584:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004586:	f002 fec1 	bl	800730c <HAL_RCC_GetClockConfig>
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800458a:	f002 fe9f 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
  htim4.Instance = TIM4;
 800458e:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_InitTick+0x70>)
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004590:	0040      	lsls	r0, r0, #1
  htim4.Instance = TIM4;
 8004592:	6023      	str	r3, [r4, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8004594:	f240 33e7 	movw	r3, #999	; 0x3e7
 8004598:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800459a:	4b0c      	ldr	r3, [pc, #48]	; (80045cc <HAL_InitTick+0x74>)
 800459c:	fbb0 f0f3 	udiv	r0, r0, r3
  htim4.Init.Prescaler = uwPrescalerValue;
  htim4.Init.ClockDivision = 0;
 80045a0:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 80045a2:	3801      	subs	r0, #1
  htim4.Init.Prescaler = uwPrescalerValue;
 80045a4:	6060      	str	r0, [r4, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80045a6:	4620      	mov	r0, r4
  htim4.Init.ClockDivision = 0;
 80045a8:	6123      	str	r3, [r4, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80045aa:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 80045ac:	f003 f8a8 	bl	8007700 <HAL_TIM_Base_Init>
 80045b0:	b920      	cbnz	r0, 80045bc <HAL_InitTick+0x64>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 80045b2:	4620      	mov	r0, r4
 80045b4:	f002 ffb4 	bl	8007520 <HAL_TIM_Base_Start_IT>
  }
  
  /* Return function status */
  return HAL_ERROR;
}
 80045b8:	b008      	add	sp, #32
 80045ba:	bd10      	pop	{r4, pc}
  return HAL_ERROR;
 80045bc:	2001      	movs	r0, #1
 80045be:	e7fb      	b.n	80045b8 <HAL_InitTick+0x60>
 80045c0:	40021000 	.word	0x40021000
 80045c4:	200043b8 	.word	0x200043b8
 80045c8:	40000800 	.word	0x40000800
 80045cc:	000f4240 	.word	0x000f4240

080045d0 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80045d0:	4770      	bx	lr

080045d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045d2:	e7fe      	b.n	80045d2 <HardFault_Handler>

080045d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045d4:	e7fe      	b.n	80045d4 <MemManage_Handler>

080045d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045d6:	e7fe      	b.n	80045d6 <BusFault_Handler>

080045d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045d8:	e7fe      	b.n	80045d8 <UsageFault_Handler>

080045da <DebugMon_Handler>:
 80045da:	4770      	bx	lr

080045dc <DMA1_Channel2_IRQHandler>:
void DMA1_Channel2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80045dc:	4801      	ldr	r0, [pc, #4]	; (80045e4 <DMA1_Channel2_IRQHandler+0x8>)
 80045de:	f002 b953 	b.w	8006888 <HAL_DMA_IRQHandler>
 80045e2:	bf00      	nop
 80045e4:	20004270 	.word	0x20004270

080045e8 <DMA1_Channel3_IRQHandler>:
void DMA1_Channel3_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80045e8:	4801      	ldr	r0, [pc, #4]	; (80045f0 <DMA1_Channel3_IRQHandler+0x8>)
 80045ea:	f002 b94d 	b.w	8006888 <HAL_DMA_IRQHandler>
 80045ee:	bf00      	nop
 80045f0:	200041bc 	.word	0x200041bc

080045f4 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80045f4:	b508      	push	{r3, lr}
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80045f6:	4804      	ldr	r0, [pc, #16]	; (8004608 <ADC1_2_IRQHandler+0x14>)
 80045f8:	f001 fdde 	bl	80061b8 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
  /* USER CODE BEGIN ADC1_2_IRQn 1 */


  /* USER CODE END ADC1_2_IRQn 1 */
}
 80045fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_ADC_IRQHandler(&hadc2);
 8004600:	4802      	ldr	r0, [pc, #8]	; (800460c <ADC1_2_IRQHandler+0x18>)
 8004602:	f001 bdd9 	b.w	80061b8 <HAL_ADC_IRQHandler>
 8004606:	bf00      	nop
 8004608:	200042f4 	.word	0x200042f4
 800460c:	20004240 	.word	0x20004240

08004610 <TIM4_IRQHandler>:
void TIM4_IRQHandler(void)
{
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <TIM4_IRQHandler+0x8>)
 8004612:	f002 bf9a 	b.w	800754a <HAL_TIM_IRQHandler>
 8004616:	bf00      	nop
 8004618:	200043b8 	.word	0x200043b8

0800461c <USART3_IRQHandler>:
void USART3_IRQHandler(void)
{
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800461c:	4801      	ldr	r0, [pc, #4]	; (8004624 <USART3_IRQHandler+0x8>)
 800461e:	f003 bc7d 	b.w	8007f1c <HAL_UART_IRQHandler>
 8004622:	bf00      	nop
 8004624:	20004200 	.word	0x20004200

08004628 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004628:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800462a:	4b0a      	ldr	r3, [pc, #40]	; (8004654 <_sbrk+0x2c>)
{
 800462c:	4602      	mov	r2, r0
	if (heap_end == 0)
 800462e:	6819      	ldr	r1, [r3, #0]
 8004630:	b909      	cbnz	r1, 8004636 <_sbrk+0xe>
		heap_end = &end;
 8004632:	4909      	ldr	r1, [pc, #36]	; (8004658 <_sbrk+0x30>)
 8004634:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8004636:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 8004638:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 800463a:	4402      	add	r2, r0
 800463c:	428a      	cmp	r2, r1
 800463e:	d906      	bls.n	800464e <_sbrk+0x26>
	{
		errno = ENOMEM;
 8004640:	f005 fde8 	bl	800a214 <__errno>
 8004644:	230c      	movs	r3, #12
 8004646:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8004648:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 800464c:	bd08      	pop	{r3, pc}
	heap_end += incr;
 800464e:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8004650:	e7fc      	b.n	800464c <_sbrk+0x24>
 8004652:	bf00      	nop
 8004654:	200005ec 	.word	0x200005ec
 8004658:	20004548 	.word	0x20004548

0800465c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800465c:	4b0f      	ldr	r3, [pc, #60]	; (800469c <SystemInit+0x40>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	f042 0201 	orr.w	r2, r2, #1
 8004664:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8004666:	6859      	ldr	r1, [r3, #4]
 8004668:	4a0d      	ldr	r2, [pc, #52]	; (80046a0 <SystemInit+0x44>)
 800466a:	400a      	ands	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8004674:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004678:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800467a:	681a      	ldr	r2, [r3, #0]
 800467c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004680:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004682:	685a      	ldr	r2, [r3, #4]
 8004684:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8004688:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800468a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800468e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8004690:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <SystemInit+0x48>)
 8004696:	609a      	str	r2, [r3, #8]
#endif 
}
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	40021000 	.word	0x40021000
 80046a0:	f8ff0000 	.word	0xf8ff0000
 80046a4:	e000ed00 	.word	0xe000ed00

080046a8 <BLDC_Init>:

/* =========================== Initialization Functions =========================== */

void BLDC_Init(void) {
  /* Set BLDC controller parameters */ 
  rtP_Left.b_selPhaABCurrMeas   = 1;            // Left motor measured current phases {Green, Blue} = {iA, iB} -> do NOT change
 80046a8:	2201      	movs	r2, #1
 80046aa:	4b08      	ldr	r3, [pc, #32]	; (80046cc <BLDC_Init+0x24>)
  rtP_Left.z_ctrlTypSel         = CTRL_TYP_SEL;
  rtP_Left.b_diagEna            = DIAG_ENA; 


  /* Pack LEFT motor data into RTM */
  rtM_Left->defaultParam        = &rtP_Left;
 80046ac:	4808      	ldr	r0, [pc, #32]	; (80046d0 <BLDC_Init+0x28>)
  rtP_Left.b_selPhaABCurrMeas   = 1;            // Left motor measured current phases {Green, Blue} = {iA, iB} -> do NOT change
 80046ae:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
  rtP_Left.z_ctrlTypSel         = CTRL_TYP_SEL;
 80046b2:	f44f 7281 	mov.w	r2, #258	; 0x102
  rtM_Left->defaultParam        = &rtP_Left;
 80046b6:	6003      	str	r3, [r0, #0]
  rtP_Left.z_ctrlTypSel         = CTRL_TYP_SEL;
 80046b8:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
  rtM_Left->dwork               = &rtDW_Left;
 80046bc:	4b05      	ldr	r3, [pc, #20]	; (80046d4 <BLDC_Init+0x2c>)
 80046be:	60c3      	str	r3, [r0, #12]
  rtM_Left->inputs              = &rtU_Left;
 80046c0:	4b05      	ldr	r3, [pc, #20]	; (80046d8 <BLDC_Init+0x30>)
 80046c2:	6043      	str	r3, [r0, #4]
  rtM_Left->outputs             = &rtY_Left;
 80046c4:	4b05      	ldr	r3, [pc, #20]	; (80046dc <BLDC_Init+0x34>)
 80046c6:	6083      	str	r3, [r0, #8]



  /* Initialize BLDC controllers */
  BLDC_controller_initialize(rtM_Left);
 80046c8:	f7fd bcac 	b.w	8002024 <BLDC_controller_initialize>
 80046cc:	20000000 	.word	0x20000000
 80046d0:	200044bc 	.word	0x200044bc
 80046d4:	200043f8 	.word	0x200043f8
 80046d8:	200044ac 	.word	0x200044ac
 80046dc:	2000449c 	.word	0x2000449c

080046e0 <filtLowPass32>:
  * Example: 
  * If coef = 0.8 (in floating point), then coef = 0.8 * 2^16 = 52429 (in fixed-point)
  * filtLowPass16(u, 52429, &y);
  * yint = (int16_t)(y >> 16); // the integer output is the fixed-point ouput shifted by 16 bits
  */
 void filtLowPass32(int32_t u, uint16_t coef, int32_t *y) {
 80046e0:	b570      	push	{r4, r5, r6, lr}
  int64_t tmp;  
  tmp = ((int64_t)((u << 4) - (*y >> 12)) * coef) >> 4;
 80046e2:	6816      	ldr	r6, [r2, #0]
 80046e4:	1333      	asrs	r3, r6, #12
 80046e6:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 80046ea:	fb80 0101 	smull	r0, r1, r0, r1
 80046ee:	0904      	lsrs	r4, r0, #4
 80046f0:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
 80046f4:	110d      	asrs	r5, r1, #4
  tmp = CLAMP(tmp, -2147483648LL, 2147483647LL);  // Overflow protection: 2147483647LL = 2^31 - 1
 80046f6:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 80046fa:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 80046fe:	bfb8      	it	lt
 8004700:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
  *y = (int32_t)tmp + (*y);
 8004704:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
  tmp = CLAMP(tmp, -2147483648LL, 2147483647LL);  // Overflow protection: 2147483647LL = 2^31 - 1
 8004708:	bfb8      	it	lt
 800470a:	f04f 35ff 	movlt.w	r5, #4294967295
  *y = (int32_t)tmp + (*y);
 800470e:	2100      	movs	r1, #0
 8004710:	42a0      	cmp	r0, r4
 8004712:	eb71 0305 	sbcs.w	r3, r1, r5
 8004716:	bfb8      	it	lt
 8004718:	4604      	movlt	r4, r0
 800471a:	4434      	add	r4, r6
 800471c:	6014      	str	r4, [r2, #0]
}
 800471e:	bd70      	pop	{r4, r5, r6, pc}

08004720 <NTC_ADC2Temperature>:

int NTC_ADC2Temperature(unsigned int adc_value){

  int p1,p2;
  /* Stützpunkt vor und nach dem ADC Wert ermitteln. */
  p1 = NTC_table[ (adc_value >> 7)  ];
 8004720:	4906      	ldr	r1, [pc, #24]	; (800473c <NTC_ADC2Temperature+0x1c>)
 8004722:	09c3      	lsrs	r3, r0, #7
 8004724:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
  p2 = NTC_table[ (adc_value >> 7)+1];
 8004728:	3301      	adds	r3, #1

  /* Zwischen beiden Punkten linear interpolieren. */
  return p1 - ( (p1-p2) * (adc_value & 0x007F) ) / 128;
 800472a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800472e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	4358      	muls	r0, r3
};
 8004736:	eba2 10d0 	sub.w	r0, r2, r0, lsr #7
 800473a:	4770      	bx	lr
 800473c:	20000340 	.word	0x20000340

08004740 <_out_buffer>:


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
  if (idx < maxlen) {
 8004740:	429a      	cmp	r2, r3
    ((char*)buffer)[idx] = character;
 8004742:	bf38      	it	cc
 8004744:	5488      	strbcc	r0, [r1, r2]
  }
}
 8004746:	4770      	bx	lr

08004748 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004748:	4770      	bx	lr

0800474a <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 800474a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474e:	b08b      	sub	sp, #44	; 0x2c
 8004750:	4688      	mov	r8, r1
 8004752:	9914      	ldr	r1, [sp, #80]	; 0x50
 8004754:	4683      	mov	fp, r0
 8004756:	4699      	mov	r9, r3
 8004758:	e9dd 5318 	ldrd	r5, r3, [sp, #96]	; 0x60
 800475c:	4617      	mov	r7, r2
 800475e:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 8004762:	9816      	ldr	r0, [sp, #88]	; 0x58
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;

  // no hash for 0 values
  if (!value) {
 8004764:	b909      	cbnz	r1, 800476a <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004766:	f023 0310 	bic.w	r3, r3, #16
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 800476a:	f413 6c80 	ands.w	ip, r3, #1024	; 0x400
 800476e:	d001      	beq.n	8004774 <_ntoa_long+0x2a>
 8004770:	2900      	cmp	r1, #0
 8004772:	d06c      	beq.n	800484e <_ntoa_long+0x104>
 8004774:	f013 0f20 	tst.w	r3, #32
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004778:	f04f 0400 	mov.w	r4, #0
 800477c:	bf14      	ite	ne
 800477e:	f04f 0e37 	movne.w	lr, #55	; 0x37
 8004782:	f04f 0e57 	moveq.w	lr, #87	; 0x57
      const char digit = (char)(value % base);
 8004786:	fbb1 faf0 	udiv	sl, r1, r0
 800478a:	fb00 1a1a 	mls	sl, r0, sl, r1
      value /= base;
 800478e:	fbb1 f1f0 	udiv	r1, r1, r0
      const char digit = (char)(value % base);
 8004792:	fa5f f28a 	uxtb.w	r2, sl
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004796:	f1ba 0f09 	cmp.w	sl, #9
 800479a:	bf94      	ite	ls
 800479c:	3230      	addls	r2, #48	; 0x30
 800479e:	4472      	addhi	r2, lr
 80047a0:	3401      	adds	r4, #1
 80047a2:	f10d 0a08 	add.w	sl, sp, #8
 80047a6:	b2d2      	uxtb	r2, r2
 80047a8:	44a2      	add	sl, r4
 80047aa:	f80a 2c01 	strb.w	r2, [sl, #-1]
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 80047ae:	b109      	cbz	r1, 80047b4 <_ntoa_long+0x6a>
 80047b0:	2c20      	cmp	r4, #32
 80047b2:	d1e8      	bne.n	8004786 <_ntoa_long+0x3c>
  if (!(flags & FLAGS_LEFT)) {
 80047b4:	f013 0202 	ands.w	r2, r3, #2
 80047b8:	9200      	str	r2, [sp, #0]
 80047ba:	d10b      	bne.n	80047d4 <_ntoa_long+0x8a>
      buf[len++] = '0';
 80047bc:	2230      	movs	r2, #48	; 0x30
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80047be:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80047c0:	42a1      	cmp	r1, r4
 80047c2:	d846      	bhi.n	8004852 <_ntoa_long+0x108>
      buf[len++] = '0';
 80047c4:	2130      	movs	r1, #48	; 0x30
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80047c6:	f003 0201 	and.w	r2, r3, #1
 80047ca:	b11a      	cbz	r2, 80047d4 <_ntoa_long+0x8a>
 80047cc:	42a5      	cmp	r5, r4
 80047ce:	d901      	bls.n	80047d4 <_ntoa_long+0x8a>
 80047d0:	2c1f      	cmp	r4, #31
 80047d2:	d944      	bls.n	800485e <_ntoa_long+0x114>
  if (flags & FLAGS_HASH) {
 80047d4:	06da      	lsls	r2, r3, #27
 80047d6:	d55b      	bpl.n	8004890 <_ntoa_long+0x146>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 80047d8:	f1bc 0f00 	cmp.w	ip, #0
 80047dc:	d146      	bne.n	800486c <_ntoa_long+0x122>
 80047de:	2c00      	cmp	r4, #0
 80047e0:	d044      	beq.n	800486c <_ntoa_long+0x122>
 80047e2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80047e4:	42a2      	cmp	r2, r4
 80047e6:	d001      	beq.n	80047ec <_ntoa_long+0xa2>
 80047e8:	42a5      	cmp	r5, r4
 80047ea:	d13f      	bne.n	800486c <_ntoa_long+0x122>
      if (len && (base == 16U)) {
 80047ec:	1e62      	subs	r2, r4, #1
 80047ee:	d03c      	beq.n	800486a <_ntoa_long+0x120>
 80047f0:	2810      	cmp	r0, #16
 80047f2:	d14b      	bne.n	800488c <_ntoa_long+0x142>
        len--;
 80047f4:	3c02      	subs	r4, #2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 80047f6:	0698      	lsls	r0, r3, #26
 80047f8:	d442      	bmi.n	8004880 <_ntoa_long+0x136>
 80047fa:	2c1f      	cmp	r4, #31
 80047fc:	f200 8087 	bhi.w	800490e <_ntoa_long+0x1c4>
      buf[len++] = 'x';
 8004800:	2178      	movs	r1, #120	; 0x78
 8004802:	aa0a      	add	r2, sp, #40	; 0x28
 8004804:	4422      	add	r2, r4
      buf[len++] = 'b';
 8004806:	f802 1c20 	strb.w	r1, [r2, #-32]
 800480a:	3401      	adds	r4, #1
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800480c:	2c1f      	cmp	r4, #31
 800480e:	d87e      	bhi.n	800490e <_ntoa_long+0x1c4>
      buf[len++] = '0';
 8004810:	2130      	movs	r1, #48	; 0x30
 8004812:	aa0a      	add	r2, sp, #40	; 0x28
 8004814:	4422      	add	r2, r4
 8004816:	f802 1c20 	strb.w	r1, [r2, #-32]
 800481a:	3401      	adds	r4, #1
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
 800481c:	42a5      	cmp	r5, r4
 800481e:	d104      	bne.n	800482a <_ntoa_long+0xe0>
 8004820:	b916      	cbnz	r6, 8004828 <_ntoa_long+0xde>
 8004822:	f013 0f0c 	tst.w	r3, #12
 8004826:	d069      	beq.n	80048fc <_ntoa_long+0x1b2>
    len--;
 8004828:	1e6c      	subs	r4, r5, #1
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 800482a:	2c1f      	cmp	r4, #31
 800482c:	d932      	bls.n	8004894 <_ntoa_long+0x14a>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 800482e:	079b      	lsls	r3, r3, #30
 8004830:	463e      	mov	r6, r7
 8004832:	d04a      	beq.n	80048ca <_ntoa_long+0x180>
      out(' ', buffer, idx++, maxlen);
 8004834:	f04f 0a00 	mov.w	sl, #0
  for (size_t i = 0U; i < len; i++) {
 8004838:	4554      	cmp	r4, sl
 800483a:	eb0a 0206 	add.w	r2, sl, r6
 800483e:	d147      	bne.n	80048d0 <_ntoa_long+0x186>
  if (flags & FLAGS_LEFT) {
 8004840:	9b00      	ldr	r3, [sp, #0]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d156      	bne.n	80048f4 <_ntoa_long+0x1aa>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
 8004846:	4610      	mov	r0, r2
 8004848:	b00b      	add	sp, #44	; 0x2c
 800484a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  size_t len = 0U;
 800484e:	460c      	mov	r4, r1
 8004850:	e7b0      	b.n	80047b4 <_ntoa_long+0x6a>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004852:	2c20      	cmp	r4, #32
 8004854:	d0b6      	beq.n	80047c4 <_ntoa_long+0x7a>
      buf[len++] = '0';
 8004856:	a902      	add	r1, sp, #8
 8004858:	550a      	strb	r2, [r1, r4]
 800485a:	3401      	adds	r4, #1
 800485c:	e7af      	b.n	80047be <_ntoa_long+0x74>
      buf[len++] = '0';
 800485e:	f10d 0e08 	add.w	lr, sp, #8
 8004862:	f80e 1004 	strb.w	r1, [lr, r4]
 8004866:	3401      	adds	r4, #1
 8004868:	e7af      	b.n	80047ca <_ntoa_long+0x80>
      if (len && (base == 16U)) {
 800486a:	4614      	mov	r4, r2
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 800486c:	2810      	cmp	r0, #16
 800486e:	d0c2      	beq.n	80047f6 <_ntoa_long+0xac>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004870:	2802      	cmp	r0, #2
 8004872:	d1cb      	bne.n	800480c <_ntoa_long+0xc2>
 8004874:	2c1f      	cmp	r4, #31
 8004876:	d84a      	bhi.n	800490e <_ntoa_long+0x1c4>
      buf[len++] = 'b';
 8004878:	aa0a      	add	r2, sp, #40	; 0x28
 800487a:	4422      	add	r2, r4
 800487c:	2162      	movs	r1, #98	; 0x62
 800487e:	e7c2      	b.n	8004806 <_ntoa_long+0xbc>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004880:	2c1f      	cmp	r4, #31
 8004882:	d844      	bhi.n	800490e <_ntoa_long+0x1c4>
      buf[len++] = 'X';
 8004884:	aa0a      	add	r2, sp, #40	; 0x28
 8004886:	4422      	add	r2, r4
 8004888:	2158      	movs	r1, #88	; 0x58
 800488a:	e7bc      	b.n	8004806 <_ntoa_long+0xbc>
      if (len && (base == 16U)) {
 800488c:	4614      	mov	r4, r2
 800488e:	e7ef      	b.n	8004870 <_ntoa_long+0x126>
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
 8004890:	2c00      	cmp	r4, #0
 8004892:	d1c3      	bne.n	800481c <_ntoa_long+0xd2>
    if (negative) {
 8004894:	b3ae      	cbz	r6, 8004902 <_ntoa_long+0x1b8>
      buf[len++] = '-';
 8004896:	212d      	movs	r1, #45	; 0x2d
 8004898:	aa0a      	add	r2, sp, #40	; 0x28
 800489a:	4422      	add	r2, r4
      buf[len++] = ' ';
 800489c:	f802 1c20 	strb.w	r1, [r2, #-32]
 80048a0:	3401      	adds	r4, #1
 80048a2:	e7c4      	b.n	800482e <_ntoa_long+0xe4>
    else if (flags & FLAGS_SPACE) {
 80048a4:	071a      	lsls	r2, r3, #28
 80048a6:	d5c2      	bpl.n	800482e <_ntoa_long+0xe4>
      buf[len++] = ' ';
 80048a8:	aa0a      	add	r2, sp, #40	; 0x28
 80048aa:	4422      	add	r2, r4
 80048ac:	2120      	movs	r1, #32
 80048ae:	e7f5      	b.n	800489c <_ntoa_long+0x152>
      out(' ', buffer, idx++, maxlen);
 80048b0:	1c73      	adds	r3, r6, #1
 80048b2:	9301      	str	r3, [sp, #4]
 80048b4:	4632      	mov	r2, r6
 80048b6:	464b      	mov	r3, r9
 80048b8:	4641      	mov	r1, r8
 80048ba:	2020      	movs	r0, #32
 80048bc:	47d8      	blx	fp
 80048be:	9e01      	ldr	r6, [sp, #4]
    for (size_t i = len; i < width; i++) {
 80048c0:	eb0a 0306 	add.w	r3, sl, r6
 80048c4:	429d      	cmp	r5, r3
 80048c6:	d8f3      	bhi.n	80048b0 <_ntoa_long+0x166>
 80048c8:	e7b4      	b.n	8004834 <_ntoa_long+0xea>
 80048ca:	eba4 0a07 	sub.w	sl, r4, r7
 80048ce:	e7f7      	b.n	80048c0 <_ntoa_long+0x176>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
 80048d0:	eba4 000a 	sub.w	r0, r4, sl
 80048d4:	ab02      	add	r3, sp, #8
 80048d6:	4418      	add	r0, r3
 80048d8:	4641      	mov	r1, r8
 80048da:	464b      	mov	r3, r9
 80048dc:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 80048e0:	47d8      	blx	fp
  for (size_t i = 0U; i < len; i++) {
 80048e2:	f10a 0a01 	add.w	sl, sl, #1
 80048e6:	e7a7      	b.n	8004838 <_ntoa_long+0xee>
      out(' ', buffer, idx++, maxlen);
 80048e8:	1c54      	adds	r4, r2, #1
 80048ea:	464b      	mov	r3, r9
 80048ec:	4641      	mov	r1, r8
 80048ee:	2020      	movs	r0, #32
 80048f0:	47d8      	blx	fp
 80048f2:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 80048f4:	1bd3      	subs	r3, r2, r7
 80048f6:	429d      	cmp	r5, r3
 80048f8:	d8f6      	bhi.n	80048e8 <_ntoa_long+0x19e>
 80048fa:	e7a4      	b.n	8004846 <_ntoa_long+0xfc>
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 80048fc:	2d1f      	cmp	r5, #31
 80048fe:	462c      	mov	r4, r5
 8004900:	d895      	bhi.n	800482e <_ntoa_long+0xe4>
    else if (flags & FLAGS_PLUS) {
 8004902:	0759      	lsls	r1, r3, #29
 8004904:	d5ce      	bpl.n	80048a4 <_ntoa_long+0x15a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004906:	aa0a      	add	r2, sp, #40	; 0x28
 8004908:	4422      	add	r2, r4
 800490a:	212b      	movs	r1, #43	; 0x2b
 800490c:	e7c6      	b.n	800489c <_ntoa_long+0x152>
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
 800490e:	42a5      	cmp	r5, r4
 8004910:	d18d      	bne.n	800482e <_ntoa_long+0xe4>
 8004912:	e785      	b.n	8004820 <_ntoa_long+0xd6>
 8004914:	0000      	movs	r0, r0
	...

08004918 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8004918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491c:	4699      	mov	r9, r3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    // use null output function
    out = _out_null;
 800491e:	4bc2      	ldr	r3, [pc, #776]	; (8004c28 <_vsnprintf+0x310>)
{
 8004920:	b09b      	sub	sp, #108	; 0x6c
    out = _out_null;
 8004922:	2900      	cmp	r1, #0
 8004924:	bf18      	it	ne
 8004926:	4603      	movne	r3, r0
{
 8004928:	9207      	str	r2, [sp, #28]
        out('%', buffer, idx++, maxlen);
        format++;
        break;

      default :
        out(*format, buffer, idx++, maxlen);
 800492a:	f04f 0a00 	mov.w	sl, #0
    out = _out_null;
 800492e:	460a      	mov	r2, r1
 8004930:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 8004934:	9108      	str	r1, [sp, #32]
 8004936:	930c      	str	r3, [sp, #48]	; 0x30
  while (*format)
 8004938:	f899 0000 	ldrb.w	r0, [r9]
 800493c:	b970      	cbnz	r0, 800495c <_vsnprintf+0x44>
        break;
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 800493e:	9b07      	ldr	r3, [sp, #28]
 8004940:	2000      	movs	r0, #0
 8004942:	459a      	cmp	sl, r3
 8004944:	bf2c      	ite	cs
 8004946:	f103 32ff 	addcs.w	r2, r3, #4294967295
 800494a:	4652      	movcc	r2, sl
 800494c:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004950:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004952:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
}
 8004954:	4650      	mov	r0, sl
 8004956:	b01b      	add	sp, #108	; 0x6c
 8004958:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (*format != '%') {
 800495c:	2825      	cmp	r0, #37	; 0x25
 800495e:	f109 0901 	add.w	r9, r9, #1
 8004962:	d008      	beq.n	8004976 <_vsnprintf+0x5e>
        out(*format, buffer, idx++, maxlen);
 8004964:	4652      	mov	r2, sl
 8004966:	f10a 0401 	add.w	r4, sl, #1
 800496a:	9b07      	ldr	r3, [sp, #28]
 800496c:	9908      	ldr	r1, [sp, #32]
 800496e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004970:	47a8      	blx	r5
 8004972:	46a2      	mov	sl, r4
        break;
 8004974:	e7e0      	b.n	8004938 <_vsnprintf+0x20>
    flags = 0U;
 8004976:	2400      	movs	r4, #0
 8004978:	e006      	b.n	8004988 <_vsnprintf+0x70>
      switch (*format) {
 800497a:	2b2d      	cmp	r3, #45	; 0x2d
 800497c:	d016      	beq.n	80049ac <_vsnprintf+0x94>
 800497e:	2b30      	cmp	r3, #48	; 0x30
 8004980:	d10c      	bne.n	800499c <_vsnprintf+0x84>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8004982:	f044 0401 	orr.w	r4, r4, #1
{
 8004986:	4691      	mov	r9, r2
      switch (*format) {
 8004988:	464a      	mov	r2, r9
 800498a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800498e:	2b2b      	cmp	r3, #43	; 0x2b
 8004990:	d00f      	beq.n	80049b2 <_vsnprintf+0x9a>
 8004992:	d8f2      	bhi.n	800497a <_vsnprintf+0x62>
 8004994:	2b20      	cmp	r3, #32
 8004996:	d00f      	beq.n	80049b8 <_vsnprintf+0xa0>
 8004998:	2b23      	cmp	r3, #35	; 0x23
 800499a:	d010      	beq.n	80049be <_vsnprintf+0xa6>
    if (_is_digit(*format)) {
 800499c:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80049a0:	2909      	cmp	r1, #9
 80049a2:	d82e      	bhi.n	8004a02 <_vsnprintf+0xea>
  unsigned int i = 0U;
 80049a4:	2300      	movs	r3, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80049a6:	200a      	movs	r0, #10
  unsigned int i = 0U;
 80049a8:	9309      	str	r3, [sp, #36]	; 0x24
 80049aa:	e011      	b.n	80049d0 <_vsnprintf+0xb8>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80049ac:	f044 0402 	orr.w	r4, r4, #2
 80049b0:	e7e9      	b.n	8004986 <_vsnprintf+0x6e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 80049b2:	f044 0404 	orr.w	r4, r4, #4
 80049b6:	e7e6      	b.n	8004986 <_vsnprintf+0x6e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 80049b8:	f044 0408 	orr.w	r4, r4, #8
 80049bc:	e7e3      	b.n	8004986 <_vsnprintf+0x6e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 80049be:	f044 0410 	orr.w	r4, r4, #16
 80049c2:	e7e0      	b.n	8004986 <_vsnprintf+0x6e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80049c4:	4691      	mov	r9, r2
 80049c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049c8:	fb00 3301 	mla	r3, r0, r1, r3
 80049cc:	3b30      	subs	r3, #48	; 0x30
 80049ce:	9309      	str	r3, [sp, #36]	; 0x24
  while (_is_digit(**str)) {
 80049d0:	464a      	mov	r2, r9
 80049d2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80049d6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80049da:	2909      	cmp	r1, #9
 80049dc:	d9f2      	bls.n	80049c4 <_vsnprintf+0xac>
    if (*format == '.') {
 80049de:	f899 3000 	ldrb.w	r3, [r9]
 80049e2:	2b2e      	cmp	r3, #46	; 0x2e
 80049e4:	d143      	bne.n	8004a6e <_vsnprintf+0x156>
      if (_is_digit(*format)) {
 80049e6:	f899 2001 	ldrb.w	r2, [r9, #1]
 80049ea:	f109 0301 	add.w	r3, r9, #1
 80049ee:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80049f2:	2909      	cmp	r1, #9
      flags |= FLAGS_PRECISION;
 80049f4:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
      if (_is_digit(*format)) {
 80049f8:	d82d      	bhi.n	8004a56 <_vsnprintf+0x13e>
  unsigned int i = 0U;
 80049fa:	f04f 0b00 	mov.w	fp, #0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80049fe:	250a      	movs	r5, #10
 8004a00:	e016      	b.n	8004a30 <_vsnprintf+0x118>
    else if (*format == '*') {
 8004a02:	2b2a      	cmp	r3, #42	; 0x2a
 8004a04:	d10c      	bne.n	8004a20 <_vsnprintf+0x108>
      const int w = va_arg(va, int);
 8004a06:	f8d8 3000 	ldr.w	r3, [r8]
 8004a0a:	f108 0104 	add.w	r1, r8, #4
      if (w < 0) {
 8004a0e:	2b00      	cmp	r3, #0
        width = (unsigned int)-w;
 8004a10:	bfbc      	itt	lt
 8004a12:	425b      	neglt	r3, r3
        flags |= FLAGS_LEFT;    // reverse padding
 8004a14:	f044 0402 	orrlt.w	r4, r4, #2
        width = (unsigned int)w;
 8004a18:	9309      	str	r3, [sp, #36]	; 0x24
      const int w = va_arg(va, int);
 8004a1a:	4688      	mov	r8, r1
 8004a1c:	4691      	mov	r9, r2
 8004a1e:	e7de      	b.n	80049de <_vsnprintf+0xc6>
    width = 0U;
 8004a20:	2300      	movs	r3, #0
 8004a22:	9309      	str	r3, [sp, #36]	; 0x24
 8004a24:	e7db      	b.n	80049de <_vsnprintf+0xc6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004a26:	460b      	mov	r3, r1
 8004a28:	fb05 2b0b 	mla	fp, r5, fp, r2
 8004a2c:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
  while (_is_digit(**str)) {
 8004a30:	4619      	mov	r1, r3
 8004a32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a36:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8004a3a:	2809      	cmp	r0, #9
 8004a3c:	d9f3      	bls.n	8004a26 <_vsnprintf+0x10e>
 8004a3e:	4699      	mov	r9, r3
    switch (*format) {
 8004a40:	f899 2000 	ldrb.w	r2, [r9]
 8004a44:	f109 0301 	add.w	r3, r9, #1
 8004a48:	2a6a      	cmp	r2, #106	; 0x6a
 8004a4a:	d039      	beq.n	8004ac0 <_vsnprintf+0x1a8>
 8004a4c:	d812      	bhi.n	8004a74 <_vsnprintf+0x15c>
 8004a4e:	2a68      	cmp	r2, #104	; 0x68
 8004a50:	d020      	beq.n	8004a94 <_vsnprintf+0x17c>
 8004a52:	464b      	mov	r3, r9
 8004a54:	e024      	b.n	8004aa0 <_vsnprintf+0x188>
      else if (*format == '*') {
 8004a56:	2a2a      	cmp	r2, #42	; 0x2a
 8004a58:	d108      	bne.n	8004a6c <_vsnprintf+0x154>
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004a5a:	f8d8 3000 	ldr.w	r3, [r8]
        format++;
 8004a5e:	f109 0902 	add.w	r9, r9, #2
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8004a62:	ea23 7be3 	bic.w	fp, r3, r3, asr #31
        const int prec = (int)va_arg(va, int);
 8004a66:	f108 0804 	add.w	r8, r8, #4
 8004a6a:	e7e9      	b.n	8004a40 <_vsnprintf+0x128>
      format++;
 8004a6c:	4699      	mov	r9, r3
    precision = 0U;
 8004a6e:	f04f 0b00 	mov.w	fp, #0
 8004a72:	e7e5      	b.n	8004a40 <_vsnprintf+0x128>
    switch (*format) {
 8004a74:	2a6c      	cmp	r2, #108	; 0x6c
 8004a76:	d004      	beq.n	8004a82 <_vsnprintf+0x16a>
 8004a78:	2a7a      	cmp	r2, #122	; 0x7a
 8004a7a:	d1ea      	bne.n	8004a52 <_vsnprintf+0x13a>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004a7c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
        break;
 8004a80:	e00e      	b.n	8004aa0 <_vsnprintf+0x188>
        if (*format == 'l') {
 8004a82:	f899 2001 	ldrb.w	r2, [r9, #1]
 8004a86:	2a6c      	cmp	r2, #108	; 0x6c
 8004a88:	d1f8      	bne.n	8004a7c <_vsnprintf+0x164>
          flags |= FLAGS_LONG_LONG;
 8004a8a:	f444 7440 	orr.w	r4, r4, #768	; 0x300
          format++;
 8004a8e:	f109 0302 	add.w	r3, r9, #2
 8004a92:	e005      	b.n	8004aa0 <_vsnprintf+0x188>
        if (*format == 'h') {
 8004a94:	f899 2001 	ldrb.w	r2, [r9, #1]
 8004a98:	2a68      	cmp	r2, #104	; 0x68
 8004a9a:	d00e      	beq.n	8004aba <_vsnprintf+0x1a2>
        flags |= FLAGS_SHORT;
 8004a9c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
    switch (*format) {
 8004aa0:	4699      	mov	r9, r3
 8004aa2:	f819 0b01 	ldrb.w	r0, [r9], #1
 8004aa6:	2866      	cmp	r0, #102	; 0x66
 8004aa8:	d015      	beq.n	8004ad6 <_vsnprintf+0x1be>
 8004aaa:	f200 80c3 	bhi.w	8004c34 <_vsnprintf+0x31c>
 8004aae:	2858      	cmp	r0, #88	; 0x58
 8004ab0:	d109      	bne.n	8004ac6 <_vsnprintf+0x1ae>
          flags |= FLAGS_UPPERCASE;
 8004ab2:	f044 0420 	orr.w	r4, r4, #32
          base = 16U;
 8004ab6:	2210      	movs	r2, #16
 8004ab8:	e0ac      	b.n	8004c14 <_vsnprintf+0x2fc>
          flags |= FLAGS_CHAR;
 8004aba:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8004abe:	e7e6      	b.n	8004a8e <_vsnprintf+0x176>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8004ac0:	f444 7400 	orr.w	r4, r4, #512	; 0x200
        break;
 8004ac4:	e7ec      	b.n	8004aa0 <_vsnprintf+0x188>
    switch (*format) {
 8004ac6:	f200 809c 	bhi.w	8004c02 <_vsnprintf+0x2ea>
 8004aca:	2825      	cmp	r0, #37	; 0x25
 8004acc:	f43f af4a 	beq.w	8004964 <_vsnprintf+0x4c>
 8004ad0:	2846      	cmp	r0, #70	; 0x46
 8004ad2:	f47f af47 	bne.w	8004964 <_vsnprintf+0x4c>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004ad6:	f108 0307 	add.w	r3, r8, #7
 8004ada:	f023 0307 	bic.w	r3, r3, #7
 8004ade:	f103 0808 	add.w	r8, r3, #8
 8004ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (value < 0) {
 8004aea:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004aee:	2200      	movs	r2, #0
 8004af0:	2300      	movs	r3, #0
 8004af2:	f7fb ff63 	bl	80009bc <__aeabi_dcmplt>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f000 812e 	beq.w	8004d58 <_vsnprintf+0x440>
    value = 0 - value;
 8004afc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b00:	2000      	movs	r0, #0
 8004b02:	2100      	movs	r1, #0
 8004b04:	f7fb fb30 	bl	8000168 <__aeabi_dsub>
    negative = true;
 8004b08:	2301      	movs	r3, #1
    value = 0 - value;
 8004b0a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    negative = true;
 8004b0e:	930d      	str	r3, [sp, #52]	; 0x34
    prec = 6U;
 8004b10:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8004b14:	bf08      	it	eq
 8004b16:	f04f 0b06 	moveq.w	fp, #6
 8004b1a:	2500      	movs	r5, #0
    buf[len++] = '0';
 8004b1c:	2230      	movs	r2, #48	; 0x30
 8004b1e:	ab12      	add	r3, sp, #72	; 0x48
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004b20:	f1bb 0f09 	cmp.w	fp, #9
 8004b24:	d905      	bls.n	8004b32 <_vsnprintf+0x21a>
    buf[len++] = '0';
 8004b26:	54ea      	strb	r2, [r5, r3]
 8004b28:	3501      	adds	r5, #1
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004b2a:	2d20      	cmp	r5, #32
    prec--;
 8004b2c:	f10b 3bff 	add.w	fp, fp, #4294967295
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004b30:	d1f6      	bne.n	8004b20 <_vsnprintf+0x208>
  int whole = (int)value;
 8004b32:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b36:	f7fb ff7f 	bl	8000a38 <__aeabi_d2iz>
  double tmp = (value - whole) * pow10[prec];
 8004b3a:	4b3c      	ldr	r3, [pc, #240]	; (8004c2c <_vsnprintf+0x314>)
  int whole = (int)value;
 8004b3c:	4606      	mov	r6, r0
  double tmp = (value - whole) * pow10[prec];
 8004b3e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b46:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b4a:	f7fb fc5b 	bl	8000404 <__aeabi_i2d>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b56:	f7fb fb07 	bl	8000168 <__aeabi_dsub>
 8004b5a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b5e:	f7fb fcbb 	bl	80004d8 <__aeabi_dmul>
 8004b62:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  unsigned long frac = (unsigned long)tmp;
 8004b66:	f7fb ff8f 	bl	8000a88 <__aeabi_d2uiz>
 8004b6a:	4607      	mov	r7, r0
  diff = tmp - frac;
 8004b6c:	f7fb fc3a 	bl	80003e4 <__aeabi_ui2d>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004b78:	f7fb faf6 	bl	8000168 <__aeabi_dsub>
  if (diff > 0.5) {
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	4b2c      	ldr	r3, [pc, #176]	; (8004c30 <_vsnprintf+0x318>)
  diff = tmp - frac;
 8004b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  if (diff > 0.5) {
 8004b84:	f7fb ff38 	bl	80009f8 <__aeabi_dcmpgt>
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	f000 80e7 	beq.w	8004d5c <_vsnprintf+0x444>
    ++frac;
 8004b8e:	3701      	adds	r7, #1
    if (frac >= pow10[prec]) {
 8004b90:	4638      	mov	r0, r7
 8004b92:	f7fb fc27 	bl	80003e4 <__aeabi_ui2d>
 8004b96:	4602      	mov	r2, r0
 8004b98:	460b      	mov	r3, r1
 8004b9a:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004b9e:	f7fb ff17 	bl	80009d0 <__aeabi_dcmple>
 8004ba2:	b108      	cbz	r0, 8004ba8 <_vsnprintf+0x290>
      frac = 0;
 8004ba4:	2700      	movs	r7, #0
      ++whole;
 8004ba6:	3601      	adds	r6, #1
  if (value > thres_max) {
 8004ba8:	a31d      	add	r3, pc, #116	; (adr r3, 8004c20 <_vsnprintf+0x308>)
 8004baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bb2:	f7fb ff21 	bl	80009f8 <__aeabi_dcmpgt>
 8004bb6:	2800      	cmp	r0, #0
 8004bb8:	f040 817f 	bne.w	8004eba <_vsnprintf+0x5a2>
  if (prec == 0U) {
 8004bbc:	f1bb 0f00 	cmp.w	fp, #0
 8004bc0:	f000 80db 	beq.w	8004d7a <_vsnprintf+0x462>
      buf[len++] = (char)(48U + (frac % 10U));
 8004bc4:	230a      	movs	r3, #10
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004bc6:	2d20      	cmp	r5, #32
 8004bc8:	f040 80f4 	bne.w	8004db4 <_vsnprintf+0x49c>
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 8004bcc:	f004 0303 	and.w	r3, r4, #3
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	f040 8127 	bne.w	8004e24 <_vsnprintf+0x50c>
      buf[len++] = '0';
 8004bd6:	2130      	movs	r1, #48	; 0x30
 8004bd8:	aa12      	add	r2, sp, #72	; 0x48
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8004bda:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004bdc:	4285      	cmp	r5, r0
 8004bde:	f080 8121 	bcs.w	8004e24 <_vsnprintf+0x50c>
 8004be2:	2d1f      	cmp	r5, #31
 8004be4:	f240 811b 	bls.w	8004e1e <_vsnprintf+0x506>
 8004be8:	4656      	mov	r6, sl
      out(' ', buffer, idx++, maxlen);
 8004bea:	f04f 0b00 	mov.w	fp, #0
  for (size_t i = 0U; i < len; i++) {
 8004bee:	455d      	cmp	r5, fp
 8004bf0:	eb0b 0206 	add.w	r2, fp, r6
 8004bf4:	f040 8147 	bne.w	8004e86 <_vsnprintf+0x56e>
  if (flags & FLAGS_LEFT) {
 8004bf8:	07a3      	lsls	r3, r4, #30
 8004bfa:	f100 8158 	bmi.w	8004eae <_vsnprintf+0x596>
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8004bfe:	4692      	mov	sl, r2
        break;
 8004c00:	e69a      	b.n	8004938 <_vsnprintf+0x20>
    switch (*format) {
 8004c02:	2863      	cmp	r0, #99	; 0x63
 8004c04:	f000 815b 	beq.w	8004ebe <_vsnprintf+0x5a6>
 8004c08:	2864      	cmp	r0, #100	; 0x64
 8004c0a:	d049      	beq.n	8004ca0 <_vsnprintf+0x388>
 8004c0c:	2862      	cmp	r0, #98	; 0x62
 8004c0e:	f47f aea9 	bne.w	8004964 <_vsnprintf+0x4c>
          base =  2U;
 8004c12:	2202      	movs	r2, #2
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8004c14:	f024 040c 	bic.w	r4, r4, #12
 8004c18:	e04a      	b.n	8004cb0 <_vsnprintf+0x398>
 8004c1a:	bf00      	nop
 8004c1c:	f3af 8000 	nop.w
 8004c20:	ffc00000 	.word	0xffc00000
 8004c24:	41dfffff 	.word	0x41dfffff
 8004c28:	08004749 	.word	0x08004749
 8004c2c:	0800d1e8 	.word	0x0800d1e8
 8004c30:	3fe00000 	.word	0x3fe00000
    switch (*format) {
 8004c34:	2870      	cmp	r0, #112	; 0x70
 8004c36:	f000 81b2 	beq.w	8004f9e <_vsnprintf+0x686>
 8004c3a:	d806      	bhi.n	8004c4a <_vsnprintf+0x332>
 8004c3c:	2869      	cmp	r0, #105	; 0x69
 8004c3e:	d02f      	beq.n	8004ca0 <_vsnprintf+0x388>
 8004c40:	286f      	cmp	r0, #111	; 0x6f
 8004c42:	f47f ae8f 	bne.w	8004964 <_vsnprintf+0x4c>
          base =  8U;
 8004c46:	2208      	movs	r2, #8
 8004c48:	e7e4      	b.n	8004c14 <_vsnprintf+0x2fc>
    switch (*format) {
 8004c4a:	2875      	cmp	r0, #117	; 0x75
 8004c4c:	d028      	beq.n	8004ca0 <_vsnprintf+0x388>
 8004c4e:	2878      	cmp	r0, #120	; 0x78
 8004c50:	f43f af31 	beq.w	8004ab6 <_vsnprintf+0x19e>
 8004c54:	2873      	cmp	r0, #115	; 0x73
 8004c56:	f47f ae85 	bne.w	8004964 <_vsnprintf+0x4c>
        char* p = va_arg(va, char*);
 8004c5a:	f108 0304 	add.w	r3, r8, #4
 8004c5e:	f8d8 5000 	ldr.w	r5, [r8]
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004c62:	f1bb 0f00 	cmp.w	fp, #0
        char* p = va_arg(va, char*);
 8004c66:	930d      	str	r3, [sp, #52]	; 0x34
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8004c68:	bf14      	ite	ne
 8004c6a:	465b      	movne	r3, fp
 8004c6c:	f04f 33ff 	moveq.w	r3, #4294967295
 8004c70:	462e      	mov	r6, r5
 8004c72:	442b      	add	r3, r5
  for (s = str; *s && maxsize--; ++s);
 8004c74:	7832      	ldrb	r2, [r6, #0]
 8004c76:	b112      	cbz	r2, 8004c7e <_vsnprintf+0x366>
 8004c78:	42b3      	cmp	r3, r6
 8004c7a:	f040 8154 	bne.w	8004f26 <_vsnprintf+0x60e>
        if (flags & FLAGS_PRECISION) {
 8004c7e:	f414 6780 	ands.w	r7, r4, #1024	; 0x400
  return (unsigned int)(s - str);
 8004c82:	eba6 0605 	sub.w	r6, r6, r5
        if (flags & FLAGS_PRECISION) {
 8004c86:	d002      	beq.n	8004c8e <_vsnprintf+0x376>
          l = (l < precision ? l : precision);
 8004c88:	455e      	cmp	r6, fp
 8004c8a:	bf28      	it	cs
 8004c8c:	465e      	movcs	r6, fp
        if (!(flags & FLAGS_LEFT)) {
 8004c8e:	f014 0302 	ands.w	r3, r4, #2
 8004c92:	930a      	str	r3, [sp, #40]	; 0x28
 8004c94:	f000 8157 	beq.w	8004f46 <_vsnprintf+0x62e>
 8004c98:	4652      	mov	r2, sl
 8004c9a:	eba2 0805 	sub.w	r8, r2, r5
 8004c9e:	e15b      	b.n	8004f58 <_vsnprintf+0x640>
        if ((*format != 'i') && (*format != 'd')) {
 8004ca0:	2869      	cmp	r0, #105	; 0x69
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8004ca2:	f024 0410 	bic.w	r4, r4, #16
          base = 10U;
 8004ca6:	f04f 020a 	mov.w	r2, #10
        if ((*format != 'i') && (*format != 'd')) {
 8004caa:	d001      	beq.n	8004cb0 <_vsnprintf+0x398>
 8004cac:	2864      	cmp	r0, #100	; 0x64
 8004cae:	d1b1      	bne.n	8004c14 <_vsnprintf+0x2fc>
        if (flags & FLAGS_PRECISION) {
 8004cb0:	0563      	lsls	r3, r4, #21
          flags &= ~FLAGS_ZEROPAD;
 8004cb2:	bf48      	it	mi
 8004cb4:	f024 0401 	bicmi.w	r4, r4, #1
        if ((*format == 'i') || (*format == 'd')) {
 8004cb8:	2869      	cmp	r0, #105	; 0x69
 8004cba:	f404 7300 	and.w	r3, r4, #512	; 0x200
 8004cbe:	d001      	beq.n	8004cc4 <_vsnprintf+0x3ac>
 8004cc0:	2864      	cmp	r0, #100	; 0x64
 8004cc2:	d127      	bne.n	8004d14 <_vsnprintf+0x3fc>
          if (flags & FLAGS_LONG_LONG) {
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	f47f ae37 	bne.w	8004938 <_vsnprintf+0x20>
          else if (flags & FLAGS_LONG) {
 8004cca:	05e7      	lsls	r7, r4, #23
 8004ccc:	f108 0504 	add.w	r5, r8, #4
 8004cd0:	d515      	bpl.n	8004cfe <_vsnprintf+0x3e6>
            const long value = va_arg(va, long);
 8004cd2:	f8d8 3000 	ldr.w	r3, [r8]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8004cd6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004cd8:	9202      	str	r2, [sp, #8]
 8004cda:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004cde:	0fda      	lsrs	r2, r3, #31
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	9405      	str	r4, [sp, #20]
 8004ce4:	9201      	str	r2, [sp, #4]
 8004ce6:	bfb8      	it	lt
 8004ce8:	425b      	neglt	r3, r3
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004cea:	9300      	str	r3, [sp, #0]
 8004cec:	4652      	mov	r2, sl
 8004cee:	9b07      	ldr	r3, [sp, #28]
 8004cf0:	9908      	ldr	r1, [sp, #32]
 8004cf2:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004cf4:	f7ff fd29 	bl	800474a <_ntoa_long>
 8004cf8:	46a8      	mov	r8, r5
 8004cfa:	4682      	mov	sl, r0
        break;
 8004cfc:	e61c      	b.n	8004938 <_vsnprintf+0x20>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8004cfe:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004d02:	f8d8 3000 	ldr.w	r3, [r8]
 8004d06:	d001      	beq.n	8004d0c <_vsnprintf+0x3f4>
 8004d08:	b2db      	uxtb	r3, r3
 8004d0a:	e7e4      	b.n	8004cd6 <_vsnprintf+0x3be>
 8004d0c:	0626      	lsls	r6, r4, #24
 8004d0e:	bf48      	it	mi
 8004d10:	b21b      	sxthmi	r3, r3
 8004d12:	e7e0      	b.n	8004cd6 <_vsnprintf+0x3be>
          if (flags & FLAGS_LONG_LONG) {
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	f47f ae0f 	bne.w	8004938 <_vsnprintf+0x20>
          else if (flags & FLAGS_LONG) {
 8004d1a:	05e0      	lsls	r0, r4, #23
 8004d1c:	f108 0504 	add.w	r5, r8, #4
 8004d20:	d508      	bpl.n	8004d34 <_vsnprintf+0x41c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8004d22:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d24:	9405      	str	r4, [sp, #20]
 8004d26:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004d2a:	9202      	str	r2, [sp, #8]
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004d2c:	9301      	str	r3, [sp, #4]
 8004d2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004d32:	e7da      	b.n	8004cea <_vsnprintf+0x3d2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004d34:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004d38:	f8d8 3000 	ldr.w	r3, [r8]
 8004d3c:	d008      	beq.n	8004d50 <_vsnprintf+0x438>
 8004d3e:	b2db      	uxtb	r3, r3
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8004d40:	9202      	str	r2, [sp, #8]
 8004d42:	2200      	movs	r2, #0
 8004d44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d46:	9405      	str	r4, [sp, #20]
 8004d48:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004d4c:	9201      	str	r2, [sp, #4]
 8004d4e:	e7cc      	b.n	8004cea <_vsnprintf+0x3d2>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8004d50:	0621      	lsls	r1, r4, #24
 8004d52:	bf48      	it	mi
 8004d54:	b29b      	uxthmi	r3, r3
 8004d56:	e7f3      	b.n	8004d40 <_vsnprintf+0x428>
  bool negative = false;
 8004d58:	900d      	str	r0, [sp, #52]	; 0x34
 8004d5a:	e6d9      	b.n	8004b10 <_vsnprintf+0x1f8>
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d62:	4b9a      	ldr	r3, [pc, #616]	; (8004fcc <_vsnprintf+0x6b4>)
 8004d64:	f7fb fe20 	bl	80009a8 <__aeabi_dcmpeq>
 8004d68:	2800      	cmp	r0, #0
 8004d6a:	f43f af1d 	beq.w	8004ba8 <_vsnprintf+0x290>
 8004d6e:	b117      	cbz	r7, 8004d76 <_vsnprintf+0x45e>
 8004d70:	07fb      	lsls	r3, r7, #31
 8004d72:	f57f af19 	bpl.w	8004ba8 <_vsnprintf+0x290>
    ++frac;
 8004d76:	3701      	adds	r7, #1
 8004d78:	e716      	b.n	8004ba8 <_vsnprintf+0x290>
    diff = value - (double)whole;
 8004d7a:	4630      	mov	r0, r6
 8004d7c:	f7fb fb42 	bl	8000404 <__aeabi_i2d>
 8004d80:	4602      	mov	r2, r0
 8004d82:	460b      	mov	r3, r1
 8004d84:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004d88:	f7fb f9ee 	bl	8000168 <__aeabi_dsub>
    if (diff > 0.5) {
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	4b8f      	ldr	r3, [pc, #572]	; (8004fcc <_vsnprintf+0x6b4>)
    diff = value - (double)whole;
 8004d90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    if (diff > 0.5) {
 8004d94:	f7fb fe30 	bl	80009f8 <__aeabi_dcmpgt>
 8004d98:	b108      	cbz	r0, 8004d9e <_vsnprintf+0x486>
      ++whole;
 8004d9a:	3601      	adds	r6, #1
 8004d9c:	e008      	b.n	8004db0 <_vsnprintf+0x498>
    else if ((diff == 0.5) && (whole & 1)) {
 8004d9e:	2200      	movs	r2, #0
 8004da0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004da4:	4b89      	ldr	r3, [pc, #548]	; (8004fcc <_vsnprintf+0x6b4>)
 8004da6:	f7fb fdff 	bl	80009a8 <__aeabi_dcmpeq>
 8004daa:	b108      	cbz	r0, 8004db0 <_vsnprintf+0x498>
 8004dac:	07f0      	lsls	r0, r6, #31
 8004dae:	d4f4      	bmi.n	8004d9a <_vsnprintf+0x482>
    buf[len++] = (char)(48 + (whole % 10));
 8004db0:	230a      	movs	r3, #10
 8004db2:	e031      	b.n	8004e18 <_vsnprintf+0x500>
      buf[len++] = (char)(48U + (frac % 10U));
 8004db4:	aa12      	add	r2, sp, #72	; 0x48
 8004db6:	3501      	adds	r5, #1
 8004db8:	1951      	adds	r1, r2, r5
 8004dba:	fbb7 f2f3 	udiv	r2, r7, r3
 8004dbe:	fb03 7712 	mls	r7, r3, r2, r7
 8004dc2:	3730      	adds	r7, #48	; 0x30
 8004dc4:	f801 7c01 	strb.w	r7, [r1, #-1]
      --count;
 8004dc8:	f10b 3bff 	add.w	fp, fp, #4294967295
      if (!(frac /= 10U)) {
 8004dcc:	4617      	mov	r7, r2
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	f47f aef9 	bne.w	8004bc6 <_vsnprintf+0x2ae>
      buf[len++] = '0';
 8004dd4:	2130      	movs	r1, #48	; 0x30
 8004dd6:	44ab      	add	fp, r5
 8004dd8:	aa12      	add	r2, sp, #72	; 0x48
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 8004dda:	2d20      	cmp	r5, #32
 8004ddc:	f43f aef6 	beq.w	8004bcc <_vsnprintf+0x2b4>
 8004de0:	45ab      	cmp	fp, r5
 8004de2:	f105 0301 	add.w	r3, r5, #1
 8004de6:	d106      	bne.n	8004df6 <_vsnprintf+0x4de>
      buf[len++] = '.';
 8004de8:	aa1a      	add	r2, sp, #104	; 0x68
 8004dea:	4415      	add	r5, r2
 8004dec:	222e      	movs	r2, #46	; 0x2e
 8004dee:	f805 2c20 	strb.w	r2, [r5, #-32]
 8004df2:	461d      	mov	r5, r3
 8004df4:	e7dc      	b.n	8004db0 <_vsnprintf+0x498>
      buf[len++] = '0';
 8004df6:	54a9      	strb	r1, [r5, r2]
 8004df8:	461d      	mov	r5, r3
 8004dfa:	e7ee      	b.n	8004dda <_vsnprintf+0x4c2>
    buf[len++] = (char)(48 + (whole % 10));
 8004dfc:	aa12      	add	r2, sp, #72	; 0x48
 8004dfe:	3501      	adds	r5, #1
 8004e00:	1951      	adds	r1, r2, r5
 8004e02:	fb96 f2f3 	sdiv	r2, r6, r3
 8004e06:	fb03 6612 	mls	r6, r3, r2, r6
 8004e0a:	3630      	adds	r6, #48	; 0x30
 8004e0c:	f801 6c01 	strb.w	r6, [r1, #-1]
    if (!(whole /= 10)) {
 8004e10:	4616      	mov	r6, r2
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	f43f aeda 	beq.w	8004bcc <_vsnprintf+0x2b4>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004e18:	2d1f      	cmp	r5, #31
 8004e1a:	d9ef      	bls.n	8004dfc <_vsnprintf+0x4e4>
 8004e1c:	e6d6      	b.n	8004bcc <_vsnprintf+0x2b4>
      buf[len++] = '0';
 8004e1e:	54a9      	strb	r1, [r5, r2]
 8004e20:	3501      	adds	r5, #1
 8004e22:	e6da      	b.n	8004bda <_vsnprintf+0x2c2>
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
 8004e24:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e26:	42aa      	cmp	r2, r5
 8004e28:	d106      	bne.n	8004e38 <_vsnprintf+0x520>
 8004e2a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e2c:	b91a      	cbnz	r2, 8004e36 <_vsnprintf+0x51e>
 8004e2e:	f014 0f0c 	tst.w	r4, #12
 8004e32:	f000 80c0 	beq.w	8004fb6 <_vsnprintf+0x69e>
    len--;
 8004e36:	3d01      	subs	r5, #1
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004e38:	2d1f      	cmp	r5, #31
 8004e3a:	d809      	bhi.n	8004e50 <_vsnprintf+0x538>
    if (negative) {
 8004e3c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e3e:	2a00      	cmp	r2, #0
 8004e40:	f000 80bd 	beq.w	8004fbe <_vsnprintf+0x6a6>
      buf[len++] = '-';
 8004e44:	212d      	movs	r1, #45	; 0x2d
 8004e46:	aa1a      	add	r2, sp, #104	; 0x68
 8004e48:	442a      	add	r2, r5
      buf[len++] = ' ';
 8004e4a:	f802 1c20 	strb.w	r1, [r2, #-32]
 8004e4e:	3501      	adds	r5, #1
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004e50:	4656      	mov	r6, sl
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	f47f aec9 	bne.w	8004bea <_vsnprintf+0x2d2>
    for (size_t i = len; i < width; i++) {
 8004e58:	eba5 070a 	sub.w	r7, r5, sl
 8004e5c:	e00e      	b.n	8004e7c <_vsnprintf+0x564>
    else if (flags & FLAGS_SPACE) {
 8004e5e:	0722      	lsls	r2, r4, #28
 8004e60:	d5f6      	bpl.n	8004e50 <_vsnprintf+0x538>
      buf[len++] = ' ';
 8004e62:	aa1a      	add	r2, sp, #104	; 0x68
 8004e64:	442a      	add	r2, r5
 8004e66:	2120      	movs	r1, #32
 8004e68:	e7ef      	b.n	8004e4a <_vsnprintf+0x532>
      out(' ', buffer, idx++, maxlen);
 8004e6a:	f106 0b01 	add.w	fp, r6, #1
 8004e6e:	4632      	mov	r2, r6
 8004e70:	9b07      	ldr	r3, [sp, #28]
 8004e72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e74:	9908      	ldr	r1, [sp, #32]
 8004e76:	2020      	movs	r0, #32
 8004e78:	47b0      	blx	r6
 8004e7a:	465e      	mov	r6, fp
    for (size_t i = len; i < width; i++) {
 8004e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7e:	19bb      	adds	r3, r7, r6
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d3f2      	bcc.n	8004e6a <_vsnprintf+0x552>
 8004e84:	e6b1      	b.n	8004bea <_vsnprintf+0x2d2>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
 8004e86:	eba5 000b 	sub.w	r0, r5, fp
 8004e8a:	ab12      	add	r3, sp, #72	; 0x48
 8004e8c:	4418      	add	r0, r3
 8004e8e:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8004e92:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004e96:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004e98:	47b8      	blx	r7
  for (size_t i = 0U; i < len; i++) {
 8004e9a:	f10b 0b01 	add.w	fp, fp, #1
 8004e9e:	e6a6      	b.n	8004bee <_vsnprintf+0x2d6>
      out(' ', buffer, idx++, maxlen);
 8004ea0:	1c54      	adds	r4, r2, #1
 8004ea2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004ea6:	2020      	movs	r0, #32
 8004ea8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004eaa:	47a8      	blx	r5
 8004eac:	4622      	mov	r2, r4
    while (idx - start_idx < width) {
 8004eae:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004eb0:	eba2 030a 	sub.w	r3, r2, sl
 8004eb4:	428b      	cmp	r3, r1
 8004eb6:	d3f3      	bcc.n	8004ea0 <_vsnprintf+0x588>
 8004eb8:	e6a1      	b.n	8004bfe <_vsnprintf+0x2e6>
    return 0U;
 8004eba:	2200      	movs	r2, #0
 8004ebc:	e69f      	b.n	8004bfe <_vsnprintf+0x2e6>
        if (!(flags & FLAGS_LEFT)) {
 8004ebe:	f014 0402 	ands.w	r4, r4, #2
 8004ec2:	d024      	beq.n	8004f0e <_vsnprintf+0x5f6>
 8004ec4:	4656      	mov	r6, sl
        unsigned int l = 1U;
 8004ec6:	2501      	movs	r5, #1
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004ec8:	9b07      	ldr	r3, [sp, #28]
 8004eca:	4632      	mov	r2, r6
 8004ecc:	9908      	ldr	r1, [sp, #32]
 8004ece:	f898 0000 	ldrb.w	r0, [r8]
 8004ed2:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004ed4:	f108 0b04 	add.w	fp, r8, #4
 8004ed8:	f106 0a01 	add.w	sl, r6, #1
 8004edc:	47b8      	blx	r7
        if (flags & FLAGS_LEFT) {
 8004ede:	b134      	cbz	r4, 8004eee <_vsnprintf+0x5d6>
 8004ee0:	3d01      	subs	r5, #1
 8004ee2:	1bae      	subs	r6, r5, r6
          while (l++ < width) {
 8004ee4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ee6:	eb0a 0306 	add.w	r3, sl, r6
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d311      	bcc.n	8004f12 <_vsnprintf+0x5fa>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8004eee:	46d8      	mov	r8, fp
        break;
 8004ef0:	e522      	b.n	8004938 <_vsnprintf+0x20>
            out(' ', buffer, idx++, maxlen);
 8004ef2:	9b07      	ldr	r3, [sp, #28]
 8004ef4:	4632      	mov	r2, r6
 8004ef6:	9908      	ldr	r1, [sp, #32]
 8004ef8:	2020      	movs	r0, #32
 8004efa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004efc:	47a8      	blx	r5
          while (l++ < width) {
 8004efe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f00:	eb0a 0607 	add.w	r6, sl, r7
 8004f04:	1cbd      	adds	r5, r7, #2
 8004f06:	3701      	adds	r7, #1
 8004f08:	429f      	cmp	r7, r3
 8004f0a:	d3f2      	bcc.n	8004ef2 <_vsnprintf+0x5da>
 8004f0c:	e7dc      	b.n	8004ec8 <_vsnprintf+0x5b0>
 8004f0e:	4627      	mov	r7, r4
 8004f10:	e7f5      	b.n	8004efe <_vsnprintf+0x5e6>
            out(' ', buffer, idx++, maxlen);
 8004f12:	4652      	mov	r2, sl
 8004f14:	f10a 0401 	add.w	r4, sl, #1
 8004f18:	9b07      	ldr	r3, [sp, #28]
 8004f1a:	9908      	ldr	r1, [sp, #32]
 8004f1c:	2020      	movs	r0, #32
 8004f1e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f20:	47a8      	blx	r5
 8004f22:	46a2      	mov	sl, r4
 8004f24:	e7de      	b.n	8004ee4 <_vsnprintf+0x5cc>
  for (s = str; *s && maxsize--; ++s);
 8004f26:	3601      	adds	r6, #1
 8004f28:	e6a4      	b.n	8004c74 <_vsnprintf+0x35c>
            out(' ', buffer, idx++, maxlen);
 8004f2a:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004f2e:	2020      	movs	r0, #32
 8004f30:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f32:	47a0      	blx	r4
          while (l++ < width) {
 8004f34:	4633      	mov	r3, r6
 8004f36:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f38:	eb08 0203 	add.w	r2, r8, r3
 8004f3c:	4299      	cmp	r1, r3
 8004f3e:	f103 0601 	add.w	r6, r3, #1
 8004f42:	d8f2      	bhi.n	8004f2a <_vsnprintf+0x612>
 8004f44:	e6a9      	b.n	8004c9a <_vsnprintf+0x382>
 8004f46:	4633      	mov	r3, r6
 8004f48:	ebaa 0806 	sub.w	r8, sl, r6
 8004f4c:	e7f3      	b.n	8004f36 <_vsnprintf+0x61e>
 8004f4e:	469b      	mov	fp, r3
          out(*(p++), buffer, idx++, maxlen);
 8004f50:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004f54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f56:	47a0      	blx	r4
 8004f58:	eb08 0205 	add.w	r2, r8, r5
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8004f5c:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004f60:	b130      	cbz	r0, 8004f70 <_vsnprintf+0x658>
 8004f62:	2f00      	cmp	r7, #0
 8004f64:	d0f4      	beq.n	8004f50 <_vsnprintf+0x638>
 8004f66:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f6a:	f1bb 0f00 	cmp.w	fp, #0
 8004f6e:	d1ee      	bne.n	8004f4e <_vsnprintf+0x636>
        if (flags & FLAGS_LEFT) {
 8004f70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f72:	4692      	mov	sl, r2
 8004f74:	b98b      	cbnz	r3, 8004f9a <_vsnprintf+0x682>
        char* p = va_arg(va, char*);
 8004f76:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
        break;
 8004f7a:	e4dd      	b.n	8004938 <_vsnprintf+0x20>
            out(' ', buffer, idx++, maxlen);
 8004f7c:	4652      	mov	r2, sl
 8004f7e:	f10a 0401 	add.w	r4, sl, #1
 8004f82:	9b07      	ldr	r3, [sp, #28]
 8004f84:	9908      	ldr	r1, [sp, #32]
 8004f86:	2020      	movs	r0, #32
 8004f88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f8a:	47a8      	blx	r5
 8004f8c:	46a2      	mov	sl, r4
          while (l++ < width) {
 8004f8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f90:	eb06 030a 	add.w	r3, r6, sl
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d3f1      	bcc.n	8004f7c <_vsnprintf+0x664>
 8004f98:	e7ed      	b.n	8004f76 <_vsnprintf+0x65e>
 8004f9a:	1ab6      	subs	r6, r6, r2
 8004f9c:	e7f7      	b.n	8004f8e <_vsnprintf+0x676>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004f9e:	2308      	movs	r3, #8
 8004fa0:	e9cd b303 	strd	fp, r3, [sp, #12]
 8004fa4:	2310      	movs	r3, #16
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8004fa6:	f044 0421 	orr.w	r4, r4, #33	; 0x21
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8004faa:	9302      	str	r3, [sp, #8]
 8004fac:	f108 0504 	add.w	r5, r8, #4
 8004fb0:	9405      	str	r4, [sp, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e6ba      	b.n	8004d2c <_vsnprintf+0x414>
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8004fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb8:	2a1f      	cmp	r2, #31
 8004fba:	f63f af49 	bhi.w	8004e50 <_vsnprintf+0x538>
    else if (flags & FLAGS_PLUS) {
 8004fbe:	0761      	lsls	r1, r4, #29
 8004fc0:	f57f af4d 	bpl.w	8004e5e <_vsnprintf+0x546>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004fc4:	aa1a      	add	r2, sp, #104	; 0x68
 8004fc6:	442a      	add	r2, r5
 8004fc8:	212b      	movs	r1, #43	; 0x2b
 8004fca:	e73e      	b.n	8004e4a <_vsnprintf+0x532>
 8004fcc:	3fe00000 	.word	0x3fe00000

08004fd0 <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 8004fd0:	b40e      	push	{r1, r2, r3}
 8004fd2:	b50f      	push	{r0, r1, r2, r3, lr}
 8004fd4:	aa05      	add	r2, sp, #20
 8004fd6:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004fda:	4601      	mov	r1, r0
  va_start(va, format);
 8004fdc:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 8004fde:	9200      	str	r2, [sp, #0]
 8004fe0:	4804      	ldr	r0, [pc, #16]	; (8004ff4 <sprintf_+0x24>)
 8004fe2:	f04f 32ff 	mov.w	r2, #4294967295
 8004fe6:	f7ff fc97 	bl	8004918 <_vsnprintf>
  va_end(va);
  return ret;
}
 8004fea:	b004      	add	sp, #16
 8004fec:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ff0:	b003      	add	sp, #12
 8004ff2:	4770      	bx	lr
 8004ff4:	08004741 	.word	0x08004741

08004ff8 <snprintf_>:


int snprintf_(char* buffer, size_t count, const char* format, ...)
{
 8004ff8:	b40c      	push	{r2, r3}
 8004ffa:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004ffc:	aa06      	add	r2, sp, #24
 8004ffe:	f852 3b04 	ldr.w	r3, [r2], #4
  va_list va;
  va_start(va, format);
 8005002:	9203      	str	r2, [sp, #12]
  const int ret = _vsnprintf(_out_buffer, buffer, count, format, va);
 8005004:	9200      	str	r2, [sp, #0]
 8005006:	460a      	mov	r2, r1
 8005008:	4601      	mov	r1, r0
 800500a:	4804      	ldr	r0, [pc, #16]	; (800501c <snprintf_+0x24>)
 800500c:	f7ff fc84 	bl	8004918 <_vsnprintf>
  va_end(va);
  return ret;
}
 8005010:	b005      	add	sp, #20
 8005012:	f85d eb04 	ldr.w	lr, [sp], #4
 8005016:	b002      	add	sp, #8
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	08004741 	.word	0x08004741

08005020 <send_gauge>:
uint8_t gaugebuf[] = {0xFF,0x04, TT_GAUGE,0x00,0x00,0x00};
uint8_t chartbuf[] = {0xFF,0x04, TT_CHART,0x00,0x00,0x00};
const uint8_t chartdraw[] = {0xFF,0x02, TT_CHART_DRAW,0x00};

void send_gauge(uint8_t gauge, int16_t val, port_str *ptr){
    gaugebuf[3]=gauge;
 8005020:	4b04      	ldr	r3, [pc, #16]	; (8005034 <send_gauge+0x14>)
    gaugebuf[4]=(uint8_t)val;
 8005022:	7119      	strb	r1, [r3, #4]
    gaugebuf[5]=(uint8_t)(val>>8);
 8005024:	1209      	asrs	r1, r1, #8
    gaugebuf[3]=gauge;
 8005026:	70d8      	strb	r0, [r3, #3]
    gaugebuf[5]=(uint8_t)(val>>8);
 8005028:	7159      	strb	r1, [r3, #5]
    send_buffer(gaugebuf,sizeof(gaugebuf),ptr);
 800502a:	4618      	mov	r0, r3
 800502c:	2106      	movs	r1, #6
 800502e:	f7fd bae1 	b.w	80025f4 <send_buffer>
 8005032:	bf00      	nop
 8005034:	200003ca 	.word	0x200003ca

08005038 <send_chart>:
}

void send_chart(uint8_t chart, int16_t val, port_str *ptr){
    chartbuf[3]=chart;
 8005038:	4b04      	ldr	r3, [pc, #16]	; (800504c <send_chart+0x14>)
    chartbuf[4]=(uint8_t)val;
 800503a:	7119      	strb	r1, [r3, #4]
    chartbuf[5]=(uint8_t)(val>>8);
 800503c:	1209      	asrs	r1, r1, #8
    chartbuf[3]=chart;
 800503e:	70d8      	strb	r0, [r3, #3]
    chartbuf[5]=(uint8_t)(val>>8);
 8005040:	7159      	strb	r1, [r3, #5]
    send_buffer(chartbuf,sizeof(chartbuf),ptr);
 8005042:	4618      	mov	r0, r3
 8005044:	2106      	movs	r1, #6
 8005046:	f7fd bad5 	b.w	80025f4 <send_buffer>
 800504a:	bf00      	nop
 800504c:	200003c4 	.word	0x200003c4

08005050 <send_chart_draw>:
}
void send_chart_draw(port_str *ptr){
    send_buffer((uint8_t*)chartdraw,sizeof(chartdraw),ptr);
 8005050:	4602      	mov	r2, r0
 8005052:	2104      	movs	r1, #4
 8005054:	4801      	ldr	r0, [pc, #4]	; (800505c <send_chart_draw+0xc>)
 8005056:	f7fd bacd 	b.w	80025f4 <send_buffer>
 800505a:	bf00      	nop
 800505c:	0800d238 	.word	0x0800d238

08005060 <send_chart_config>:
}

void send_chart_config(uint8_t chart, int16_t min, int16_t max, int16_t offset,uint8_t unit, char * text, port_str *ptr){
 8005060:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005062:	b085      	sub	sp, #20
 8005064:	4607      	mov	r7, r0
    uint8_t bytes = strlen(text);
 8005066:	980b      	ldr	r0, [sp, #44]	; 0x2c
void send_chart_config(uint8_t chart, int16_t min, int16_t max, int16_t offset,uint8_t unit, char * text, port_str *ptr){
 8005068:	460e      	mov	r6, r1
 800506a:	4615      	mov	r5, r2
 800506c:	461c      	mov	r4, r3
    uint8_t bytes = strlen(text);
 800506e:	f7fb f86f 	bl	8000150 <strlen>
    uint8_t buf[11];
    buf[0] = 0xFF;
 8005072:	23ff      	movs	r3, #255	; 0xff
 8005074:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = bytes+sizeof(buf)-2;
    buf[2] = TT_CHART_CONFIG;
 8005078:	2305      	movs	r3, #5
    buf[1] = bytes+sizeof(buf)-2;
 800507a:	3009      	adds	r0, #9
    buf[2] = TT_CHART_CONFIG;
 800507c:	f88d 3006 	strb.w	r3, [sp, #6]
    buf[5] = (min>>8);
    buf[6] = max;
    buf[7] = (max>>8);
    buf[8] = offset;
    buf[9] = (offset>>8);
    buf[10] = unit;
 8005080:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    buf[1] = bytes+sizeof(buf)-2;
 8005084:	f88d 0005 	strb.w	r0, [sp, #5]
    buf[4] = min;
 8005088:	f88d 6008 	strb.w	r6, [sp, #8]
    buf[6] = max;
 800508c:	f88d 500a 	strb.w	r5, [sp, #10]
    buf[8] = offset;
 8005090:	f88d 400c 	strb.w	r4, [sp, #12]
    send_buffer(buf,sizeof(buf),ptr);
 8005094:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005096:	a801      	add	r0, sp, #4
    buf[5] = (min>>8);
 8005098:	1236      	asrs	r6, r6, #8
    buf[7] = (max>>8);
 800509a:	122d      	asrs	r5, r5, #8
    buf[9] = (offset>>8);
 800509c:	1224      	asrs	r4, r4, #8
    send_buffer(buf,sizeof(buf),ptr);
 800509e:	210b      	movs	r1, #11
    buf[10] = unit;
 80050a0:	f88d 300e 	strb.w	r3, [sp, #14]
    buf[3] = chart;
 80050a4:	f88d 7007 	strb.w	r7, [sp, #7]
    buf[5] = (min>>8);
 80050a8:	f88d 6009 	strb.w	r6, [sp, #9]
    buf[7] = (max>>8);
 80050ac:	f88d 500b 	strb.w	r5, [sp, #11]
    buf[9] = (offset>>8);
 80050b0:	f88d 400d 	strb.w	r4, [sp, #13]
    send_buffer(buf,sizeof(buf),ptr);
 80050b4:	f7fd fa9e 	bl	80025f4 <send_buffer>
    send_string(text, ptr);
 80050b8:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 80050bc:	f7fd fa79 	bl	80025b2 <send_string>
}
 80050c0:	b005      	add	sp, #20
 80050c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050c4 <send_gauge_config>:

void send_gauge_config(uint8_t gauge, int16_t min, int16_t max, char * text, port_str *ptr){
 80050c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050c6:	4607      	mov	r7, r0
    uint8_t bytes = strlen(text);
 80050c8:	4618      	mov	r0, r3
void send_gauge_config(uint8_t gauge, int16_t min, int16_t max, char * text, port_str *ptr){
 80050ca:	460d      	mov	r5, r1
 80050cc:	4614      	mov	r4, r2
 80050ce:	461e      	mov	r6, r3
    uint8_t bytes = strlen(text);
 80050d0:	f7fb f83e 	bl	8000150 <strlen>
    uint8_t buf[8];
    buf[0] = 0xFF;
 80050d4:	23ff      	movs	r3, #255	; 0xff
 80050d6:	f88d 3000 	strb.w	r3, [sp]
    buf[1] = bytes+6;
    buf[2] = TT_GAUGE_CONF;
 80050da:	2302      	movs	r3, #2
    buf[1] = bytes+6;
 80050dc:	3006      	adds	r0, #6
 80050de:	f88d 0001 	strb.w	r0, [sp, #1]
    buf[3] = gauge;
    buf[4] = min;
 80050e2:	f88d 5004 	strb.w	r5, [sp, #4]
    buf[5] = (min>>8);
    buf[6] = max;
 80050e6:	f88d 4006 	strb.w	r4, [sp, #6]
    buf[7] = (max>>8);
    send_buffer(buf,sizeof(buf),ptr);
 80050ea:	9a08      	ldr	r2, [sp, #32]
 80050ec:	4668      	mov	r0, sp
    buf[5] = (min>>8);
 80050ee:	122d      	asrs	r5, r5, #8
    buf[7] = (max>>8);
 80050f0:	1224      	asrs	r4, r4, #8
    send_buffer(buf,sizeof(buf),ptr);
 80050f2:	2108      	movs	r1, #8
    buf[2] = TT_GAUGE_CONF;
 80050f4:	f88d 3002 	strb.w	r3, [sp, #2]
    buf[3] = gauge;
 80050f8:	f88d 7003 	strb.w	r7, [sp, #3]
    buf[5] = (min>>8);
 80050fc:	f88d 5005 	strb.w	r5, [sp, #5]
    buf[7] = (max>>8);
 8005100:	f88d 4007 	strb.w	r4, [sp, #7]
    send_buffer(buf,sizeof(buf),ptr);
 8005104:	f7fd fa76 	bl	80025f4 <send_buffer>
    send_string(text, ptr);
 8005108:	9908      	ldr	r1, [sp, #32]
 800510a:	4630      	mov	r0, r6
 800510c:	f7fd fa51 	bl	80025b2 <send_string>
}
 8005110:	b003      	add	sp, #12
 8005112:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005114 <send_config>:


void send_config(char* param,const char* help_text, port_str *ptr){
 8005114:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005116:	4615      	mov	r5, r2
 8005118:	460e      	mov	r6, r1
 800511a:	4607      	mov	r7, r0
    uint8_t len = strlen(param);
 800511c:	f7fb f818 	bl	8000150 <strlen>
 8005120:	b2c4      	uxtb	r4, r0
    len += strlen(help_text);
 8005122:	4630      	mov	r0, r6
 8005124:	f7fb f814 	bl	8000150 <strlen>
    len++;
    uint8_t buf[3];
    buf[0] = 0xFF;
 8005128:	23ff      	movs	r3, #255	; 0xff
 800512a:	f88d 3004 	strb.w	r3, [sp, #4]
    buf[1] = len+sizeof(buf)-2;
    buf[2] = TT_CONFIG_GET;
 800512e:	230b      	movs	r3, #11
    len += strlen(help_text);
 8005130:	4420      	add	r0, r4
    buf[1] = len+sizeof(buf)-2;
 8005132:	3002      	adds	r0, #2
    send_buffer(buf,sizeof(buf),ptr);
 8005134:	462a      	mov	r2, r5
    buf[1] = len+sizeof(buf)-2;
 8005136:	f88d 0005 	strb.w	r0, [sp, #5]
    send_buffer(buf,sizeof(buf),ptr);
 800513a:	2103      	movs	r1, #3
 800513c:	a801      	add	r0, sp, #4
    buf[2] = TT_CONFIG_GET;
 800513e:	f88d 3006 	strb.w	r3, [sp, #6]
    send_buffer(buf,sizeof(buf),ptr);
 8005142:	f7fd fa57 	bl	80025f4 <send_buffer>
    send_string(param, ptr);
 8005146:	4629      	mov	r1, r5
 8005148:	4638      	mov	r0, r7
 800514a:	f7fd fa32 	bl	80025b2 <send_string>
    send_char(';', ptr);
 800514e:	4629      	mov	r1, r5
 8005150:	203b      	movs	r0, #59	; 0x3b
 8005152:	f7fd fa1f 	bl	8002594 <send_char>
    send_string((char*)help_text, ptr);
 8005156:	4629      	mov	r1, r5
 8005158:	4630      	mov	r0, r6
 800515a:	f7fd fa2a 	bl	80025b2 <send_string>
}
 800515e:	b003      	add	sp, #12
 8005160:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005162 <ntlibc_strlen>:
 */

#include "ntshell/ntlibc.h"

int ntlibc_strlen(const char *s)
{
 8005162:	4602      	mov	r2, r0
    const char *p = s;
    int cnt = 0;
    while (*p) {
 8005164:	4603      	mov	r3, r0
 8005166:	1a98      	subs	r0, r3, r2
 8005168:	f813 1b01 	ldrb.w	r1, [r3], #1
 800516c:	2900      	cmp	r1, #0
 800516e:	d1fa      	bne.n	8005166 <ntlibc_strlen+0x4>
        cnt++;
        p++;
    }
    return cnt;
}
 8005170:	4770      	bx	lr

08005172 <ntlibc_strcpy>:

char *ntlibc_strcpy(char *des, const char *src)
{
    char *d = des;
 8005172:	4603      	mov	r3, r0
 8005174:	3901      	subs	r1, #1
    const char *s = src;
    while (*s) {
 8005176:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800517a:	b90a      	cbnz	r2, 8005180 <ntlibc_strcpy+0xe>
        *d = *s;
        d++;
        s++;
    }
    *d = '\0';
 800517c:	701a      	strb	r2, [r3, #0]
    return des;
}
 800517e:	4770      	bx	lr
        *d = *s;
 8005180:	f803 2b01 	strb.w	r2, [r3], #1
 8005184:	e7f7      	b.n	8005176 <ntlibc_strcpy+0x4>

08005186 <ntlibc_strncmp>:
        return (*p1 < *p2) ? -1 : 1;
    }
}

int ntlibc_strncmp(const char *s1, const char *s2, int n)
{
 8005186:	b530      	push	{r4, r5, lr}
    char *p1 = (char *)s1;
    char *p2 = (char *)s2;
    int len = 0;
 8005188:	2500      	movs	r5, #0
    while (*p1 || *p2) {
 800518a:	5d43      	ldrb	r3, [r0, r5]
 800518c:	b91b      	cbnz	r3, 8005196 <ntlibc_strncmp+0x10>
 800518e:	780c      	ldrb	r4, [r1, #0]
 8005190:	b97c      	cbnz	r4, 80051b2 <ntlibc_strncmp+0x2c>
        }
        p1++;
        p2++;
        len++;
    }
    return 0;
 8005192:	2000      	movs	r0, #0
 8005194:	e00a      	b.n	80051ac <ntlibc_strncmp+0x26>
        if (n <= len) {
 8005196:	4295      	cmp	r5, r2
 8005198:	dafb      	bge.n	8005192 <ntlibc_strncmp+0xc>
        if (*p1 != *p2) {
 800519a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800519e:	429c      	cmp	r4, r3
 80051a0:	d005      	beq.n	80051ae <ntlibc_strncmp+0x28>
            return (*p1 < *p2) ? -1 : 1;
 80051a2:	429c      	cmp	r4, r3
 80051a4:	bf94      	ite	ls
 80051a6:	2001      	movls	r0, #1
 80051a8:	f04f 30ff 	movhi.w	r0, #4294967295
}
 80051ac:	bd30      	pop	{r4, r5, pc}
        len++;
 80051ae:	3501      	adds	r5, #1
 80051b0:	e7eb      	b.n	800518a <ntlibc_strncmp+0x4>
        if (n <= len) {
 80051b2:	4295      	cmp	r5, r2
 80051b4:	daed      	bge.n	8005192 <ntlibc_strncmp+0xc>
 80051b6:	e7f4      	b.n	80051a2 <ntlibc_strncmp+0x1c>

080051b8 <ntlibc_toupper>:
  return 0;
}

int ntlibc_toupper(int c)
{
  if (('a' <= c) && (c <= 'z')) {
 80051b8:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80051bc:	2b19      	cmp	r3, #25
    int diff = 'a' - 'A';
    return c - diff;
 80051be:	bf98      	it	ls
 80051c0:	3820      	subls	r0, #32
  }
  return c;
}
 80051c2:	4770      	bx	lr

080051c4 <ntlibc_stricmp>:
{
 80051c4:	b570      	push	{r4, r5, r6, lr}
 80051c6:	3901      	subs	r1, #1
 80051c8:	1e45      	subs	r5, r0, #1
    while (*p1 || *p2) {
 80051ca:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80051ce:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051d2:	b914      	cbnz	r4, 80051da <ntlibc_stricmp+0x16>
 80051d4:	b90a      	cbnz	r2, 80051da <ntlibc_stricmp+0x16>
        return 0;
 80051d6:	4610      	mov	r0, r2
 80051d8:	e00d      	b.n	80051f6 <ntlibc_stricmp+0x32>
        if (ntlibc_toupper(*p1) != ntlibc_toupper(*p2)) {
 80051da:	4620      	mov	r0, r4
 80051dc:	f7ff ffec 	bl	80051b8 <ntlibc_toupper>
 80051e0:	4606      	mov	r6, r0
 80051e2:	4610      	mov	r0, r2
 80051e4:	f7ff ffe8 	bl	80051b8 <ntlibc_toupper>
 80051e8:	4286      	cmp	r6, r0
 80051ea:	d0ee      	beq.n	80051ca <ntlibc_stricmp+0x6>
            return (*p1 < *p2) ? -1 : 1;
 80051ec:	4294      	cmp	r4, r2
 80051ee:	bf2c      	ite	cs
 80051f0:	2001      	movcs	r0, #1
 80051f2:	f04f 30ff 	movcc.w	r0, #4294967295
}
 80051f6:	bd70      	pop	{r4, r5, r6, pc}

080051f8 <ntlibc_tolower>:

int ntlibc_tolower(int c)
{
  if (('A' <= c) && (c <= 'Z')) {
 80051f8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80051fc:	2b19      	cmp	r3, #25
    int diff = 'a' - 'A';
    return c + diff;
 80051fe:	bf98      	it	ls
 8005200:	3020      	addls	r0, #32
  }
  return c;
}
 8005202:	4770      	bx	lr

08005204 <ntlibc_strchr>:
}

char *ntlibc_strchr(const char *s, int c)
{
  char *p = (char *)s;
  while (*p) {
 8005204:	7802      	ldrb	r2, [r0, #0]
 8005206:	4603      	mov	r3, r0
 8005208:	3001      	adds	r0, #1
 800520a:	b90a      	cbnz	r2, 8005210 <ntlibc_strchr+0xc>
    if (*p == c) {
      return p;
    }
    p++;
  }
  return 0;
 800520c:	4613      	mov	r3, r2
 800520e:	e001      	b.n	8005214 <ntlibc_strchr+0x10>
    if (*p == c) {
 8005210:	428a      	cmp	r2, r1
 8005212:	d1f7      	bne.n	8005204 <ntlibc_strchr>
}
 8005214:	4618      	mov	r0, r3
 8005216:	4770      	bx	lr

08005218 <actfunc_history_prev>:
 * @param ntshell A handler of the NT-Shell.
 * @param action An action.
 * @param ch A input character.
 */
static void actfunc_history_prev(ntshell_t *ntshell, vtrecv_action_t action, unsigned char ch)
{
 8005218:	b5f0      	push	{r4, r5, r6, r7, lr}
    UNUSED_VARIABLE(action);
    UNUSED_VARIABLE(ch);
    if (text_history_read_point_prev(GET_HISTORY(ntshell))) {
 800521a:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
{
 800521e:	b091      	sub	sp, #68	; 0x44
 8005220:	4604      	mov	r4, r0
    if (text_history_read_point_prev(GET_HISTORY(ntshell))) {
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fbc9 	bl	80059ba <text_history_read_point_prev>
 8005228:	b330      	cbz	r0, 8005278 <actfunc_history_prev+0x60>
        char txt[TEXTHISTORY_MAXLEN];
        int n = text_history_read(GET_HISTORY(ntshell), &txt[0], sizeof(txt));
 800522a:	2240      	movs	r2, #64	; 0x40
 800522c:	4669      	mov	r1, sp
 800522e:	4628      	mov	r0, r5
 8005230:	f000 fb9f 	bl	8005972 <text_history_read>
        if (0 < n) {
 8005234:	1e06      	subs	r6, r0, #0
 8005236:	dd1f      	ble.n	8005278 <actfunc_history_prev+0x60>
            VTSEND_ERASE_LINE(ntshell);
 8005238:	1d25      	adds	r5, r4, #4
 800523a:	4628      	mov	r0, r5
 800523c:	f000 fce8 	bl	8005c10 <vtsend_erase_line>
            VTSEND_CURSOR_HEAD(ntshell);
 8005240:	2150      	movs	r1, #80	; 0x50
 8005242:	4628      	mov	r0, r5
            PROMPT_WRITE(ntshell);
 8005244:	f504 7542 	add.w	r5, r4, #776	; 0x308
            VTSEND_CURSOR_HEAD(ntshell);
 8005248:	f000 fcc6 	bl	8005bd8 <vtsend_cursor_backward>
            PROMPT_WRITE(ntshell);
 800524c:	4628      	mov	r0, r5
 800524e:	f8d4 72fc 	ldr.w	r7, [r4, #764]	; 0x2fc
 8005252:	f7ff ff86 	bl	8005162 <ntlibc_strlen>
 8005256:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800525a:	4601      	mov	r1, r0
 800525c:	4628      	mov	r0, r5
 800525e:	47b8      	blx	r7
            SERIAL_WRITE(ntshell, txt, n);
 8005260:	4631      	mov	r1, r6
 8005262:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005266:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800526a:	4668      	mov	r0, sp
 800526c:	4798      	blx	r3
            text_editor_set_text(GET_EDITOR(ntshell), txt);
 800526e:	4669      	mov	r1, sp
 8005270:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005274:	f000 fb2e 	bl	80058d4 <text_editor_set_text>
        }
    }
}
 8005278:	b011      	add	sp, #68	; 0x44
 800527a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800527c <actfunc_history_next>:
 * @param ntshell A handler of the NT-Shell.
 * @param action An action.
 * @param ch A input character.
 */
static void actfunc_history_next(ntshell_t *ntshell, vtrecv_action_t action, unsigned char ch)
{
 800527c:	b5f0      	push	{r4, r5, r6, r7, lr}
    UNUSED_VARIABLE(action);
    UNUSED_VARIABLE(ch);
    if (text_history_read_point_next(GET_HISTORY(ntshell))) {
 800527e:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
{
 8005282:	b091      	sub	sp, #68	; 0x44
 8005284:	4604      	mov	r4, r0
    if (text_history_read_point_next(GET_HISTORY(ntshell))) {
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fb84 	bl	8005994 <text_history_read_point_next>
 800528c:	b330      	cbz	r0, 80052dc <actfunc_history_next+0x60>
        char txt[TEXTHISTORY_MAXLEN];
        int n = text_history_read(GET_HISTORY(ntshell), &txt[0], sizeof(txt));
 800528e:	2240      	movs	r2, #64	; 0x40
 8005290:	4669      	mov	r1, sp
 8005292:	4628      	mov	r0, r5
 8005294:	f000 fb6d 	bl	8005972 <text_history_read>
        if (0 < n) {
 8005298:	1e06      	subs	r6, r0, #0
 800529a:	dd1f      	ble.n	80052dc <actfunc_history_next+0x60>
            VTSEND_ERASE_LINE(ntshell);
 800529c:	1d25      	adds	r5, r4, #4
 800529e:	4628      	mov	r0, r5
 80052a0:	f000 fcb6 	bl	8005c10 <vtsend_erase_line>
            VTSEND_CURSOR_HEAD(ntshell);
 80052a4:	2150      	movs	r1, #80	; 0x50
 80052a6:	4628      	mov	r0, r5
            PROMPT_WRITE(ntshell);
 80052a8:	f504 7542 	add.w	r5, r4, #776	; 0x308
            VTSEND_CURSOR_HEAD(ntshell);
 80052ac:	f000 fc94 	bl	8005bd8 <vtsend_cursor_backward>
            PROMPT_WRITE(ntshell);
 80052b0:	4628      	mov	r0, r5
 80052b2:	f8d4 72fc 	ldr.w	r7, [r4, #764]	; 0x2fc
 80052b6:	f7ff ff54 	bl	8005162 <ntlibc_strlen>
 80052ba:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80052be:	4601      	mov	r1, r0
 80052c0:	4628      	mov	r0, r5
 80052c2:	47b8      	blx	r7
            SERIAL_WRITE(ntshell, txt, n);
 80052c4:	4631      	mov	r1, r6
 80052c6:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80052ca:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80052ce:	4668      	mov	r0, sp
 80052d0:	4798      	blx	r3
            text_editor_set_text(GET_EDITOR(ntshell), txt);
 80052d2:	4669      	mov	r1, sp
 80052d4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80052d8:	f000 fafc 	bl	80058d4 <text_editor_set_text>
        }
    }
}
 80052dc:	b011      	add	sp, #68	; 0x44
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052e0 <actfunc_cancel>:
 * @param ntshell A handler of the NT-Shell.
 * @param action An action.
 * @param ch A input character.
 */
static void actfunc_cancel(ntshell_t *ntshell, vtrecv_action_t action, unsigned char ch)
{
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	4604      	mov	r4, r0
    UNUSED_VARIABLE(action);
    UNUSED_VARIABLE(ch);
    text_editor_clear(GET_EDITOR(ntshell));
    SERIAL_WRITE(ntshell, "^C", 2);
    PROMPT_NEWLINE(ntshell);
 80052e4:	4d11      	ldr	r5, [pc, #68]	; (800532c <actfunc_cancel+0x4c>)
    text_editor_clear(GET_EDITOR(ntshell));
 80052e6:	3068      	adds	r0, #104	; 0x68
 80052e8:	f000 fb11 	bl	800590e <text_editor_clear>
    SERIAL_WRITE(ntshell, "^C", 2);
 80052ec:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80052f0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80052f4:	2102      	movs	r1, #2
 80052f6:	480e      	ldr	r0, [pc, #56]	; (8005330 <actfunc_cancel+0x50>)
 80052f8:	4798      	blx	r3
    PROMPT_NEWLINE(ntshell);
 80052fa:	4628      	mov	r0, r5
 80052fc:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005300:	f7ff ff2f 	bl	8005162 <ntlibc_strlen>
 8005304:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005308:	4601      	mov	r1, r0
 800530a:	4628      	mov	r0, r5
    PROMPT_WRITE(ntshell);
 800530c:	f504 7542 	add.w	r5, r4, #776	; 0x308
    PROMPT_NEWLINE(ntshell);
 8005310:	47b0      	blx	r6
    PROMPT_WRITE(ntshell);
 8005312:	4628      	mov	r0, r5
 8005314:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005318:	f7ff ff23 	bl	8005162 <ntlibc_strlen>
 800531c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005320:	4601      	mov	r1, r0
 8005322:	4633      	mov	r3, r6
 8005324:	4628      	mov	r0, r5
}
 8005326:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PROMPT_WRITE(ntshell);
 800532a:	4718      	bx	r3
 800532c:	0800cc67 	.word	0x0800cc67
 8005330:	0800d23c 	.word	0x0800d23c

08005334 <actfunc_enter>:
{
 8005334:	b570      	push	{r4, r5, r6, lr}
 8005336:	4604      	mov	r4, r0
 8005338:	b090      	sub	sp, #64	; 0x40
    text_editor_get_text(GET_EDITOR(ntshell), &txt[0], sizeof(txt));
 800533a:	f100 0568 	add.w	r5, r0, #104	; 0x68
 800533e:	2240      	movs	r2, #64	; 0x40
 8005340:	4669      	mov	r1, sp
 8005342:	4628      	mov	r0, r5
 8005344:	f000 fad6 	bl	80058f4 <text_editor_get_text>
    text_editor_clear(GET_EDITOR(ntshell));
 8005348:	4628      	mov	r0, r5
    PROMPT_NEWLINE(ntshell);
 800534a:	4d13      	ldr	r5, [pc, #76]	; (8005398 <actfunc_enter+0x64>)
    text_editor_clear(GET_EDITOR(ntshell));
 800534c:	f000 fadf 	bl	800590e <text_editor_clear>
    text_history_write(GET_HISTORY(ntshell), txt);
 8005350:	4669      	mov	r1, sp
 8005352:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8005356:	f000 faec 	bl	8005932 <text_history_write>
    PROMPT_NEWLINE(ntshell);
 800535a:	4628      	mov	r0, r5
 800535c:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005360:	f7ff feff 	bl	8005162 <ntlibc_strlen>
 8005364:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005368:	4601      	mov	r1, r0
 800536a:	4628      	mov	r0, r5
 800536c:	47b0      	blx	r6
    PROMPT_WRITE(ntshell);
 800536e:	f504 7542 	add.w	r5, r4, #776	; 0x308
    CALLBACK(ntshell, txt);
 8005372:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 8005376:	f8d4 1304 	ldr.w	r1, [r4, #772]	; 0x304
 800537a:	4668      	mov	r0, sp
 800537c:	4798      	blx	r3
    PROMPT_WRITE(ntshell);
 800537e:	4628      	mov	r0, r5
 8005380:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005384:	f7ff feed 	bl	8005162 <ntlibc_strlen>
 8005388:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800538c:	4601      	mov	r1, r0
 800538e:	4628      	mov	r0, r5
 8005390:	47b0      	blx	r6
}
 8005392:	b010      	add	sp, #64	; 0x40
 8005394:	bd70      	pop	{r4, r5, r6, pc}
 8005396:	bf00      	nop
 8005398:	0800cc67 	.word	0x0800cc67

0800539c <actfunc_suggest>:
 * @param ntshell A handler of the NT-Shell.
 * @param action An action.
 * @param ch A input character.
 */
static void actfunc_suggest(ntshell_t *ntshell, vtrecv_action_t action, unsigned char ch)
{
 800539c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    char buf[TEXTEDITOR_MAXLEN];
    UNUSED_VARIABLE(action);
    UNUSED_VARIABLE(ch);
    if (SUGGEST_INDEX(ntshell) < 0) {
 80053a0:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
{
 80053a4:	b093      	sub	sp, #76	; 0x4c
    if (SUGGEST_INDEX(ntshell) < 0) {
 80053a6:	2900      	cmp	r1, #0
{
 80053a8:	4604      	mov	r4, r0
 80053aa:	f500 752f 	add.w	r5, r0, #700	; 0x2bc
 80053ae:	f100 0668 	add.w	r6, r0, #104	; 0x68
    if (SUGGEST_INDEX(ntshell) < 0) {
 80053b2:	da39      	bge.n	8005428 <actfunc_suggest+0x8c>
        /*
         * Enter the input suggestion mode.
         * Get the suggested text string with the current text string.
         */
        if (text_editor_get_text(
 80053b4:	2240      	movs	r2, #64	; 0x40
 80053b6:	4629      	mov	r1, r5
 80053b8:	4630      	mov	r0, r6
 80053ba:	f000 fa9b 	bl	80058f4 <text_editor_get_text>
 80053be:	2800      	cmp	r0, #0
 80053c0:	dd2f      	ble.n	8005422 <actfunc_suggest+0x86>
                    GET_EDITOR(ntshell),
                    SUGGEST_SOURCE(ntshell),
                    sizeof(SUGGEST_SOURCE(ntshell))) > 0) {
            SUGGEST_INDEX(ntshell) = 0;
            if (text_history_find(
 80053c2:	2340      	movs	r3, #64	; 0x40
            SUGGEST_INDEX(ntshell) = 0;
 80053c4:	2100      	movs	r1, #0
            if (text_history_find(
 80053c6:	9300      	str	r3, [sp, #0]
            SUGGEST_INDEX(ntshell) = 0;
 80053c8:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8
            if (text_history_find(
 80053cc:	ab02      	add	r3, sp, #8
 80053ce:	462a      	mov	r2, r5
 80053d0:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80053d4:	f000 fb04 	bl	80059e0 <text_history_find>
 80053d8:	2800      	cmp	r0, #0
 80053da:	d16f      	bne.n	80054bc <actfunc_suggest+0x120>
                        buf,
                        sizeof(buf)) == 0) {
                /*
                 * Found the suggestion.
                 */
                int n = ntlibc_strlen((const char *)buf);
 80053dc:	a802      	add	r0, sp, #8
 80053de:	f7ff fec0 	bl	8005162 <ntlibc_strlen>
                VTSEND_ERASE_LINE(ntshell);
 80053e2:	1d25      	adds	r5, r4, #4
                int n = ntlibc_strlen((const char *)buf);
 80053e4:	4607      	mov	r7, r0
                VTSEND_ERASE_LINE(ntshell);
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 fc12 	bl	8005c10 <vtsend_erase_line>
                VTSEND_CURSOR_HEAD(ntshell);
 80053ec:	2150      	movs	r1, #80	; 0x50
 80053ee:	4628      	mov	r0, r5
                PROMPT_WRITE(ntshell);
 80053f0:	f504 7542 	add.w	r5, r4, #776	; 0x308
                VTSEND_CURSOR_HEAD(ntshell);
 80053f4:	f000 fbf0 	bl	8005bd8 <vtsend_cursor_backward>
                PROMPT_WRITE(ntshell);
 80053f8:	4628      	mov	r0, r5
 80053fa:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 80053fe:	f7ff feb0 	bl	8005162 <ntlibc_strlen>
 8005402:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005406:	4601      	mov	r1, r0
 8005408:	4628      	mov	r0, r5
 800540a:	47c0      	blx	r8
                SERIAL_WRITE(ntshell, buf, n);
 800540c:	4639      	mov	r1, r7
 800540e:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005412:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
             */
            int n = ntlibc_strlen((const char *)buf);
            VTSEND_ERASE_LINE(ntshell);
            VTSEND_CURSOR_HEAD(ntshell);
            PROMPT_WRITE(ntshell);
            SERIAL_WRITE(ntshell, buf, n);
 8005416:	a802      	add	r0, sp, #8
 8005418:	4798      	blx	r3
            text_editor_set_text(GET_EDITOR(ntshell), buf);
 800541a:	a902      	add	r1, sp, #8
 800541c:	4630      	mov	r0, r6
 800541e:	f000 fa59 	bl	80058d4 <text_editor_set_text>
            SERIAL_WRITE(ntshell, SUGGEST_SOURCE(ntshell), n);
            text_editor_set_text(GET_EDITOR(ntshell), SUGGEST_SOURCE(ntshell));
            SUGGEST_INDEX(ntshell) = -1;
        }
    }
}
 8005422:	b013      	add	sp, #76	; 0x4c
 8005424:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (text_history_find(
 8005428:	2340      	movs	r3, #64	; 0x40
        SUGGEST_INDEX(ntshell) = SUGGEST_INDEX(ntshell) + 1;
 800542a:	3101      	adds	r1, #1
 800542c:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
        if (text_history_find(
 8005430:	462a      	mov	r2, r5
 8005432:	9300      	str	r3, [sp, #0]
 8005434:	30b0      	adds	r0, #176	; 0xb0
 8005436:	ab02      	add	r3, sp, #8
 8005438:	f000 fad2 	bl	80059e0 <text_history_find>
 800543c:	f104 0804 	add.w	r8, r4, #4
 8005440:	f504 7742 	add.w	r7, r4, #776	; 0x308
 8005444:	b9d0      	cbnz	r0, 800547c <actfunc_suggest+0xe0>
            int n = ntlibc_strlen((const char *)buf);
 8005446:	a802      	add	r0, sp, #8
 8005448:	f7ff fe8b 	bl	8005162 <ntlibc_strlen>
 800544c:	4605      	mov	r5, r0
            VTSEND_ERASE_LINE(ntshell);
 800544e:	4640      	mov	r0, r8
 8005450:	f000 fbde 	bl	8005c10 <vtsend_erase_line>
            VTSEND_CURSOR_HEAD(ntshell);
 8005454:	2150      	movs	r1, #80	; 0x50
 8005456:	4640      	mov	r0, r8
 8005458:	f000 fbbe 	bl	8005bd8 <vtsend_cursor_backward>
            PROMPT_WRITE(ntshell);
 800545c:	4638      	mov	r0, r7
 800545e:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 8005462:	f7ff fe7e 	bl	8005162 <ntlibc_strlen>
 8005466:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800546a:	4601      	mov	r1, r0
 800546c:	4638      	mov	r0, r7
 800546e:	47c0      	blx	r8
            SERIAL_WRITE(ntshell, buf, n);
 8005470:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005474:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005478:	4629      	mov	r1, r5
 800547a:	e7cc      	b.n	8005416 <actfunc_suggest+0x7a>
            int n = ntlibc_strlen(SUGGEST_SOURCE(ntshell));
 800547c:	4628      	mov	r0, r5
 800547e:	f7ff fe70 	bl	8005162 <ntlibc_strlen>
 8005482:	4681      	mov	r9, r0
            VTSEND_ERASE_LINE(ntshell);
 8005484:	4640      	mov	r0, r8
 8005486:	f000 fbc3 	bl	8005c10 <vtsend_erase_line>
            VTSEND_CURSOR_HEAD(ntshell);
 800548a:	2150      	movs	r1, #80	; 0x50
 800548c:	4640      	mov	r0, r8
 800548e:	f000 fba3 	bl	8005bd8 <vtsend_cursor_backward>
            PROMPT_WRITE(ntshell);
 8005492:	4638      	mov	r0, r7
 8005494:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 8005498:	f7ff fe63 	bl	8005162 <ntlibc_strlen>
 800549c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80054a0:	4601      	mov	r1, r0
 80054a2:	4638      	mov	r0, r7
 80054a4:	47c0      	blx	r8
            SERIAL_WRITE(ntshell, SUGGEST_SOURCE(ntshell), n);
 80054a6:	4649      	mov	r1, r9
 80054a8:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80054ac:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80054b0:	4628      	mov	r0, r5
 80054b2:	4798      	blx	r3
            text_editor_set_text(GET_EDITOR(ntshell), SUGGEST_SOURCE(ntshell));
 80054b4:	4629      	mov	r1, r5
 80054b6:	4630      	mov	r0, r6
 80054b8:	f000 fa0c 	bl	80058d4 <text_editor_set_text>
            SUGGEST_INDEX(ntshell) = -1;
 80054bc:	f04f 33ff 	mov.w	r3, #4294967295
 80054c0:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
}
 80054c4:	e7ad      	b.n	8005422 <actfunc_suggest+0x86>
	...

080054c8 <actfunc_backspace>:
{
 80054c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (text_editor_backspace(GET_EDITOR(ntshell))) {
 80054ca:	f100 0668 	add.w	r6, r0, #104	; 0x68
{
 80054ce:	b091      	sub	sp, #68	; 0x44
 80054d0:	4604      	mov	r4, r0
    if (text_editor_backspace(GET_EDITOR(ntshell))) {
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f9a2 	bl	800581c <text_editor_backspace>
 80054d8:	b340      	cbz	r0, 800552c <actfunc_backspace+0x64>
        int len = text_editor_get_text(GET_EDITOR(ntshell), &txt[0], sizeof(txt));
 80054da:	2240      	movs	r2, #64	; 0x40
 80054dc:	4669      	mov	r1, sp
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 fa08 	bl	80058f4 <text_editor_get_text>
 80054e4:	4605      	mov	r5, r0
        int pos = text_editor_cursor_get_position(GET_EDITOR(ntshell));
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f9cf 	bl	800588a <text_editor_cursor_get_position>
        VTSEND_CURSOR_PREV(ntshell);
 80054ec:	1d26      	adds	r6, r4, #4
        int n = len - pos;
 80054ee:	1a2d      	subs	r5, r5, r0
        int pos = text_editor_cursor_get_position(GET_EDITOR(ntshell));
 80054f0:	4607      	mov	r7, r0
        VTSEND_CURSOR_PREV(ntshell);
 80054f2:	2101      	movs	r1, #1
 80054f4:	4630      	mov	r0, r6
 80054f6:	f000 fb6f 	bl	8005bd8 <vtsend_cursor_backward>
        if (n > 0) {
 80054fa:	2d00      	cmp	r5, #0
 80054fc:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
            SERIAL_WRITE(ntshell, txt + pos, n);
 8005500:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
        if (n > 0) {
 8005504:	dd14      	ble.n	8005530 <actfunc_backspace+0x68>
            SERIAL_WRITE(ntshell, txt + pos, n);
 8005506:	4629      	mov	r1, r5
 8005508:	eb0d 0007 	add.w	r0, sp, r7
 800550c:	4798      	blx	r3
            SERIAL_WRITE(ntshell, " ", 1);
 800550e:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005512:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005516:	2101      	movs	r1, #1
 8005518:	4809      	ldr	r0, [pc, #36]	; (8005540 <actfunc_backspace+0x78>)
 800551a:	4798      	blx	r3
            for (i = 0; i < n + 1; i++) {
 800551c:	2400      	movs	r4, #0
                VTSEND_CURSOR_PREV(ntshell);
 800551e:	2101      	movs	r1, #1
 8005520:	4630      	mov	r0, r6
            for (i = 0; i < n + 1; i++) {
 8005522:	3401      	adds	r4, #1
                VTSEND_CURSOR_PREV(ntshell);
 8005524:	f000 fb58 	bl	8005bd8 <vtsend_cursor_backward>
            for (i = 0; i < n + 1; i++) {
 8005528:	42a5      	cmp	r5, r4
 800552a:	daf8      	bge.n	800551e <actfunc_backspace+0x56>
}
 800552c:	b011      	add	sp, #68	; 0x44
 800552e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            SERIAL_WRITE(ntshell, " ", 1);
 8005530:	2101      	movs	r1, #1
 8005532:	4803      	ldr	r0, [pc, #12]	; (8005540 <actfunc_backspace+0x78>)
 8005534:	4798      	blx	r3
            VTSEND_CURSOR_PREV(ntshell);
 8005536:	2101      	movs	r1, #1
 8005538:	4630      	mov	r0, r6
 800553a:	f000 fb4d 	bl	8005bd8 <vtsend_cursor_backward>
}
 800553e:	e7f5      	b.n	800552c <actfunc_backspace+0x64>
 8005540:	0800cef1 	.word	0x0800cef1

08005544 <actfunc_cursor_right>:
{
 8005544:	b510      	push	{r4, lr}
 8005546:	4604      	mov	r4, r0
    if (text_editor_cursor_right(GET_EDITOR(ntshell))) {
 8005548:	3068      	adds	r0, #104	; 0x68
 800554a:	f000 f9ba 	bl	80058c2 <text_editor_cursor_right>
 800554e:	b128      	cbz	r0, 800555c <actfunc_cursor_right+0x18>
        VTSEND_CURSOR_NEXT(ntshell);
 8005550:	1d20      	adds	r0, r4, #4
 8005552:	2101      	movs	r1, #1
}
 8005554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        VTSEND_CURSOR_NEXT(ntshell);
 8005558:	f000 bb22 	b.w	8005ba0 <vtsend_cursor_forward>
}
 800555c:	bd10      	pop	{r4, pc}

0800555e <actfunc_cursor_tail>:
 * @param ntshell A handler of the NT-Shell.
 * @param action An action.
 * @param ch A input character.
 */
static void actfunc_cursor_tail(ntshell_t *ntshell, vtrecv_action_t action, unsigned char ch)
{
 800555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    char buf[TEXTEDITOR_MAXLEN];
    int len;
    UNUSED_VARIABLE(action);
    UNUSED_VARIABLE(ch);
    text_editor_get_text(GET_EDITOR(ntshell), buf, sizeof(buf));
 8005562:	f100 0568 	add.w	r5, r0, #104	; 0x68
{
 8005566:	b090      	sub	sp, #64	; 0x40
 8005568:	4604      	mov	r4, r0
    text_editor_get_text(GET_EDITOR(ntshell), buf, sizeof(buf));
 800556a:	2240      	movs	r2, #64	; 0x40
 800556c:	4669      	mov	r1, sp
 800556e:	4628      	mov	r0, r5
 8005570:	f000 f9c0 	bl	80058f4 <text_editor_get_text>
    len = ntlibc_strlen((const char *)buf);
 8005574:	4668      	mov	r0, sp
 8005576:	f7ff fdf4 	bl	8005162 <ntlibc_strlen>
    VTSEND_CURSOR_HEAD(ntshell);
    PROMPT_WRITE(ntshell);
 800557a:	f504 7642 	add.w	r6, r4, #776	; 0x308
    len = ntlibc_strlen((const char *)buf);
 800557e:	4607      	mov	r7, r0
    VTSEND_CURSOR_HEAD(ntshell);
 8005580:	2150      	movs	r1, #80	; 0x50
 8005582:	1d20      	adds	r0, r4, #4
 8005584:	f000 fb28 	bl	8005bd8 <vtsend_cursor_backward>
    PROMPT_WRITE(ntshell);
 8005588:	4630      	mov	r0, r6
 800558a:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 800558e:	f7ff fde8 	bl	8005162 <ntlibc_strlen>
 8005592:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005596:	4601      	mov	r1, r0
 8005598:	4630      	mov	r0, r6
 800559a:	47c0      	blx	r8
    SERIAL_WRITE(ntshell, buf, len);
 800559c:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80055a0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80055a4:	4639      	mov	r1, r7
 80055a6:	4668      	mov	r0, sp
 80055a8:	4798      	blx	r3
    text_editor_cursor_tail(GET_EDITOR(ntshell));
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 f978 	bl	80058a0 <text_editor_cursor_tail>
}
 80055b0:	b010      	add	sp, #64	; 0x40
 80055b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080055b8 <actfunc_delete>:
{
 80055b8:	b570      	push	{r4, r5, r6, lr}
    if (text_editor_delete(GET_EDITOR(ntshell))) {
 80055ba:	f100 0668 	add.w	r6, r0, #104	; 0x68
{
 80055be:	b090      	sub	sp, #64	; 0x40
 80055c0:	4604      	mov	r4, r0
    if (text_editor_delete(GET_EDITOR(ntshell))) {
 80055c2:	4630      	mov	r0, r6
 80055c4:	f000 f946 	bl	8005854 <text_editor_delete>
 80055c8:	b318      	cbz	r0, 8005612 <actfunc_delete+0x5a>
        int len = text_editor_get_text(GET_EDITOR(ntshell), &txt[0], sizeof(txt));
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	4669      	mov	r1, sp
 80055ce:	4630      	mov	r0, r6
 80055d0:	f000 f990 	bl	80058f4 <text_editor_get_text>
 80055d4:	4605      	mov	r5, r0
        int pos = text_editor_cursor_get_position(GET_EDITOR(ntshell));
 80055d6:	4630      	mov	r0, r6
 80055d8:	f000 f957 	bl	800588a <text_editor_cursor_get_position>
        int n = len - pos;
 80055dc:	1a2d      	subs	r5, r5, r0
        if (n > 0) {
 80055de:	2d00      	cmp	r5, #0
 80055e0:	f104 0604 	add.w	r6, r4, #4
 80055e4:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
            SERIAL_WRITE(ntshell, txt + pos, n);
 80055e8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
        if (n > 0) {
 80055ec:	dd13      	ble.n	8005616 <actfunc_delete+0x5e>
            SERIAL_WRITE(ntshell, txt + pos, n);
 80055ee:	4629      	mov	r1, r5
 80055f0:	4468      	add	r0, sp
 80055f2:	4798      	blx	r3
            SERIAL_WRITE(ntshell, " ", 1);
 80055f4:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80055f8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80055fc:	2101      	movs	r1, #1
 80055fe:	480a      	ldr	r0, [pc, #40]	; (8005628 <actfunc_delete+0x70>)
 8005600:	4798      	blx	r3
            for (i = 0; i < n + 1; i++) {
 8005602:	2400      	movs	r4, #0
                VTSEND_CURSOR_PREV(ntshell);
 8005604:	2101      	movs	r1, #1
 8005606:	4630      	mov	r0, r6
            for (i = 0; i < n + 1; i++) {
 8005608:	3401      	adds	r4, #1
                VTSEND_CURSOR_PREV(ntshell);
 800560a:	f000 fae5 	bl	8005bd8 <vtsend_cursor_backward>
            for (i = 0; i < n + 1; i++) {
 800560e:	42a5      	cmp	r5, r4
 8005610:	daf8      	bge.n	8005604 <actfunc_delete+0x4c>
}
 8005612:	b010      	add	sp, #64	; 0x40
 8005614:	bd70      	pop	{r4, r5, r6, pc}
            SERIAL_WRITE(ntshell, " ", 1);
 8005616:	2101      	movs	r1, #1
 8005618:	4803      	ldr	r0, [pc, #12]	; (8005628 <actfunc_delete+0x70>)
 800561a:	4798      	blx	r3
            VTSEND_CURSOR_PREV(ntshell);
 800561c:	2101      	movs	r1, #1
 800561e:	4630      	mov	r0, r6
 8005620:	f000 fada 	bl	8005bd8 <vtsend_cursor_backward>
}
 8005624:	e7f5      	b.n	8005612 <actfunc_delete+0x5a>
 8005626:	bf00      	nop
 8005628:	0800cef1 	.word	0x0800cef1

0800562c <actfunc_cursor_left>:
{
 800562c:	b510      	push	{r4, lr}
 800562e:	4604      	mov	r4, r0
    if (text_editor_cursor_left(GET_EDITOR(ntshell))) {
 8005630:	3068      	adds	r0, #104	; 0x68
 8005632:	f000 f93d 	bl	80058b0 <text_editor_cursor_left>
 8005636:	b128      	cbz	r0, 8005644 <actfunc_cursor_left+0x18>
        VTSEND_CURSOR_PREV(ntshell);
 8005638:	1d20      	adds	r0, r4, #4
 800563a:	2101      	movs	r1, #1
}
 800563c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        VTSEND_CURSOR_PREV(ntshell);
 8005640:	f000 baca 	b.w	8005bd8 <vtsend_cursor_backward>
}
 8005644:	bd10      	pop	{r4, pc}

08005646 <actfunc_cursor_head>:
{
 8005646:	b570      	push	{r4, r5, r6, lr}
 8005648:	4604      	mov	r4, r0
    VTSEND_CURSOR_HEAD(ntshell);
 800564a:	2150      	movs	r1, #80	; 0x50
    PROMPT_WRITE(ntshell);
 800564c:	f504 7542 	add.w	r5, r4, #776	; 0x308
    VTSEND_CURSOR_HEAD(ntshell);
 8005650:	3004      	adds	r0, #4
 8005652:	f000 fac1 	bl	8005bd8 <vtsend_cursor_backward>
    PROMPT_WRITE(ntshell);
 8005656:	4628      	mov	r0, r5
 8005658:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 800565c:	f7ff fd81 	bl	8005162 <ntlibc_strlen>
 8005660:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005664:	4601      	mov	r1, r0
 8005666:	4628      	mov	r0, r5
 8005668:	47b0      	blx	r6
    text_editor_cursor_head(GET_EDITOR(ntshell));
 800566a:	f104 0068 	add.w	r0, r4, #104	; 0x68
}
 800566e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    text_editor_cursor_head(GET_EDITOR(ntshell));
 8005672:	f000 b90c 	b.w	800588e <text_editor_cursor_head>
	...

08005678 <vtrecv_callback>:
 * @param vtrecv The vtrecv.
 * @param action An action.
 * @param ch A character.
 */
void vtrecv_callback(vtrecv_t *vtrecv, vtrecv_action_t action, unsigned char ch)
{
 8005678:	2300      	movs	r3, #0
 800567a:	b570      	push	{r4, r5, r6, lr}
 800567c:	4c24      	ldr	r4, [pc, #144]	; (8005710 <vtrecv_callback+0x98>)
 800567e:	b092      	sub	sp, #72	; 0x48
    /*
     * Search the process function for the control codes.
     */
    p = (ntshell_action_table_t *)action_table;
    for (i = 0; i < ACTTBLSIZ; i++) {
        if ((p->action == action) && (p->ch == ch)) {
 8005680:	5d1e      	ldrb	r6, [r3, r4]
 8005682:	18e5      	adds	r5, r4, r3
 8005684:	428e      	cmp	r6, r1
 8005686:	d107      	bne.n	8005698 <vtrecv_callback+0x20>
 8005688:	786e      	ldrb	r6, [r5, #1]
 800568a:	4296      	cmp	r6, r2
 800568c:	d104      	bne.n	8005698 <vtrecv_callback+0x20>
            p->func(vtrecv->user_data, action, ch);
 800568e:	686b      	ldr	r3, [r5, #4]
 8005690:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8005692:	4798      	blx	r3

    /*
     * Other cases, there is no defined process function for the input codes.
     * If you need to support the input action, you should update the action table.
     */
}
 8005694:	b012      	add	sp, #72	; 0x48
 8005696:	bd70      	pop	{r4, r5, r6, pc}
 8005698:	3308      	adds	r3, #8
    for (i = 0; i < ACTTBLSIZ; i++) {
 800569a:	2b88      	cmp	r3, #136	; 0x88
 800569c:	d1f0      	bne.n	8005680 <vtrecv_callback+0x8>
    if (VTRECV_ACTION_PRINT == action) {
 800569e:	290c      	cmp	r1, #12
 80056a0:	d1f8      	bne.n	8005694 <vtrecv_callback+0x1c>
    SUGGEST_INDEX(ntshell) = -1;
 80056a2:	f04f 33ff 	mov.w	r3, #4294967295
        actfunc_insert(vtrecv->user_data, action, ch);
 80056a6:	6d84      	ldr	r4, [r0, #88]	; 0x58
    if (text_editor_insert(GET_EDITOR(ntshell), ch)) {
 80056a8:	4611      	mov	r1, r2
 80056aa:	f104 0668 	add.w	r6, r4, #104	; 0x68
    SUGGEST_INDEX(ntshell) = -1;
 80056ae:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
    if (text_editor_insert(GET_EDITOR(ntshell), ch)) {
 80056b2:	4630      	mov	r0, r6
 80056b4:	f88d 2007 	strb.w	r2, [sp, #7]
 80056b8:	f000 f891 	bl	80057de <text_editor_insert>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d0e9      	beq.n	8005694 <vtrecv_callback+0x1c>
        int len = text_editor_get_text(GET_EDITOR(ntshell), &txt[0], sizeof(txt));
 80056c0:	2240      	movs	r2, #64	; 0x40
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	4630      	mov	r0, r6
 80056c6:	f000 f915 	bl	80058f4 <text_editor_get_text>
 80056ca:	4605      	mov	r5, r0
        int pos = text_editor_cursor_get_position(GET_EDITOR(ntshell));
 80056cc:	4630      	mov	r0, r6
 80056ce:	f000 f8dc 	bl	800588a <text_editor_cursor_get_position>
        SERIAL_WRITE(ntshell, (char *)&ch, sizeof(ch));
 80056d2:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
        int n = len - pos;
 80056d6:	1a2d      	subs	r5, r5, r0
        int pos = text_editor_cursor_get_position(GET_EDITOR(ntshell));
 80056d8:	4606      	mov	r6, r0
        SERIAL_WRITE(ntshell, (char *)&ch, sizeof(ch));
 80056da:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80056de:	2101      	movs	r1, #1
 80056e0:	f10d 0007 	add.w	r0, sp, #7
 80056e4:	4798      	blx	r3
        if (n > 0) {
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	ddd4      	ble.n	8005694 <vtrecv_callback+0x1c>
            SERIAL_WRITE(ntshell, txt + pos, len - pos);
 80056ea:	a802      	add	r0, sp, #8
 80056ec:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80056f0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80056f4:	4430      	add	r0, r6
 80056f6:	4629      	mov	r1, r5
 80056f8:	4798      	blx	r3
            for (i = 0; i < n; i++) {
 80056fa:	2600      	movs	r6, #0
                VTSEND_CURSOR_PREV(ntshell);
 80056fc:	3404      	adds	r4, #4
 80056fe:	2101      	movs	r1, #1
 8005700:	4620      	mov	r0, r4
            for (i = 0; i < n; i++) {
 8005702:	3601      	adds	r6, #1
                VTSEND_CURSOR_PREV(ntshell);
 8005704:	f000 fa68 	bl	8005bd8 <vtsend_cursor_backward>
            for (i = 0; i < n; i++) {
 8005708:	42b5      	cmp	r5, r6
 800570a:	d1f8      	bne.n	80056fe <vtrecv_callback+0x86>
 800570c:	e7c2      	b.n	8005694 <vtrecv_callback+0x1c>
 800570e:	bf00      	nop
 8005710:	0800d240 	.word	0x0800d240

08005714 <ntshell_init>:
 */
void ntshell_init(ntshell_t *p,
    NTSHELL_SERIAL_WRITE func_write,
    NTSHELL_USER_CALLBACK func_callback,
    void *extobj)
{
 8005714:	b570      	push	{r4, r5, r6, lr}
 8005716:	4604      	mov	r4, r0
 8005718:	461e      	mov	r6, r3
 800571a:	460d      	mov	r5, r1
    /*
     * The vtrecv module provides a pointer interface to an external object.
     * NT-Shell uses the text editor, text history, read function, write function with the pointer interface.
     */
    p->func_write = func_write;
 800571c:	f8c4 12fc 	str.w	r1, [r4, #764]	; 0x2fc
    p->func_callback = func_callback;
    p->extobj = extobj;
    ntlibc_strcpy(p->prompt, NTSHELL_PROMPT_DEFAULT);
 8005720:	f500 7042 	add.w	r0, r0, #776	; 0x308
    p->func_callback = func_callback;
 8005724:	f840 2c08 	str.w	r2, [r0, #-8]
    ntlibc_strcpy(p->prompt, NTSHELL_PROMPT_DEFAULT);
 8005728:	490f      	ldr	r1, [pc, #60]	; (8005768 <ntshell_init+0x54>)
    p->extobj = extobj;
 800572a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    ntlibc_strcpy(p->prompt, NTSHELL_PROMPT_DEFAULT);
 800572e:	f7ff fd20 	bl	8005172 <ntlibc_strcpy>
    p->vtrecv.user_data = p;

    /*
     * Initialize the modules.
     */
    vtsend_init(&(p->vtsend), func_write, extobj);
 8005732:	4632      	mov	r2, r6
 8005734:	4629      	mov	r1, r5
    p->vtrecv.user_data = p;
 8005736:	6664      	str	r4, [r4, #100]	; 0x64
    vtsend_init(&(p->vtsend), func_write, extobj);
 8005738:	1d20      	adds	r0, r4, #4
 800573a:	f000 fa2d 	bl	8005b98 <vtsend_init>
    vtrecv_init(&(p->vtrecv), vtrecv_callback);
 800573e:	490b      	ldr	r1, [pc, #44]	; (800576c <ntshell_init+0x58>)
 8005740:	f104 000c 	add.w	r0, r4, #12
 8005744:	f000 f9c9 	bl	8005ada <vtrecv_init>
    text_editor_init(GET_EDITOR(p));
 8005748:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800574c:	f000 f842 	bl	80057d4 <text_editor_init>
    text_history_init(GET_HISTORY(p));
 8005750:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8005754:	f000 f8e0 	bl	8005918 <text_history_init>
    SUGGEST_INDEX(p) = -1;
 8005758:	f04f 33ff 	mov.w	r3, #4294967295
 800575c:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8

    /*
     * Set the initialization code.
     */
    p->initcode = INITCODE;
 8005760:	f244 3367 	movw	r3, #17255	; 0x4367
 8005764:	6023      	str	r3, [r4, #0]
}
 8005766:	bd70      	pop	{r4, r5, r6, pc}
 8005768:	0800db3d 	.word	0x0800db3d
 800576c:	08005679 	.word	0x08005679

08005770 <ntshell_show_promt>:
void ntshell_show_promt(ntshell_t *p)
{
    /*
     * Check the initialization code.
     */
    if (p->initcode != INITCODE) {
 8005770:	f244 3367 	movw	r3, #17255	; 0x4367
 8005774:	6802      	ldr	r2, [r0, #0]
{
 8005776:	b570      	push	{r4, r5, r6, lr}
    if (p->initcode != INITCODE) {
 8005778:	429a      	cmp	r2, r3
{
 800577a:	4604      	mov	r4, r0
    if (p->initcode != INITCODE) {
 800577c:	d10e      	bne.n	800579c <ntshell_show_promt+0x2c>
      return;
    }

    PROMPT_WRITE(p);
 800577e:	f500 7542 	add.w	r5, r0, #776	; 0x308
 8005782:	f8d0 62fc 	ldr.w	r6, [r0, #764]	; 0x2fc
 8005786:	4628      	mov	r0, r5
 8005788:	f7ff fceb 	bl	8005162 <ntlibc_strlen>
 800578c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005790:	4601      	mov	r1, r0
 8005792:	4633      	mov	r3, r6
 8005794:	4628      	mov	r0, r5

}
 8005796:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PROMPT_WRITE(p);
 800579a:	4718      	bx	r3
}
 800579c:	bd70      	pop	{r4, r5, r6, pc}

0800579e <ntshell_execute_nb>:
void ntshell_execute_nb(ntshell_t *p, char c)
{
    /*
     * Check the initialization code.
     */
    if (p->initcode != INITCODE) {
 800579e:	f244 3367 	movw	r3, #17255	; 0x4367
{
 80057a2:	b507      	push	{r0, r1, r2, lr}
    if (p->initcode != INITCODE) {
 80057a4:	6802      	ldr	r2, [r0, #0]
{
 80057a6:	f88d 1007 	strb.w	r1, [sp, #7]
    if (p->initcode != INITCODE) {
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d105      	bne.n	80057ba <ntshell_execute_nb+0x1c>
      return;
    }   
        vtrecv_execute(&(p->vtrecv), (unsigned char*)&c, sizeof(c));  
 80057ae:	2201      	movs	r2, #1
 80057b0:	f10d 0107 	add.w	r1, sp, #7
 80057b4:	300c      	adds	r0, #12
 80057b6:	f000 f999 	bl	8005aec <vtrecv_execute>
}
 80057ba:	b003      	add	sp, #12
 80057bc:	f85d fb04 	ldr.w	pc, [sp], #4

080057c0 <ntshell_set_prompt>:
void ntshell_set_prompt(ntshell_t *p, const char *prompt)
{
    /*
     * Check the initialization code.
     */
    if (p->initcode != INITCODE) {
 80057c0:	f244 3367 	movw	r3, #17255	; 0x4367
 80057c4:	6802      	ldr	r2, [r0, #0]
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d103      	bne.n	80057d2 <ntshell_set_prompt+0x12>
      return;
    }

    ntlibc_strcpy(p->prompt, prompt);
 80057ca:	f500 7042 	add.w	r0, r0, #776	; 0x308
 80057ce:	f7ff bcd0 	b.w	8005172 <ntlibc_strcpy>
}
 80057d2:	4770      	bx	lr

080057d4 <text_editor_init>:
 *
 * @param p A pointer to the text editor handler.
 */
void text_editor_init(text_editor_t *p)
{
    p->pos = 0;
 80057d4:	2300      	movs	r3, #0
    p->len = 0;
 80057d6:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    p->buffer[p->len] = '\0';
 80057da:	7003      	strb	r3, [r0, #0]
}
 80057dc:	4770      	bx	lr

080057de <text_editor_insert>:
 * @param p A pointer to the text editor handler.
 * @param c A character.
 */
int text_editor_insert(text_editor_t *p, char c)
{
    if (p->len < (int)sizeof(p->buffer) - 1) {
 80057de:	6c43      	ldr	r3, [r0, #68]	; 0x44
{
 80057e0:	b570      	push	{r4, r5, r6, lr}
    if (p->len < (int)sizeof(p->buffer) - 1) {
 80057e2:	2b3e      	cmp	r3, #62	; 0x3e
 80057e4:	dc18      	bgt.n	8005818 <text_editor_insert+0x3a>
        int n = p->len - p->pos + 1;
 80057e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80057e8:	1a9c      	subs	r4, r3, r2
        int i;
        char *src = p->buffer + p->len + 0;
        char *des = p->buffer + p->len + 1;
 80057ea:	3301      	adds	r3, #1
 80057ec:	4403      	add	r3, r0
 80057ee:	461d      	mov	r5, r3
        for (i = 0; i < n; i++) {
 80057f0:	2200      	movs	r2, #0
 80057f2:	4294      	cmp	r4, r2
 80057f4:	da0a      	bge.n	800580c <text_editor_insert+0x2e>
        }

        p->buffer[p->pos] = c;
        p->pos++;
        p->len++;
        p->buffer[p->len] = '\0';
 80057f6:	2200      	movs	r2, #0
        p->buffer[p->pos] = c;
 80057f8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80057fa:	54c1      	strb	r1, [r0, r3]
        p->pos++;
 80057fc:	3301      	adds	r3, #1
 80057fe:	6403      	str	r3, [r0, #64]	; 0x40
        p->len++;
 8005800:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005802:	3301      	adds	r3, #1
 8005804:	6443      	str	r3, [r0, #68]	; 0x44
        p->buffer[p->len] = '\0';
 8005806:	54c2      	strb	r2, [r0, r3]
        return 1;
 8005808:	2001      	movs	r0, #1
    }
    return 0;
}
 800580a:	bd70      	pop	{r4, r5, r6, pc}
            *des = *src;
 800580c:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
        for (i = 0; i < n; i++) {
 8005810:	3201      	adds	r2, #1
            *des = *src;
 8005812:	f803 6901 	strb.w	r6, [r3], #-1
 8005816:	e7ec      	b.n	80057f2 <text_editor_insert+0x14>
    return 0;
 8005818:	2000      	movs	r0, #0
 800581a:	e7f6      	b.n	800580a <text_editor_insert+0x2c>

0800581c <text_editor_backspace>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_backspace(text_editor_t *p)
{
    if (0 < p->pos) {
 800581c:	6c03      	ldr	r3, [r0, #64]	; 0x40
{
 800581e:	b530      	push	{r4, r5, lr}
    if (0 < p->pos) {
 8005820:	2b00      	cmp	r3, #0
 8005822:	dd15      	ble.n	8005850 <text_editor_backspace+0x34>
        int n = p->len - p->pos;
 8005824:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8005826:	1ad5      	subs	r5, r2, r3
        int i;
        char *src = p->buffer + p->pos - 0;
        char *des = p->buffer + p->pos - 1;
 8005828:	3b01      	subs	r3, #1
 800582a:	18c1      	adds	r1, r0, r3
        p->pos--;
        p->len--;
 800582c:	3a01      	subs	r2, #1
        p->pos--;
 800582e:	6403      	str	r3, [r0, #64]	; 0x40
        p->len--;
 8005830:	6442      	str	r2, [r0, #68]	; 0x44
        char *des = p->buffer + p->pos - 1;
 8005832:	460b      	mov	r3, r1
 8005834:	460a      	mov	r2, r1
        for (i = 0; i < n; i++) {
 8005836:	1a5c      	subs	r4, r3, r1
 8005838:	42a5      	cmp	r5, r4
 800583a:	dc04      	bgt.n	8005846 <text_editor_backspace+0x2a>
            *des = *src;
            des++;
            src++;
        }
        *(p->buffer + p->len) = '\0';
 800583c:	2200      	movs	r2, #0
 800583e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005840:	54c2      	strb	r2, [r0, r3]
        return 1;
 8005842:	2001      	movs	r0, #1
    }
    return 0;
}
 8005844:	bd30      	pop	{r4, r5, pc}
            *des = *src;
 8005846:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800584a:	f803 4b01 	strb.w	r4, [r3], #1
 800584e:	e7f2      	b.n	8005836 <text_editor_backspace+0x1a>
    return 0;
 8005850:	2000      	movs	r0, #0
 8005852:	e7f7      	b.n	8005844 <text_editor_backspace+0x28>

08005854 <text_editor_delete>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_delete(text_editor_t *p)
{
    if (p->pos < p->len) {
 8005854:	e9d0 3210 	ldrd	r3, r2, [r0, #64]	; 0x40
 8005858:	4293      	cmp	r3, r2
{
 800585a:	b530      	push	{r4, r5, lr}
    if (p->pos < p->len) {
 800585c:	da13      	bge.n	8005886 <text_editor_delete+0x32>
        int n = p->len - p->pos - 1;
 800585e:	1ad1      	subs	r1, r2, r3
        int i;
        char *src = p->buffer + p->pos + 1;
        char *des = p->buffer + p->pos + 0;
 8005860:	4403      	add	r3, r0
        p->len--;
 8005862:	3a01      	subs	r2, #1
 8005864:	6442      	str	r2, [r0, #68]	; 0x44
 8005866:	461c      	mov	r4, r3
        char *des = p->buffer + p->pos + 0;
 8005868:	461a      	mov	r2, r3
        int n = p->len - p->pos - 1;
 800586a:	3901      	subs	r1, #1
        for (i = 0; i < n; i++) {
 800586c:	1ad5      	subs	r5, r2, r3
 800586e:	42a9      	cmp	r1, r5
 8005870:	dc04      	bgt.n	800587c <text_editor_delete+0x28>
            *des = *src;
            des++;
            src++;
        }
        *(p->buffer + p->len) = '\0';
 8005872:	2200      	movs	r2, #0
 8005874:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005876:	54c2      	strb	r2, [r0, r3]
        return 1;
 8005878:	2001      	movs	r0, #1
    }
    return 0;
}
 800587a:	bd30      	pop	{r4, r5, pc}
            *des = *src;
 800587c:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 8005880:	f802 5b01 	strb.w	r5, [r2], #1
 8005884:	e7f2      	b.n	800586c <text_editor_delete+0x18>
    return 0;
 8005886:	2000      	movs	r0, #0
 8005888:	e7f7      	b.n	800587a <text_editor_delete+0x26>

0800588a <text_editor_cursor_get_position>:
 * @param p A pointer to the text editor handler.
 */
int text_editor_cursor_get_position(text_editor_t *p)
{
    return p->pos;
}
 800588a:	6c00      	ldr	r0, [r0, #64]	; 0x40
 800588c:	4770      	bx	lr

0800588e <text_editor_cursor_head>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_cursor_head(text_editor_t *p)
{
    if (0 < p->pos) {
 800588e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	f04f 0300 	mov.w	r3, #0
        p->pos = 0;
 8005896:	bfc6      	itte	gt
 8005898:	6403      	strgt	r3, [r0, #64]	; 0x40
        return 1;
 800589a:	2001      	movgt	r0, #1
    }
    return 0;
 800589c:	4618      	movle	r0, r3
}
 800589e:	4770      	bx	lr

080058a0 <text_editor_cursor_tail>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_cursor_tail(text_editor_t *p)
{
    if (p->pos < p->len) {
 80058a0:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 80058a4:	429a      	cmp	r2, r3
        p->pos = p->len;
 80058a6:	bfba      	itte	lt
 80058a8:	6403      	strlt	r3, [r0, #64]	; 0x40
        return 1;
 80058aa:	2001      	movlt	r0, #1
    }
    return 0;
 80058ac:	2000      	movge	r0, #0
}
 80058ae:	4770      	bx	lr

080058b0 <text_editor_cursor_left>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_cursor_left(text_editor_t *p)
{
    if (0 < p->pos) {
 80058b0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80058b2:	2b00      	cmp	r3, #0
        p->pos--;
 80058b4:	bfc3      	ittte	gt
 80058b6:	f103 33ff 	addgt.w	r3, r3, #4294967295
 80058ba:	6403      	strgt	r3, [r0, #64]	; 0x40
        return 1;
 80058bc:	2001      	movgt	r0, #1
    }
    return 0;
 80058be:	2000      	movle	r0, #0
}
 80058c0:	4770      	bx	lr

080058c2 <text_editor_cursor_right>:
 *
 * @param p A pointer to the text editor handler.
 */
int text_editor_cursor_right(text_editor_t *p)
{
    if (p->pos < p->len) {
 80058c2:	e9d0 3210 	ldrd	r3, r2, [r0, #64]	; 0x40
 80058c6:	4293      	cmp	r3, r2
        p->pos++;
 80058c8:	bfbd      	ittte	lt
 80058ca:	3301      	addlt	r3, #1
 80058cc:	6403      	strlt	r3, [r0, #64]	; 0x40
        return 1;
 80058ce:	2001      	movlt	r0, #1
    }
    return 0;
 80058d0:	2000      	movge	r0, #0
}
 80058d2:	4770      	bx	lr

080058d4 <text_editor_set_text>:
 * @param buf A text string.
 */
int text_editor_set_text(text_editor_t *p, char *buf)
{
    char *src = buf;
    char *des = p->buffer;
 80058d4:	4602      	mov	r2, r0
    int n = 0;
 80058d6:	2300      	movs	r3, #0
{
 80058d8:	b510      	push	{r4, lr}
    while (*src) {
 80058da:	5ccc      	ldrb	r4, [r1, r3]
 80058dc:	b124      	cbz	r4, 80058e8 <text_editor_set_text+0x14>
        *des = *src;
        des++;
        src++;
        n++;
 80058de:	3301      	adds	r3, #1
        if ((int)sizeof(p->buffer) <= n - 1) {
 80058e0:	2b41      	cmp	r3, #65	; 0x41
        *des = *src;
 80058e2:	f802 4b01 	strb.w	r4, [r2], #1
        if ((int)sizeof(p->buffer) <= n - 1) {
 80058e6:	d1f8      	bne.n	80058da <text_editor_set_text+0x6>
            break;
        }
    }
    *des = '\0';
 80058e8:	2100      	movs	r1, #0
 80058ea:	7011      	strb	r1, [r2, #0]
    p->len = n;
    p->pos = p->len;
 80058ec:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
    return n;
}
 80058f0:	4618      	mov	r0, r3
 80058f2:	bd10      	pop	{r4, pc}

080058f4 <text_editor_get_text>:
 */
int text_editor_get_text(text_editor_t *p, char *buf, int siz)
{
    char *src = p->buffer;
    char *des = buf;
    int n = 0;
 80058f4:	2300      	movs	r3, #0
{
 80058f6:	b510      	push	{r4, lr}
    while (*src) {
 80058f8:	5cc4      	ldrb	r4, [r0, r3]
 80058fa:	b124      	cbz	r4, 8005906 <text_editor_get_text+0x12>
        *des++ = *src++;
        n++;
 80058fc:	3301      	adds	r3, #1
        if (siz <= n) {
 80058fe:	4293      	cmp	r3, r2
        *des++ = *src++;
 8005900:	f801 4b01 	strb.w	r4, [r1], #1
        if (siz <= n) {
 8005904:	dbf8      	blt.n	80058f8 <text_editor_get_text+0x4>
            break;
        }
    }
    *des = '\0';
 8005906:	2200      	movs	r2, #0
    return n;
}
 8005908:	4618      	mov	r0, r3
    *des = '\0';
 800590a:	700a      	strb	r2, [r1, #0]
}
 800590c:	bd10      	pop	{r4, pc}

0800590e <text_editor_clear>:
 800590e:	2300      	movs	r3, #0
 8005910:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8005914:	7003      	strb	r3, [r0, #0]
 8005916:	4770      	bx	lr

08005918 <text_history_init>:
 * @param p A pointer to the handler.
 */
void text_history_init(text_history_t *p)
{
    int i;
    p->rp = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	1e42      	subs	r2, r0, #1
 800591c:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p->wp = 0;
 8005920:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8005924:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
    for (i = 0; i < (int)sizeof(p->history); i++) {
        p->history[i] = 0;
 8005928:	f802 3f01 	strb.w	r3, [r2, #1]!
    for (i = 0; i < (int)sizeof(p->history); i++) {
 800592c:	4282      	cmp	r2, r0
 800592e:	d1fb      	bne.n	8005928 <text_history_init+0x10>
    }
}
 8005930:	4770      	bx	lr

08005932 <text_history_write>:
 * @param buf A pointer to the buffer.
 */
int text_history_write(text_history_t *p, char *buf)
{
    char *sp = p->history + (TEXTHISTORY_MAXLEN * p->wp);
    if (buf[0] == '\0') {
 8005932:	780b      	ldrb	r3, [r1, #0]
 8005934:	b1db      	cbz	r3, 800596e <text_history_write+0x3c>
    char *sp = p->history + (TEXTHISTORY_MAXLEN * p->wp);
 8005936:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800593a:	3901      	subs	r1, #1
 800593c:	eb00 1383 	add.w	r3, r0, r3, lsl #6
        return 0;
    }
    while (*buf) {
 8005940:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005944:	b982      	cbnz	r2, 8005968 <text_history_write+0x36>
        *sp = *buf;
        sp++;
        buf++;
    }
    *sp = '\0';
 8005946:	701a      	strb	r2, [r3, #0]
    p->wp = (p->wp + 1) % TEXTHISTORY_DEPTH;
 8005948:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800594c:	3301      	adds	r3, #1
 800594e:	425a      	negs	r2, r3
 8005950:	f002 0207 	and.w	r2, r2, #7
 8005954:	f003 0307 	and.w	r3, r3, #7
 8005958:	bf58      	it	pl
 800595a:	4253      	negpl	r3, r2
 800595c:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
    p->rp = p->wp;
 8005960:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    return 1;
 8005964:	2001      	movs	r0, #1
 8005966:	4770      	bx	lr
        *sp = *buf;
 8005968:	f803 2b01 	strb.w	r2, [r3], #1
 800596c:	e7e8      	b.n	8005940 <text_history_write+0xe>
        return 0;
 800596e:	4618      	mov	r0, r3
}
 8005970:	4770      	bx	lr

08005972 <text_history_read>:
 * @param buf A pointer to the buffer.
 * @param siz A size of the buffer.
 */
int text_history_read(text_history_t *p, char *buf, const int siz)
{
    char *sp = p->history + (TEXTHISTORY_MAXLEN * p->rp);
 8005972:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
{
 8005976:	b510      	push	{r4, lr}
    char *sp = p->history + (TEXTHISTORY_MAXLEN * p->rp);
 8005978:	eb00 1383 	add.w	r3, r0, r3, lsl #6
    int n = 0;
 800597c:	2000      	movs	r0, #0
    while (*sp) {
        *buf = *sp;
        buf++;
        sp++;
        n++;
        if (siz - 1 <= n) {
 800597e:	3a01      	subs	r2, #1
    while (*sp) {
 8005980:	5c1c      	ldrb	r4, [r3, r0]
 8005982:	b124      	cbz	r4, 800598e <text_history_read+0x1c>
        n++;
 8005984:	3001      	adds	r0, #1
        if (siz - 1 <= n) {
 8005986:	4282      	cmp	r2, r0
        *buf = *sp;
 8005988:	f801 4b01 	strb.w	r4, [r1], #1
        if (siz - 1 <= n) {
 800598c:	dcf8      	bgt.n	8005980 <text_history_read+0xe>
            break;
        }
    }
    *buf = '\0';
 800598e:	2300      	movs	r3, #0
 8005990:	700b      	strb	r3, [r1, #0]
    return n;
}
 8005992:	bd10      	pop	{r4, pc}

08005994 <text_history_read_point_next>:
 *
 * @param p A pointer to the handler.
 */
int text_history_read_point_next(text_history_t *p)
{
    int n = (p->rp + 1) % TEXTHISTORY_DEPTH;
 8005994:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 8005998:	3301      	adds	r3, #1
 800599a:	425a      	negs	r2, r3
 800599c:	f002 0207 	and.w	r2, r2, #7
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	bf58      	it	pl
 80059a6:	4253      	negpl	r3, r2
    if (n != p->wp) {
 80059a8:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 80059ac:	429a      	cmp	r2, r3
        p->rp = n;
 80059ae:	bf1a      	itte	ne
 80059b0:	f8c0 3200 	strne.w	r3, [r0, #512]	; 0x200
        return 1;
 80059b4:	2001      	movne	r0, #1
    }
    return 0;
 80059b6:	2000      	moveq	r0, #0
}
 80059b8:	4770      	bx	lr

080059ba <text_history_read_point_prev>:
 *
 * @param p A pointer to the handler.
 */
int text_history_read_point_prev(text_history_t *p)
{
    int n = (p->rp == 0) ? (TEXTHISTORY_DEPTH - 1) : (p->rp - 1);
 80059ba:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80059be:	b15b      	cbz	r3, 80059d8 <text_history_read_point_prev+0x1e>
 80059c0:	3b01      	subs	r3, #1
    if (n != p->wp) {
 80059c2:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 80059c6:	429a      	cmp	r2, r3
 80059c8:	d008      	beq.n	80059dc <text_history_read_point_prev+0x22>
        char *sp = p->history + (TEXTHISTORY_MAXLEN * n);
        if (*sp != '\0') {
 80059ca:	019a      	lsls	r2, r3, #6
 80059cc:	5c82      	ldrb	r2, [r0, r2]
 80059ce:	b12a      	cbz	r2, 80059dc <text_history_read_point_prev+0x22>
            p->rp = n;
 80059d0:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
            return 1;
 80059d4:	2001      	movs	r0, #1
 80059d6:	4770      	bx	lr
    int n = (p->rp == 0) ? (TEXTHISTORY_DEPTH - 1) : (p->rp - 1);
 80059d8:	2307      	movs	r3, #7
 80059da:	e7f2      	b.n	80059c2 <text_history_read_point_prev+0x8>
        }
    }
    return 0;
 80059dc:	2000      	movs	r0, #0
 80059de:	4770      	bx	lr

080059e0 <text_history_find>:
 * @retval !0 Failure.
 */
int text_history_find(text_history_t *p,
        const int index, const char *text,
        char *buf, const int siz)
{
 80059e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    const int text_len = ntlibc_strlen((const char *)text);
    int found = 0;
    int i;
    for (i = 0; i < TEXTHISTORY_DEPTH; i++) {
 80059e4:	2500      	movs	r5, #0
{
 80059e6:	4606      	mov	r6, r0
    const int text_len = ntlibc_strlen((const char *)text);
 80059e8:	4610      	mov	r0, r2
{
 80059ea:	4689      	mov	r9, r1
 80059ec:	4617      	mov	r7, r2
 80059ee:	469a      	mov	sl, r3
    const int text_len = ntlibc_strlen((const char *)text);
 80059f0:	f7ff fbb7 	bl	8005162 <ntlibc_strlen>
    int found = 0;
 80059f4:	46ab      	mov	fp, r5
    const int text_len = ntlibc_strlen((const char *)text);
 80059f6:	9000      	str	r0, [sp, #0]
        int target = (p->rp + i) % TEXTHISTORY_DEPTH;
 80059f8:	f8d6 4200 	ldr.w	r4, [r6, #512]	; 0x200
 80059fc:	442c      	add	r4, r5
 80059fe:	4263      	negs	r3, r4
 8005a00:	f003 0307 	and.w	r3, r3, #7
 8005a04:	f004 0407 	and.w	r4, r4, #7
 8005a08:	bf58      	it	pl
 8005a0a:	425c      	negpl	r4, r3
        char *txtp = p->history + (TEXTHISTORY_MAXLEN * target);
 8005a0c:	eb06 1484 	add.w	r4, r6, r4, lsl #6
        const int target_len = ntlibc_strlen((const char *)txtp);
 8005a10:	4620      	mov	r0, r4
 8005a12:	f7ff fba6 	bl	8005162 <ntlibc_strlen>
        int comp_len = (target_len < text_len) ? target_len : text_len;
 8005a16:	9b00      	ldr	r3, [sp, #0]
        if ((ntlibc_strncmp(
 8005a18:	4639      	mov	r1, r7
        int comp_len = (target_len < text_len) ? target_len : text_len;
 8005a1a:	4283      	cmp	r3, r0
 8005a1c:	bfa8      	it	ge
 8005a1e:	4603      	movge	r3, r0
        if ((ntlibc_strncmp(
 8005a20:	4620      	mov	r0, r4
 8005a22:	461a      	mov	r2, r3
 8005a24:	9301      	str	r3, [sp, #4]
 8005a26:	f7ff fbae 	bl	8005186 <ntlibc_strncmp>
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	b9a0      	cbnz	r0, 8005a58 <text_history_find+0x78>
                    (const char *)txtp,
                    (const char *)text, comp_len) == 0) && (comp_len > 0)) {
 8005a2e:	9b01      	ldr	r3, [sp, #4]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	dd11      	ble.n	8005a58 <text_history_find+0x78>
            if (found == index) {
 8005a34:	45d9      	cmp	r9, fp
 8005a36:	d10d      	bne.n	8005a54 <text_history_find+0x74>
                if (siz <= ntlibc_strlen(txtp)) {
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff fb92 	bl	8005162 <ntlibc_strlen>
 8005a3e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a40:	4298      	cmp	r0, r3
 8005a42:	da0c      	bge.n	8005a5e <text_history_find+0x7e>
                    return -1;
                }
                ntlibc_strcpy((char *)buf, (char *)txtp);
 8005a44:	4621      	mov	r1, r4
 8005a46:	4650      	mov	r0, sl
 8005a48:	f7ff fb93 	bl	8005172 <ntlibc_strcpy>
            }
            found++;
        }
    }
    return -1;
}
 8005a4c:	4640      	mov	r0, r8
 8005a4e:	b003      	add	sp, #12
 8005a50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            found++;
 8005a54:	f10b 0b01 	add.w	fp, fp, #1
    for (i = 0; i < TEXTHISTORY_DEPTH; i++) {
 8005a58:	3501      	adds	r5, #1
 8005a5a:	2d08      	cmp	r5, #8
 8005a5c:	d1cc      	bne.n	80059f8 <text_history_find+0x18>
                    return -1;
 8005a5e:	f04f 38ff 	mov.w	r8, #4294967295
 8005a62:	e7f3      	b.n	8005a4c <text_history_find+0x6c>

08005a64 <do_action>:
static void do_action(vtrecv_t *parser, vtrecv_action_t action, char ch)
{
    /* Some actions we handle internally (like parsing parameters), others
     * we hand to our client for processing */

    switch (action) {
 8005a64:	1e4b      	subs	r3, r1, #1
 8005a66:	2b0d      	cmp	r3, #13
 8005a68:	d832      	bhi.n	8005ad0 <do_action+0x6c>
 8005a6a:	e8df f003 	tbb	[pc, r3]
 8005a6e:	092d      	.short	0x092d
 8005a70:	07070707 	.word	0x07070707
 8005a74:	07070735 	.word	0x07070735
 8005a78:	07070714 	.word	0x07070714
        case VTRECV_ACTION_OSC_PUT:
        case VTRECV_ACTION_OSC_END:
        case VTRECV_ACTION_UNHOOK:
        case VTRECV_ACTION_CSI_DISPATCH:
        case VTRECV_ACTION_ESC_DISPATCH:
            parser->cb(parser, action, ch);
 8005a7c:	6843      	ldr	r3, [r0, #4]
            parser->num_params             = 0;
            parser->ignore_flagged         = 0;
            break;

        default:
            parser->cb(parser, VTRECV_ACTION_ERROR, 0);
 8005a7e:	4718      	bx	r3
            if (parser->num_intermediate_chars + 1 > MAX_INTERMEDIATE_CHARS) {
 8005a80:	68c3      	ldr	r3, [r0, #12]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	dd02      	ble.n	8005a8c <do_action+0x28>
                parser->ignore_flagged = 1;
 8005a86:	2301      	movs	r3, #1
            parser->ignore_flagged         = 0;
 8005a88:	7403      	strb	r3, [r0, #16]
            break;
 8005a8a:	4770      	bx	lr
                parser->intermediate_chars[parser->num_intermediate_chars++] = ch;
 8005a8c:	1c59      	adds	r1, r3, #1
 8005a8e:	60c1      	str	r1, [r0, #12]
 8005a90:	4418      	add	r0, r3
 8005a92:	7202      	strb	r2, [r0, #8]
 8005a94:	4770      	bx	lr
            if (ch == ';') {
 8005a96:	2a3b      	cmp	r2, #59	; 0x3b
 8005a98:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005a9a:	d107      	bne.n	8005aac <do_action+0x48>
                parser->num_params += 1;
 8005a9c:	1c5a      	adds	r2, r3, #1
                parser->params[parser->num_params-1] = 0;
 8005a9e:	3304      	adds	r3, #4
                parser->num_params += 1;
 8005aa0:	6542      	str	r2, [r0, #84]	; 0x54
                parser->params[parser->num_params-1] = 0;
 8005aa2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	6043      	str	r3, [r0, #4]
 8005aaa:	4770      	bx	lr
                if (parser->num_params == 0) {
 8005aac:	b913      	cbnz	r3, 8005ab4 <do_action+0x50>
                    parser->num_params = 1;
 8005aae:	2101      	movs	r1, #1
                    parser->params[0]  = 0;
 8005ab0:	6143      	str	r3, [r0, #20]
                    parser->num_params = 1;
 8005ab2:	6541      	str	r1, [r0, #84]	; 0x54
                parser->params[current_param] += (ch - '0');
 8005ab4:	210a      	movs	r1, #10
 8005ab6:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ab8:	3a30      	subs	r2, #48	; 0x30
 8005aba:	eb00 0083 	add.w	r0, r0, r3, lsl #2
                parser->params[current_param] *= 10;
 8005abe:	6903      	ldr	r3, [r0, #16]
                parser->params[current_param] += (ch - '0');
 8005ac0:	fb01 2203 	mla	r2, r1, r3, r2
 8005ac4:	6102      	str	r2, [r0, #16]
 8005ac6:	4770      	bx	lr
            parser->num_intermediate_chars = 0;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	60c3      	str	r3, [r0, #12]
            parser->num_params             = 0;
 8005acc:	6543      	str	r3, [r0, #84]	; 0x54
 8005ace:	e7db      	b.n	8005a88 <do_action+0x24>
            parser->cb(parser, VTRECV_ACTION_ERROR, 0);
 8005ad0:	6843      	ldr	r3, [r0, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	210f      	movs	r1, #15
 8005ad6:	e7d2      	b.n	8005a7e <do_action+0x1a>
            break;
    }
}
 8005ad8:	4770      	bx	lr

08005ada <vtrecv_init>:
    parser->state                  = VTRECV_STATE_GROUND;
 8005ada:	230c      	movs	r3, #12
 8005adc:	7003      	strb	r3, [r0, #0]
    parser->num_intermediate_chars = 0;
 8005ade:	2300      	movs	r3, #0
    parser->cb                     = cb;
 8005ae0:	6041      	str	r1, [r0, #4]
    parser->num_intermediate_chars = 0;
 8005ae2:	60c3      	str	r3, [r0, #12]
    parser->num_params             = 0;
 8005ae4:	6543      	str	r3, [r0, #84]	; 0x54
    parser->ignore_flagged         = 0;
 8005ae6:	7403      	strb	r3, [r0, #16]
}
 8005ae8:	4770      	bx	lr
	...

08005aec <vtrecv_execute>:
        do_action(parser, action, ch);
    }
}

void vtrecv_execute(vtrecv_t *parser, unsigned char *data, int len)
{
 8005aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005af0:	4605      	mov	r5, r0
 8005af2:	4688      	mov	r8, r1
 8005af4:	4693      	mov	fp, r2
    int i;
    for (i = 0; i < len; i++) {
 8005af6:	460f      	mov	r7, r1
 8005af8:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8005b94 <vtrecv_execute+0xa8>
 8005afc:	eba7 0308 	sub.w	r3, r7, r8
 8005b00:	459b      	cmp	fp, r3
 8005b02:	dc02      	bgt.n	8005b0a <vtrecv_execute+0x1e>
        unsigned char ch = data[i];
        state_change_t change = GET_STATE_TABLE(parser->state, ch);
        do_state_change(parser, change, ch);
    }
}
 8005b04:	b003      	add	sp, #12
 8005b06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        state_change_t change = GET_STATE_TABLE(parser->state, ch);
 8005b0a:	2300      	movs	r3, #0
        unsigned char ch = data[i];
 8005b0c:	f817 6b01 	ldrb.w	r6, [r7], #1
        state_change_t change = GET_STATE_TABLE(parser->state, ch);
 8005b10:	7829      	ldrb	r1, [r5, #0]
        if (tp->state == state) {
 8005b12:	f853 2009 	ldr.w	r2, [r3, r9]
 8005b16:	eb09 0003 	add.w	r0, r9, r3
 8005b1a:	4291      	cmp	r1, r2
 8005b1c:	d129      	bne.n	8005b72 <vtrecv_execute+0x86>
            if ((tp->code_start <= ch) && (ch <= tp->code_end)) {
 8005b1e:	7902      	ldrb	r2, [r0, #4]
 8005b20:	4296      	cmp	r6, r2
 8005b22:	db26      	blt.n	8005b72 <vtrecv_execute+0x86>
 8005b24:	7942      	ldrb	r2, [r0, #5]
 8005b26:	4296      	cmp	r6, r2
 8005b28:	dc23      	bgt.n	8005b72 <vtrecv_execute+0x86>
                return tp->state_change;
 8005b2a:	7984      	ldrb	r4, [r0, #6]
    vtrecv_action_t action = ACTION(change);
 8005b2c:	f004 030f 	and.w	r3, r4, #15
    if (new_state) {
 8005b30:	0924      	lsrs	r4, r4, #4
 8005b32:	d025      	beq.n	8005b80 <vtrecv_execute+0x94>
    return EXIT_ACTIONS[state];
 8005b34:	4a15      	ldr	r2, [pc, #84]	; (8005b8c <vtrecv_execute+0xa0>)
 8005b36:	440a      	add	r2, r1
 8005b38:	f812 1c01 	ldrb.w	r1, [r2, #-1]
    return ENTRY_ACTIONS[state];
 8005b3c:	4a14      	ldr	r2, [pc, #80]	; (8005b90 <vtrecv_execute+0xa4>)
 8005b3e:	4422      	add	r2, r4
 8005b40:	f812 ac01 	ldrb.w	sl, [r2, #-1]
        if (exit_action) {
 8005b44:	b129      	cbz	r1, 8005b52 <vtrecv_execute+0x66>
            do_action(parser, exit_action, 0);
 8005b46:	2200      	movs	r2, #0
 8005b48:	4628      	mov	r0, r5
 8005b4a:	9301      	str	r3, [sp, #4]
 8005b4c:	f7ff ff8a 	bl	8005a64 <do_action>
 8005b50:	9b01      	ldr	r3, [sp, #4]
        if (action) {
 8005b52:	b123      	cbz	r3, 8005b5e <vtrecv_execute+0x72>
            do_action(parser, action, ch);
 8005b54:	4632      	mov	r2, r6
 8005b56:	4619      	mov	r1, r3
 8005b58:	4628      	mov	r0, r5
 8005b5a:	f7ff ff83 	bl	8005a64 <do_action>
        if (entry_action) {
 8005b5e:	f1ba 0f00 	cmp.w	sl, #0
 8005b62:	d004      	beq.n	8005b6e <vtrecv_execute+0x82>
            do_action(parser, entry_action, 0);
 8005b64:	2200      	movs	r2, #0
 8005b66:	4651      	mov	r1, sl
 8005b68:	4628      	mov	r0, r5
 8005b6a:	f7ff ff7b 	bl	8005a64 <do_action>
        parser->state = new_state;
 8005b6e:	702c      	strb	r4, [r5, #0]
 8005b70:	e7c4      	b.n	8005afc <vtrecv_execute+0x10>
    for (i = 0; i < N; i++) {
 8005b72:	f640 0258 	movw	r2, #2136	; 0x858
 8005b76:	3308      	adds	r3, #8
 8005b78:	4293      	cmp	r3, r2
 8005b7a:	d1ca      	bne.n	8005b12 <vtrecv_execute+0x26>
    return 0;
 8005b7c:	2400      	movs	r4, #0
 8005b7e:	e7d5      	b.n	8005b2c <vtrecv_execute+0x40>
        do_action(parser, action, ch);
 8005b80:	4632      	mov	r2, r6
 8005b82:	4619      	mov	r1, r3
 8005b84:	4628      	mov	r0, r5
 8005b86:	f7ff ff6d 	bl	8005a64 <do_action>
 8005b8a:	e7b7      	b.n	8005afc <vtrecv_execute+0x10>
 8005b8c:	0800d2d6 	.word	0x0800d2d6
 8005b90:	0800d2c8 	.word	0x0800d2c8
 8005b94:	0800d2e4 	.word	0x0800d2e4

08005b98 <vtsend_init>:
#define UART_WRITE(P, BUF, SIZ)   (P)->uart_write(BUF, SIZ, (P)->extobj)

int vtsend_init(vtsend_t *p, VTSEND_SERIAL_WRITE uart_write, void *extobj)
{
    p->uart_write = uart_write;
    p->extobj = extobj;
 8005b98:	e9c0 1200 	strd	r1, r2, [r0]
    return 0;
}
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	4770      	bx	lr

08005ba0 <vtsend_cursor_forward>:
int vtsend_cursor_forward(vtsend_t *p, const int n)
{
    char buf[5];
    buf[0] = ESC;
    buf[1] = '[';
    buf[2] = '0' + (n / 10);
 8005ba0:	220a      	movs	r2, #10
    buf[0] = ESC;
 8005ba2:	f645 331b 	movw	r3, #23323	; 0x5b1b
{
 8005ba6:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ESC;
 8005ba8:	f8ad 3000 	strh.w	r3, [sp]
    buf[2] = '0' + (n / 10);
 8005bac:	fb91 f3f2 	sdiv	r3, r1, r2
 8005bb0:	f103 0430 	add.w	r4, r3, #48	; 0x30
    buf[3] = '0' + (n % 10);
 8005bb4:	fb02 1313 	mls	r3, r2, r3, r1
 8005bb8:	3330      	adds	r3, #48	; 0x30
 8005bba:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = 'C';
 8005bbe:	2343      	movs	r3, #67	; 0x43
    buf[2] = '0' + (n / 10);
 8005bc0:	f88d 4002 	strb.w	r4, [sp, #2]
    buf[4] = 'C';
 8005bc4:	f88d 3004 	strb.w	r3, [sp, #4]
    UART_WRITE(p, buf, sizeof(buf));
 8005bc8:	2105      	movs	r1, #5
 8005bca:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005bce:	4668      	mov	r0, sp
 8005bd0:	4798      	blx	r3
    return 0;
}
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	b002      	add	sp, #8
 8005bd6:	bd10      	pop	{r4, pc}

08005bd8 <vtsend_cursor_backward>:
int vtsend_cursor_backward(vtsend_t *p, const int n)
{
    char buf[5];
    buf[0] = ESC;
    buf[1] = '[';
    buf[2] = '0' + (n / 10);
 8005bd8:	220a      	movs	r2, #10
    buf[0] = ESC;
 8005bda:	f645 331b 	movw	r3, #23323	; 0x5b1b
{
 8005bde:	b513      	push	{r0, r1, r4, lr}
    buf[0] = ESC;
 8005be0:	f8ad 3000 	strh.w	r3, [sp]
    buf[2] = '0' + (n / 10);
 8005be4:	fb91 f3f2 	sdiv	r3, r1, r2
 8005be8:	f103 0430 	add.w	r4, r3, #48	; 0x30
    buf[3] = '0' + (n % 10);
 8005bec:	fb02 1313 	mls	r3, r2, r3, r1
 8005bf0:	3330      	adds	r3, #48	; 0x30
 8005bf2:	f88d 3003 	strb.w	r3, [sp, #3]
    buf[4] = 'D';
 8005bf6:	2344      	movs	r3, #68	; 0x44
    buf[2] = '0' + (n / 10);
 8005bf8:	f88d 4002 	strb.w	r4, [sp, #2]
    buf[4] = 'D';
 8005bfc:	f88d 3004 	strb.w	r3, [sp, #4]
    UART_WRITE(p, buf, sizeof(buf));
 8005c00:	2105      	movs	r1, #5
 8005c02:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005c06:	4668      	mov	r0, sp
 8005c08:	4798      	blx	r3
    return 0;
}
 8005c0a:	2000      	movs	r0, #0
 8005c0c:	b002      	add	sp, #8
 8005c0e:	bd10      	pop	{r4, pc}

08005c10 <vtsend_erase_line>:
    UART_WRITE(p, buf, sizeof(buf));
    return 0;
}

int vtsend_erase_line(vtsend_t *p)
{
 8005c10:	b513      	push	{r0, r1, r4, lr}
    char buf[4];
    buf[0] = ESC;
 8005c12:	4a06      	ldr	r2, [pc, #24]	; (8005c2c <vtsend_erase_line+0x1c>)
 8005c14:	ab02      	add	r3, sp, #8
 8005c16:	f843 2d04 	str.w	r2, [r3, #-4]!
    buf[1] = '[';
    buf[2] = '2';
    buf[3] = 'K';
    UART_WRITE(p, buf, sizeof(buf));
 8005c1a:	2104      	movs	r1, #4
 8005c1c:	e9d0 4200 	ldrd	r4, r2, [r0]
 8005c20:	4618      	mov	r0, r3
 8005c22:	47a0      	blx	r4
    return 0;
}
 8005c24:	2000      	movs	r0, #0
 8005c26:	b002      	add	sp, #8
 8005c28:	bd10      	pop	{r4, pc}
 8005c2a:	bf00      	nop
 8005c2c:	4b325b1b 	.word	0x4b325b1b

08005c30 <nt_callback>:
    port_str *port = extobj;
    xStreamBufferSend(port->tx,buf, cnt,portMAX_DELAY);
	return cnt;
}

static int nt_callback(const char *text, void *extobj) {
 8005c30:	b508      	push	{r3, lr}
	port_str *port = extobj;
	nt_interpret((char*)text, port);
 8005c32:	f7fd ffbb 	bl	8003bac <nt_interpret>
	return 0;
}
 8005c36:	2000      	movs	r0, #0
 8005c38:	bd08      	pop	{r3, pc}

08005c3a <write>:
static int write(const char *buf, int cnt, void *extobj) {
 8005c3a:	b538      	push	{r3, r4, r5, lr}
 8005c3c:	4615      	mov	r5, r2
 8005c3e:	460c      	mov	r4, r1
    xStreamBufferSend(port->tx,buf, cnt,portMAX_DELAY);
 8005c40:	460a      	mov	r2, r1
 8005c42:	f04f 33ff 	mov.w	r3, #4294967295
 8005c46:	4601      	mov	r1, r0
 8005c48:	6868      	ldr	r0, [r5, #4]
 8005c4a:	f003 f804 	bl	8008c56 <xStreamBufferSend>
}
 8005c4e:	4620      	mov	r0, r4
 8005c50:	bd38      	pop	{r3, r4, r5, pc}
	...

08005c54 <initialize_cli>:
void initialize_cli(ntshell_t *ptr, port_str *port) {
 8005c54:	b510      	push	{r4, lr}
 8005c56:	4604      	mov	r4, r0
    ntshell_init(ptr, write, nt_callback, port);
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4a06      	ldr	r2, [pc, #24]	; (8005c74 <initialize_cli+0x20>)
 8005c5c:	4906      	ldr	r1, [pc, #24]	; (8005c78 <initialize_cli+0x24>)
 8005c5e:	f7ff fd59 	bl	8005714 <ntshell_init>
	ntshell_set_prompt(ptr, ":>");
 8005c62:	4620      	mov	r0, r4
 8005c64:	4905      	ldr	r1, [pc, #20]	; (8005c7c <initialize_cli+0x28>)
 8005c66:	f7ff fdab 	bl	80057c0 <ntshell_set_prompt>
	ntshell_show_promt(ptr);
 8005c6a:	4620      	mov	r0, r4
}
 8005c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ntshell_show_promt(ptr);
 8005c70:	f7ff bd7e 	b.w	8005770 <ntshell_show_promt>
 8005c74:	08005c31 	.word	0x08005c31
 8005c78:	08005c3b 	.word	0x08005c3b
 8005c7c:	0800db3c 	.word	0x0800db3c

08005c80 <handle_terminal>:


uint8_t handle_terminal(ntshell_t *ptr, port_str *port) {
 8005c80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c82:	460c      	mov	r4, r1
 8005c84:	4605      	mov	r5, r0
	char c;
	if (xStreamBufferReceive(port->rx, &c,1, portMAX_DELAY)) {
 8005c86:	f04f 33ff 	mov.w	r3, #4294967295
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f10d 0107 	add.w	r1, sp, #7
 8005c90:	68a0      	ldr	r0, [r4, #8]
 8005c92:	f003 f86d 	bl	8008d70 <xStreamBufferReceive>
 8005c96:	b180      	cbz	r0, 8005cba <handle_terminal+0x3a>
		if (xSemaphoreTake(port->term_block, portMAX_DELAY)) {
 8005c98:	f04f 31ff 	mov.w	r1, #4294967295
 8005c9c:	68e0      	ldr	r0, [r4, #12]
 8005c9e:	f002 fdc3 	bl	8008828 <xQueueSemaphoreTake>
 8005ca2:	b150      	cbz	r0, 8005cba <handle_terminal+0x3a>
			ntshell_execute_nb(ptr, c);
 8005ca4:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005ca8:	4628      	mov	r0, r5
 8005caa:	f7ff fd78 	bl	800579e <ntshell_execute_nb>
			xSemaphoreGive(port->term_block);
 8005cae:	2300      	movs	r3, #0
 8005cb0:	68e0      	ldr	r0, [r4, #12]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f002 fc03 	bl	80084c0 <xQueueGenericSend>
		}
	}
	return 0;
}
 8005cba:	2000      	movs	r0, #0
 8005cbc:	b003      	add	sp, #12
 8005cbe:	bd30      	pop	{r4, r5, pc}

08005cc0 <tsk_cli_TaskProc>:

	ntshell_t ntsh;
	port_str port;

    port.type = PORT_TYPE_SERIAL;
    port.term_mode = PORT_TERM_VT100;
 8005cc0:	2400      	movs	r4, #0
    port.type = PORT_TYPE_SERIAL;
 8005cc2:	2501      	movs	r5, #1
void tsk_cli_TaskProc(void *pvParameters) {
 8005cc4:	b500      	push	{lr}
 8005cc6:	4606      	mov	r6, r0
 8005cc8:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
    port.term_block = xSemaphoreCreateBinary();
 8005ccc:	2203      	movs	r2, #3
 8005cce:	4621      	mov	r1, r4
 8005cd0:	4628      	mov	r0, r5
    port.type = PORT_TYPE_SERIAL;
 8005cd2:	f88d 5004 	strb.w	r5, [sp, #4]
    port.term_mode = PORT_TERM_VT100;
 8005cd6:	f88d 4006 	strb.w	r4, [sp, #6]
    port.term_block = xSemaphoreCreateBinary();
 8005cda:	f002 fbcc 	bl	8008476 <xQueueGenericCreate>
    port.rx = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8005cde:	4622      	mov	r2, r4
    port.term_block = xSemaphoreCreateBinary();
 8005ce0:	9004      	str	r0, [sp, #16]
    port.rx = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8005ce2:	4629      	mov	r1, r5
 8005ce4:	2080      	movs	r0, #128	; 0x80
 8005ce6:	f002 ff73 	bl	8008bd0 <xStreamBufferGenericCreate>
    port.tx = xStreamBufferCreate(STREAMBUFFER_TX_SIZE,1);
 8005cea:	4622      	mov	r2, r4
    port.rx = xStreamBufferCreate(STREAMBUFFER_RX_SIZE,1);
 8005cec:	9003      	str	r0, [sp, #12]
    port.tx = xStreamBufferCreate(STREAMBUFFER_TX_SIZE,1);
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005cf4:	f002 ff6c 	bl	8008bd0 <xStreamBufferGenericCreate>
    port.uart_ptr = pvParameters;
    xSemaphoreGive(port.term_block);
 8005cf8:	4621      	mov	r1, r4
 8005cfa:	4623      	mov	r3, r4
 8005cfc:	4622      	mov	r2, r4
    port.tx = xStreamBufferCreate(STREAMBUFFER_TX_SIZE,1);
 8005cfe:	9002      	str	r0, [sp, #8]
    xSemaphoreGive(port.term_block);
 8005d00:	9804      	ldr	r0, [sp, #16]
    port.uart_ptr = pvParameters;
 8005d02:	9605      	str	r6, [sp, #20]
    xSemaphoreGive(port.term_block);
 8005d04:	f002 fbdc 	bl	80084c0 <xQueueGenericSend>

    tsk_uart_Start(&port);
 8005d08:	a801      	add	r0, sp, #4
 8005d0a:	f000 f9ed 	bl	80060e8 <tsk_uart_Start>
    tsk_overlay_Start(&port);
 8005d0e:	a801      	add	r0, sp, #4
 8005d10:	f000 f98e 	bl	8006030 <tsk_overlay_Start>

    init_config();
 8005d14:	f7fd fcb0 	bl	8003678 <init_config>

    eeprom_load(&port);
 8005d18:	a801      	add	r0, sp, #4
 8005d1a:	f7fd fcdf 	bl	80036dc <eeprom_load>

    recalc_params();
 8005d1e:	f7fd fca9 	bl	8003674 <recalc_params>
    BLDC_Init();
 8005d22:	f7fe fcc1 	bl	80046a8 <BLDC_Init>
	 * Add the task initialzation code in the below merge region to be included
	 * in the task.
	 */
	/* `#START TASK_INIT_CODE` */

	initialize_cli(&ntsh, &port);
 8005d26:	a901      	add	r1, sp, #4
 8005d28:	a806      	add	r0, sp, #24
 8005d2a:	f7ff ff93 	bl	8005c54 <initialize_cli>

    /* `#END` */

	for (;;) {
		/* `#START TASK_LOOP_CODE` */
        handle_terminal(&ntsh,&port);
 8005d2e:	a901      	add	r1, sp, #4
 8005d30:	a806      	add	r0, sp, #24
 8005d32:	f7ff ffa5 	bl	8005c80 <handle_terminal>
 8005d36:	e7fa      	b.n	8005d2e <tsk_cli_TaskProc+0x6e>

08005d38 <tsk_cli_Start>:

        /* `#END` */
	}
}
/* ------------------------------------------------------------------------ */
void tsk_cli_Start(void *uart_ptr) {
 8005d38:	b507      	push	{r0, r1, r2, lr}

	/*
	* Create the task and then leave. When FreeRTOS starts up the scheduler
	* will call the task procedure and start execution of the task.
	*/
	xTaskCreate(tsk_cli_TaskProc, "UART-CLI", STACK_TERMINAL, uart_ptr, PRIO_TERMINAL, &UART_Terminal_TaskHandle);
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <tsk_cli_Start+0x20>)
 8005d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d40:	9301      	str	r3, [sp, #4]
 8005d42:	2303      	movs	r3, #3
 8005d44:	4905      	ldr	r1, [pc, #20]	; (8005d5c <tsk_cli_Start+0x24>)
 8005d46:	9300      	str	r3, [sp, #0]
 8005d48:	4603      	mov	r3, r0
 8005d4a:	4805      	ldr	r0, [pc, #20]	; (8005d60 <tsk_cli_Start+0x28>)
 8005d4c:	f003 f9bd 	bl	80090ca <xTaskCreate>

}
 8005d50:	b003      	add	sp, #12
 8005d52:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d56:	bf00      	nop
 8005d58:	200044cc 	.word	0x200044cc
 8005d5c:	0800db3f 	.word	0x0800db3f
 8005d60:	08005cc1 	.word	0x08005cc1
 8005d64:	00000000 	.word	0x00000000

08005d68 <show_overlay_100ms>:
 * operations, and/or generrally do stuff to make the taks do something
 * meaningful.
 */
/* `#START USER_TASK_LOCAL_CODE` */

void show_overlay_100ms(port_str *ptr){
 8005d68:	b570      	push	{r4, r5, r6, lr}

    if(ptr->term_mode == PORT_TERM_VT100){
 8005d6a:	7883      	ldrb	r3, [r0, #2]
void show_overlay_100ms(port_str *ptr){
 8005d6c:	b090      	sub	sp, #64	; 0x40
 8005d6e:	4604      	mov	r4, r0
 8005d70:	4d75      	ldr	r5, [pc, #468]	; (8005f48 <show_overlay_100ms+0x1e0>)
    if(ptr->term_mode == PORT_TERM_VT100){
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	f040 809d 	bne.w	8005eb2 <show_overlay_100ms+0x14a>
        char buffer[50];
        int ret=0;
    	Term_Save_Cursor(ptr);
 8005d78:	f7fd f988 	bl	800308c <Term_Save_Cursor>
    	Term_Disable_Cursor(ptr);
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f7fd f9a5 	bl	80030cc <Term_Disable_Cursor>

    	uint8_t row_pos = 1;
    	uint8_t col_pos = 90;
    	//Term_Erase_Screen(ptr);
    	Term_Box(row_pos, col_pos, row_pos + 6, col_pos + 25, ptr);
 8005d82:	2373      	movs	r3, #115	; 0x73
 8005d84:	2207      	movs	r2, #7
 8005d86:	215a      	movs	r1, #90	; 0x5a
 8005d88:	2001      	movs	r0, #1
 8005d8a:	9400      	str	r4, [sp, #0]
 8005d8c:	f7fd f8f2 	bl	8002f74 <Term_Box>
    	Term_Move_Cursor(row_pos + 1, col_pos + 1, ptr);
 8005d90:	4622      	mov	r2, r4
 8005d92:	215b      	movs	r1, #91	; 0x5b
 8005d94:	2002      	movs	r0, #2
 8005d96:	f7fd f8d9 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr A     :      %+.2fA", (float)analog.curr_a/1000.0);
 8005d9a:	6828      	ldr	r0, [r5, #0]
 8005d9c:	f7fa ff9e 	bl	8000cdc <__aeabi_i2f>
 8005da0:	f7fa fb42 	bl	8000428 <__aeabi_f2d>
 8005da4:	4b69      	ldr	r3, [pc, #420]	; (8005f4c <show_overlay_100ms+0x1e4>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	f7fa fcc0 	bl	800072c <__aeabi_ddiv>
 8005dac:	4a68      	ldr	r2, [pc, #416]	; (8005f50 <show_overlay_100ms+0x1e8>)
 8005dae:	e9cd 0100 	strd	r0, r1, [sp]
 8005db2:	2132      	movs	r1, #50	; 0x32
 8005db4:	a803      	add	r0, sp, #12
 8005db6:	f7ff f91f 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005dba:	4622      	mov	r2, r4
 8005dbc:	b281      	uxth	r1, r0
 8005dbe:	a803      	add	r0, sp, #12
 8005dc0:	f7fc fc18 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 2, col_pos + 1, ptr);
 8005dc4:	4622      	mov	r2, r4
 8005dc6:	215b      	movs	r1, #91	; 0x5b
 8005dc8:	2003      	movs	r0, #3
 8005dca:	f7fd f8bf 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr B     :      %+.2fA", (float)analog.curr_b/1000.0);
 8005dce:	6868      	ldr	r0, [r5, #4]
 8005dd0:	f7fa ff84 	bl	8000cdc <__aeabi_i2f>
 8005dd4:	f7fa fb28 	bl	8000428 <__aeabi_f2d>
 8005dd8:	4b5c      	ldr	r3, [pc, #368]	; (8005f4c <show_overlay_100ms+0x1e4>)
 8005dda:	2200      	movs	r2, #0
 8005ddc:	f7fa fca6 	bl	800072c <__aeabi_ddiv>
 8005de0:	4a5c      	ldr	r2, [pc, #368]	; (8005f54 <show_overlay_100ms+0x1ec>)
 8005de2:	e9cd 0100 	strd	r0, r1, [sp]
 8005de6:	2132      	movs	r1, #50	; 0x32
 8005de8:	a803      	add	r0, sp, #12
 8005dea:	f7ff f905 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005dee:	4622      	mov	r2, r4
 8005df0:	b281      	uxth	r1, r0
 8005df2:	a803      	add	r0, sp, #12
 8005df4:	f7fc fbfe 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 3, col_pos + 1, ptr);
 8005df8:	4622      	mov	r2, r4
 8005dfa:	215b      	movs	r1, #91	; 0x5b
 8005dfc:	2004      	movs	r0, #4
 8005dfe:	f7fd f8a5 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr C     :      %+.2fA", (float)analog.curr_c/1000.0);
 8005e02:	68a8      	ldr	r0, [r5, #8]
 8005e04:	f7fa ff6a 	bl	8000cdc <__aeabi_i2f>
 8005e08:	f7fa fb0e 	bl	8000428 <__aeabi_f2d>
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <show_overlay_100ms+0x1e4>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f7fa fc8c 	bl	800072c <__aeabi_ddiv>
 8005e14:	4a50      	ldr	r2, [pc, #320]	; (8005f58 <show_overlay_100ms+0x1f0>)
 8005e16:	e9cd 0100 	strd	r0, r1, [sp]
 8005e1a:	2132      	movs	r1, #50	; 0x32
 8005e1c:	a803      	add	r0, sp, #12
 8005e1e:	f7ff f8eb 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e22:	4622      	mov	r2, r4
 8005e24:	b281      	uxth	r1, r0
 8005e26:	a803      	add	r0, sp, #12
 8005e28:	f7fc fbe4 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 4, col_pos + 1, ptr);
 8005e2c:	4622      	mov	r2, r4
 8005e2e:	215b      	movs	r1, #91	; 0x5b
 8005e30:	2005      	movs	r0, #5
 8005e32:	f7fd f88b 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Bus Voltage:      %.2fV", DC_BUS_CNTtoV(adc_buffer.vbat));
 8005e36:	f643 005f 	movw	r0, #14431	; 0x385f
 8005e3a:	4d48      	ldr	r5, [pc, #288]	; (8005f5c <show_overlay_100ms+0x1f4>)
 8005e3c:	89eb      	ldrh	r3, [r5, #14]
 8005e3e:	4358      	muls	r0, r3
 8005e40:	f7fa ff48 	bl	8000cd4 <__aeabi_ui2f>
 8005e44:	f7fa faf0 	bl	8000428 <__aeabi_f2d>
 8005e48:	a33d      	add	r3, pc, #244	; (adr r3, 8005f40 <show_overlay_100ms+0x1d8>)
 8005e4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e4e:	f7fa fc6d 	bl	800072c <__aeabi_ddiv>
 8005e52:	4a43      	ldr	r2, [pc, #268]	; (8005f60 <show_overlay_100ms+0x1f8>)
 8005e54:	e9cd 0100 	strd	r0, r1, [sp]
 8005e58:	2132      	movs	r1, #50	; 0x32
 8005e5a:	a803      	add	r0, sp, #12
 8005e5c:	f7ff f8cc 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e60:	4622      	mov	r2, r4
 8005e62:	b281      	uxth	r1, r0
 8005e64:	a803      	add	r0, sp, #12
 8005e66:	f7fc fbc5 	bl	80025f4 <send_buffer>


    	Term_Move_Cursor(row_pos + 5, col_pos + 1, ptr);
 8005e6a:	4622      	mov	r2, r4
 8005e6c:	215b      	movs	r1, #91	; 0x5b
 8005e6e:	2006      	movs	r0, #6
 8005e70:	f7fd f86c 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Temp       :     %.1f *C",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8005e74:	89a8      	ldrh	r0, [r5, #12]
 8005e76:	f7fe fc53 	bl	8004720 <NTC_ADC2Temperature>
 8005e7a:	f7fa ff2f 	bl	8000cdc <__aeabi_i2f>
 8005e7e:	f7fa fad3 	bl	8000428 <__aeabi_f2d>
 8005e82:	4b38      	ldr	r3, [pc, #224]	; (8005f64 <show_overlay_100ms+0x1fc>)
 8005e84:	2200      	movs	r2, #0
 8005e86:	f7fa fc51 	bl	800072c <__aeabi_ddiv>
 8005e8a:	4a37      	ldr	r2, [pc, #220]	; (8005f68 <show_overlay_100ms+0x200>)
 8005e8c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e90:	2132      	movs	r1, #50	; 0x32
 8005e92:	a803      	add	r0, sp, #12
 8005e94:	f7ff f8b0 	bl	8004ff8 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e98:	4622      	mov	r2, r4
 8005e9a:	b281      	uxth	r1, r0
 8005e9c:	a803      	add	r0, sp, #12
 8005e9e:	f7fc fba9 	bl	80025f4 <send_buffer>

    	Term_Restore_Cursor(ptr);
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7fd f902 	bl	80030ac <Term_Restore_Cursor>
    	Term_Enable_Cursor(ptr);
 8005ea8:	4620      	mov	r0, r4
 8005eaa:	f7fd f91f 	bl	80030ec <Term_Enable_Cursor>
		send_chart_draw(ptr);


    }
	
}
 8005eae:	b010      	add	sp, #64	; 0x40
 8005eb0:	bd70      	pop	{r4, r5, r6, pc}
        send_gauge(0, GAUGE0_VAR, ptr);
 8005eb2:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005eb6:	6829      	ldr	r1, [r5, #0]
 8005eb8:	4602      	mov	r2, r0
 8005eba:	fb91 f1f6 	sdiv	r1, r1, r6
 8005ebe:	2000      	movs	r0, #0
 8005ec0:	b209      	sxth	r1, r1
 8005ec2:	f7ff f8ad 	bl	8005020 <send_gauge>
        send_gauge(1, GAUGE1_VAR, ptr);
 8005ec6:	6869      	ldr	r1, [r5, #4]
 8005ec8:	4622      	mov	r2, r4
 8005eca:	fb91 f1f6 	sdiv	r1, r1, r6
 8005ece:	2001      	movs	r0, #1
 8005ed0:	b209      	sxth	r1, r1
 8005ed2:	f7ff f8a5 	bl	8005020 <send_gauge>
        send_gauge(2, GAUGE2_VAR, ptr);
 8005ed6:	6869      	ldr	r1, [r5, #4]
 8005ed8:	4622      	mov	r2, r4
 8005eda:	fb91 f1f6 	sdiv	r1, r1, r6
 8005ede:	2002      	movs	r0, #2
 8005ee0:	b209      	sxth	r1, r1
 8005ee2:	f7ff f89d 	bl	8005020 <send_gauge>
        send_gauge(4, GAUGE4_VAR, ptr);
 8005ee6:	6969      	ldr	r1, [r5, #20]
 8005ee8:	4622      	mov	r2, r4
 8005eea:	fb91 f1f6 	sdiv	r1, r1, r6
		send_chart(0, CHART0_VAR, ptr);
 8005eee:	2664      	movs	r6, #100	; 0x64
        send_gauge(4, GAUGE4_VAR, ptr);
 8005ef0:	b209      	sxth	r1, r1
 8005ef2:	2004      	movs	r0, #4
 8005ef4:	f7ff f894 	bl	8005020 <send_gauge>
		send_chart(0, CHART0_VAR, ptr);
 8005ef8:	6829      	ldr	r1, [r5, #0]
 8005efa:	4622      	mov	r2, r4
 8005efc:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f00:	2000      	movs	r0, #0
 8005f02:	b209      	sxth	r1, r1
 8005f04:	f7ff f898 	bl	8005038 <send_chart>
		send_chart(1, CHART1_VAR, ptr);
 8005f08:	6869      	ldr	r1, [r5, #4]
 8005f0a:	4622      	mov	r2, r4
 8005f0c:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f10:	2001      	movs	r0, #1
 8005f12:	b209      	sxth	r1, r1
 8005f14:	f7ff f890 	bl	8005038 <send_chart>
		send_chart(2, CHART2_VAR, ptr);
 8005f18:	68a9      	ldr	r1, [r5, #8]
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f20:	2002      	movs	r0, #2
 8005f22:	b209      	sxth	r1, r1
 8005f24:	f7ff f888 	bl	8005038 <send_chart>
		send_chart(3, CHART3_VAR, ptr);
 8005f28:	4b10      	ldr	r3, [pc, #64]	; (8005f6c <show_overlay_100ms+0x204>)
 8005f2a:	4622      	mov	r2, r4
 8005f2c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8005f30:	2003      	movs	r0, #3
 8005f32:	f7ff f881 	bl	8005038 <send_chart>
		send_chart_draw(ptr);
 8005f36:	4620      	mov	r0, r4
 8005f38:	f7ff f88a 	bl	8005050 <send_chart_draw>
}
 8005f3c:	e7b7      	b.n	8005eae <show_overlay_100ms+0x146>
 8005f3e:	bf00      	nop
 8005f40:	00000000 	.word	0x00000000
 8005f44:	412e8480 	.word	0x412e8480
 8005f48:	2000419c 	.word	0x2000419c
 8005f4c:	408f4000 	.word	0x408f4000
 8005f50:	0800db48 	.word	0x0800db48
 8005f54:	0800db61 	.word	0x0800db61
 8005f58:	0800db7a 	.word	0x0800db7a
 8005f5c:	20004368 	.word	0x20004368
 8005f60:	0800db93 	.word	0x0800db93
 8005f64:	40240000 	.word	0x40240000
 8005f68:	0800dbab 	.word	0x0800dbab
 8005f6c:	2000449c 	.word	0x2000449c

08005f70 <show_overlay_400ms>:

void show_overlay_400ms(port_str *ptr) {
 8005f70:	b538      	push	{r3, r4, r5, lr}
    if(ptr->term_mode == PORT_TERM_TT){
 8005f72:	7883      	ldrb	r3, [r0, #2]
void show_overlay_400ms(port_str *ptr) {
 8005f74:	4604      	mov	r4, r0
    if(ptr->term_mode == PORT_TERM_TT){
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d126      	bne.n	8005fc8 <show_overlay_400ms+0x58>
        #endif
        #if GAUGE2_SLOW==1
        send_gauge(2, GAUGE2_VAR, ptr);
        #endif
        #if GAUGE3_SLOW==1
        send_gauge(3, GAUGE3_VAR, ptr);
 8005f7a:	4b17      	ldr	r3, [pc, #92]	; (8005fd8 <show_overlay_400ms+0x68>)
 8005f7c:	4602      	mov	r2, r0
 8005f7e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8005f82:	2003      	movs	r0, #3
 8005f84:	f7ff f84c 	bl	8005020 <send_gauge>
        #endif
        #if GAUGE4_SLOW==1
        send_gauge(4, GAUGE4_VAR, ptr);
        #endif
        #if GAUGE5_SLOW==1
        send_gauge(5, GAUGE5_VAR, ptr);
 8005f88:	f643 005f 	movw	r0, #14431	; 0x385f
 8005f8c:	4d13      	ldr	r5, [pc, #76]	; (8005fdc <show_overlay_400ms+0x6c>)
 8005f8e:	89eb      	ldrh	r3, [r5, #14]
 8005f90:	4358      	muls	r0, r3
 8005f92:	f7fa fa27 	bl	80003e4 <__aeabi_ui2d>
 8005f96:	a30e      	add	r3, pc, #56	; (adr r3, 8005fd0 <show_overlay_400ms+0x60>)
 8005f98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f9c:	f7fa fbc6 	bl	800072c <__aeabi_ddiv>
 8005fa0:	f7fa fd4a 	bl	8000a38 <__aeabi_d2iz>
 8005fa4:	4622      	mov	r2, r4
 8005fa6:	b201      	sxth	r1, r0
 8005fa8:	2005      	movs	r0, #5
 8005faa:	f7ff f839 	bl	8005020 <send_gauge>
        #endif
        #if GAUGE6_SLOW==1
        send_gauge(6, GAUGE6_VAR, ptr);
 8005fae:	89a8      	ldrh	r0, [r5, #12]
 8005fb0:	f7fe fbb6 	bl	8004720 <NTC_ADC2Temperature>
 8005fb4:	210a      	movs	r1, #10
 8005fb6:	fb90 f1f1 	sdiv	r1, r0, r1
 8005fba:	4622      	mov	r2, r4
        #endif
        
    }
}
 8005fbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        send_gauge(6, GAUGE6_VAR, ptr);
 8005fc0:	b209      	sxth	r1, r1
 8005fc2:	2006      	movs	r0, #6
 8005fc4:	f7ff b82c 	b.w	8005020 <send_gauge>
}
 8005fc8:	bd38      	pop	{r3, r4, r5, pc}
 8005fca:	bf00      	nop
 8005fcc:	f3af 8000 	nop.w
 8005fd0:	00000000 	.word	0x00000000
 8005fd4:	412e8480 	.word	0x412e8480
 8005fd8:	2000449c 	.word	0x2000449c
 8005fdc:	20004368 	.word	0x20004368

08005fe0 <tsk_overlay_TaskProc>:
/*
 * This is the main procedure that comprises the task.  Place the code required
 * to preform the desired function within the merge regions of the task procedure
 * to add functionality to the task.
 */
void tsk_overlay_TaskProc(void *pvParameters) {
 8005fe0:	b570      	push	{r4, r5, r6, lr}
 8005fe2:	4605      	mov	r5, r0
	 * Add and initialize local variables that are allocated on the Task stack
	 * the the section below.
	 */
	/* `#START TASK_VARIABLES` */
    
    uint8_t cnt=0;
 8005fe4:	2400      	movs	r4, #0
	/* `#END` */

	    
    for (;;) {
		/* `#START TASK_LOOP_CODE` */
    	if(telemetry){
 8005fe6:	4e11      	ldr	r6, [pc, #68]	; (800602c <tsk_overlay_TaskProc+0x4c>)
 8005fe8:	7833      	ldrb	r3, [r6, #0]
 8005fea:	b19b      	cbz	r3, 8006014 <tsk_overlay_TaskProc+0x34>
			xSemaphoreTake(port->term_block, portMAX_DELAY);
 8005fec:	f04f 31ff 	mov.w	r1, #4294967295
 8005ff0:	68e8      	ldr	r0, [r5, #12]
 8005ff2:	f002 fc19 	bl	8008828 <xQueueSemaphoreTake>
			show_overlay_100ms(pvParameters);
 8005ff6:	4628      	mov	r0, r5
 8005ff8:	f7ff feb6 	bl	8005d68 <show_overlay_100ms>
			if(cnt<3){
 8005ffc:	2c02      	cmp	r4, #2
 8005ffe:	d80c      	bhi.n	800601a <tsk_overlay_TaskProc+0x3a>
				cnt++;
 8006000:	3401      	adds	r4, #1
 8006002:	b2e4      	uxtb	r4, r4
				show_overlay_400ms(pvParameters);
			}



			xSemaphoreGive(port->term_block);
 8006004:	2300      	movs	r3, #0
 8006006:	68e8      	ldr	r0, [r5, #12]
 8006008:	461a      	mov	r2, r3
 800600a:	4619      	mov	r1, r3
 800600c:	f002 fa58 	bl	80084c0 <xQueueGenericSend>

			/* `#END` */
			if(port->term_mode==PORT_TERM_VT100){
 8006010:	78ab      	ldrb	r3, [r5, #2]
 8006012:	b93b      	cbnz	r3, 8006024 <tsk_overlay_TaskProc+0x44>
			}else{
				vTaskDelay(100 / portTICK_PERIOD_MS);
			}
    	}else{

    		vTaskDelay(500 / portTICK_PERIOD_MS);
 8006014:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006018:	e005      	b.n	8006026 <tsk_overlay_TaskProc+0x46>
				show_overlay_400ms(pvParameters);
 800601a:	4628      	mov	r0, r5
 800601c:	f7ff ffa8 	bl	8005f70 <show_overlay_400ms>
				cnt=0;
 8006020:	2400      	movs	r4, #0
 8006022:	e7ef      	b.n	8006004 <tsk_overlay_TaskProc+0x24>
				vTaskDelay(100 / portTICK_PERIOD_MS);
 8006024:	2064      	movs	r0, #100	; 0x64
    		vTaskDelay(500 / portTICK_PERIOD_MS);
 8006026:	f003 f9d3 	bl	80093d0 <vTaskDelay>
 800602a:	e7dd      	b.n	8005fe8 <tsk_overlay_TaskProc+0x8>
 800602c:	200005f0 	.word	0x200005f0

08006030 <tsk_overlay_Start>:
    	}
	}
}


void tsk_overlay_Start(port_str *port) {
 8006030:	b537      	push	{r0, r1, r2, r4, r5, lr}

	/* `#END` */
    //UART_2_Start();


	if (tsk_overlay_initVar != 1) {
 8006032:	4c09      	ldr	r4, [pc, #36]	; (8006058 <tsk_overlay_Start+0x28>)
void tsk_overlay_Start(port_str *port) {
 8006034:	4603      	mov	r3, r0
	if (tsk_overlay_initVar != 1) {
 8006036:	7822      	ldrb	r2, [r4, #0]
 8006038:	2a01      	cmp	r2, #1
 800603a:	d00a      	beq.n	8006052 <tsk_overlay_Start+0x22>

		/*
	 	* Create the task and then leave. When FreeRTOS starts up the scheduler
	 	* will call the task procedure and start execution of the task.
	 	*/
		xTaskCreate(tsk_overlay_TaskProc, "Overlay", STACK_OVERLAY, port, PRIO_OVERLAY, &Overlay_TaskHandle);
 800603c:	2501      	movs	r5, #1
 800603e:	4a07      	ldr	r2, [pc, #28]	; (800605c <tsk_overlay_Start+0x2c>)
 8006040:	9500      	str	r5, [sp, #0]
 8006042:	9201      	str	r2, [sp, #4]
 8006044:	4906      	ldr	r1, [pc, #24]	; (8006060 <tsk_overlay_Start+0x30>)
 8006046:	f44f 7200 	mov.w	r2, #512	; 0x200
 800604a:	4806      	ldr	r0, [pc, #24]	; (8006064 <tsk_overlay_Start+0x34>)
 800604c:	f003 f83d 	bl	80090ca <xTaskCreate>
		tsk_overlay_initVar = 1;
 8006050:	7025      	strb	r5, [r4, #0]


	}

}
 8006052:	b003      	add	sp, #12
 8006054:	bd30      	pop	{r4, r5, pc}
 8006056:	bf00      	nop
 8006058:	200005f1 	.word	0x200005f1
 800605c:	200044d0 	.word	0x200044d0
 8006060:	0800dbc4 	.word	0x0800dbc4
 8006064:	08005fe1 	.word	0x08005fe1

08006068 <tsk_uart_TaskProc>:
/*
 * This is the main procedure that comprises the task.  Place the code required
 * to preform the desired function within the merge regions of the task procedure
 * to add functionality to the task.
 */
void tsk_uart_TaskProc(void *pvParameters) {
 8006068:	b530      	push	{r4, r5, lr}
 800606a:	4604      	mov	r4, r0
	uint8_t rx_dma_circ_buf[CIRC_BUF_SZ];
	uint8_t tx_dma_buf[CIRC_BUF_SZ];
	uint32_t rd_ptr;


	rd_ptr = 0;
 800606c:	2500      	movs	r5, #0
void tsk_uart_TaskProc(void *pvParameters) {
 800606e:	b0a3      	sub	sp, #140	; 0x8c

	HAL_UART_Receive_DMA(port->uart_ptr, rx_dma_circ_buf, CIRC_BUF_SZ);
 8006070:	2240      	movs	r2, #64	; 0x40
 8006072:	a902      	add	r1, sp, #8
 8006074:	6900      	ldr	r0, [r0, #16]
 8006076:	f001 fe65 	bl	8007d44 <HAL_UART_Receive_DMA>
	CLEAR_BIT(port->uart_ptr->Instance->CR3, USART_CR3_EIE);
 800607a:	6923      	ldr	r3, [r4, #16]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	6953      	ldr	r3, [r2, #20]
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	6153      	str	r3, [r2, #20]

	/* `#END` */

	for (;;) {
		/* `#START TASK_LOOP_CODE` */
		if(port->uart_ptr->gState == HAL_UART_STATE_READY){
 8006086:	6923      	ldr	r3, [r4, #16]
 8006088:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800608c:	2b20      	cmp	r3, #32
 800608e:	d10b      	bne.n	80060a8 <tsk_uart_TaskProc+0x40>
			uint8_t len = xStreamBufferReceive(port->tx, tx_dma_buf, CIRC_BUF_SZ, 0);
 8006090:	2240      	movs	r2, #64	; 0x40
 8006092:	2300      	movs	r3, #0
 8006094:	a912      	add	r1, sp, #72	; 0x48
 8006096:	6860      	ldr	r0, [r4, #4]
 8006098:	f002 fe6a 	bl	8008d70 <xStreamBufferReceive>
 800609c:	b2c2      	uxtb	r2, r0
			if (len) {
 800609e:	b11a      	cbz	r2, 80060a8 <tsk_uart_TaskProc+0x40>
				HAL_UART_Transmit_DMA(port->uart_ptr, tx_dma_buf, len);
 80060a0:	a912      	add	r1, sp, #72	; 0x48
 80060a2:	6920      	ldr	r0, [r4, #16]
 80060a4:	f001 fe14 	bl	8007cd0 <HAL_UART_Transmit_DMA>
			}
		}

		while(rd_ptr != DMA_WRITE_PTR) {
 80060a8:	6923      	ldr	r3, [r4, #16]
 80060aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	425b      	negs	r3, r3
 80060b2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80060b6:	42ab      	cmp	r3, r5
 80060b8:	d103      	bne.n	80060c2 <tsk_uart_TaskProc+0x5a>
				rd_ptr++;
				rd_ptr &= (CIRC_BUF_SZ - 1);
			}
		}

		vTaskDelay(pdMS_TO_TICKS(5));
 80060ba:	2005      	movs	r0, #5
 80060bc:	f003 f988 	bl	80093d0 <vTaskDelay>
		if(port->uart_ptr->gState == HAL_UART_STATE_READY){
 80060c0:	e7e1      	b.n	8006086 <tsk_uart_TaskProc+0x1e>
			c = rx_dma_circ_buf[rd_ptr];
 80060c2:	ab22      	add	r3, sp, #136	; 0x88
 80060c4:	442b      	add	r3, r5
 80060c6:	f813 3c80 	ldrb.w	r3, [r3, #-128]
			if(xStreamBufferSend(port->rx, &c, 1, 0)){
 80060ca:	2201      	movs	r2, #1
			c = rx_dma_circ_buf[rd_ptr];
 80060cc:	f88d 3007 	strb.w	r3, [sp, #7]
			if(xStreamBufferSend(port->rx, &c, 1, 0)){
 80060d0:	f10d 0107 	add.w	r1, sp, #7
 80060d4:	2300      	movs	r3, #0
 80060d6:	68a0      	ldr	r0, [r4, #8]
 80060d8:	f002 fdbd 	bl	8008c56 <xStreamBufferSend>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d0e3      	beq.n	80060a8 <tsk_uart_TaskProc+0x40>
				rd_ptr++;
 80060e0:	3501      	adds	r5, #1
				rd_ptr &= (CIRC_BUF_SZ - 1);
 80060e2:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 80060e6:	e7df      	b.n	80060a8 <tsk_uart_TaskProc+0x40>

080060e8 <tsk_uart_Start>:

		/* `#END` */
	}
}
/* ------------------------------------------------------------------------ */
void tsk_uart_Start(port_str *port) {
 80060e8:	b513      	push	{r0, r1, r4, lr}

	/* `#END` */
    //UART_2_Start();


	if (tsk_uart_initVar != 1) {
 80060ea:	4c09      	ldr	r4, [pc, #36]	; (8006110 <tsk_uart_Start+0x28>)
void tsk_uart_Start(port_str *port) {
 80060ec:	4603      	mov	r3, r0
	if (tsk_uart_initVar != 1) {
 80060ee:	7822      	ldrb	r2, [r4, #0]
 80060f0:	2a01      	cmp	r2, #1
 80060f2:	d00b      	beq.n	800610c <tsk_uart_Start+0x24>

		/*
	 	* Create the task and then leave. When FreeRTOS starts up the scheduler
	 	* will call the task procedure and start execution of the task.
	 	*/
		xTaskCreate(tsk_uart_TaskProc, "UART-Svc", STACK_UART, port, PRIO_UART, &tsk_uart_TaskHandle);
 80060f4:	4a07      	ldr	r2, [pc, #28]	; (8006114 <tsk_uart_Start+0x2c>)
 80060f6:	4908      	ldr	r1, [pc, #32]	; (8006118 <tsk_uart_Start+0x30>)
 80060f8:	9201      	str	r2, [sp, #4]
 80060fa:	2203      	movs	r2, #3
 80060fc:	4807      	ldr	r0, [pc, #28]	; (800611c <tsk_uart_Start+0x34>)
 80060fe:	9200      	str	r2, [sp, #0]
 8006100:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006104:	f002 ffe1 	bl	80090ca <xTaskCreate>
		tsk_uart_initVar = 1;
 8006108:	2301      	movs	r3, #1
 800610a:	7023      	strb	r3, [r4, #0]


	}

}
 800610c:	b002      	add	sp, #8
 800610e:	bd10      	pop	{r4, pc}
 8006110:	200005f2 	.word	0x200005f2
 8006114:	200044d8 	.word	0x200044d8
 8006118:	0800dbcc 	.word	0x0800dbcc
 800611c:	08006069 	.word	0x08006069

08006120 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8006120:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8006122:	e003      	b.n	800612c <LoopCopyDataInit>

08006124 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8006124:	4b0b      	ldr	r3, [pc, #44]	; (8006154 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8006126:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8006128:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800612a:	3104      	adds	r1, #4

0800612c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800612c:	480a      	ldr	r0, [pc, #40]	; (8006158 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800612e:	4b0b      	ldr	r3, [pc, #44]	; (800615c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8006130:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8006132:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8006134:	d3f6      	bcc.n	8006124 <CopyDataInit>
  ldr r2, =_sbss
 8006136:	4a0a      	ldr	r2, [pc, #40]	; (8006160 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8006138:	e002      	b.n	8006140 <LoopFillZerobss>

0800613a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800613a:	2300      	movs	r3, #0
  str r3, [r2], #4
 800613c:	f842 3b04 	str.w	r3, [r2], #4

08006140 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8006140:	4b08      	ldr	r3, [pc, #32]	; (8006164 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8006142:	429a      	cmp	r2, r3
  bcc FillZerobss
 8006144:	d3f9      	bcc.n	800613a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006146:	f7fe fa89 	bl	800465c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800614a:	f004 f869 	bl	800a220 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800614e:	f7fd fdf7 	bl	8003d40 <main>
  bx lr
 8006152:	4770      	bx	lr
  ldr r3, =_sidata
 8006154:	0800de58 	.word	0x0800de58
  ldr r0, =_sdata
 8006158:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800615c:	200005ac 	.word	0x200005ac
  ldr r2, =_sbss
 8006160:	200005b0 	.word	0x200005b0
  ldr r3, = _ebss
 8006164:	20004544 	.word	0x20004544

08006168 <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8006168:	e7fe      	b.n	8006168 <CAN1_RX1_IRQHandler>
	...

0800616c <HAL_Init>:
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800616c:	4a07      	ldr	r2, [pc, #28]	; (800618c <HAL_Init+0x20>)
{
 800616e:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006170:	6813      	ldr	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006172:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006174:	f043 0310 	orr.w	r3, r3, #16
 8006178:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800617a:	f000 fa7b 	bl	8006674 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800617e:	2000      	movs	r0, #0
 8006180:	f7fe f9ea 	bl	8004558 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006184:	f7fe f864 	bl	8004250 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006188:	2000      	movs	r0, #0
 800618a:	bd08      	pop	{r3, pc}
 800618c:	40022000 	.word	0x40022000

08006190 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8006190:	4a03      	ldr	r2, [pc, #12]	; (80061a0 <HAL_IncTick+0x10>)
 8006192:	4b04      	ldr	r3, [pc, #16]	; (80061a4 <HAL_IncTick+0x14>)
 8006194:	6811      	ldr	r1, [r2, #0]
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	440b      	add	r3, r1
 800619a:	6013      	str	r3, [r2, #0]
}
 800619c:	4770      	bx	lr
 800619e:	bf00      	nop
 80061a0:	200044dc 	.word	0x200044dc
 80061a4:	200003d0 	.word	0x200003d0

080061a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80061a8:	4b01      	ldr	r3, [pc, #4]	; (80061b0 <HAL_GetTick+0x8>)
 80061aa:	6818      	ldr	r0, [r3, #0]
}
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	200044dc 	.word	0x200044dc

080061b4 <HAL_ADC_ConvCpltCallback>:
 80061b4:	4770      	bx	lr

080061b6 <HAL_ADC_LevelOutOfWindowCallback>:
 80061b6:	4770      	bx	lr

080061b8 <HAL_ADC_IRQHandler>:
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80061b8:	6803      	ldr	r3, [r0, #0]
{
 80061ba:	b510      	push	{r4, lr}
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80061bc:	685a      	ldr	r2, [r3, #4]
{
 80061be:	4604      	mov	r4, r0
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC))
 80061c0:	0690      	lsls	r0, r2, #26
 80061c2:	d527      	bpl.n	8006214 <HAL_ADC_IRQHandler+0x5c>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC) )
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	0791      	lsls	r1, r2, #30
 80061c8:	d524      	bpl.n	8006214 <HAL_ADC_IRQHandler+0x5c>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80061ca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80061cc:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80061ce:	bf5e      	ittt	pl
 80061d0:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 80061d2:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 80061d6:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80061de:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80061e2:	d110      	bne.n	8006206 <HAL_ADC_IRQHandler+0x4e>
 80061e4:	7b22      	ldrb	r2, [r4, #12]
 80061e6:	b972      	cbnz	r2, 8006206 <HAL_ADC_IRQHandler+0x4e>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	f022 0220 	bic.w	r2, r2, #32
 80061ee:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80061f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061f6:	62a3      	str	r3, [r4, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80061f8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80061fa:	04db      	lsls	r3, r3, #19
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80061fc:	bf5e      	ittt	pl
 80061fe:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8006200:	f043 0301 	orrpl.w	r3, r3, #1
 8006204:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8006206:	4620      	mov	r0, r4
 8006208:	f7ff ffd4 	bl	80061b4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800620c:	f06f 0212 	mvn.w	r2, #18
 8006210:	6823      	ldr	r3, [r4, #0]
 8006212:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC))
 8006214:	6823      	ldr	r3, [r4, #0]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	0610      	lsls	r0, r2, #24
 800621a:	d530      	bpl.n	800627e <HAL_ADC_IRQHandler+0xc6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC))
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	0751      	lsls	r1, r2, #29
 8006220:	d52d      	bpl.n	800627e <HAL_ADC_IRQHandler+0xc6>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8006222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006224:	06d2      	lsls	r2, r2, #27
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8006226:	bf5e      	ittt	pl
 8006228:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800622a:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 800622e:	62a2      	strpl	r2, [r4, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 8006236:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 800623a:	d00a      	beq.n	8006252 <HAL_ADC_IRQHandler+0x9a>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 800623c:	685a      	ldr	r2, [r3, #4]
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 800623e:	0550      	lsls	r0, r2, #21
 8006240:	d416      	bmi.n	8006270 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8006242:	689a      	ldr	r2, [r3, #8]
 8006244:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8006248:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800624c:	d110      	bne.n	8006270 <HAL_ADC_IRQHandler+0xb8>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800624e:	7b22      	ldrb	r2, [r4, #12]
 8006250:	b972      	cbnz	r2, 8006270 <HAL_ADC_IRQHandler+0xb8>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006258:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800625a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800625c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006260:	62a3      	str	r3, [r4, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8006262:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006264:	05d9      	lsls	r1, r3, #23
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8006266:	bf5e      	ittt	pl
 8006268:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 800626a:	f043 0301 	orrpl.w	r3, r3, #1
 800626e:	62a3      	strpl	r3, [r4, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8006270:	4620      	mov	r0, r4
 8006272:	f000 f9d1 	bl	8006618 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8006276:	f06f 020c 	mvn.w	r2, #12
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(__HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD))
 800627e:	6823      	ldr	r3, [r4, #0]
 8006280:	685a      	ldr	r2, [r3, #4]
 8006282:	0652      	lsls	r2, r2, #25
 8006284:	d50d      	bpl.n	80062a2 <HAL_ADC_IRQHandler+0xea>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	07db      	lsls	r3, r3, #31
 800628a:	d50a      	bpl.n	80062a2 <HAL_ADC_IRQHandler+0xea>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800628c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800628e:	4620      	mov	r0, r4
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8006290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006294:	62a3      	str	r3, [r4, #40]	; 0x28
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8006296:	f7ff ff8e 	bl	80061b6 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800629a:	f06f 0201 	mvn.w	r2, #1
 800629e:	6823      	ldr	r3, [r4, #0]
 80062a0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80062a2:	bd10      	pop	{r4, pc}

080062a4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 80062a4:	2300      	movs	r3, #0
{ 
 80062a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80062a8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80062aa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80062ae:	2b01      	cmp	r3, #1
 80062b0:	d06d      	beq.n	800638e <HAL_ADC_ConfigChannel+0xea>
 80062b2:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80062b4:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 80062b6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 80062ba:	2d06      	cmp	r5, #6
 80062bc:	6802      	ldr	r2, [r0, #0]
 80062be:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80062c2:	680c      	ldr	r4, [r1, #0]
 80062c4:	d823      	bhi.n	800630e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80062c6:	261f      	movs	r6, #31
 80062c8:	6b55      	ldr	r5, [r2, #52]	; 0x34
 80062ca:	3b05      	subs	r3, #5
 80062cc:	409e      	lsls	r6, r3
 80062ce:	ea25 0506 	bic.w	r5, r5, r6
 80062d2:	fa04 f303 	lsl.w	r3, r4, r3
 80062d6:	432b      	orrs	r3, r5
 80062d8:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80062da:	2c09      	cmp	r4, #9
 80062dc:	688b      	ldr	r3, [r1, #8]
 80062de:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 80062e2:	f04f 0107 	mov.w	r1, #7
 80062e6:	d92a      	bls.n	800633e <HAL_ADC_ConfigChannel+0x9a>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80062e8:	68d6      	ldr	r6, [r2, #12]
 80062ea:	3d1e      	subs	r5, #30
 80062ec:	40a9      	lsls	r1, r5
 80062ee:	ea26 0101 	bic.w	r1, r6, r1
 80062f2:	40ab      	lsls	r3, r5
 80062f4:	430b      	orrs	r3, r1
 80062f6:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80062f8:	f1a4 0310 	sub.w	r3, r4, #16
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d926      	bls.n	800634e <HAL_ADC_ConfigChannel+0xaa>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006300:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006302:	2200      	movs	r2, #0
 8006304:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8006308:	4618      	mov	r0, r3
 800630a:	b002      	add	sp, #8
 800630c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800630e:	2d0c      	cmp	r5, #12
 8006310:	f04f 051f 	mov.w	r5, #31
 8006314:	d809      	bhi.n	800632a <HAL_ADC_ConfigChannel+0x86>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8006316:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8006318:	3b23      	subs	r3, #35	; 0x23
 800631a:	409d      	lsls	r5, r3
 800631c:	ea26 0505 	bic.w	r5, r6, r5
 8006320:	fa04 f303 	lsl.w	r3, r4, r3
 8006324:	432b      	orrs	r3, r5
 8006326:	6313      	str	r3, [r2, #48]	; 0x30
 8006328:	e7d7      	b.n	80062da <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800632a:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 800632c:	3b41      	subs	r3, #65	; 0x41
 800632e:	409d      	lsls	r5, r3
 8006330:	ea26 0505 	bic.w	r5, r6, r5
 8006334:	fa04 f303 	lsl.w	r3, r4, r3
 8006338:	432b      	orrs	r3, r5
 800633a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800633c:	e7cd      	b.n	80062da <HAL_ADC_ConfigChannel+0x36>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800633e:	6916      	ldr	r6, [r2, #16]
 8006340:	40a9      	lsls	r1, r5
 8006342:	ea26 0101 	bic.w	r1, r6, r1
 8006346:	40ab      	lsls	r3, r5
 8006348:	430b      	orrs	r3, r1
 800634a:	6113      	str	r3, [r2, #16]
 800634c:	e7d4      	b.n	80062f8 <HAL_ADC_ConfigChannel+0x54>
    if (hadc->Instance == ADC1)
 800634e:	4b11      	ldr	r3, [pc, #68]	; (8006394 <HAL_ADC_ConfigChannel+0xf0>)
 8006350:	429a      	cmp	r2, r3
 8006352:	d116      	bne.n	8006382 <HAL_ADC_ConfigChannel+0xde>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8006354:	6893      	ldr	r3, [r2, #8]
 8006356:	021b      	lsls	r3, r3, #8
 8006358:	d4d2      	bmi.n	8006300 <HAL_ADC_ConfigChannel+0x5c>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800635a:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800635c:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800635e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006362:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8006364:	d1cc      	bne.n	8006300 <HAL_ADC_ConfigChannel+0x5c>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <HAL_ADC_ConfigChannel+0xf4>)
 8006368:	4a0c      	ldr	r2, [pc, #48]	; (800639c <HAL_ADC_ConfigChannel+0xf8>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	fbb3 f2f2 	udiv	r2, r3, r2
 8006370:	230a      	movs	r3, #10
 8006372:	4353      	muls	r3, r2
            wait_loop_index--;
 8006374:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8006376:	9b01      	ldr	r3, [sp, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d0c1      	beq.n	8006300 <HAL_ADC_ConfigChannel+0x5c>
            wait_loop_index--;
 800637c:	9b01      	ldr	r3, [sp, #4]
 800637e:	3b01      	subs	r3, #1
 8006380:	e7f8      	b.n	8006374 <HAL_ADC_ConfigChannel+0xd0>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006382:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006384:	f043 0320 	orr.w	r3, r3, #32
 8006388:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 800638a:	2301      	movs	r3, #1
 800638c:	e7b9      	b.n	8006302 <HAL_ADC_ConfigChannel+0x5e>
  __HAL_LOCK(hadc);
 800638e:	2302      	movs	r3, #2
 8006390:	e7ba      	b.n	8006308 <HAL_ADC_ConfigChannel+0x64>
 8006392:	bf00      	nop
 8006394:	40012400 	.word	0x40012400
 8006398:	2000033c 	.word	0x2000033c
 800639c:	000f4240 	.word	0x000f4240

080063a0 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 80063a0:	2300      	movs	r3, #0
{
 80063a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 80063a4:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063a6:	6803      	ldr	r3, [r0, #0]
{
 80063a8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80063aa:	689a      	ldr	r2, [r3, #8]
 80063ac:	07d2      	lsls	r2, r2, #31
 80063ae:	d502      	bpl.n	80063b6 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80063b0:	2000      	movs	r0, #0
}
 80063b2:	b002      	add	sp, #8
 80063b4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 80063b6:	689a      	ldr	r2, [r3, #8]
 80063b8:	f042 0201 	orr.w	r2, r2, #1
 80063bc:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80063be:	4b12      	ldr	r3, [pc, #72]	; (8006408 <ADC_Enable+0x68>)
 80063c0:	4a12      	ldr	r2, [pc, #72]	; (800640c <ADC_Enable+0x6c>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 80063c8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	b9c3      	cbnz	r3, 8006400 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 80063ce:	f7ff feeb 	bl	80061a8 <HAL_GetTick>
 80063d2:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80063d4:	6823      	ldr	r3, [r4, #0]
 80063d6:	689d      	ldr	r5, [r3, #8]
 80063d8:	f015 0501 	ands.w	r5, r5, #1
 80063dc:	d1e8      	bne.n	80063b0 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80063de:	f7ff fee3 	bl	80061a8 <HAL_GetTick>
 80063e2:	1b80      	subs	r0, r0, r6
 80063e4:	2802      	cmp	r0, #2
 80063e6:	d9f5      	bls.n	80063d4 <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063e8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 80063ea:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80063ee:	f043 0310 	orr.w	r3, r3, #16
 80063f2:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 80063f6:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80063f8:	f043 0301 	orr.w	r3, r3, #1
 80063fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80063fe:	e7d8      	b.n	80063b2 <ADC_Enable+0x12>
      wait_loop_index--;
 8006400:	9b01      	ldr	r3, [sp, #4]
 8006402:	3b01      	subs	r3, #1
 8006404:	e7e0      	b.n	80063c8 <ADC_Enable+0x28>
 8006406:	bf00      	nop
 8006408:	2000033c 	.word	0x2000033c
 800640c:	000f4240 	.word	0x000f4240

08006410 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8006410:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8006414:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8006416:	2b01      	cmp	r3, #1
{
 8006418:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 800641a:	d054      	beq.n	80064c6 <HAL_ADC_Start+0xb6>
 800641c:	2301      	movs	r3, #1
 800641e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 8006422:	f7ff ffbd 	bl	80063a0 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8006426:	2800      	cmp	r0, #0
 8006428:	d149      	bne.n	80064be <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 800642a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800642c:	4a27      	ldr	r2, [pc, #156]	; (80064cc <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 800642e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006432:	f023 0301 	bic.w	r3, r3, #1
 8006436:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800643a:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800643c:	6823      	ldr	r3, [r4, #0]
 800643e:	4293      	cmp	r3, r2
 8006440:	d104      	bne.n	800644c <HAL_ADC_Start+0x3c>
 8006442:	4923      	ldr	r1, [pc, #140]	; (80064d0 <HAL_ADC_Start+0xc0>)
 8006444:	684a      	ldr	r2, [r1, #4]
 8006446:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800644a:	d12e      	bne.n	80064aa <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800644c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800644e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006452:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8006454:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8006456:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8006458:	bf41      	itttt	mi
 800645a:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 800645c:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8006460:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8006464:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8006466:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006468:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800646c:	bf1c      	itt	ne
 800646e:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 8006470:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8006474:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 8006476:	2200      	movs	r2, #0
 8006478:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800647c:	f06f 0202 	mvn.w	r2, #2
 8006480:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8006488:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800648c:	d113      	bne.n	80064b6 <HAL_ADC_Start+0xa6>
 800648e:	4a0f      	ldr	r2, [pc, #60]	; (80064cc <HAL_ADC_Start+0xbc>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d105      	bne.n	80064a0 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8006494:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8006498:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800649a:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 800649e:	d10a      	bne.n	80064b6 <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80064a0:	689a      	ldr	r2, [r3, #8]
 80064a2:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80064a6:	609a      	str	r2, [r3, #8]
}
 80064a8:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80064aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80064ac:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064b0:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80064b2:	684a      	ldr	r2, [r1, #4]
 80064b4:	e7cf      	b.n	8006456 <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80064b6:	689a      	ldr	r2, [r3, #8]
 80064b8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80064bc:	e7f3      	b.n	80064a6 <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 80064be:	2300      	movs	r3, #0
 80064c0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80064c4:	e7f0      	b.n	80064a8 <HAL_ADC_Start+0x98>
  __HAL_LOCK(hadc);
 80064c6:	2002      	movs	r0, #2
 80064c8:	e7ee      	b.n	80064a8 <HAL_ADC_Start+0x98>
 80064ca:	bf00      	nop
 80064cc:	40012800 	.word	0x40012800
 80064d0:	40012400 	.word	0x40012400

080064d4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80064d4:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80064d6:	6803      	ldr	r3, [r0, #0]
{
 80064d8:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	07d2      	lsls	r2, r2, #31
 80064de:	d401      	bmi.n	80064e4 <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80064e0:	2000      	movs	r0, #0
}
 80064e2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 80064ec:	f7ff fe5c 	bl	80061a8 <HAL_GetTick>
 80064f0:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 80064f2:	6823      	ldr	r3, [r4, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	07db      	lsls	r3, r3, #31
 80064f8:	d5f2      	bpl.n	80064e0 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80064fa:	f7ff fe55 	bl	80061a8 <HAL_GetTick>
 80064fe:	1b40      	subs	r0, r0, r5
 8006500:	2802      	cmp	r0, #2
 8006502:	d9f6      	bls.n	80064f2 <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006504:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006506:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006508:	f043 0310 	orr.w	r3, r3, #16
 800650c:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800650e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006510:	f043 0301 	orr.w	r3, r3, #1
 8006514:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006516:	e7e4      	b.n	80064e2 <ADC_ConversionStop_Disable+0xe>

08006518 <HAL_ADC_Init>:
{
 8006518:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 800651a:	4604      	mov	r4, r0
 800651c:	2800      	cmp	r0, #0
 800651e:	d070      	beq.n	8006602 <HAL_ADC_Init+0xea>
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006520:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8006522:	b923      	cbnz	r3, 800652e <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 8006524:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8006526:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 800652a:	f7fd feb9 	bl	80042a0 <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800652e:	4620      	mov	r0, r4
 8006530:	f7ff ffd0 	bl	80064d4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8006534:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006536:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 800653a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800653c:	d163      	bne.n	8006606 <HAL_ADC_Init+0xee>
 800653e:	2800      	cmp	r0, #0
 8006540:	d161      	bne.n	8006606 <HAL_ADC_Init+0xee>
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006542:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 8006544:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006548:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 800654a:	f023 0302 	bic.w	r3, r3, #2
 800654e:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8006552:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006554:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 8006556:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8006558:	7b23      	ldrb	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800655a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800655e:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8006562:	d037      	beq.n	80065d4 <HAL_ADC_Init+0xbc>
 8006564:	2901      	cmp	r1, #1
 8006566:	bf14      	ite	ne
 8006568:	4606      	movne	r6, r0
 800656a:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800656e:	7d25      	ldrb	r5, [r4, #20]
 8006570:	2d01      	cmp	r5, #1
 8006572:	d106      	bne.n	8006582 <HAL_ADC_Init+0x6a>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8006574:	bb83      	cbnz	r3, 80065d8 <HAL_ADC_Init+0xc0>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8006576:	69a3      	ldr	r3, [r4, #24]
 8006578:	3b01      	subs	r3, #1
 800657a:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 800657e:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 8006582:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8006584:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8006588:	685d      	ldr	r5, [r3, #4]
 800658a:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 800658e:	ea45 0506 	orr.w	r5, r5, r6
 8006592:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8006594:	689e      	ldr	r6, [r3, #8]
 8006596:	4d1e      	ldr	r5, [pc, #120]	; (8006610 <HAL_ADC_Init+0xf8>)
 8006598:	ea05 0506 	and.w	r5, r5, r6
 800659c:	ea45 0502 	orr.w	r5, r5, r2
 80065a0:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80065a2:	d001      	beq.n	80065a8 <HAL_ADC_Init+0x90>
 80065a4:	2901      	cmp	r1, #1
 80065a6:	d120      	bne.n	80065ea <HAL_ADC_Init+0xd2>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80065a8:	6921      	ldr	r1, [r4, #16]
 80065aa:	3901      	subs	r1, #1
 80065ac:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 80065ae:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80065b0:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 80065b4:	4329      	orrs	r1, r5
 80065b6:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80065b8:	6899      	ldr	r1, [r3, #8]
 80065ba:	4b16      	ldr	r3, [pc, #88]	; (8006614 <HAL_ADC_Init+0xfc>)
 80065bc:	400b      	ands	r3, r1
 80065be:	429a      	cmp	r2, r3
 80065c0:	d115      	bne.n	80065ee <HAL_ADC_Init+0xd6>
      ADC_CLEAR_ERRORCODE(hadc);
 80065c2:	2300      	movs	r3, #0
 80065c4:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 80065c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065c8:	f023 0303 	bic.w	r3, r3, #3
 80065cc:	f043 0301 	orr.w	r3, r3, #1
 80065d0:	62a3      	str	r3, [r4, #40]	; 0x28
}
 80065d2:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80065d4:	460e      	mov	r6, r1
 80065d6:	e7ca      	b.n	800656e <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80065d8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065da:	f043 0320 	orr.w	r3, r3, #32
 80065de:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065e0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	62e3      	str	r3, [r4, #44]	; 0x2c
 80065e8:	e7cb      	b.n	8006582 <HAL_ADC_Init+0x6a>
  uint32_t tmp_sqr1 = 0U;
 80065ea:	2100      	movs	r1, #0
 80065ec:	e7df      	b.n	80065ae <HAL_ADC_Init+0x96>
      ADC_STATE_CLR_SET(hadc->State,
 80065ee:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80065f0:	f023 0312 	bic.w	r3, r3, #18
 80065f4:	f043 0310 	orr.w	r3, r3, #16
 80065f8:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80065fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80065fc:	f043 0301 	orr.w	r3, r3, #1
 8006600:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 8006602:	2001      	movs	r0, #1
 8006604:	e7e5      	b.n	80065d2 <HAL_ADC_Init+0xba>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006606:	f043 0310 	orr.w	r3, r3, #16
 800660a:	62a3      	str	r3, [r4, #40]	; 0x28
 800660c:	e7f9      	b.n	8006602 <HAL_ADC_Init+0xea>
 800660e:	bf00      	nop
 8006610:	ffe1f7fd 	.word	0xffe1f7fd
 8006614:	ff1f0efe 	.word	0xff1f0efe

08006618 <HAL_ADCEx_InjectedConvCpltCallback>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8006618:	4770      	bx	lr
	...

0800661c <HAL_ADCEx_MultiModeConfigChannel>:
  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_MODE(multimode->Mode));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800661c:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 8006620:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8006622:	2b01      	cmp	r3, #1
{
 8006624:	4602      	mov	r2, r0
  __HAL_LOCK(hadc);
 8006626:	d01f      	beq.n	8006668 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 8006628:	2301      	movs	r3, #1
  /*  - ADC master and ADC slave DMA configuration                            */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Multimode mode selection                                              */
  /* To optimize code, all multimode settings can be set when both ADCs of    */
  /* the common group are in state: disabled.                                 */
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800662a:	6804      	ldr	r4, [r0, #0]
  __HAL_LOCK(hadc);
 800662c:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 8006630:	68a3      	ldr	r3, [r4, #8]
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d412      	bmi.n	800665c <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8006636:	4b0d      	ldr	r3, [pc, #52]	; (800666c <HAL_ADCEx_MultiModeConfigChannel+0x50>)
 8006638:	689b      	ldr	r3, [r3, #8]
  if ((ADC_IS_ENABLE(hadc) == RESET)                     &&
 800663a:	f013 0301 	ands.w	r3, r3, #1
 800663e:	d10d      	bne.n	800665c <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (ADC_IS_ENABLE(&tmphadcSlave) == RESET)            &&
 8006640:	480b      	ldr	r0, [pc, #44]	; (8006670 <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 8006642:	4284      	cmp	r4, r0
 8006644:	d10a      	bne.n	800665c <HAL_ADCEx_MultiModeConfigChannel+0x40>
      (IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance))   )
  {
    MODIFY_REG(hadc->Instance->CR1,
 8006646:	6860      	ldr	r0, [r4, #4]
 8006648:	6809      	ldr	r1, [r1, #0]
 800664a:	f420 2070 	bic.w	r0, r0, #983040	; 0xf0000
 800664e:	4301      	orrs	r1, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006650:	4618      	mov	r0, r3
    MODIFY_REG(hadc->Instance->CR1,
 8006652:	6061      	str	r1, [r4, #4]
    tmp_hal_status = HAL_ERROR;
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006654:	2300      	movs	r3, #0
 8006656:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
} 
 800665a:	bd10      	pop	{r4, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800665c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    tmp_hal_status = HAL_ERROR;
 800665e:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006660:	f043 0320 	orr.w	r3, r3, #32
 8006664:	6293      	str	r3, [r2, #40]	; 0x28
 8006666:	e7f5      	b.n	8006654 <HAL_ADCEx_MultiModeConfigChannel+0x38>
  __HAL_LOCK(hadc);
 8006668:	2002      	movs	r0, #2
 800666a:	e7f6      	b.n	800665a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 800666c:	40012800 	.word	0x40012800
 8006670:	40012400 	.word	0x40012400

08006674 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006674:	4a07      	ldr	r2, [pc, #28]	; (8006694 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8006676:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006678:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800667a:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800667e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8006682:	041b      	lsls	r3, r3, #16
 8006684:	0c1b      	lsrs	r3, r3, #16
 8006686:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800668a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800668e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8006690:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006692:	4770      	bx	lr
 8006694:	e000ed00 	.word	0xe000ed00

08006698 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006698:	4b17      	ldr	r3, [pc, #92]	; (80066f8 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800669a:	b570      	push	{r4, r5, r6, lr}
 800669c:	68dc      	ldr	r4, [r3, #12]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800669e:	f04f 36ff 	mov.w	r6, #4294967295
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066a2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066a6:	f1c4 0507 	rsb	r5, r4, #7
 80066aa:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ac:	f104 0304 	add.w	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066b0:	bf28      	it	cs
 80066b2:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066b4:	2b06      	cmp	r3, #6
 80066b6:	bf98      	it	ls
 80066b8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066ba:	fa06 f305 	lsl.w	r3, r6, r5
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066be:	bf88      	it	hi
 80066c0:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066c2:	ea21 0303 	bic.w	r3, r1, r3
 80066c6:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80066c8:	fa06 f404 	lsl.w	r4, r6, r4
 80066cc:	ea22 0404 	bic.w	r4, r2, r4
  if ((int32_t)(IRQn) >= 0)
 80066d0:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066d2:	ea43 0304 	orr.w	r3, r3, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066d6:	bfa8      	it	ge
 80066d8:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 80066dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e0:	bfb8      	it	lt
 80066e2:	4a06      	ldrlt	r2, [pc, #24]	; (80066fc <HAL_NVIC_SetPriority+0x64>)
 80066e4:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066e6:	bfab      	itete	ge
 80066e8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066ec:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80066f4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80066f6:	bd70      	pop	{r4, r5, r6, pc}
 80066f8:	e000ed00 	.word	0xe000ed00
 80066fc:	e000ed14 	.word	0xe000ed14

08006700 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006700:	2800      	cmp	r0, #0
 8006702:	db08      	blt.n	8006716 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006704:	2301      	movs	r3, #1
 8006706:	0942      	lsrs	r2, r0, #5
 8006708:	f000 001f 	and.w	r0, r0, #31
 800670c:	fa03 f000 	lsl.w	r0, r3, r0
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <HAL_NVIC_EnableIRQ+0x18>)
 8006712:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006716:	4770      	bx	lr
 8006718:	e000e100 	.word	0xe000e100

0800671c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800671c:	b510      	push	{r4, lr}
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800671e:	b330      	cbz	r0, 800676e <HAL_DMA_Init+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006720:	2214      	movs	r2, #20
 8006722:	6801      	ldr	r1, [r0, #0]
 8006724:	4b13      	ldr	r3, [pc, #76]	; (8006774 <HAL_DMA_Init+0x58>)
 8006726:	440b      	add	r3, r1
 8006728:	fbb3 f3f2 	udiv	r3, r3, r2
 800672c:	009b      	lsls	r3, r3, #2
 800672e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8006730:	4b11      	ldr	r3, [pc, #68]	; (8006778 <HAL_DMA_Init+0x5c>)

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8006732:	680a      	ldr	r2, [r1, #0]
  hdma->DmaBaseAddress = DMA1;
 8006734:	63c3      	str	r3, [r0, #60]	; 0x3c
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8006736:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 800673a:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800673c:	68c4      	ldr	r4, [r0, #12]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800673e:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006742:	4323      	orrs	r3, r4
 8006744:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8006746:	f022 0230 	bic.w	r2, r2, #48	; 0x30
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674a:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800674c:	6944      	ldr	r4, [r0, #20]
 800674e:	4323      	orrs	r3, r4
 8006750:	6984      	ldr	r4, [r0, #24]
 8006752:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8006754:	69c4      	ldr	r4, [r0, #28]
 8006756:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8006758:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800675a:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800675c:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800675e:	2300      	movs	r3, #0
  hdma->State = HAL_DMA_STATE_READY;
 8006760:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006764:	6383      	str	r3, [r0, #56]	; 0x38
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006766:	f880 3020 	strb.w	r3, [r0, #32]

  return HAL_OK;
 800676a:	4618      	mov	r0, r3
}
 800676c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800676e:	2001      	movs	r0, #1
 8006770:	e7fc      	b.n	800676c <HAL_DMA_Init+0x50>
 8006772:	bf00      	nop
 8006774:	bffdfff8 	.word	0xbffdfff8
 8006778:	40020000 	.word	0x40020000

0800677c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800677c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800677e:	f890 4020 	ldrb.w	r4, [r0, #32]
 8006782:	2c01      	cmp	r4, #1
 8006784:	d035      	beq.n	80067f2 <HAL_DMA_Start_IT+0x76>
 8006786:	2401      	movs	r4, #1
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006788:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
  __HAL_LOCK(hdma);
 800678c:	f880 4020 	strb.w	r4, [r0, #32]
  if(HAL_DMA_STATE_READY == hdma->State)
 8006790:	42a5      	cmp	r5, r4
 8006792:	f04f 0600 	mov.w	r6, #0
 8006796:	f04f 0402 	mov.w	r4, #2
 800679a:	d128      	bne.n	80067ee <HAL_DMA_Start_IT+0x72>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800679c:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80067a0:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80067a2:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 80067a4:	6826      	ldr	r6, [r4, #0]
 80067a6:	f026 0601 	bic.w	r6, r6, #1
 80067aa:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80067ac:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 80067b0:	40bd      	lsls	r5, r7
 80067b2:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80067b4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80067b6:	6843      	ldr	r3, [r0, #4]
 80067b8:	6805      	ldr	r5, [r0, #0]
 80067ba:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback)
 80067bc:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80067be:	bf0b      	itete	eq
 80067c0:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80067c2:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 80067c4:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80067c6:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 80067c8:	b14b      	cbz	r3, 80067de <HAL_DMA_Start_IT+0x62>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 80067d0:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067d2:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	f043 0301 	orr.w	r3, r3, #1
 80067da:	602b      	str	r3, [r5, #0]
}
 80067dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80067de:	6823      	ldr	r3, [r4, #0]
 80067e0:	f023 0304 	bic.w	r3, r3, #4
 80067e4:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80067e6:	6823      	ldr	r3, [r4, #0]
 80067e8:	f043 030a 	orr.w	r3, r3, #10
 80067ec:	e7f0      	b.n	80067d0 <HAL_DMA_Start_IT+0x54>
    __HAL_UNLOCK(hdma); 
 80067ee:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 80067f2:	2002      	movs	r0, #2
 80067f4:	e7f2      	b.n	80067dc <HAL_DMA_Start_IT+0x60>
	...

080067f8 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067f8:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
{  
 80067fc:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d003      	beq.n	800680a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006802:	2304      	movs	r3, #4
 8006804:	6383      	str	r3, [r0, #56]	; 0x38
    status = HAL_ERROR;
 8006806:	2001      	movs	r0, #1
}
 8006808:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800680a:	6803      	ldr	r3, [r0, #0]
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	f022 020e 	bic.w	r2, r2, #14
 8006812:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8006814:	681a      	ldr	r2, [r3, #0]
 8006816:	f022 0201 	bic.w	r2, r2, #1
 800681a:	601a      	str	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800681c:	4a18      	ldr	r2, [pc, #96]	; (8006880 <HAL_DMA_Abort_IT+0x88>)
 800681e:	4293      	cmp	r3, r2
 8006820:	d01f      	beq.n	8006862 <HAL_DMA_Abort_IT+0x6a>
 8006822:	3214      	adds	r2, #20
 8006824:	4293      	cmp	r3, r2
 8006826:	d01e      	beq.n	8006866 <HAL_DMA_Abort_IT+0x6e>
 8006828:	3214      	adds	r2, #20
 800682a:	4293      	cmp	r3, r2
 800682c:	d01d      	beq.n	800686a <HAL_DMA_Abort_IT+0x72>
 800682e:	3214      	adds	r2, #20
 8006830:	4293      	cmp	r3, r2
 8006832:	d01d      	beq.n	8006870 <HAL_DMA_Abort_IT+0x78>
 8006834:	3214      	adds	r2, #20
 8006836:	4293      	cmp	r3, r2
 8006838:	d01d      	beq.n	8006876 <HAL_DMA_Abort_IT+0x7e>
 800683a:	3214      	adds	r2, #20
 800683c:	4293      	cmp	r3, r2
 800683e:	bf0c      	ite	eq
 8006840:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 8006844:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 8006848:	4a0e      	ldr	r2, [pc, #56]	; (8006884 <HAL_DMA_Abort_IT+0x8c>)
    __HAL_UNLOCK(hdma);
 800684a:	2400      	movs	r4, #0
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800684c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800684e:	2301      	movs	r3, #1
 8006850:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    if(hdma->XferAbortCallback != NULL)
 8006854:	6b43      	ldr	r3, [r0, #52]	; 0x34
    __HAL_UNLOCK(hdma);
 8006856:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 800685a:	b17b      	cbz	r3, 800687c <HAL_DMA_Abort_IT+0x84>
      hdma->XferAbortCallback(hdma);
 800685c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800685e:	4620      	mov	r0, r4
 8006860:	e7d2      	b.n	8006808 <HAL_DMA_Abort_IT+0x10>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8006862:	2301      	movs	r3, #1
 8006864:	e7f0      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006866:	2310      	movs	r3, #16
 8006868:	e7ee      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 800686a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800686e:	e7eb      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006870:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006874:	e7e8      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
 8006876:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800687a:	e7e5      	b.n	8006848 <HAL_DMA_Abort_IT+0x50>
  HAL_StatusTypeDef status = HAL_OK;
 800687c:	4618      	mov	r0, r3
 800687e:	e7c3      	b.n	8006808 <HAL_DMA_Abort_IT+0x10>
 8006880:	40020008 	.word	0x40020008
 8006884:	40020000 	.word	0x40020000

08006888 <HAL_DMA_IRQHandler>:
{
 8006888:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800688a:	2504      	movs	r5, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800688c:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800688e:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006890:	6834      	ldr	r4, [r6, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8006892:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8006894:	4095      	lsls	r5, r2
 8006896:	4225      	tst	r5, r4
  uint32_t source_it = hdma->Instance->CCR;
 8006898:	6819      	ldr	r1, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800689a:	d032      	beq.n	8006902 <HAL_DMA_IRQHandler+0x7a>
 800689c:	074d      	lsls	r5, r1, #29
 800689e:	d530      	bpl.n	8006902 <HAL_DMA_IRQHandler+0x7a>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80068a0:	681a      	ldr	r2, [r3, #0]
 80068a2:	0696      	lsls	r6, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80068a4:	bf5e      	ittt	pl
 80068a6:	681a      	ldrpl	r2, [r3, #0]
 80068a8:	f022 0204 	bicpl.w	r2, r2, #4
 80068ac:	601a      	strpl	r2, [r3, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80068ae:	4a3e      	ldr	r2, [pc, #248]	; (80069a8 <HAL_DMA_IRQHandler+0x120>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d019      	beq.n	80068e8 <HAL_DMA_IRQHandler+0x60>
 80068b4:	3214      	adds	r2, #20
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d018      	beq.n	80068ec <HAL_DMA_IRQHandler+0x64>
 80068ba:	3214      	adds	r2, #20
 80068bc:	4293      	cmp	r3, r2
 80068be:	d017      	beq.n	80068f0 <HAL_DMA_IRQHandler+0x68>
 80068c0:	3214      	adds	r2, #20
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d017      	beq.n	80068f6 <HAL_DMA_IRQHandler+0x6e>
 80068c6:	3214      	adds	r2, #20
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d017      	beq.n	80068fc <HAL_DMA_IRQHandler+0x74>
 80068cc:	3214      	adds	r2, #20
 80068ce:	4293      	cmp	r3, r2
 80068d0:	bf0c      	ite	eq
 80068d2:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 80068d6:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 80068da:	4a34      	ldr	r2, [pc, #208]	; (80069ac <HAL_DMA_IRQHandler+0x124>)
 80068dc:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 80068de:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d05e      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x11a>
}
 80068e4:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 80068e6:	4718      	bx	r3
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80068e8:	2304      	movs	r3, #4
 80068ea:	e7f6      	b.n	80068da <HAL_DMA_IRQHandler+0x52>
 80068ec:	2340      	movs	r3, #64	; 0x40
 80068ee:	e7f4      	b.n	80068da <HAL_DMA_IRQHandler+0x52>
 80068f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80068f4:	e7f1      	b.n	80068da <HAL_DMA_IRQHandler+0x52>
 80068f6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80068fa:	e7ee      	b.n	80068da <HAL_DMA_IRQHandler+0x52>
 80068fc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006900:	e7eb      	b.n	80068da <HAL_DMA_IRQHandler+0x52>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8006902:	2502      	movs	r5, #2
 8006904:	4095      	lsls	r5, r2
 8006906:	4225      	tst	r5, r4
 8006908:	d035      	beq.n	8006976 <HAL_DMA_IRQHandler+0xee>
 800690a:	078d      	lsls	r5, r1, #30
 800690c:	d533      	bpl.n	8006976 <HAL_DMA_IRQHandler+0xee>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800690e:	681a      	ldr	r2, [r3, #0]
 8006910:	0694      	lsls	r4, r2, #26
 8006912:	d406      	bmi.n	8006922 <HAL_DMA_IRQHandler+0x9a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f022 020a 	bic.w	r2, r2, #10
 800691a:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800691c:	2201      	movs	r2, #1
 800691e:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8006922:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <HAL_DMA_IRQHandler+0x120>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d019      	beq.n	800695c <HAL_DMA_IRQHandler+0xd4>
 8006928:	3214      	adds	r2, #20
 800692a:	4293      	cmp	r3, r2
 800692c:	d018      	beq.n	8006960 <HAL_DMA_IRQHandler+0xd8>
 800692e:	3214      	adds	r2, #20
 8006930:	4293      	cmp	r3, r2
 8006932:	d017      	beq.n	8006964 <HAL_DMA_IRQHandler+0xdc>
 8006934:	3214      	adds	r2, #20
 8006936:	4293      	cmp	r3, r2
 8006938:	d017      	beq.n	800696a <HAL_DMA_IRQHandler+0xe2>
 800693a:	3214      	adds	r2, #20
 800693c:	4293      	cmp	r3, r2
 800693e:	d017      	beq.n	8006970 <HAL_DMA_IRQHandler+0xe8>
 8006940:	3214      	adds	r2, #20
 8006942:	4293      	cmp	r3, r2
 8006944:	bf0c      	ite	eq
 8006946:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 800694a:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 800694e:	4a17      	ldr	r2, [pc, #92]	; (80069ac <HAL_DMA_IRQHandler+0x124>)
 8006950:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 8006952:	2300      	movs	r3, #0
 8006954:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8006958:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800695a:	e7c1      	b.n	80068e0 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800695c:	2302      	movs	r3, #2
 800695e:	e7f6      	b.n	800694e <HAL_DMA_IRQHandler+0xc6>
 8006960:	2320      	movs	r3, #32
 8006962:	e7f4      	b.n	800694e <HAL_DMA_IRQHandler+0xc6>
 8006964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006968:	e7f1      	b.n	800694e <HAL_DMA_IRQHandler+0xc6>
 800696a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800696e:	e7ee      	b.n	800694e <HAL_DMA_IRQHandler+0xc6>
 8006970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006974:	e7eb      	b.n	800694e <HAL_DMA_IRQHandler+0xc6>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8006976:	2508      	movs	r5, #8
 8006978:	4095      	lsls	r5, r2
 800697a:	4225      	tst	r5, r4
 800697c:	d011      	beq.n	80069a2 <HAL_DMA_IRQHandler+0x11a>
 800697e:	0709      	lsls	r1, r1, #28
 8006980:	d50f      	bpl.n	80069a2 <HAL_DMA_IRQHandler+0x11a>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006982:	6819      	ldr	r1, [r3, #0]
 8006984:	f021 010e 	bic.w	r1, r1, #14
 8006988:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800698a:	2301      	movs	r3, #1
 800698c:	fa03 f202 	lsl.w	r2, r3, r2
 8006990:	6072      	str	r2, [r6, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006992:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8006994:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8006998:	2300      	movs	r3, #0
 800699a:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800699e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069a0:	e79e      	b.n	80068e0 <HAL_DMA_IRQHandler+0x58>
}
 80069a2:	bc70      	pop	{r4, r5, r6}
 80069a4:	4770      	bx	lr
 80069a6:	bf00      	nop
 80069a8:	40020008 	.word	0x40020008
 80069ac:	40020000 	.word	0x40020000

080069b0 <FLASH_SetErrorCode>:
  uint32_t flags = 0U;
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80069b0:	4a11      	ldr	r2, [pc, #68]	; (80069f8 <FLASH_SetErrorCode+0x48>)
 80069b2:	68d3      	ldr	r3, [r2, #12]
 80069b4:	f013 0310 	ands.w	r3, r3, #16
 80069b8:	d005      	beq.n	80069c6 <FLASH_SetErrorCode+0x16>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80069ba:	4910      	ldr	r1, [pc, #64]	; (80069fc <FLASH_SetErrorCode+0x4c>)
 80069bc:	69cb      	ldr	r3, [r1, #28]
 80069be:	f043 0302 	orr.w	r3, r3, #2
 80069c2:	61cb      	str	r3, [r1, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 80069c4:	2310      	movs	r3, #16
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80069c6:	68d2      	ldr	r2, [r2, #12]
 80069c8:	0750      	lsls	r0, r2, #29
 80069ca:	d506      	bpl.n	80069da <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80069cc:	490b      	ldr	r1, [pc, #44]	; (80069fc <FLASH_SetErrorCode+0x4c>)
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 80069ce:	f043 0304 	orr.w	r3, r3, #4
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80069d2:	69ca      	ldr	r2, [r1, #28]
 80069d4:	f042 0201 	orr.w	r2, r2, #1
 80069d8:	61ca      	str	r2, [r1, #28]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80069da:	4a07      	ldr	r2, [pc, #28]	; (80069f8 <FLASH_SetErrorCode+0x48>)
 80069dc:	69d1      	ldr	r1, [r2, #28]
 80069de:	07c9      	lsls	r1, r1, #31
 80069e0:	d508      	bpl.n	80069f4 <FLASH_SetErrorCode+0x44>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80069e2:	4806      	ldr	r0, [pc, #24]	; (80069fc <FLASH_SetErrorCode+0x4c>)
 80069e4:	69c1      	ldr	r1, [r0, #28]
 80069e6:	f041 0104 	orr.w	r1, r1, #4
 80069ea:	61c1      	str	r1, [r0, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 80069ec:	69d1      	ldr	r1, [r2, #28]
 80069ee:	f021 0101 	bic.w	r1, r1, #1
 80069f2:	61d1      	str	r1, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80069f4:	60d3      	str	r3, [r2, #12]
}  
 80069f6:	4770      	bx	lr
 80069f8:	40022000 	.word	0x40022000
 80069fc:	200044e0 	.word	0x200044e0

08006a00 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006a00:	4b06      	ldr	r3, [pc, #24]	; (8006a1c <HAL_FLASH_Unlock+0x1c>)
 8006a02:	6918      	ldr	r0, [r3, #16]
 8006a04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a08:	d007      	beq.n	8006a1a <HAL_FLASH_Unlock+0x1a>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006a0a:	4a05      	ldr	r2, [pc, #20]	; (8006a20 <HAL_FLASH_Unlock+0x20>)
 8006a0c:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006a0e:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8006a12:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006a14:	6918      	ldr	r0, [r3, #16]
  HAL_StatusTypeDef status = HAL_OK;
 8006a16:	f3c0 10c0 	ubfx	r0, r0, #7, #1
}
 8006a1a:	4770      	bx	lr
 8006a1c:	40022000 	.word	0x40022000
 8006a20:	45670123 	.word	0x45670123

08006a24 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006a24:	4a03      	ldr	r2, [pc, #12]	; (8006a34 <HAL_FLASH_Lock+0x10>)
}
 8006a26:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8006a28:	6913      	ldr	r3, [r2, #16]
 8006a2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2e:	6113      	str	r3, [r2, #16]
}
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	40022000 	.word	0x40022000

08006a38 <FLASH_WaitForLastOperation>:
{
 8006a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a3a:	4606      	mov	r6, r0
  uint32_t tickstart = HAL_GetTick();
 8006a3c:	f7ff fbb4 	bl	80061a8 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006a40:	4c11      	ldr	r4, [pc, #68]	; (8006a88 <FLASH_WaitForLastOperation+0x50>)
  uint32_t tickstart = HAL_GetTick();
 8006a42:	4607      	mov	r7, r0
 8006a44:	4625      	mov	r5, r4
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006a46:	68e3      	ldr	r3, [r4, #12]
 8006a48:	07d8      	lsls	r0, r3, #31
 8006a4a:	d412      	bmi.n	8006a72 <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8006a4c:	68e3      	ldr	r3, [r4, #12]
 8006a4e:	0699      	lsls	r1, r3, #26
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006a50:	bf44      	itt	mi
 8006a52:	2320      	movmi	r3, #32
 8006a54:	60e3      	strmi	r3, [r4, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006a56:	68eb      	ldr	r3, [r5, #12]
 8006a58:	06da      	lsls	r2, r3, #27
 8006a5a:	d406      	bmi.n	8006a6a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006a5c:	69eb      	ldr	r3, [r5, #28]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8006a5e:	07db      	lsls	r3, r3, #31
 8006a60:	d403      	bmi.n	8006a6a <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8006a62:	68e8      	ldr	r0, [r5, #12]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8006a64:	f010 0004 	ands.w	r0, r0, #4
 8006a68:	d007      	beq.n	8006a7a <FLASH_WaitForLastOperation+0x42>
    FLASH_SetErrorCode();
 8006a6a:	f7ff ffa1 	bl	80069b0 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006a6e:	2001      	movs	r0, #1
 8006a70:	e003      	b.n	8006a7a <FLASH_WaitForLastOperation+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8006a72:	1c73      	adds	r3, r6, #1
 8006a74:	d0e7      	beq.n	8006a46 <FLASH_WaitForLastOperation+0xe>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a76:	b90e      	cbnz	r6, 8006a7c <FLASH_WaitForLastOperation+0x44>
        return HAL_TIMEOUT;
 8006a78:	2003      	movs	r0, #3
}
 8006a7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006a7c:	f7ff fb94 	bl	80061a8 <HAL_GetTick>
 8006a80:	1bc0      	subs	r0, r0, r7
 8006a82:	42b0      	cmp	r0, r6
 8006a84:	d9df      	bls.n	8006a46 <FLASH_WaitForLastOperation+0xe>
 8006a86:	e7f7      	b.n	8006a78 <FLASH_WaitForLastOperation+0x40>
 8006a88:	40022000 	.word	0x40022000

08006a8c <HAL_FLASH_Program>:
{
 8006a8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  __HAL_LOCK(&pFlash);
 8006a90:	4c24      	ldr	r4, [pc, #144]	; (8006b24 <HAL_FLASH_Program+0x98>)
{
 8006a92:	461e      	mov	r6, r3
  __HAL_LOCK(&pFlash);
 8006a94:	7e23      	ldrb	r3, [r4, #24]
{
 8006a96:	4605      	mov	r5, r0
  __HAL_LOCK(&pFlash);
 8006a98:	2b01      	cmp	r3, #1
{
 8006a9a:	460f      	mov	r7, r1
 8006a9c:	4690      	mov	r8, r2
  __HAL_LOCK(&pFlash);
 8006a9e:	d03f      	beq.n	8006b20 <HAL_FLASH_Program+0x94>
 8006aa0:	2301      	movs	r3, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006aa2:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8006aa6:	7623      	strb	r3, [r4, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006aa8:	f7ff ffc6 	bl	8006a38 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8006aac:	bba0      	cbnz	r0, 8006b18 <HAL_FLASH_Program+0x8c>
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006aae:	2d01      	cmp	r5, #1
 8006ab0:	d003      	beq.n	8006aba <HAL_FLASH_Program+0x2e>
      nbiterations = 4U;
 8006ab2:	2d02      	cmp	r5, #2
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2502      	moveq	r5, #2
 8006ab8:	2504      	movne	r5, #4
 8006aba:	f04f 0900 	mov.w	r9, #0
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006abe:	46cb      	mov	fp, r9
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006ac0:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006b28 <HAL_FLASH_Program+0x9c>
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006ac4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8006ac8:	f1c3 0120 	rsb	r1, r3, #32
 8006acc:	f1a3 0220 	sub.w	r2, r3, #32
 8006ad0:	fa06 f101 	lsl.w	r1, r6, r1
 8006ad4:	fa28 f303 	lsr.w	r3, r8, r3
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ad8:	f8c4 b01c 	str.w	fp, [r4, #28]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006adc:	430b      	orrs	r3, r1
 8006ade:	fa26 f202 	lsr.w	r2, r6, r2
 8006ae2:	4313      	orrs	r3, r2
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006ae4:	f8da 2010 	ldr.w	r2, [sl, #16]
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8006ae8:	b29b      	uxth	r3, r3
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8006aea:	f042 0201 	orr.w	r2, r2, #1
 8006aee:	f8ca 2010 	str.w	r2, [sl, #16]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006af2:	f24c 3050 	movw	r0, #50000	; 0xc350
  *(__IO uint16_t*)Address = Data;
 8006af6:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006afa:	f7ff ff9d 	bl	8006a38 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8006afe:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b02:	f023 0301 	bic.w	r3, r3, #1
 8006b06:	f8ca 3010 	str.w	r3, [sl, #16]
      if (status != HAL_OK)
 8006b0a:	b928      	cbnz	r0, 8006b18 <HAL_FLASH_Program+0x8c>
 8006b0c:	f109 0901 	add.w	r9, r9, #1
    for (index = 0U; index < nbiterations; index++)
 8006b10:	fa5f f389 	uxtb.w	r3, r9
 8006b14:	429d      	cmp	r5, r3
 8006b16:	d8d5      	bhi.n	8006ac4 <HAL_FLASH_Program+0x38>
  __HAL_UNLOCK(&pFlash);
 8006b18:	2300      	movs	r3, #0
 8006b1a:	7623      	strb	r3, [r4, #24]
}
 8006b1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  __HAL_LOCK(&pFlash);
 8006b20:	2002      	movs	r0, #2
 8006b22:	e7fb      	b.n	8006b1c <HAL_FLASH_Program+0x90>
 8006b24:	200044e0 	.word	0x200044e0
 8006b28:	40022000 	.word	0x40022000

08006b2c <FLASH_MassErase.isra.0>:
{
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <FLASH_MassErase.isra.0+0x1c>)
 8006b30:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8006b32:	4b06      	ldr	r3, [pc, #24]	; (8006b4c <FLASH_MassErase.isra.0+0x20>)
 8006b34:	691a      	ldr	r2, [r3, #16]
 8006b36:	f042 0204 	orr.w	r2, r2, #4
 8006b3a:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b3c:	691a      	ldr	r2, [r3, #16]
 8006b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b42:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	200044e0 	.word	0x200044e0
 8006b4c:	40022000 	.word	0x40022000

08006b50 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006b50:	2200      	movs	r2, #0
 8006b52:	4b06      	ldr	r3, [pc, #24]	; (8006b6c <FLASH_PageErase+0x1c>)
 8006b54:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8006b56:	4b06      	ldr	r3, [pc, #24]	; (8006b70 <FLASH_PageErase+0x20>)
 8006b58:	691a      	ldr	r2, [r3, #16]
 8006b5a:	f042 0202 	orr.w	r2, r2, #2
 8006b5e:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8006b60:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8006b62:	691a      	ldr	r2, [r3, #16]
 8006b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b68:	611a      	str	r2, [r3, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8006b6a:	4770      	bx	lr
 8006b6c:	200044e0 	.word	0x200044e0
 8006b70:	40022000 	.word	0x40022000

08006b74 <HAL_FLASHEx_Erase>:
{
 8006b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(&pFlash);
 8006b78:	4d22      	ldr	r5, [pc, #136]	; (8006c04 <HAL_FLASHEx_Erase+0x90>)
{
 8006b7a:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8006b7c:	7e2b      	ldrb	r3, [r5, #24]
{
 8006b7e:	4688      	mov	r8, r1
  __HAL_LOCK(&pFlash);
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d03d      	beq.n	8006c00 <HAL_FLASHEx_Erase+0x8c>
 8006b84:	2401      	movs	r4, #1
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b86:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(&pFlash);
 8006b88:	762c      	strb	r4, [r5, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b8a:	2b02      	cmp	r3, #2
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006b8c:	f24c 3050 	movw	r0, #50000	; 0xc350
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006b90:	d113      	bne.n	8006bba <HAL_FLASHEx_Erase+0x46>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006b92:	f7ff ff51 	bl	8006a38 <FLASH_WaitForLastOperation>
 8006b96:	b120      	cbz	r0, 8006ba2 <HAL_FLASHEx_Erase+0x2e>
  HAL_StatusTypeDef status = HAL_ERROR;
 8006b98:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	762b      	strb	r3, [r5, #24]
}
 8006b9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        FLASH_MassErase(FLASH_BANK_1);
 8006ba2:	f7ff ffc3 	bl	8006b2c <FLASH_MassErase.isra.0>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ba6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006baa:	f7ff ff45 	bl	8006a38 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8006bae:	4a16      	ldr	r2, [pc, #88]	; (8006c08 <HAL_FLASHEx_Erase+0x94>)
 8006bb0:	6913      	ldr	r3, [r2, #16]
 8006bb2:	f023 0304 	bic.w	r3, r3, #4
 8006bb6:	6113      	str	r3, [r2, #16]
 8006bb8:	e7ef      	b.n	8006b9a <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8006bba:	f7ff ff3d 	bl	8006a38 <FLASH_WaitForLastOperation>
 8006bbe:	2800      	cmp	r0, #0
 8006bc0:	d1ea      	bne.n	8006b98 <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8006bc2:	f04f 33ff 	mov.w	r3, #4294967295
 8006bc6:	f8c8 3000 	str.w	r3, [r8]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006bca:	4620      	mov	r0, r4
        for(address = pEraseInit->PageAddress;
 8006bcc:	68be      	ldr	r6, [r7, #8]
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006bce:	4c0e      	ldr	r4, [pc, #56]	; (8006c08 <HAL_FLASHEx_Erase+0x94>)
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 8006bd0:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 8006bd4:	eb03 2382 	add.w	r3, r3, r2, lsl #10
        for(address = pEraseInit->PageAddress;
 8006bd8:	42b3      	cmp	r3, r6
 8006bda:	d9de      	bls.n	8006b9a <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8006bdc:	4630      	mov	r0, r6
 8006bde:	f7ff ffb7 	bl	8006b50 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006be2:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006be6:	f7ff ff27 	bl	8006a38 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8006bea:	6923      	ldr	r3, [r4, #16]
 8006bec:	f023 0302 	bic.w	r3, r3, #2
 8006bf0:	6123      	str	r3, [r4, #16]
          if (status != HAL_OK)
 8006bf2:	b110      	cbz	r0, 8006bfa <HAL_FLASHEx_Erase+0x86>
            *PageError = address;
 8006bf4:	f8c8 6000 	str.w	r6, [r8]
            break;
 8006bf8:	e7cf      	b.n	8006b9a <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8006bfa:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006bfe:	e7e7      	b.n	8006bd0 <HAL_FLASHEx_Erase+0x5c>
  __HAL_LOCK(&pFlash);
 8006c00:	2002      	movs	r0, #2
 8006c02:	e7cc      	b.n	8006b9e <HAL_FLASHEx_Erase+0x2a>
 8006c04:	200044e0 	.word	0x200044e0
 8006c08:	40022000 	.word	0x40022000

08006c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c0c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8006c10:	2400      	movs	r4, #0
  uint32_t position = 0x00u;
 8006c12:	4626      	mov	r6, r4
 8006c14:	4b65      	ldr	r3, [pc, #404]	; (8006dac <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8006c16:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8006dbc <HAL_GPIO_Init+0x1b0>
 8006c1a:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006dc0 <HAL_GPIO_Init+0x1b4>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006c1e:	680a      	ldr	r2, [r1, #0]
 8006c20:	fa32 f506 	lsrs.w	r5, r2, r6
 8006c24:	d102      	bne.n	8006c2c <HAL_GPIO_Init+0x20>
      }
    }

	position++;
  }
}
 8006c26:	b003      	add	sp, #12
 8006c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ioposition = (0x01uL << position);
 8006c2c:	f04f 0801 	mov.w	r8, #1
 8006c30:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c34:	ea02 0208 	and.w	r2, r2, r8
    if (iocurrent == ioposition)
 8006c38:	4590      	cmp	r8, r2
 8006c3a:	d17e      	bne.n	8006d3a <HAL_GPIO_Init+0x12e>
      switch (GPIO_Init->Mode)
 8006c3c:	684d      	ldr	r5, [r1, #4]
 8006c3e:	2d12      	cmp	r5, #18
 8006c40:	f000 80a9 	beq.w	8006d96 <HAL_GPIO_Init+0x18a>
 8006c44:	f200 8082 	bhi.w	8006d4c <HAL_GPIO_Init+0x140>
 8006c48:	2d02      	cmp	r5, #2
 8006c4a:	f000 80a1 	beq.w	8006d90 <HAL_GPIO_Init+0x184>
 8006c4e:	d876      	bhi.n	8006d3e <HAL_GPIO_Init+0x132>
 8006c50:	2d00      	cmp	r5, #0
 8006c52:	f000 8088 	beq.w	8006d66 <HAL_GPIO_Init+0x15a>
 8006c56:	2d01      	cmp	r5, #1
 8006c58:	f000 8098 	beq.w	8006d8c <HAL_GPIO_Init+0x180>
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c5c:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c60:	2aff      	cmp	r2, #255	; 0xff
 8006c62:	bf93      	iteet	ls
 8006c64:	4682      	movls	sl, r0
 8006c66:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8006c6a:	3d08      	subhi	r5, #8
 8006c6c:	f8d0 b000 	ldrls.w	fp, [r0]
 8006c70:	bf92      	itee	ls
 8006c72:	00b5      	lslls	r5, r6, #2
 8006c74:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006c78:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c7a:	fa09 f805 	lsl.w	r8, r9, r5
 8006c7e:	ea2b 0808 	bic.w	r8, fp, r8
 8006c82:	fa04 f505 	lsl.w	r5, r4, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8006c86:	bf88      	it	hi
 8006c88:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8006c8c:	ea48 0505 	orr.w	r5, r8, r5
 8006c90:	f8ca 5000 	str.w	r5, [sl]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006c94:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006c98:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8006c9c:	d04d      	beq.n	8006d3a <HAL_GPIO_Init+0x12e>
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006c9e:	4f44      	ldr	r7, [pc, #272]	; (8006db0 <HAL_GPIO_Init+0x1a4>)
 8006ca0:	f026 0803 	bic.w	r8, r6, #3
 8006ca4:	69bd      	ldr	r5, [r7, #24]
 8006ca6:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006caa:	f045 0501 	orr.w	r5, r5, #1
 8006cae:	61bd      	str	r5, [r7, #24]
 8006cb0:	69bd      	ldr	r5, [r7, #24]
 8006cb2:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8006cb6:	f005 0501 	and.w	r5, r5, #1
 8006cba:	9501      	str	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006cbc:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8006cc0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006cc2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2u];
 8006cc6:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8006cca:	fa09 f90b 	lsl.w	r9, r9, fp
 8006cce:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006cd2:	4d38      	ldr	r5, [pc, #224]	; (8006db4 <HAL_GPIO_Init+0x1a8>)
 8006cd4:	42a8      	cmp	r0, r5
 8006cd6:	d063      	beq.n	8006da0 <HAL_GPIO_Init+0x194>
 8006cd8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006cdc:	42a8      	cmp	r0, r5
 8006cde:	d061      	beq.n	8006da4 <HAL_GPIO_Init+0x198>
 8006ce0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006ce4:	42a8      	cmp	r0, r5
 8006ce6:	d05f      	beq.n	8006da8 <HAL_GPIO_Init+0x19c>
 8006ce8:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006cec:	42a8      	cmp	r0, r5
 8006cee:	bf0c      	ite	eq
 8006cf0:	2503      	moveq	r5, #3
 8006cf2:	2504      	movne	r5, #4
 8006cf4:	fa05 f50b 	lsl.w	r5, r5, fp
 8006cf8:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2u] = temp;
 8006cfc:	f8c8 5008 	str.w	r5, [r8, #8]
          SET_BIT(EXTI->IMR, iocurrent);
 8006d00:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006d02:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8006d06:	bf14      	ite	ne
 8006d08:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8006d0a:	4395      	biceq	r5, r2
 8006d0c:	601d      	str	r5, [r3, #0]
          SET_BIT(EXTI->EMR, iocurrent);
 8006d0e:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006d10:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 8006d14:	bf14      	ite	ne
 8006d16:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8006d18:	4395      	biceq	r5, r2
 8006d1a:	605d      	str	r5, [r3, #4]
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d1c:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006d1e:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 8006d22:	bf14      	ite	ne
 8006d24:	4315      	orrne	r5, r2
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8006d26:	4395      	biceq	r5, r2
 8006d28:	609d      	str	r5, [r3, #8]
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d2a:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006d2c:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 8006d30:	bf14      	ite	ne
 8006d32:	432a      	orrne	r2, r5
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8006d34:	ea25 0202 	biceq.w	r2, r5, r2
 8006d38:	60da      	str	r2, [r3, #12]
	position++;
 8006d3a:	3601      	adds	r6, #1
 8006d3c:	e76f      	b.n	8006c1e <HAL_GPIO_Init+0x12>
      switch (GPIO_Init->Mode)
 8006d3e:	2d03      	cmp	r5, #3
 8006d40:	d022      	beq.n	8006d88 <HAL_GPIO_Init+0x17c>
 8006d42:	2d11      	cmp	r5, #17
 8006d44:	d18a      	bne.n	8006c5c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8006d46:	68cc      	ldr	r4, [r1, #12]
 8006d48:	3404      	adds	r4, #4
          break;
 8006d4a:	e787      	b.n	8006c5c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8006d4c:	4f1a      	ldr	r7, [pc, #104]	; (8006db8 <HAL_GPIO_Init+0x1ac>)
 8006d4e:	42bd      	cmp	r5, r7
 8006d50:	d009      	beq.n	8006d66 <HAL_GPIO_Init+0x15a>
 8006d52:	d812      	bhi.n	8006d7a <HAL_GPIO_Init+0x16e>
 8006d54:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006dc4 <HAL_GPIO_Init+0x1b8>
 8006d58:	454d      	cmp	r5, r9
 8006d5a:	d004      	beq.n	8006d66 <HAL_GPIO_Init+0x15a>
 8006d5c:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8006d60:	454d      	cmp	r5, r9
 8006d62:	f47f af7b 	bne.w	8006c5c <HAL_GPIO_Init+0x50>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8006d66:	688c      	ldr	r4, [r1, #8]
 8006d68:	b1c4      	cbz	r4, 8006d9c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8006d6a:	2c01      	cmp	r4, #1
            GPIOx->BSRR = ioposition;
 8006d6c:	bf0c      	ite	eq
 8006d6e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8006d72:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8006d76:	2408      	movs	r4, #8
 8006d78:	e770      	b.n	8006c5c <HAL_GPIO_Init+0x50>
      switch (GPIO_Init->Mode)
 8006d7a:	4565      	cmp	r5, ip
 8006d7c:	d0f3      	beq.n	8006d66 <HAL_GPIO_Init+0x15a>
 8006d7e:	4575      	cmp	r5, lr
 8006d80:	d0f1      	beq.n	8006d66 <HAL_GPIO_Init+0x15a>
 8006d82:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006dc8 <HAL_GPIO_Init+0x1bc>
 8006d86:	e7eb      	b.n	8006d60 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8006d88:	2400      	movs	r4, #0
 8006d8a:	e767      	b.n	8006c5c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8006d8c:	68cc      	ldr	r4, [r1, #12]
          break;
 8006d8e:	e765      	b.n	8006c5c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8006d90:	68cc      	ldr	r4, [r1, #12]
 8006d92:	3408      	adds	r4, #8
          break;
 8006d94:	e762      	b.n	8006c5c <HAL_GPIO_Init+0x50>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8006d96:	68cc      	ldr	r4, [r1, #12]
 8006d98:	340c      	adds	r4, #12
          break;
 8006d9a:	e75f      	b.n	8006c5c <HAL_GPIO_Init+0x50>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8006d9c:	2404      	movs	r4, #4
 8006d9e:	e75d      	b.n	8006c5c <HAL_GPIO_Init+0x50>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8006da0:	2500      	movs	r5, #0
 8006da2:	e7a7      	b.n	8006cf4 <HAL_GPIO_Init+0xe8>
 8006da4:	2501      	movs	r5, #1
 8006da6:	e7a5      	b.n	8006cf4 <HAL_GPIO_Init+0xe8>
 8006da8:	2502      	movs	r5, #2
 8006daa:	e7a3      	b.n	8006cf4 <HAL_GPIO_Init+0xe8>
 8006dac:	40010400 	.word	0x40010400
 8006db0:	40021000 	.word	0x40021000
 8006db4:	40010800 	.word	0x40010800
 8006db8:	10210000 	.word	0x10210000
 8006dbc:	10310000 	.word	0x10310000
 8006dc0:	10320000 	.word	0x10320000
 8006dc4:	10110000 	.word	0x10110000
 8006dc8:	10220000 	.word	0x10220000

08006dcc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006dcc:	6883      	ldr	r3, [r0, #8]
 8006dce:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8006dd0:	bf14      	ite	ne
 8006dd2:	2001      	movne	r0, #1
 8006dd4:	2000      	moveq	r0, #0
 8006dd6:	4770      	bx	lr

08006dd8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006dd8:	b10a      	cbz	r2, 8006dde <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006dda:	6101      	str	r1, [r0, #16]
  }
}
 8006ddc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8006dde:	0409      	lsls	r1, r1, #16
 8006de0:	e7fb      	b.n	8006dda <HAL_GPIO_WritePin+0x2>
	...

08006de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006de4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006de8:	4605      	mov	r5, r0
 8006dea:	b908      	cbnz	r0, 8006df0 <HAL_RCC_OscConfig+0xc>
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
      {
        return HAL_ERROR;
 8006dec:	2001      	movs	r0, #1
 8006dee:	e03c      	b.n	8006e6a <HAL_RCC_OscConfig+0x86>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006df0:	6803      	ldr	r3, [r0, #0]
 8006df2:	07db      	lsls	r3, r3, #31
 8006df4:	d410      	bmi.n	8006e18 <HAL_RCC_OscConfig+0x34>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006df6:	682b      	ldr	r3, [r5, #0]
 8006df8:	079f      	lsls	r7, r3, #30
 8006dfa:	d45d      	bmi.n	8006eb8 <HAL_RCC_OscConfig+0xd4>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006dfc:	682b      	ldr	r3, [r5, #0]
 8006dfe:	0719      	lsls	r1, r3, #28
 8006e00:	f100 8094 	bmi.w	8006f2c <HAL_RCC_OscConfig+0x148>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006e04:	682b      	ldr	r3, [r5, #0]
 8006e06:	075a      	lsls	r2, r3, #29
 8006e08:	f100 80be 	bmi.w	8006f88 <HAL_RCC_OscConfig+0x1a4>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e0c:	69e8      	ldr	r0, [r5, #28]
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f040 812c 	bne.w	800706c <HAL_RCC_OscConfig+0x288>
        }
      }
    }
  }

  return HAL_OK;
 8006e14:	2000      	movs	r0, #0
 8006e16:	e028      	b.n	8006e6a <HAL_RCC_OscConfig+0x86>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006e18:	4c8f      	ldr	r4, [pc, #572]	; (8007058 <HAL_RCC_OscConfig+0x274>)
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	f003 030c 	and.w	r3, r3, #12
 8006e20:	2b04      	cmp	r3, #4
 8006e22:	d007      	beq.n	8006e34 <HAL_RCC_OscConfig+0x50>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8006e24:	6863      	ldr	r3, [r4, #4]
 8006e26:	f003 030c 	and.w	r3, r3, #12
 8006e2a:	2b08      	cmp	r3, #8
 8006e2c:	d109      	bne.n	8006e42 <HAL_RCC_OscConfig+0x5e>
 8006e2e:	6863      	ldr	r3, [r4, #4]
 8006e30:	03de      	lsls	r6, r3, #15
 8006e32:	d506      	bpl.n	8006e42 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e34:	6823      	ldr	r3, [r4, #0]
 8006e36:	039c      	lsls	r4, r3, #14
 8006e38:	d5dd      	bpl.n	8006df6 <HAL_RCC_OscConfig+0x12>
 8006e3a:	686b      	ldr	r3, [r5, #4]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1da      	bne.n	8006df6 <HAL_RCC_OscConfig+0x12>
 8006e40:	e7d4      	b.n	8006dec <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e42:	686b      	ldr	r3, [r5, #4]
 8006e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e48:	d112      	bne.n	8006e70 <HAL_RCC_OscConfig+0x8c>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006e50:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006e52:	f7ff f9a9 	bl	80061a8 <HAL_GetTick>
 8006e56:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e58:	6823      	ldr	r3, [r4, #0]
 8006e5a:	0398      	lsls	r0, r3, #14
 8006e5c:	d4cb      	bmi.n	8006df6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e5e:	f7ff f9a3 	bl	80061a8 <HAL_GetTick>
 8006e62:	1b80      	subs	r0, r0, r6
 8006e64:	2864      	cmp	r0, #100	; 0x64
 8006e66:	d9f7      	bls.n	8006e58 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8006e68:	2003      	movs	r0, #3
}
 8006e6a:	b002      	add	sp, #8
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e70:	b99b      	cbnz	r3, 8006e9a <HAL_RCC_OscConfig+0xb6>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	6823      	ldr	r3, [r4, #0]
 8006e7c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e80:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006e82:	f7ff f991 	bl	80061a8 <HAL_GetTick>
 8006e86:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e88:	6823      	ldr	r3, [r4, #0]
 8006e8a:	0399      	lsls	r1, r3, #14
 8006e8c:	d5b3      	bpl.n	8006df6 <HAL_RCC_OscConfig+0x12>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006e8e:	f7ff f98b 	bl	80061a8 <HAL_GetTick>
 8006e92:	1b80      	subs	r0, r0, r6
 8006e94:	2864      	cmp	r0, #100	; 0x64
 8006e96:	d9f7      	bls.n	8006e88 <HAL_RCC_OscConfig+0xa4>
 8006e98:	e7e6      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006e9a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006e9e:	6823      	ldr	r3, [r4, #0]
 8006ea0:	d103      	bne.n	8006eaa <HAL_RCC_OscConfig+0xc6>
 8006ea2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006ea6:	6023      	str	r3, [r4, #0]
 8006ea8:	e7cf      	b.n	8006e4a <HAL_RCC_OscConfig+0x66>
 8006eaa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006eae:	6023      	str	r3, [r4, #0]
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006eb6:	e7cb      	b.n	8006e50 <HAL_RCC_OscConfig+0x6c>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006eb8:	4c67      	ldr	r4, [pc, #412]	; (8007058 <HAL_RCC_OscConfig+0x274>)
 8006eba:	6863      	ldr	r3, [r4, #4]
 8006ebc:	f013 0f0c 	tst.w	r3, #12
 8006ec0:	d007      	beq.n	8006ed2 <HAL_RCC_OscConfig+0xee>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8006ec2:	6863      	ldr	r3, [r4, #4]
 8006ec4:	f003 030c 	and.w	r3, r3, #12
 8006ec8:	2b08      	cmp	r3, #8
 8006eca:	d110      	bne.n	8006eee <HAL_RCC_OscConfig+0x10a>
 8006ecc:	6863      	ldr	r3, [r4, #4]
 8006ece:	03da      	lsls	r2, r3, #15
 8006ed0:	d40d      	bmi.n	8006eee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	079b      	lsls	r3, r3, #30
 8006ed6:	d502      	bpl.n	8006ede <HAL_RCC_OscConfig+0xfa>
 8006ed8:	692b      	ldr	r3, [r5, #16]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d186      	bne.n	8006dec <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ede:	6823      	ldr	r3, [r4, #0]
 8006ee0:	696a      	ldr	r2, [r5, #20]
 8006ee2:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006ee6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006eea:	6023      	str	r3, [r4, #0]
 8006eec:	e786      	b.n	8006dfc <HAL_RCC_OscConfig+0x18>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006eee:	692a      	ldr	r2, [r5, #16]
 8006ef0:	4b5a      	ldr	r3, [pc, #360]	; (800705c <HAL_RCC_OscConfig+0x278>)
 8006ef2:	b16a      	cbz	r2, 8006f10 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_ENABLE();
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006ef8:	f7ff f956 	bl	80061a8 <HAL_GetTick>
 8006efc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006efe:	6823      	ldr	r3, [r4, #0]
 8006f00:	079f      	lsls	r7, r3, #30
 8006f02:	d4ec      	bmi.n	8006ede <HAL_RCC_OscConfig+0xfa>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f04:	f7ff f950 	bl	80061a8 <HAL_GetTick>
 8006f08:	1b80      	subs	r0, r0, r6
 8006f0a:	2802      	cmp	r0, #2
 8006f0c:	d9f7      	bls.n	8006efe <HAL_RCC_OscConfig+0x11a>
 8006f0e:	e7ab      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8006f10:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006f12:	f7ff f949 	bl	80061a8 <HAL_GetTick>
 8006f16:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006f18:	6823      	ldr	r3, [r4, #0]
 8006f1a:	0798      	lsls	r0, r3, #30
 8006f1c:	f57f af6e 	bpl.w	8006dfc <HAL_RCC_OscConfig+0x18>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006f20:	f7ff f942 	bl	80061a8 <HAL_GetTick>
 8006f24:	1b80      	subs	r0, r0, r6
 8006f26:	2802      	cmp	r0, #2
 8006f28:	d9f6      	bls.n	8006f18 <HAL_RCC_OscConfig+0x134>
 8006f2a:	e79d      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006f2c:	69aa      	ldr	r2, [r5, #24]
 8006f2e:	4c4a      	ldr	r4, [pc, #296]	; (8007058 <HAL_RCC_OscConfig+0x274>)
 8006f30:	4b4b      	ldr	r3, [pc, #300]	; (8007060 <HAL_RCC_OscConfig+0x27c>)
 8006f32:	b1da      	cbz	r2, 8006f6c <HAL_RCC_OscConfig+0x188>
      __HAL_RCC_LSI_ENABLE();
 8006f34:	2201      	movs	r2, #1
 8006f36:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006f38:	f7ff f936 	bl	80061a8 <HAL_GetTick>
 8006f3c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f40:	079b      	lsls	r3, r3, #30
 8006f42:	d50d      	bpl.n	8006f60 <HAL_RCC_OscConfig+0x17c>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8006f44:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006f48:	4b46      	ldr	r3, [pc, #280]	; (8007064 <HAL_RCC_OscConfig+0x280>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f50:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8006f52:	bf00      	nop
  }
  while (Delay --);
 8006f54:	9b01      	ldr	r3, [sp, #4]
 8006f56:	1e5a      	subs	r2, r3, #1
 8006f58:	9201      	str	r2, [sp, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f9      	bne.n	8006f52 <HAL_RCC_OscConfig+0x16e>
 8006f5e:	e751      	b.n	8006e04 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f60:	f7ff f922 	bl	80061a8 <HAL_GetTick>
 8006f64:	1b80      	subs	r0, r0, r6
 8006f66:	2802      	cmp	r0, #2
 8006f68:	d9e9      	bls.n	8006f3e <HAL_RCC_OscConfig+0x15a>
 8006f6a:	e77d      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8006f6c:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8006f6e:	f7ff f91b 	bl	80061a8 <HAL_GetTick>
 8006f72:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f74:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f76:	079f      	lsls	r7, r3, #30
 8006f78:	f57f af44 	bpl.w	8006e04 <HAL_RCC_OscConfig+0x20>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f7c:	f7ff f914 	bl	80061a8 <HAL_GetTick>
 8006f80:	1b80      	subs	r0, r0, r6
 8006f82:	2802      	cmp	r0, #2
 8006f84:	d9f6      	bls.n	8006f74 <HAL_RCC_OscConfig+0x190>
 8006f86:	e76f      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f88:	4c33      	ldr	r4, [pc, #204]	; (8007058 <HAL_RCC_OscConfig+0x274>)
 8006f8a:	69e3      	ldr	r3, [r4, #28]
 8006f8c:	00d8      	lsls	r0, r3, #3
 8006f8e:	d424      	bmi.n	8006fda <HAL_RCC_OscConfig+0x1f6>
      pwrclkchanged = SET;
 8006f90:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f92:	69e3      	ldr	r3, [r4, #28]
 8006f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f98:	61e3      	str	r3, [r4, #28]
 8006f9a:	69e3      	ldr	r3, [r4, #28]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	9300      	str	r3, [sp, #0]
 8006fa2:	9b00      	ldr	r3, [sp, #0]
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fa4:	4e30      	ldr	r6, [pc, #192]	; (8007068 <HAL_RCC_OscConfig+0x284>)
 8006fa6:	6833      	ldr	r3, [r6, #0]
 8006fa8:	05d9      	lsls	r1, r3, #23
 8006faa:	d518      	bpl.n	8006fde <HAL_RCC_OscConfig+0x1fa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fac:	68eb      	ldr	r3, [r5, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d126      	bne.n	8007000 <HAL_RCC_OscConfig+0x21c>
 8006fb2:	6a23      	ldr	r3, [r4, #32]
 8006fb4:	f043 0301 	orr.w	r3, r3, #1
 8006fb8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8006fba:	f7ff f8f5 	bl	80061a8 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006fbe:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8006fc2:	4680      	mov	r8, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006fc4:	6a23      	ldr	r3, [r4, #32]
 8006fc6:	079b      	lsls	r3, r3, #30
 8006fc8:	d53f      	bpl.n	800704a <HAL_RCC_OscConfig+0x266>
    if (pwrclkchanged == SET)
 8006fca:	2f00      	cmp	r7, #0
 8006fcc:	f43f af1e 	beq.w	8006e0c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006fd0:	69e3      	ldr	r3, [r4, #28]
 8006fd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fd6:	61e3      	str	r3, [r4, #28]
 8006fd8:	e718      	b.n	8006e0c <HAL_RCC_OscConfig+0x28>
    FlagStatus       pwrclkchanged = RESET;
 8006fda:	2700      	movs	r7, #0
 8006fdc:	e7e2      	b.n	8006fa4 <HAL_RCC_OscConfig+0x1c0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fde:	6833      	ldr	r3, [r6, #0]
 8006fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fe4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006fe6:	f7ff f8df 	bl	80061a8 <HAL_GetTick>
 8006fea:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	05da      	lsls	r2, r3, #23
 8006ff0:	d4dc      	bmi.n	8006fac <HAL_RCC_OscConfig+0x1c8>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ff2:	f7ff f8d9 	bl	80061a8 <HAL_GetTick>
 8006ff6:	eba0 0008 	sub.w	r0, r0, r8
 8006ffa:	2864      	cmp	r0, #100	; 0x64
 8006ffc:	d9f6      	bls.n	8006fec <HAL_RCC_OscConfig+0x208>
 8006ffe:	e733      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007000:	b9ab      	cbnz	r3, 800702e <HAL_RCC_OscConfig+0x24a>
 8007002:	6a23      	ldr	r3, [r4, #32]
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007004:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007008:	f023 0301 	bic.w	r3, r3, #1
 800700c:	6223      	str	r3, [r4, #32]
 800700e:	6a23      	ldr	r3, [r4, #32]
 8007010:	f023 0304 	bic.w	r3, r3, #4
 8007014:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8007016:	f7ff f8c7 	bl	80061a8 <HAL_GetTick>
 800701a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800701c:	6a23      	ldr	r3, [r4, #32]
 800701e:	0798      	lsls	r0, r3, #30
 8007020:	d5d3      	bpl.n	8006fca <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007022:	f7ff f8c1 	bl	80061a8 <HAL_GetTick>
 8007026:	1b80      	subs	r0, r0, r6
 8007028:	4540      	cmp	r0, r8
 800702a:	d9f7      	bls.n	800701c <HAL_RCC_OscConfig+0x238>
 800702c:	e71c      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800702e:	2b05      	cmp	r3, #5
 8007030:	6a23      	ldr	r3, [r4, #32]
 8007032:	d103      	bne.n	800703c <HAL_RCC_OscConfig+0x258>
 8007034:	f043 0304 	orr.w	r3, r3, #4
 8007038:	6223      	str	r3, [r4, #32]
 800703a:	e7ba      	b.n	8006fb2 <HAL_RCC_OscConfig+0x1ce>
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	6223      	str	r3, [r4, #32]
 8007042:	6a23      	ldr	r3, [r4, #32]
 8007044:	f023 0304 	bic.w	r3, r3, #4
 8007048:	e7b6      	b.n	8006fb8 <HAL_RCC_OscConfig+0x1d4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800704a:	f7ff f8ad 	bl	80061a8 <HAL_GetTick>
 800704e:	eba0 0008 	sub.w	r0, r0, r8
 8007052:	42b0      	cmp	r0, r6
 8007054:	d9b6      	bls.n	8006fc4 <HAL_RCC_OscConfig+0x1e0>
 8007056:	e707      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
 8007058:	40021000 	.word	0x40021000
 800705c:	42420000 	.word	0x42420000
 8007060:	42420480 	.word	0x42420480
 8007064:	2000033c 	.word	0x2000033c
 8007068:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800706c:	4b2a      	ldr	r3, [pc, #168]	; (8007118 <HAL_RCC_OscConfig+0x334>)
 800706e:	685a      	ldr	r2, [r3, #4]
 8007070:	461c      	mov	r4, r3
 8007072:	f002 020c 	and.w	r2, r2, #12
 8007076:	2a08      	cmp	r2, #8
 8007078:	d03d      	beq.n	80070f6 <HAL_RCC_OscConfig+0x312>
 800707a:	2300      	movs	r3, #0
 800707c:	4e27      	ldr	r6, [pc, #156]	; (800711c <HAL_RCC_OscConfig+0x338>)
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800707e:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007080:	6033      	str	r3, [r6, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007082:	d12b      	bne.n	80070dc <HAL_RCC_OscConfig+0x2f8>
        tickstart = HAL_GetTick();
 8007084:	f7ff f890 	bl	80061a8 <HAL_GetTick>
 8007088:	4607      	mov	r7, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0199      	lsls	r1, r3, #6
 800708e:	d41f      	bmi.n	80070d0 <HAL_RCC_OscConfig+0x2ec>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8007090:	6a2b      	ldr	r3, [r5, #32]
 8007092:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007096:	d105      	bne.n	80070a4 <HAL_RCC_OscConfig+0x2c0>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8007098:	6862      	ldr	r2, [r4, #4]
 800709a:	68a9      	ldr	r1, [r5, #8]
 800709c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80070a0:	430a      	orrs	r2, r1
 80070a2:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80070a4:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80070a6:	6862      	ldr	r2, [r4, #4]
 80070a8:	430b      	orrs	r3, r1
 80070aa:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80070ae:	4313      	orrs	r3, r2
 80070b0:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 80070b2:	2301      	movs	r3, #1
 80070b4:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 80070b6:	f7ff f877 	bl	80061a8 <HAL_GetTick>
 80070ba:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80070bc:	6823      	ldr	r3, [r4, #0]
 80070be:	019a      	lsls	r2, r3, #6
 80070c0:	f53f aea8 	bmi.w	8006e14 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070c4:	f7ff f870 	bl	80061a8 <HAL_GetTick>
 80070c8:	1b40      	subs	r0, r0, r5
 80070ca:	2802      	cmp	r0, #2
 80070cc:	d9f6      	bls.n	80070bc <HAL_RCC_OscConfig+0x2d8>
 80070ce:	e6cb      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070d0:	f7ff f86a 	bl	80061a8 <HAL_GetTick>
 80070d4:	1bc0      	subs	r0, r0, r7
 80070d6:	2802      	cmp	r0, #2
 80070d8:	d9d7      	bls.n	800708a <HAL_RCC_OscConfig+0x2a6>
 80070da:	e6c5      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 80070dc:	f7ff f864 	bl	80061a8 <HAL_GetTick>
 80070e0:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	019b      	lsls	r3, r3, #6
 80070e6:	f57f ae95 	bpl.w	8006e14 <HAL_RCC_OscConfig+0x30>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80070ea:	f7ff f85d 	bl	80061a8 <HAL_GetTick>
 80070ee:	1b40      	subs	r0, r0, r5
 80070f0:	2802      	cmp	r0, #2
 80070f2:	d9f6      	bls.n	80070e2 <HAL_RCC_OscConfig+0x2fe>
 80070f4:	e6b8      	b.n	8006e68 <HAL_RCC_OscConfig+0x84>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80070f6:	2801      	cmp	r0, #1
 80070f8:	f43f aeb7 	beq.w	8006e6a <HAL_RCC_OscConfig+0x86>
        pll_config = RCC->CFGR;
 80070fc:	6858      	ldr	r0, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070fe:	6a2b      	ldr	r3, [r5, #32]
 8007100:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 8007104:	429a      	cmp	r2, r3
 8007106:	f47f ae71 	bne.w	8006dec <HAL_RCC_OscConfig+0x8>
 800710a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800710c:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
    return HAL_ERROR;
 8007110:	1ac0      	subs	r0, r0, r3
 8007112:	bf18      	it	ne
 8007114:	2001      	movne	r0, #1
 8007116:	e6a8      	b.n	8006e6a <HAL_RCC_OscConfig+0x86>
 8007118:	40021000 	.word	0x40021000
 800711c:	42420060 	.word	0x42420060

08007120 <HAL_RCC_GetSysClockFreq>:
{
 8007120:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007122:	4b18      	ldr	r3, [pc, #96]	; (8007184 <HAL_RCC_GetSysClockFreq+0x64>)
{
 8007124:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8007126:	ac02      	add	r4, sp, #8
 8007128:	f103 0510 	add.w	r5, r3, #16
 800712c:	4622      	mov	r2, r4
 800712e:	6818      	ldr	r0, [r3, #0]
 8007130:	6859      	ldr	r1, [r3, #4]
 8007132:	3308      	adds	r3, #8
 8007134:	c203      	stmia	r2!, {r0, r1}
 8007136:	42ab      	cmp	r3, r5
 8007138:	4614      	mov	r4, r2
 800713a:	d1f7      	bne.n	800712c <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800713c:	f240 2301 	movw	r3, #513	; 0x201
  tmpreg = RCC->CFGR;
 8007140:	4911      	ldr	r1, [pc, #68]	; (8007188 <HAL_RCC_GetSysClockFreq+0x68>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8007142:	f8ad 3004 	strh.w	r3, [sp, #4]
  tmpreg = RCC->CFGR;
 8007146:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8007148:	f003 020c 	and.w	r2, r3, #12
 800714c:	2a08      	cmp	r2, #8
 800714e:	d117      	bne.n	8007180 <HAL_RCC_GetSysClockFreq+0x60>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8007150:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8007154:	a806      	add	r0, sp, #24
 8007156:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8007158:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800715a:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800715e:	d50c      	bpl.n	800717a <HAL_RCC_GetSysClockFreq+0x5a>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007160:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007162:	480a      	ldr	r0, [pc, #40]	; (800718c <HAL_RCC_GetSysClockFreq+0x6c>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8007164:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007168:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800716a:	aa06      	add	r2, sp, #24
 800716c:	4413      	add	r3, r2
 800716e:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8007172:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8007176:	b007      	add	sp, #28
 8007178:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800717a:	4805      	ldr	r0, [pc, #20]	; (8007190 <HAL_RCC_GetSysClockFreq+0x70>)
 800717c:	4350      	muls	r0, r2
 800717e:	e7fa      	b.n	8007176 <HAL_RCC_GetSysClockFreq+0x56>
      sysclockfreq = HSE_VALUE;
 8007180:	4802      	ldr	r0, [pc, #8]	; (800718c <HAL_RCC_GetSysClockFreq+0x6c>)
  return sysclockfreq;
 8007182:	e7f8      	b.n	8007176 <HAL_RCC_GetSysClockFreq+0x56>
 8007184:	0800c1c0 	.word	0x0800c1c0
 8007188:	40021000 	.word	0x40021000
 800718c:	007a1200 	.word	0x007a1200
 8007190:	003d0900 	.word	0x003d0900

08007194 <HAL_RCC_ClockConfig>:
{
 8007194:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007198:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800719a:	4604      	mov	r4, r0
 800719c:	b910      	cbnz	r0, 80071a4 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800719e:	2001      	movs	r0, #1
}
 80071a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80071a4:	4a44      	ldr	r2, [pc, #272]	; (80072b8 <HAL_RCC_ClockConfig+0x124>)
 80071a6:	6813      	ldr	r3, [r2, #0]
 80071a8:	f003 0307 	and.w	r3, r3, #7
 80071ac:	428b      	cmp	r3, r1
 80071ae:	d328      	bcc.n	8007202 <HAL_RCC_ClockConfig+0x6e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80071b0:	6821      	ldr	r1, [r4, #0]
 80071b2:	078e      	lsls	r6, r1, #30
 80071b4:	d430      	bmi.n	8007218 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80071b6:	07ca      	lsls	r2, r1, #31
 80071b8:	d443      	bmi.n	8007242 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071ba:	4a3f      	ldr	r2, [pc, #252]	; (80072b8 <HAL_RCC_ClockConfig+0x124>)
 80071bc:	6813      	ldr	r3, [r2, #0]
 80071be:	f003 0307 	and.w	r3, r3, #7
 80071c2:	42ab      	cmp	r3, r5
 80071c4:	d865      	bhi.n	8007292 <HAL_RCC_ClockConfig+0xfe>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071c6:	6822      	ldr	r2, [r4, #0]
 80071c8:	4d3c      	ldr	r5, [pc, #240]	; (80072bc <HAL_RCC_ClockConfig+0x128>)
 80071ca:	f012 0f04 	tst.w	r2, #4
 80071ce:	d16c      	bne.n	80072aa <HAL_RCC_ClockConfig+0x116>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071d0:	0713      	lsls	r3, r2, #28
 80071d2:	d506      	bpl.n	80071e2 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80071d4:	686b      	ldr	r3, [r5, #4]
 80071d6:	6922      	ldr	r2, [r4, #16]
 80071d8:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80071dc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80071e0:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80071e2:	f7ff ff9d 	bl	8007120 <HAL_RCC_GetSysClockFreq>
 80071e6:	686b      	ldr	r3, [r5, #4]
 80071e8:	4a35      	ldr	r2, [pc, #212]	; (80072c0 <HAL_RCC_ClockConfig+0x12c>)
 80071ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80071ee:	5cd3      	ldrb	r3, [r2, r3]
 80071f0:	40d8      	lsrs	r0, r3
 80071f2:	4b34      	ldr	r3, [pc, #208]	; (80072c4 <HAL_RCC_ClockConfig+0x130>)
 80071f4:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80071f6:	4b34      	ldr	r3, [pc, #208]	; (80072c8 <HAL_RCC_ClockConfig+0x134>)
 80071f8:	6818      	ldr	r0, [r3, #0]
 80071fa:	f7fd f9ad 	bl	8004558 <HAL_InitTick>
  return HAL_OK;
 80071fe:	2000      	movs	r0, #0
 8007200:	e7ce      	b.n	80071a0 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007202:	6813      	ldr	r3, [r2, #0]
 8007204:	f023 0307 	bic.w	r3, r3, #7
 8007208:	430b      	orrs	r3, r1
 800720a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800720c:	6813      	ldr	r3, [r2, #0]
 800720e:	f003 0307 	and.w	r3, r3, #7
 8007212:	428b      	cmp	r3, r1
 8007214:	d1c3      	bne.n	800719e <HAL_RCC_ClockConfig+0xa>
 8007216:	e7cb      	b.n	80071b0 <HAL_RCC_ClockConfig+0x1c>
 8007218:	4b28      	ldr	r3, [pc, #160]	; (80072bc <HAL_RCC_ClockConfig+0x128>)
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800721a:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800721e:	bf1e      	ittt	ne
 8007220:	685a      	ldrne	r2, [r3, #4]
 8007222:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8007226:	605a      	strne	r2, [r3, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007228:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800722a:	bf42      	ittt	mi
 800722c:	685a      	ldrmi	r2, [r3, #4]
 800722e:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8007232:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007234:	685a      	ldr	r2, [r3, #4]
 8007236:	68a0      	ldr	r0, [r4, #8]
 8007238:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800723c:	4302      	orrs	r2, r0
 800723e:	605a      	str	r2, [r3, #4]
 8007240:	e7b9      	b.n	80071b6 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007242:	6862      	ldr	r2, [r4, #4]
 8007244:	4e1d      	ldr	r6, [pc, #116]	; (80072bc <HAL_RCC_ClockConfig+0x128>)
 8007246:	2a01      	cmp	r2, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007248:	6833      	ldr	r3, [r6, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800724a:	d11a      	bne.n	8007282 <HAL_RCC_ClockConfig+0xee>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800724c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007250:	d0a5      	beq.n	800719e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007252:	6873      	ldr	r3, [r6, #4]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007254:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	4313      	orrs	r3, r2
 800725e:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8007260:	f7fe ffa2 	bl	80061a8 <HAL_GetTick>
 8007264:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007266:	6873      	ldr	r3, [r6, #4]
 8007268:	6862      	ldr	r2, [r4, #4]
 800726a:	f003 030c 	and.w	r3, r3, #12
 800726e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007272:	d0a2      	beq.n	80071ba <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007274:	f7fe ff98 	bl	80061a8 <HAL_GetTick>
 8007278:	1bc0      	subs	r0, r0, r7
 800727a:	4540      	cmp	r0, r8
 800727c:	d9f3      	bls.n	8007266 <HAL_RCC_ClockConfig+0xd2>
        return HAL_TIMEOUT;
 800727e:	2003      	movs	r0, #3
 8007280:	e78e      	b.n	80071a0 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007282:	2a02      	cmp	r2, #2
 8007284:	d102      	bne.n	800728c <HAL_RCC_ClockConfig+0xf8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007286:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 800728a:	e7e1      	b.n	8007250 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800728c:	f013 0f02 	tst.w	r3, #2
 8007290:	e7de      	b.n	8007250 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007292:	6813      	ldr	r3, [r2, #0]
 8007294:	f023 0307 	bic.w	r3, r3, #7
 8007298:	432b      	orrs	r3, r5
 800729a:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800729c:	6813      	ldr	r3, [r2, #0]
 800729e:	f003 0307 	and.w	r3, r3, #7
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	f47f af7b 	bne.w	800719e <HAL_RCC_ClockConfig+0xa>
 80072a8:	e78d      	b.n	80071c6 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80072aa:	686b      	ldr	r3, [r5, #4]
 80072ac:	68e1      	ldr	r1, [r4, #12]
 80072ae:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80072b2:	430b      	orrs	r3, r1
 80072b4:	606b      	str	r3, [r5, #4]
 80072b6:	e78b      	b.n	80071d0 <HAL_RCC_ClockConfig+0x3c>
 80072b8:	40022000 	.word	0x40022000
 80072bc:	40021000 	.word	0x40021000
 80072c0:	0800d1c8 	.word	0x0800d1c8
 80072c4:	2000033c 	.word	0x2000033c
 80072c8:	200003d4 	.word	0x200003d4

080072cc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80072cc:	4b04      	ldr	r3, [pc, #16]	; (80072e0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80072ce:	4a05      	ldr	r2, [pc, #20]	; (80072e4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80072d6:	5cd3      	ldrb	r3, [r2, r3]
 80072d8:	4a03      	ldr	r2, [pc, #12]	; (80072e8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80072da:	6810      	ldr	r0, [r2, #0]
}
 80072dc:	40d8      	lsrs	r0, r3
 80072de:	4770      	bx	lr
 80072e0:	40021000 	.word	0x40021000
 80072e4:	0800d1d8 	.word	0x0800d1d8
 80072e8:	2000033c 	.word	0x2000033c

080072ec <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80072ec:	4b04      	ldr	r3, [pc, #16]	; (8007300 <HAL_RCC_GetPCLK2Freq+0x14>)
 80072ee:	4a05      	ldr	r2, [pc, #20]	; (8007304 <HAL_RCC_GetPCLK2Freq+0x18>)
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80072f6:	5cd3      	ldrb	r3, [r2, r3]
 80072f8:	4a03      	ldr	r2, [pc, #12]	; (8007308 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80072fa:	6810      	ldr	r0, [r2, #0]
}
 80072fc:	40d8      	lsrs	r0, r3
 80072fe:	4770      	bx	lr
 8007300:	40021000 	.word	0x40021000
 8007304:	0800d1d8 	.word	0x0800d1d8
 8007308:	2000033c 	.word	0x2000033c

0800730c <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800730c:	230f      	movs	r3, #15
 800730e:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007310:	4b0b      	ldr	r3, [pc, #44]	; (8007340 <HAL_RCC_GetClockConfig+0x34>)
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	f002 0203 	and.w	r2, r2, #3
 8007318:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800731a:	685a      	ldr	r2, [r3, #4]
 800731c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007320:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007328:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	08db      	lsrs	r3, r3, #3
 800732e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007332:	6103      	str	r3, [r0, #16]
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007334:	4b03      	ldr	r3, [pc, #12]	; (8007344 <HAL_RCC_GetClockConfig+0x38>)
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f003 0307 	and.w	r3, r3, #7
 800733c:	600b      	str	r3, [r1, #0]
}
 800733e:	4770      	bx	lr
 8007340:	40021000 	.word	0x40021000
 8007344:	40022000 	.word	0x40022000

08007348 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007348:	6803      	ldr	r3, [r0, #0]
{
 800734a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800734e:	07d9      	lsls	r1, r3, #31
{
 8007350:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8007352:	d520      	bpl.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007354:	4c35      	ldr	r4, [pc, #212]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8007356:	69e3      	ldr	r3, [r4, #28]
 8007358:	00da      	lsls	r2, r3, #3
 800735a:	d432      	bmi.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 800735c:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 800735e:	69e3      	ldr	r3, [r4, #28]
 8007360:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007364:	61e3      	str	r3, [r4, #28]
 8007366:	69e3      	ldr	r3, [r4, #28]
 8007368:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800736c:	9301      	str	r3, [sp, #4]
 800736e:	9b01      	ldr	r3, [sp, #4]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007370:	4e2f      	ldr	r6, [pc, #188]	; (8007430 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8007372:	6833      	ldr	r3, [r6, #0]
 8007374:	05db      	lsls	r3, r3, #23
 8007376:	d526      	bpl.n	80073c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007378:	6a23      	ldr	r3, [r4, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800737a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800737e:	d136      	bne.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007380:	6a23      	ldr	r3, [r4, #32]
 8007382:	686a      	ldr	r2, [r5, #4]
 8007384:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007388:	4313      	orrs	r3, r2
 800738a:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800738c:	b11f      	cbz	r7, 8007396 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800738e:	69e3      	ldr	r3, [r4, #28]
 8007390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007394:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007396:	6828      	ldr	r0, [r5, #0]
 8007398:	0783      	lsls	r3, r0, #30
 800739a:	d506      	bpl.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800739c:	4a23      	ldr	r2, [pc, #140]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800739e:	68a9      	ldr	r1, [r5, #8]
 80073a0:	6853      	ldr	r3, [r2, #4]
 80073a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80073a6:	430b      	orrs	r3, r1
 80073a8:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80073aa:	f010 0010 	ands.w	r0, r0, #16
 80073ae:	d01b      	beq.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073b0:	4a1e      	ldr	r2, [pc, #120]	; (800742c <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80073b2:	68e9      	ldr	r1, [r5, #12]
 80073b4:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80073b6:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80073b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80073bc:	430b      	orrs	r3, r1
 80073be:	6053      	str	r3, [r2, #4]
 80073c0:	e012      	b.n	80073e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80073c2:	2700      	movs	r7, #0
 80073c4:	e7d4      	b.n	8007370 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80073c6:	6833      	ldr	r3, [r6, #0]
 80073c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80073cc:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80073ce:	f7fe feeb 	bl	80061a8 <HAL_GetTick>
 80073d2:	4680      	mov	r8, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80073d4:	6833      	ldr	r3, [r6, #0]
 80073d6:	05d8      	lsls	r0, r3, #23
 80073d8:	d4ce      	bmi.n	8007378 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80073da:	f7fe fee5 	bl	80061a8 <HAL_GetTick>
 80073de:	eba0 0008 	sub.w	r0, r0, r8
 80073e2:	2864      	cmp	r0, #100	; 0x64
 80073e4:	d9f6      	bls.n	80073d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80073e6:	2003      	movs	r0, #3
}
 80073e8:	b002      	add	sp, #8
 80073ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80073ee:	686a      	ldr	r2, [r5, #4]
 80073f0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80073f4:	429a      	cmp	r2, r3
 80073f6:	d0c3      	beq.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 80073f8:	2001      	movs	r0, #1
 80073fa:	4a0e      	ldr	r2, [pc, #56]	; (8007434 <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80073fc:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 80073fe:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007400:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007402:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007406:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8007408:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800740a:	07d9      	lsls	r1, r3, #31
 800740c:	d5b8      	bpl.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 800740e:	f7fe fecb 	bl	80061a8 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007412:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007416:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007418:	6a23      	ldr	r3, [r4, #32]
 800741a:	079a      	lsls	r2, r3, #30
 800741c:	d4b0      	bmi.n	8007380 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800741e:	f7fe fec3 	bl	80061a8 <HAL_GetTick>
 8007422:	1b80      	subs	r0, r0, r6
 8007424:	4540      	cmp	r0, r8
 8007426:	d9f7      	bls.n	8007418 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8007428:	e7dd      	b.n	80073e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
 800742a:	bf00      	nop
 800742c:	40021000 	.word	0x40021000
 8007430:	40007000 	.word	0x40007000
 8007434:	42420440 	.word	0x42420440

08007438 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007438:	6a03      	ldr	r3, [r0, #32]
{
 800743a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800743c:	f023 0301 	bic.w	r3, r3, #1
 8007440:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007442:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007444:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007446:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007448:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800744a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800744e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007450:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8007452:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8007456:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007458:	4d0a      	ldr	r5, [pc, #40]	; (8007484 <TIM_OC1_SetConfig+0x4c>)
 800745a:	42a8      	cmp	r0, r5
 800745c:	d10b      	bne.n	8007476 <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800745e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8007460:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8007464:	432b      	orrs	r3, r5
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007466:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800746a:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800746e:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 8007470:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8007474:	432c      	orrs	r4, r5
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007476:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007478:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800747a:	684a      	ldr	r2, [r1, #4]
 800747c:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800747e:	6203      	str	r3, [r0, #32]
}
 8007480:	bd70      	pop	{r4, r5, r6, pc}
 8007482:	bf00      	nop
 8007484:	40012c00 	.word	0x40012c00

08007488 <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007488:	6a03      	ldr	r3, [r0, #32]
{
 800748a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800748c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007490:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007492:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007494:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007496:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007498:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800749a:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800749e:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a0:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80074a2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074a6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074aa:	4d0b      	ldr	r5, [pc, #44]	; (80074d8 <TIM_OC3_SetConfig+0x50>)
 80074ac:	42a8      	cmp	r0, r5
 80074ae:	d10d      	bne.n	80074cc <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80074b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80074b6:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074ba:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074be:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80074c2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80074c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074c8:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074cc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074ce:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074d0:	684a      	ldr	r2, [r1, #4]
 80074d2:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074d4:	6203      	str	r3, [r0, #32]
}
 80074d6:	bd70      	pop	{r4, r5, r6, pc}
 80074d8:	40012c00 	.word	0x40012c00

080074dc <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074dc:	6a03      	ldr	r3, [r0, #32]
{
 80074de:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074e4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074e6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074e8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ea:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074ec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074ee:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074f2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80074f8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074fc:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007500:	4d06      	ldr	r5, [pc, #24]	; (800751c <TIM_OC4_SetConfig+0x40>)
 8007502:	42a8      	cmp	r0, r5

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007504:	bf02      	ittt	eq
 8007506:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007508:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800750c:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007510:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007512:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007514:	684a      	ldr	r2, [r1, #4]
 8007516:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007518:	6203      	str	r3, [r0, #32]
}
 800751a:	bd30      	pop	{r4, r5, pc}
 800751c:	40012c00 	.word	0x40012c00

08007520 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007520:	6803      	ldr	r3, [r0, #0]
}
 8007522:	2000      	movs	r0, #0
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007524:	68da      	ldr	r2, [r3, #12]
 8007526:	f042 0201 	orr.w	r2, r2, #1
 800752a:	60da      	str	r2, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800752c:	689a      	ldr	r2, [r3, #8]
 800752e:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007534:	bf1e      	ittt	ne
 8007536:	681a      	ldrne	r2, [r3, #0]
 8007538:	f042 0201 	orrne.w	r2, r2, #1
 800753c:	601a      	strne	r2, [r3, #0]
}
 800753e:	4770      	bx	lr

08007540 <HAL_TIM_PWM_MspInit>:
 8007540:	4770      	bx	lr

08007542 <HAL_TIM_OC_DelayElapsedCallback>:
 8007542:	4770      	bx	lr

08007544 <HAL_TIM_IC_CaptureCallback>:
 8007544:	4770      	bx	lr

08007546 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007546:	4770      	bx	lr

08007548 <HAL_TIM_TriggerCallback>:
 8007548:	4770      	bx	lr

0800754a <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800754a:	6803      	ldr	r3, [r0, #0]
{
 800754c:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800754e:	691a      	ldr	r2, [r3, #16]
{
 8007550:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007552:	0791      	lsls	r1, r2, #30
 8007554:	d50e      	bpl.n	8007574 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	0792      	lsls	r2, r2, #30
 800755a:	d50b      	bpl.n	8007574 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800755c:	f06f 0202 	mvn.w	r2, #2
 8007560:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007562:	2201      	movs	r2, #1
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007564:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007566:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007568:	079b      	lsls	r3, r3, #30
 800756a:	d077      	beq.n	800765c <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 800756c:	f7ff ffea 	bl	8007544 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007570:	2300      	movs	r3, #0
 8007572:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007574:	6823      	ldr	r3, [r4, #0]
 8007576:	691a      	ldr	r2, [r3, #16]
 8007578:	0750      	lsls	r0, r2, #29
 800757a:	d510      	bpl.n	800759e <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	0751      	lsls	r1, r2, #29
 8007580:	d50d      	bpl.n	800759e <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007582:	f06f 0204 	mvn.w	r2, #4
 8007586:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007588:	2202      	movs	r2, #2
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800758a:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800758c:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800758e:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8007592:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007594:	d068      	beq.n	8007668 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8007596:	f7ff ffd5 	bl	8007544 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800759a:	2300      	movs	r3, #0
 800759c:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	691a      	ldr	r2, [r3, #16]
 80075a2:	0712      	lsls	r2, r2, #28
 80075a4:	d50f      	bpl.n	80075c6 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075a6:	68da      	ldr	r2, [r3, #12]
 80075a8:	0710      	lsls	r0, r2, #28
 80075aa:	d50c      	bpl.n	80075c6 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ac:	f06f 0208 	mvn.w	r2, #8
 80075b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b2:	2204      	movs	r2, #4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075b6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075b8:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 80075ba:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075bc:	d05a      	beq.n	8007674 <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 80075be:	f7ff ffc1 	bl	8007544 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075c2:	2300      	movs	r3, #0
 80075c4:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80075c6:	6823      	ldr	r3, [r4, #0]
 80075c8:	691a      	ldr	r2, [r3, #16]
 80075ca:	06d2      	lsls	r2, r2, #27
 80075cc:	d510      	bpl.n	80075f0 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80075ce:	68da      	ldr	r2, [r3, #12]
 80075d0:	06d0      	lsls	r0, r2, #27
 80075d2:	d50d      	bpl.n	80075f0 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80075d4:	f06f 0210 	mvn.w	r2, #16
 80075d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075da:	2208      	movs	r2, #8
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075dc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80075de:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e0:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 80075e4:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80075e6:	d04b      	beq.n	8007680 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 80075e8:	f7ff ffac 	bl	8007544 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ec:	2300      	movs	r3, #0
 80075ee:	7723      	strb	r3, [r4, #28]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80075f0:	6823      	ldr	r3, [r4, #0]
 80075f2:	691a      	ldr	r2, [r3, #16]
 80075f4:	07d1      	lsls	r1, r2, #31
 80075f6:	d508      	bpl.n	800760a <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80075f8:	68da      	ldr	r2, [r3, #12]
 80075fa:	07d2      	lsls	r2, r2, #31
 80075fc:	d505      	bpl.n	800760a <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80075fe:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8007602:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007604:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007606:	f7fc fe17 	bl	8004238 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800760a:	6823      	ldr	r3, [r4, #0]
 800760c:	691a      	ldr	r2, [r3, #16]
 800760e:	0610      	lsls	r0, r2, #24
 8007610:	d508      	bpl.n	8007624 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007612:	68da      	ldr	r2, [r3, #12]
 8007614:	0611      	lsls	r1, r2, #24
 8007616:	d505      	bpl.n	8007624 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007618:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 800761c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800761e:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8007620:	f000 fadf 	bl	8007be2 <HAL_TIMEx_BreakCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007624:	6823      	ldr	r3, [r4, #0]
 8007626:	691a      	ldr	r2, [r3, #16]
 8007628:	0652      	lsls	r2, r2, #25
 800762a:	d508      	bpl.n	800763e <HAL_TIM_IRQHandler+0xf4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	0650      	lsls	r0, r2, #25
 8007630:	d505      	bpl.n	800763e <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007632:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 8007636:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007638:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800763a:	f7ff ff85 	bl	8007548 <HAL_TIM_TriggerCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800763e:	6823      	ldr	r3, [r4, #0]
 8007640:	691a      	ldr	r2, [r3, #16]
 8007642:	0691      	lsls	r1, r2, #26
 8007644:	d522      	bpl.n	800768c <HAL_TIM_IRQHandler+0x142>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	0692      	lsls	r2, r2, #26
 800764a:	d51f      	bpl.n	800768c <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800764c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 8007650:	4620      	mov	r0, r4
}
 8007652:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007656:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8007658:	f000 bac2 	b.w	8007be0 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800765c:	f7ff ff71 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007660:	4620      	mov	r0, r4
 8007662:	f7ff ff70 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
 8007666:	e783      	b.n	8007570 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007668:	f7ff ff6b 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	4620      	mov	r0, r4
 800766e:	f7ff ff6a 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
 8007672:	e792      	b.n	800759a <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007674:	f7ff ff65 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007678:	4620      	mov	r0, r4
 800767a:	f7ff ff64 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
 800767e:	e7a0      	b.n	80075c2 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007680:	f7ff ff5f 	bl	8007542 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007684:	4620      	mov	r0, r4
 8007686:	f7ff ff5e 	bl	8007546 <HAL_TIM_PWM_PulseFinishedCallback>
 800768a:	e7af      	b.n	80075ec <HAL_TIM_IRQHandler+0xa2>
}
 800768c:	bd10      	pop	{r4, pc}
	...

08007690 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007690:	4a1a      	ldr	r2, [pc, #104]	; (80076fc <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8007692:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007694:	4290      	cmp	r0, r2
 8007696:	d00a      	beq.n	80076ae <TIM_Base_SetConfig+0x1e>
 8007698:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800769c:	d007      	beq.n	80076ae <TIM_Base_SetConfig+0x1e>
 800769e:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076a2:	4290      	cmp	r0, r2
 80076a4:	d003      	beq.n	80076ae <TIM_Base_SetConfig+0x1e>
 80076a6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076aa:	4290      	cmp	r0, r2
 80076ac:	d115      	bne.n	80076da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 80076ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80076b4:	4313      	orrs	r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076b6:	4a11      	ldr	r2, [pc, #68]	; (80076fc <TIM_Base_SetConfig+0x6c>)
 80076b8:	4290      	cmp	r0, r2
 80076ba:	d00a      	beq.n	80076d2 <TIM_Base_SetConfig+0x42>
 80076bc:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80076c0:	d007      	beq.n	80076d2 <TIM_Base_SetConfig+0x42>
 80076c2:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076c6:	4290      	cmp	r0, r2
 80076c8:	d003      	beq.n	80076d2 <TIM_Base_SetConfig+0x42>
 80076ca:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80076ce:	4290      	cmp	r0, r2
 80076d0:	d103      	bne.n	80076da <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d2:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80076d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076d8:	4313      	orrs	r3, r2
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076da:	694a      	ldr	r2, [r1, #20]
 80076dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80076e0:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 80076e2:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076e4:	688b      	ldr	r3, [r1, #8]
 80076e6:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80076e8:	680b      	ldr	r3, [r1, #0]
 80076ea:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076ec:	4b03      	ldr	r3, [pc, #12]	; (80076fc <TIM_Base_SetConfig+0x6c>)
 80076ee:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 80076f0:	bf04      	itt	eq
 80076f2:	690b      	ldreq	r3, [r1, #16]
 80076f4:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 80076f6:	2301      	movs	r3, #1
 80076f8:	6143      	str	r3, [r0, #20]
}
 80076fa:	4770      	bx	lr
 80076fc:	40012c00 	.word	0x40012c00

08007700 <HAL_TIM_Base_Init>:
{
 8007700:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007702:	4604      	mov	r4, r0
 8007704:	b1a0      	cbz	r0, 8007730 <HAL_TIM_Base_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 8007706:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800770a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800770e:	b91b      	cbnz	r3, 8007718 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007710:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8007714:	f7fc fe4a 	bl	80043ac <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8007718:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800771a:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800771c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007720:	1d21      	adds	r1, r4, #4
 8007722:	f7ff ffb5 	bl	8007690 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 8007726:	2301      	movs	r3, #1
  return HAL_OK;
 8007728:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800772a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 800772e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007730:	2001      	movs	r0, #1
 8007732:	e7fc      	b.n	800772e <HAL_TIM_Base_Init+0x2e>

08007734 <HAL_TIM_PWM_Init>:
{
 8007734:	b510      	push	{r4, lr}
  if (htim == NULL)
 8007736:	4604      	mov	r4, r0
 8007738:	b1a0      	cbz	r0, 8007764 <HAL_TIM_PWM_Init+0x30>
  if (htim->State == HAL_TIM_STATE_RESET)
 800773a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800773e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007742:	b91b      	cbnz	r3, 800774c <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8007744:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8007748:	f7ff fefa 	bl	8007540 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800774c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800774e:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007750:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007754:	1d21      	adds	r1, r4, #4
 8007756:	f7ff ff9b 	bl	8007690 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 800775a:	2301      	movs	r3, #1
  return HAL_OK;
 800775c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800775e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8007762:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007764:	2001      	movs	r0, #1
 8007766:	e7fc      	b.n	8007762 <HAL_TIM_PWM_Init+0x2e>

08007768 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007768:	6a03      	ldr	r3, [r0, #32]
{
 800776a:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800776c:	f023 0310 	bic.w	r3, r3, #16
 8007770:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8007772:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 8007774:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8007776:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007778:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800777a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800777e:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007782:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8007784:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007788:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800778c:	4d0b      	ldr	r5, [pc, #44]	; (80077bc <TIM_OC2_SetConfig+0x54>)
 800778e:	42a8      	cmp	r0, r5
 8007790:	d10d      	bne.n	80077ae <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007792:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8007794:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007798:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800779c:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a0:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80077a4:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 80077a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077aa:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 80077ae:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 80077b0:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80077b2:	684a      	ldr	r2, [r1, #4]
 80077b4:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80077b6:	6203      	str	r3, [r0, #32]
}
 80077b8:	bd70      	pop	{r4, r5, r6, pc}
 80077ba:	bf00      	nop
 80077bc:	40012c00 	.word	0x40012c00

080077c0 <HAL_TIM_PWM_ConfigChannel>:
{
 80077c0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80077c2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80077c6:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 80077c8:	2b01      	cmp	r3, #1
 80077ca:	f04f 0002 	mov.w	r0, #2
 80077ce:	d025      	beq.n	800781c <HAL_TIM_PWM_ConfigChannel+0x5c>
 80077d0:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80077d2:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 80077d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 80077da:	2a0c      	cmp	r2, #12
 80077dc:	d818      	bhi.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x50>
 80077de:	e8df f002 	tbb	[pc, r2]
 80077e2:	1707      	.short	0x1707
 80077e4:	171e1717 	.word	0x171e1717
 80077e8:	172f1717 	.word	0x172f1717
 80077ec:	1717      	.short	0x1717
 80077ee:	40          	.byte	0x40
 80077ef:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	f7ff fe21 	bl	8007438 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077f6:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077f8:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80077fa:	699a      	ldr	r2, [r3, #24]
 80077fc:	f042 0208 	orr.w	r2, r2, #8
 8007800:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007802:	699a      	ldr	r2, [r3, #24]
 8007804:	f022 0204 	bic.w	r2, r2, #4
 8007808:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800780a:	699a      	ldr	r2, [r3, #24]
 800780c:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800780e:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 8007810:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8007812:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007814:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007818:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800781c:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	f7ff ffa2 	bl	8007768 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007824:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007826:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007828:	699a      	ldr	r2, [r3, #24]
 800782a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800782e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007830:	699a      	ldr	r2, [r3, #24]
 8007832:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007836:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007838:	699a      	ldr	r2, [r3, #24]
 800783a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800783e:	e7e6      	b.n	800780e <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007840:	6820      	ldr	r0, [r4, #0]
 8007842:	f7ff fe21 	bl	8007488 <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007846:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007848:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800784a:	69da      	ldr	r2, [r3, #28]
 800784c:	f042 0208 	orr.w	r2, r2, #8
 8007850:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007852:	69da      	ldr	r2, [r3, #28]
 8007854:	f022 0204 	bic.w	r2, r2, #4
 8007858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800785a:	69da      	ldr	r2, [r3, #28]
 800785c:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800785e:	61da      	str	r2, [r3, #28]
      break;
 8007860:	e7d6      	b.n	8007810 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	f7ff fe3a 	bl	80074dc <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007868:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800786a:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800786c:	69da      	ldr	r2, [r3, #28]
 800786e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007872:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007874:	69da      	ldr	r2, [r3, #28]
 8007876:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800787a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800787c:	69da      	ldr	r2, [r3, #28]
 800787e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007882:	e7ec      	b.n	800785e <HAL_TIM_PWM_ConfigChannel+0x9e>

08007884 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007884:	b510      	push	{r4, lr}
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007886:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007888:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800788a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800788e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8007892:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007894:	6083      	str	r3, [r0, #8]
}
 8007896:	bd10      	pop	{r4, pc}

08007898 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8007898:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800789c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800789e:	2b01      	cmp	r3, #1
{
 80078a0:	4604      	mov	r4, r0
 80078a2:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80078a6:	d019      	beq.n	80078dc <HAL_TIM_ConfigClockSource+0x44>
 80078a8:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 80078aa:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80078ae:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80078b0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80078b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80078be:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80078c0:	680b      	ldr	r3, [r1, #0]
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d065      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xfa>
 80078c6:	d815      	bhi.n	80078f4 <HAL_TIM_ConfigClockSource+0x5c>
 80078c8:	2b10      	cmp	r3, #16
 80078ca:	d00c      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x4e>
 80078cc:	d807      	bhi.n	80078de <HAL_TIM_ConfigClockSource+0x46>
 80078ce:	b153      	cbz	r3, 80078e6 <HAL_TIM_ConfigClockSource+0x4e>
  htim->State = HAL_TIM_STATE_READY;
 80078d0:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80078d2:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80078d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80078d8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80078dc:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d001      	beq.n	80078e6 <HAL_TIM_ConfigClockSource+0x4e>
 80078e2:	2b30      	cmp	r3, #48	; 0x30
 80078e4:	d1f4      	bne.n	80078d0 <HAL_TIM_ConfigClockSource+0x38>
  tmpsmcr = TIMx->SMCR;
 80078e6:	6882      	ldr	r2, [r0, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078e8:	f043 0307 	orr.w	r3, r3, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80078ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80078f0:	4313      	orrs	r3, r2
 80078f2:	e01a      	b.n	800792a <HAL_TIM_ConfigClockSource+0x92>
  switch (sClockSourceConfig->ClockSource)
 80078f4:	2b60      	cmp	r3, #96	; 0x60
 80078f6:	d034      	beq.n	8007962 <HAL_TIM_ConfigClockSource+0xca>
 80078f8:	d819      	bhi.n	800792e <HAL_TIM_ConfigClockSource+0x96>
 80078fa:	2b50      	cmp	r3, #80	; 0x50
 80078fc:	d1e8      	bne.n	80078d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80078fe:	684a      	ldr	r2, [r1, #4]
 8007900:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007902:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007904:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007906:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800790a:	f025 0501 	bic.w	r5, r5, #1
 800790e:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007910:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007912:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007914:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007918:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800791c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800791e:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007920:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007922:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007926:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 800792a:	6083      	str	r3, [r0, #8]
 800792c:	e7d0      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x38>
  switch (sClockSourceConfig->ClockSource)
 800792e:	2b70      	cmp	r3, #112	; 0x70
 8007930:	d00c      	beq.n	800794c <HAL_TIM_ConfigClockSource+0xb4>
 8007932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007936:	d1cb      	bne.n	80078d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_ETR_SetConfig(htim->Instance,
 8007938:	68cb      	ldr	r3, [r1, #12]
 800793a:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800793e:	f7ff ffa1 	bl	8007884 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007942:	6822      	ldr	r2, [r4, #0]
 8007944:	6893      	ldr	r3, [r2, #8]
 8007946:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800794a:	e008      	b.n	800795e <HAL_TIM_ConfigClockSource+0xc6>
      TIM_ETR_SetConfig(htim->Instance,
 800794c:	68cb      	ldr	r3, [r1, #12]
 800794e:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007952:	f7ff ff97 	bl	8007884 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007956:	6822      	ldr	r2, [r4, #0]
 8007958:	6893      	ldr	r3, [r2, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800795a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800795e:	6093      	str	r3, [r2, #8]
      break;
 8007960:	e7b6      	b.n	80078d0 <HAL_TIM_ConfigClockSource+0x38>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007962:	684d      	ldr	r5, [r1, #4]
 8007964:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007966:	6a01      	ldr	r1, [r0, #32]
 8007968:	f021 0110 	bic.w	r1, r1, #16
 800796c:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800796e:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007970:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007972:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007976:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 800797a:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800797e:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8007982:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007984:	6203      	str	r3, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 8007986:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800798c:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8007990:	e7cb      	b.n	800792a <HAL_TIM_ConfigClockSource+0x92>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	684a      	ldr	r2, [r1, #4]
 8007994:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8007996:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007998:	6a05      	ldr	r5, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800799a:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800799e:	f025 0501 	bic.w	r5, r5, #1
 80079a2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80079a4:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 80079a6:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079ac:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80079b0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80079b2:	6202      	str	r2, [r0, #32]
  tmpsmcr = TIMx->SMCR;
 80079b4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ba:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80079be:	e7b4      	b.n	800792a <HAL_TIM_ConfigClockSource+0x92>

080079c0 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80079c0:	6800      	ldr	r0, [r0, #0]
{
 80079c2:	b538      	push	{r3, r4, r5, lr}
  tmpsmcr = htim->Instance->SMCR;
 80079c4:	6883      	ldr	r3, [r0, #8]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80079c6:	684a      	ldr	r2, [r1, #4]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80079cc:	680c      	ldr	r4, [r1, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80079ce:	4313      	orrs	r3, r2
  tmpsmcr &= ~TIM_SMCR_SMS;
 80079d0:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80079d4:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80079d6:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80079d8:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80079da:	d01e      	beq.n	8007a1a <TIM_SlaveTimer_SetConfig+0x5a>
 80079dc:	d803      	bhi.n	80079e6 <TIM_SlaveTimer_SetConfig+0x26>
 80079de:	2a40      	cmp	r2, #64	; 0x40
 80079e0:	d00b      	beq.n	80079fa <TIM_SlaveTimer_SetConfig+0x3a>
  return HAL_OK;
 80079e2:	2000      	movs	r0, #0
}
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
  switch (sSlaveConfig->InputTrigger)
 80079e6:	2a60      	cmp	r2, #96	; 0x60
 80079e8:	d027      	beq.n	8007a3a <TIM_SlaveTimer_SetConfig+0x7a>
 80079ea:	2a70      	cmp	r2, #112	; 0x70
 80079ec:	d1f9      	bne.n	80079e2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_ETR_SetConfig(htim->Instance,
 80079ee:	690b      	ldr	r3, [r1, #16]
 80079f0:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 80079f4:	f7ff ff46 	bl	8007884 <TIM_ETR_SetConfig>
 80079f8:	e7f3      	b.n	80079e2 <TIM_SlaveTimer_SetConfig+0x22>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80079fa:	2c05      	cmp	r4, #5
 80079fc:	d030      	beq.n	8007a60 <TIM_SlaveTimer_SetConfig+0xa0>
      tmpccer = htim->Instance->CCER;
 80079fe:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a00:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007a02:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007a04:	f023 0301 	bic.w	r3, r3, #1
 8007a08:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007a0a:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007a10:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8007a14:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a16:	6202      	str	r2, [r0, #32]
 8007a18:	e7e3      	b.n	80079e2 <TIM_SlaveTimer_SetConfig+0x22>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a1a:	688a      	ldr	r2, [r1, #8]
 8007a1c:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8007a1e:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a20:	6a04      	ldr	r4, [r0, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a22:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a26:	f024 0401 	bic.w	r4, r4, #1
 8007a2a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a2c:	6983      	ldr	r3, [r0, #24]
  tmpccer |= TIM_ICPolarity;
 8007a2e:	430a      	orrs	r2, r1
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a30:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a34:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8007a38:	e7ec      	b.n	8007a14 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a3a:	688c      	ldr	r4, [r1, #8]
 8007a3c:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a3e:	6a01      	ldr	r1, [r0, #32]
 8007a40:	f021 0110 	bic.w	r1, r1, #16
 8007a44:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a46:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8007a48:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a4a:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a4e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a52:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a56:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 8007a5a:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8007a5c:	6203      	str	r3, [r0, #32]
 8007a5e:	e7c0      	b.n	80079e2 <TIM_SlaveTimer_SetConfig+0x22>
        return HAL_ERROR;
 8007a60:	2001      	movs	r0, #1
 8007a62:	e7bf      	b.n	80079e4 <TIM_SlaveTimer_SetConfig+0x24>

08007a64 <HAL_TIM_SlaveConfigSynchro>:
{
 8007a64:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8007a66:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007a6a:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	f04f 0302 	mov.w	r3, #2
 8007a72:	d01c      	beq.n	8007aae <HAL_TIM_SlaveConfigSynchro+0x4a>
 8007a74:	2501      	movs	r5, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007a76:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_LOCK(htim);
 8007a7a:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a7e:	f7ff ff9f 	bl	80079c0 <TIM_SlaveTimer_SetConfig>
 8007a82:	b130      	cbz	r0, 8007a92 <HAL_TIM_SlaveConfigSynchro+0x2e>
    __HAL_UNLOCK(htim);
 8007a84:	2300      	movs	r3, #0
    return HAL_ERROR;
 8007a86:	4628      	mov	r0, r5
    htim->State = HAL_TIM_STATE_READY;
 8007a88:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007a8c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8007a90:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a92:	6823      	ldr	r3, [r4, #0]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a9a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007aa2:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 8007aa4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007aa8:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 8007aac:	e7f0      	b.n	8007a90 <HAL_TIM_SlaveConfigSynchro+0x2c>
  __HAL_LOCK(htim);
 8007aae:	4618      	mov	r0, r3
 8007ab0:	e7ee      	b.n	8007a90 <HAL_TIM_SlaveConfigSynchro+0x2c>

08007ab2 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007ab2:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab4:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ab6:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ab8:	f001 011f 	and.w	r1, r1, #31
 8007abc:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8007abe:	ea23 0304 	bic.w	r3, r3, r4
 8007ac2:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007ac4:	6a03      	ldr	r3, [r0, #32]
 8007ac6:	408a      	lsls	r2, r1
 8007ac8:	431a      	orrs	r2, r3
 8007aca:	6202      	str	r2, [r0, #32]
}
 8007acc:	bd10      	pop	{r4, pc}
	...

08007ad0 <HAL_TIM_OC_Start>:
{
 8007ad0:	b510      	push	{r4, lr}
 8007ad2:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	6800      	ldr	r0, [r0, #0]
 8007ad8:	f7ff ffeb 	bl	8007ab2 <TIM_CCxChannelCmd>
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007adc:	6823      	ldr	r3, [r4, #0]
 8007ade:	4a09      	ldr	r2, [pc, #36]	; (8007b04 <HAL_TIM_OC_Start+0x34>)
}
 8007ae0:	2000      	movs	r0, #0
  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ae2:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8007ae4:	bf02      	ittt	eq
 8007ae6:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8007ae8:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8007aec:	645a      	streq	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007aee:	689a      	ldr	r2, [r3, #8]
 8007af0:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007af4:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007af6:	bf1e      	ittt	ne
 8007af8:	681a      	ldrne	r2, [r3, #0]
 8007afa:	f042 0201 	orrne.w	r2, r2, #1
 8007afe:	601a      	strne	r2, [r3, #0]
}
 8007b00:	bd10      	pop	{r4, pc}
 8007b02:	bf00      	nop
 8007b04:	40012c00 	.word	0x40012c00

08007b08 <HAL_TIM_PWM_Start>:
 8007b08:	f7ff bfe2 	b.w	8007ad0 <HAL_TIM_OC_Start>

08007b0c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007b0c:	b510      	push	{r4, lr}
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b0e:	2404      	movs	r4, #4

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007b10:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b12:	f001 011f 	and.w	r1, r1, #31
 8007b16:	408c      	lsls	r4, r1
  TIMx->CCER &=  ~tmp;
 8007b18:	ea23 0304 	bic.w	r3, r3, r4
 8007b1c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007b1e:	6a03      	ldr	r3, [r0, #32]
 8007b20:	408a      	lsls	r2, r1
 8007b22:	431a      	orrs	r2, r3
 8007b24:	6202      	str	r2, [r0, #32]
}
 8007b26:	bd10      	pop	{r4, pc}

08007b28 <HAL_TIMEx_OCN_Start>:
{
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	4604      	mov	r4, r0
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007b2c:	2204      	movs	r2, #4
 8007b2e:	6800      	ldr	r0, [r0, #0]
 8007b30:	f7ff ffec 	bl	8007b0c <TIM_CCxNChannelCmd>
  __HAL_TIM_MOE_ENABLE(htim);
 8007b34:	6823      	ldr	r3, [r4, #0]
}
 8007b36:	2000      	movs	r0, #0
  __HAL_TIM_MOE_ENABLE(htim);
 8007b38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b3a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b3e:	645a      	str	r2, [r3, #68]	; 0x44
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	f002 0207 	and.w	r2, r2, #7
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007b46:	2a06      	cmp	r2, #6
    __HAL_TIM_ENABLE(htim);
 8007b48:	bf1e      	ittt	ne
 8007b4a:	681a      	ldrne	r2, [r3, #0]
 8007b4c:	f042 0201 	orrne.w	r2, r2, #1
 8007b50:	601a      	strne	r2, [r3, #0]
}
 8007b52:	bd10      	pop	{r4, pc}

08007b54 <HAL_TIMEx_PWMN_Start>:
 8007b54:	f7ff bfe8 	b.w	8007b28 <HAL_TIMEx_OCN_Start>

08007b58 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 8007b58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8007b5c:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	f04f 0302 	mov.w	r3, #2
 8007b64:	d014      	beq.n	8007b90 <HAL_TIMEx_MasterConfigSynchronization+0x38>
  tmpcr2 = htim->Instance->CR2;
 8007b66:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8007b68:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8007b6c:	6862      	ldr	r2, [r4, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007b6e:	68a3      	ldr	r3, [r4, #8]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b70:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b72:	6849      	ldr	r1, [r1, #4]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007b74:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007b78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007b7c:	430b      	orrs	r3, r1
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007b7e:	432a      	orrs	r2, r5
  htim->Instance->CR2 = tmpcr2;
 8007b80:	6062      	str	r2, [r4, #4]
  htim->Instance->SMCR = tmpsmcr;
 8007b82:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8007b84:	2301      	movs	r3, #1
 8007b86:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 8007b90:	4618      	mov	r0, r3
}
 8007b92:	bd30      	pop	{r4, r5, pc}

08007b94 <HAL_TIMEx_ConfigBreakDeadTime>:
  __HAL_LOCK(htim);
 8007b94:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d01f      	beq.n	8007bdc <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b9c:	68cb      	ldr	r3, [r1, #12]
 8007b9e:	688a      	ldr	r2, [r1, #8]
 8007ba0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ba4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007ba6:	684a      	ldr	r2, [r1, #4]
 8007ba8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007bac:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007bae:	680a      	ldr	r2, [r1, #0]
 8007bb0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007bb4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007bb6:	690a      	ldr	r2, [r1, #16]
 8007bb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bbc:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007bbe:	694a      	ldr	r2, [r1, #20]
 8007bc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007bc4:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bc6:	69ca      	ldr	r2, [r1, #28]
 8007bc8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007bcc:	4313      	orrs	r3, r2
  htim->Instance->BDTR = tmpbdtr;
 8007bce:	6802      	ldr	r2, [r0, #0]
 8007bd0:	6453      	str	r3, [r2, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8007bd8:	4618      	mov	r0, r3
 8007bda:	4770      	bx	lr
  __HAL_LOCK(htim);
 8007bdc:	2002      	movs	r0, #2
}
 8007bde:	4770      	bx	lr

08007be0 <HAL_TIMEx_CommutCallback>:
 8007be0:	4770      	bx	lr

08007be2 <HAL_TIMEx_BreakCallback>:
 8007be2:	4770      	bx	lr

08007be4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007be4:	6803      	ldr	r3, [r0, #0]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007bec:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bee:	695a      	ldr	r2, [r3, #20]
 8007bf0:	f022 0201 	bic.w	r2, r2, #1
 8007bf4:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
}
 8007bfc:	4770      	bx	lr
	...

08007c00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c00:	b538      	push	{r3, r4, r5, lr}
 8007c02:	4605      	mov	r5, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c04:	6803      	ldr	r3, [r0, #0]
 8007c06:	68c1      	ldr	r1, [r0, #12]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	2419      	movs	r4, #25
 8007c0c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007c10:	430a      	orrs	r2, r1
 8007c12:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c14:	6882      	ldr	r2, [r0, #8]
 8007c16:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8007c18:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c1a:	4302      	orrs	r2, r0
 8007c1c:	6968      	ldr	r0, [r5, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007c1e:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007c22:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8007c26:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8007c28:	430a      	orrs	r2, r1
 8007c2a:	60da      	str	r2, [r3, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c2c:	695a      	ldr	r2, [r3, #20]
 8007c2e:	69a9      	ldr	r1, [r5, #24]
 8007c30:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c34:	430a      	orrs	r2, r1
 8007c36:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8007c38:	4a0d      	ldr	r2, [pc, #52]	; (8007c70 <UART_SetConfig+0x70>)
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d114      	bne.n	8007c68 <UART_SetConfig+0x68>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8007c3e:	f7ff fb55 	bl	80072ec <HAL_RCC_GetPCLK2Freq>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c42:	4360      	muls	r0, r4
 8007c44:	686c      	ldr	r4, [r5, #4]
 8007c46:	2264      	movs	r2, #100	; 0x64
 8007c48:	00a4      	lsls	r4, r4, #2
 8007c4a:	fbb0 f0f4 	udiv	r0, r0, r4
 8007c4e:	fbb0 f1f2 	udiv	r1, r0, r2
 8007c52:	fb02 0311 	mls	r3, r2, r1, r0
 8007c56:	011b      	lsls	r3, r3, #4
 8007c58:	3332      	adds	r3, #50	; 0x32
 8007c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c5e:	682c      	ldr	r4, [r5, #0]
 8007c60:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007c64:	60a3      	str	r3, [r4, #8]
  }
#endif /* USART_CR1_OVER8 */
}
 8007c66:	bd38      	pop	{r3, r4, r5, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8007c68:	f7ff fb30 	bl	80072cc <HAL_RCC_GetPCLK1Freq>
 8007c6c:	e7e9      	b.n	8007c42 <UART_SetConfig+0x42>
 8007c6e:	bf00      	nop
 8007c70:	40013800 	.word	0x40013800

08007c74 <HAL_UART_Init>:
{
 8007c74:	b510      	push	{r4, lr}
  if (huart == NULL)
 8007c76:	4604      	mov	r4, r0
 8007c78:	b340      	cbz	r0, 8007ccc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8007c7a:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007c7e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007c82:	b91b      	cbnz	r3, 8007c8c <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8007c84:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8007c88:	f7fc fbf2 	bl	8004470 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8007c8c:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8007c8e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8007c90:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8007c94:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8007c96:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8007c98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c9c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8007c9e:	f7ff ffaf 	bl	8007c00 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca2:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ca4:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007ca6:	691a      	ldr	r2, [r3, #16]
 8007ca8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007cac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007cae:	695a      	ldr	r2, [r3, #20]
 8007cb0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007cb4:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007cbc:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007cbe:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cc0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8007cc2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8007cc6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8007cca:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ccc:	2001      	movs	r0, #1
 8007cce:	e7fc      	b.n	8007cca <HAL_UART_Init+0x56>

08007cd0 <HAL_UART_Transmit_DMA>:
{
 8007cd0:	b538      	push	{r3, r4, r5, lr}
 8007cd2:	4604      	mov	r4, r0
 8007cd4:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007cd6:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007cda:	2a20      	cmp	r2, #32
 8007cdc:	d12a      	bne.n	8007d34 <HAL_UART_Transmit_DMA+0x64>
    if ((pData == NULL) || (Size == 0U))
 8007cde:	b339      	cbz	r1, 8007d30 <HAL_UART_Transmit_DMA+0x60>
 8007ce0:	b333      	cbz	r3, 8007d30 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8007ce2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8007ce6:	2a01      	cmp	r2, #1
 8007ce8:	d024      	beq.n	8007d34 <HAL_UART_Transmit_DMA+0x64>
 8007cea:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cec:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8007cee:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cf2:	2221      	movs	r2, #33	; 0x21
    huart->TxXferCount = Size;
 8007cf4:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cf6:	6b20      	ldr	r0, [r4, #48]	; 0x30
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cf8:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007cfa:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007cfe:	4a0e      	ldr	r2, [pc, #56]	; (8007d38 <HAL_UART_Transmit_DMA+0x68>)
    huart->TxXferSize = Size;
 8007d00:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8007d02:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007d04:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007d06:	4a0d      	ldr	r2, [pc, #52]	; (8007d3c <HAL_UART_Transmit_DMA+0x6c>)
 8007d08:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007d0a:	4a0d      	ldr	r2, [pc, #52]	; (8007d40 <HAL_UART_Transmit_DMA+0x70>)
    huart->hdmatx->XferAbortCallback = NULL;
 8007d0c:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007d10:	6822      	ldr	r2, [r4, #0]
 8007d12:	3204      	adds	r2, #4
 8007d14:	f7fe fd32 	bl	800677c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d18:	f06f 0240 	mvn.w	r2, #64	; 0x40
    return HAL_OK;
 8007d1c:	4628      	mov	r0, r5
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d22:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8007d24:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007d28:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d2c:	615a      	str	r2, [r3, #20]
}
 8007d2e:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8007d30:	2001      	movs	r0, #1
 8007d32:	e7fc      	b.n	8007d2e <HAL_UART_Transmit_DMA+0x5e>
    return HAL_BUSY;
 8007d34:	2002      	movs	r0, #2
 8007d36:	e7fa      	b.n	8007d2e <HAL_UART_Transmit_DMA+0x5e>
 8007d38:	08007dd7 	.word	0x08007dd7
 8007d3c:	08007e05 	.word	0x08007e05
 8007d40:	08007ecd 	.word	0x08007ecd

08007d44 <HAL_UART_Receive_DMA>:
{
 8007d44:	4613      	mov	r3, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d46:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
{
 8007d4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d4c:	2a20      	cmp	r2, #32
{
 8007d4e:	4605      	mov	r5, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8007d50:	d138      	bne.n	8007dc4 <HAL_UART_Receive_DMA+0x80>
    if ((pData == NULL) || (Size == 0U))
 8007d52:	2900      	cmp	r1, #0
 8007d54:	d034      	beq.n	8007dc0 <HAL_UART_Receive_DMA+0x7c>
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d032      	beq.n	8007dc0 <HAL_UART_Receive_DMA+0x7c>
    __HAL_LOCK(huart);
 8007d5a:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8007d5e:	2a01      	cmp	r2, #1
 8007d60:	d030      	beq.n	8007dc4 <HAL_UART_Receive_DMA+0x80>
 8007d62:	2201      	movs	r2, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d64:	2400      	movs	r4, #0
    __HAL_LOCK(huart);
 8007d66:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d6a:	2222      	movs	r2, #34	; 0x22
    huart->pRxBuffPtr = pData;
 8007d6c:	6281      	str	r1, [r0, #40]	; 0x28
    huart->RxXferSize = Size;
 8007d6e:	8583      	strh	r3, [r0, #44]	; 0x2c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d70:	63c4      	str	r4, [r0, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007d72:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d76:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007d78:	4a13      	ldr	r2, [pc, #76]	; (8007dc8 <HAL_UART_Receive_DMA+0x84>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d7a:	682e      	ldr	r6, [r5, #0]
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007d7c:	6282      	str	r2, [r0, #40]	; 0x28
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007d7e:	4a13      	ldr	r2, [pc, #76]	; (8007dcc <HAL_UART_Receive_DMA+0x88>)
 8007d80:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007d82:	4a13      	ldr	r2, [pc, #76]	; (8007dd0 <HAL_UART_Receive_DMA+0x8c>)
    huart->hdmarx->XferAbortCallback = NULL;
 8007d84:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007d88:	460a      	mov	r2, r1
 8007d8a:	1d31      	adds	r1, r6, #4
 8007d8c:	f7fe fcf6 	bl	800677c <HAL_DMA_Start_IT>
    return HAL_OK;
 8007d90:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007d92:	682b      	ldr	r3, [r5, #0]
 8007d94:	9401      	str	r4, [sp, #4]
 8007d96:	681a      	ldr	r2, [r3, #0]
 8007d98:	9201      	str	r2, [sp, #4]
 8007d9a:	685a      	ldr	r2, [r3, #4]
    __HAL_UNLOCK(huart);
 8007d9c:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
    __HAL_UART_CLEAR_OREFLAG(huart);
 8007da0:	9201      	str	r2, [sp, #4]
 8007da2:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007da4:	68da      	ldr	r2, [r3, #12]
 8007da6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007daa:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dac:	695a      	ldr	r2, [r3, #20]
 8007dae:	f042 0201 	orr.w	r2, r2, #1
 8007db2:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007db4:	695a      	ldr	r2, [r3, #20]
 8007db6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007dba:	615a      	str	r2, [r3, #20]
}
 8007dbc:	b002      	add	sp, #8
 8007dbe:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8007dc0:	2001      	movs	r0, #1
 8007dc2:	e7fb      	b.n	8007dbc <HAL_UART_Receive_DMA+0x78>
    return HAL_BUSY;
 8007dc4:	2002      	movs	r0, #2
 8007dc6:	e7f9      	b.n	8007dbc <HAL_UART_Receive_DMA+0x78>
 8007dc8:	08007e11 	.word	0x08007e11
 8007dcc:	08007ec1 	.word	0x08007ec1
 8007dd0:	08007ecd 	.word	0x08007ecd

08007dd4 <HAL_UART_TxCpltCallback>:
 8007dd4:	4770      	bx	lr

08007dd6 <UART_DMATransmitCplt>:
{
 8007dd6:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007dd8:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007dda:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	f013 0320 	ands.w	r3, r3, #32
 8007de2:	d10a      	bne.n	8007dfa <UART_DMATransmitCplt+0x24>
    huart->TxXferCount = 0x00U;
 8007de4:	84d3      	strh	r3, [r2, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	695a      	ldr	r2, [r3, #20]
 8007dea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007dee:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007df0:	68da      	ldr	r2, [r3, #12]
 8007df2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007df6:	60da      	str	r2, [r3, #12]
}
 8007df8:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8007dfa:	4610      	mov	r0, r2
 8007dfc:	f7ff ffea 	bl	8007dd4 <HAL_UART_TxCpltCallback>
}
 8007e00:	e7fa      	b.n	8007df8 <UART_DMATransmitCplt+0x22>

08007e02 <HAL_UART_TxHalfCpltCallback>:
 8007e02:	4770      	bx	lr

08007e04 <UART_DMATxHalfCplt>:
{
 8007e04:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8007e06:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007e08:	f7ff fffb 	bl	8007e02 <HAL_UART_TxHalfCpltCallback>
}
 8007e0c:	bd08      	pop	{r3, pc}

08007e0e <HAL_UART_RxCpltCallback>:
 8007e0e:	4770      	bx	lr

08007e10 <UART_DMAReceiveCplt>:
{
 8007e10:	b508      	push	{r3, lr}
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e12:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e14:	6a42      	ldr	r2, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f013 0320 	ands.w	r3, r3, #32
 8007e1c:	d110      	bne.n	8007e40 <UART_DMAReceiveCplt+0x30>
    huart->RxXferCount = 0U;
 8007e1e:	85d3      	strh	r3, [r2, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e20:	6813      	ldr	r3, [r2, #0]
 8007e22:	68d9      	ldr	r1, [r3, #12]
 8007e24:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e28:	60d9      	str	r1, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e2a:	6959      	ldr	r1, [r3, #20]
 8007e2c:	f021 0101 	bic.w	r1, r1, #1
 8007e30:	6159      	str	r1, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e32:	6959      	ldr	r1, [r3, #20]
 8007e34:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007e38:	6159      	str	r1, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8007e3a:	2320      	movs	r3, #32
 8007e3c:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8007e40:	4610      	mov	r0, r2
 8007e42:	f7ff ffe4 	bl	8007e0e <HAL_UART_RxCpltCallback>
}
 8007e46:	bd08      	pop	{r3, pc}

08007e48 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e48:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
{
 8007e4c:	b510      	push	{r4, lr}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e4e:	2b22      	cmp	r3, #34	; 0x22
 8007e50:	d133      	bne.n	8007eba <UART_Receive_IT+0x72>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007e52:	6881      	ldr	r1, [r0, #8]
 8007e54:	6904      	ldr	r4, [r0, #16]
 8007e56:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007e5a:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007e5c:	6802      	ldr	r2, [r0, #0]
 8007e5e:	d123      	bne.n	8007ea8 <UART_Receive_IT+0x60>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e60:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007e62:	b9ec      	cbnz	r4, 8007ea0 <UART_Receive_IT+0x58>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007e64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e68:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 1U;
 8007e6c:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8007e6e:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8007e70:	3c01      	subs	r4, #1
 8007e72:	b2a4      	uxth	r4, r4
 8007e74:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8007e76:	b98c      	cbnz	r4, 8007e9c <UART_Receive_IT+0x54>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007e78:	6803      	ldr	r3, [r0, #0]
 8007e7a:	68da      	ldr	r2, [r3, #12]
 8007e7c:	f022 0220 	bic.w	r2, r2, #32
 8007e80:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007e82:	68da      	ldr	r2, [r3, #12]
 8007e84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e88:	60da      	str	r2, [r3, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007e8a:	695a      	ldr	r2, [r3, #20]
 8007e8c:	f022 0201 	bic.w	r2, r2, #1
 8007e90:	615a      	str	r2, [r3, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8007e92:	2320      	movs	r3, #32
 8007e94:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8007e98:	f7ff ffb9 	bl	8007e0e <HAL_UART_RxCpltCallback>
    if (--huart->RxXferCount == 0U)
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	e00d      	b.n	8007ebc <UART_Receive_IT+0x74>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	f823 2b01 	strh.w	r2, [r3], #1
 8007ea6:	e7e1      	b.n	8007e6c <UART_Receive_IT+0x24>
 8007ea8:	1c59      	adds	r1, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007eaa:	6852      	ldr	r2, [r2, #4]
 8007eac:	6281      	str	r1, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8007eae:	b90c      	cbnz	r4, 8007eb4 <UART_Receive_IT+0x6c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007eb0:	701a      	strb	r2, [r3, #0]
 8007eb2:	e7dc      	b.n	8007e6e <UART_Receive_IT+0x26>
 8007eb4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007eb8:	e7fa      	b.n	8007eb0 <UART_Receive_IT+0x68>
    return HAL_BUSY;
 8007eba:	2002      	movs	r0, #2
}
 8007ebc:	bd10      	pop	{r4, pc}

08007ebe <HAL_UART_RxHalfCpltCallback>:
 8007ebe:	4770      	bx	lr

08007ec0 <UART_DMARxHalfCplt>:
{
 8007ec0:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8007ec2:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007ec4:	f7ff fffb 	bl	8007ebe <HAL_UART_RxHalfCpltCallback>
}
 8007ec8:	bd08      	pop	{r3, pc}

08007eca <HAL_UART_ErrorCallback>:
 8007eca:	4770      	bx	lr

08007ecc <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ecc:	6a41      	ldr	r1, [r0, #36]	; 0x24
{
 8007ece:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007ed0:	680b      	ldr	r3, [r1, #0]
 8007ed2:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007ed4:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8007ed8:	2821      	cmp	r0, #33	; 0x21
 8007eda:	d10a      	bne.n	8007ef2 <UART_DMAError+0x26>
 8007edc:	0612      	lsls	r2, r2, #24
 8007ede:	d508      	bpl.n	8007ef2 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	84ca      	strh	r2, [r1, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007ee4:	68da      	ldr	r2, [r3, #12]
 8007ee6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007eea:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8007eec:	2220      	movs	r2, #32
 8007eee:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007ef2:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007ef4:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8007ef8:	2a22      	cmp	r2, #34	; 0x22
 8007efa:	d106      	bne.n	8007f0a <UART_DMAError+0x3e>
 8007efc:	065b      	lsls	r3, r3, #25
 8007efe:	d504      	bpl.n	8007f0a <UART_DMAError+0x3e>
    huart->RxXferCount = 0x00U;
 8007f00:	2300      	movs	r3, #0
    UART_EndRxTransfer(huart);
 8007f02:	4608      	mov	r0, r1
    huart->RxXferCount = 0x00U;
 8007f04:	85cb      	strh	r3, [r1, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f06:	f7ff fe6d 	bl	8007be4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007f0c:	4608      	mov	r0, r1
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f0e:	f043 0310 	orr.w	r3, r3, #16
 8007f12:	63cb      	str	r3, [r1, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8007f14:	f7ff ffd9 	bl	8007eca <HAL_UART_ErrorCallback>
}
 8007f18:	bd08      	pop	{r3, pc}
	...

08007f1c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f1c:	6803      	ldr	r3, [r0, #0]
{
 8007f1e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007f20:	681a      	ldr	r2, [r3, #0]
{
 8007f22:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8007f24:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f26:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f28:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8007f2a:	d107      	bne.n	8007f3c <HAL_UART_IRQHandler+0x20>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f2c:	0696      	lsls	r6, r2, #26
 8007f2e:	d558      	bpl.n	8007fe2 <HAL_UART_IRQHandler+0xc6>
 8007f30:	068d      	lsls	r5, r1, #26
 8007f32:	d556      	bpl.n	8007fe2 <HAL_UART_IRQHandler+0xc6>
}
 8007f34:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8007f38:	f7ff bf86 	b.w	8007e48 <UART_Receive_IT>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007f3c:	f015 0501 	ands.w	r5, r5, #1
 8007f40:	d102      	bne.n	8007f48 <HAL_UART_IRQHandler+0x2c>
 8007f42:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007f46:	d04c      	beq.n	8007fe2 <HAL_UART_IRQHandler+0xc6>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f48:	07d3      	lsls	r3, r2, #31
 8007f4a:	d505      	bpl.n	8007f58 <HAL_UART_IRQHandler+0x3c>
 8007f4c:	05ce      	lsls	r6, r1, #23
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f4e:	bf42      	ittt	mi
 8007f50:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8007f52:	f043 0301 	orrmi.w	r3, r3, #1
 8007f56:	63e3      	strmi	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f58:	0750      	lsls	r0, r2, #29
 8007f5a:	d504      	bpl.n	8007f66 <HAL_UART_IRQHandler+0x4a>
 8007f5c:	b11d      	cbz	r5, 8007f66 <HAL_UART_IRQHandler+0x4a>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f5e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f60:	f043 0302 	orr.w	r3, r3, #2
 8007f64:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f66:	0793      	lsls	r3, r2, #30
 8007f68:	d504      	bpl.n	8007f74 <HAL_UART_IRQHandler+0x58>
 8007f6a:	b11d      	cbz	r5, 8007f74 <HAL_UART_IRQHandler+0x58>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f6c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f74:	0716      	lsls	r6, r2, #28
 8007f76:	d504      	bpl.n	8007f82 <HAL_UART_IRQHandler+0x66>
 8007f78:	b11d      	cbz	r5, 8007f82 <HAL_UART_IRQHandler+0x66>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f7c:	f043 0308 	orr.w	r3, r3, #8
 8007f80:	63e3      	str	r3, [r4, #60]	; 0x3c
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f82:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007f84:	b343      	cbz	r3, 8007fd8 <HAL_UART_IRQHandler+0xbc>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007f86:	0695      	lsls	r5, r2, #26
 8007f88:	d504      	bpl.n	8007f94 <HAL_UART_IRQHandler+0x78>
 8007f8a:	0688      	lsls	r0, r1, #26
 8007f8c:	d502      	bpl.n	8007f94 <HAL_UART_IRQHandler+0x78>
        UART_Receive_IT(huart);
 8007f8e:	4620      	mov	r0, r4
 8007f90:	f7ff ff5a 	bl	8007e48 <UART_Receive_IT>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f94:	6823      	ldr	r3, [r4, #0]
        UART_EndRxTransfer(huart);
 8007f96:	4620      	mov	r0, r4
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f98:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007f9a:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007f9c:	0711      	lsls	r1, r2, #28
 8007f9e:	d402      	bmi.n	8007fa6 <HAL_UART_IRQHandler+0x8a>
 8007fa0:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007fa4:	d019      	beq.n	8007fda <HAL_UART_IRQHandler+0xbe>
        UART_EndRxTransfer(huart);
 8007fa6:	f7ff fe1d 	bl	8007be4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	695a      	ldr	r2, [r3, #20]
 8007fae:	0652      	lsls	r2, r2, #25
 8007fb0:	d50f      	bpl.n	8007fd2 <HAL_UART_IRQHandler+0xb6>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb2:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007fb4:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007fb6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fba:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8007fbc:	b148      	cbz	r0, 8007fd2 <HAL_UART_IRQHandler+0xb6>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007fbe:	4b26      	ldr	r3, [pc, #152]	; (8008058 <HAL_UART_IRQHandler+0x13c>)
 8007fc0:	6343      	str	r3, [r0, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007fc2:	f7fe fc19 	bl	80067f8 <HAL_DMA_Abort_IT>
 8007fc6:	b138      	cbz	r0, 8007fd8 <HAL_UART_IRQHandler+0xbc>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fc8:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8007fca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007fce:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007fd0:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8007fd2:	4620      	mov	r0, r4
 8007fd4:	f7ff ff79 	bl	8007eca <HAL_UART_ErrorCallback>
}
 8007fd8:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8007fda:	f7ff ff76 	bl	8007eca <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fde:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007fe0:	e7fa      	b.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007fe2:	0616      	lsls	r6, r2, #24
 8007fe4:	d528      	bpl.n	8008038 <HAL_UART_IRQHandler+0x11c>
 8007fe6:	060d      	lsls	r5, r1, #24
 8007fe8:	d526      	bpl.n	8008038 <HAL_UART_IRQHandler+0x11c>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007fea:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007fee:	2a21      	cmp	r2, #33	; 0x21
 8007ff0:	d1f2      	bne.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8007ff2:	68a1      	ldr	r1, [r4, #8]
 8007ff4:	6a22      	ldr	r2, [r4, #32]
 8007ff6:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007ffa:	d118      	bne.n	800802e <HAL_UART_IRQHandler+0x112>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007ffc:	8811      	ldrh	r1, [r2, #0]
 8007ffe:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008002:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008004:	6921      	ldr	r1, [r4, #16]
 8008006:	b981      	cbnz	r1, 800802a <HAL_UART_IRQHandler+0x10e>
        huart->pTxBuffPtr += 2U;
 8008008:	3202      	adds	r2, #2
        huart->pTxBuffPtr += 1U;
 800800a:	6222      	str	r2, [r4, #32]
    if (--huart->TxXferCount == 0U)
 800800c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 800800e:	3a01      	subs	r2, #1
 8008010:	b292      	uxth	r2, r2
 8008012:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008014:	2a00      	cmp	r2, #0
 8008016:	d1df      	bne.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008018:	68da      	ldr	r2, [r3, #12]
 800801a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800801e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008020:	68da      	ldr	r2, [r3, #12]
 8008022:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008026:	60da      	str	r2, [r3, #12]
 8008028:	e7d6      	b.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
        huart->pTxBuffPtr += 1U;
 800802a:	3201      	adds	r2, #1
 800802c:	e7ed      	b.n	800800a <HAL_UART_IRQHandler+0xee>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800802e:	1c51      	adds	r1, r2, #1
 8008030:	6221      	str	r1, [r4, #32]
 8008032:	7812      	ldrb	r2, [r2, #0]
 8008034:	605a      	str	r2, [r3, #4]
 8008036:	e7e9      	b.n	800800c <HAL_UART_IRQHandler+0xf0>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008038:	0650      	lsls	r0, r2, #25
 800803a:	d5cd      	bpl.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
 800803c:	064a      	lsls	r2, r1, #25
 800803e:	d5cb      	bpl.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008040:	68da      	ldr	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008042:	4620      	mov	r0, r4
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008044:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008048:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800804a:	2320      	movs	r3, #32
 800804c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8008050:	f7ff fec0 	bl	8007dd4 <HAL_UART_TxCpltCallback>
 8008054:	e7c0      	b.n	8007fd8 <HAL_UART_IRQHandler+0xbc>
 8008056:	bf00      	nop
 8008058:	0800805d 	.word	0x0800805d

0800805c <UART_DMAAbortOnError>:
{
 800805c:	b508      	push	{r3, lr}
  huart->RxXferCount = 0x00U;
 800805e:	2300      	movs	r3, #0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008060:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0x00U;
 8008062:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008064:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8008066:	f7ff ff30 	bl	8007eca <HAL_UART_ErrorCallback>
}
 800806a:	bd08      	pop	{r3, pc}

0800806c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800806c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 8008070:	b113      	cbz	r3, 8008078 <osKernelInitialize+0xc>
    stat = osErrorISR;
 8008072:	f06f 0005 	mvn.w	r0, #5
 8008076:	4770      	bx	lr
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008078:	f3ef 8310 	mrs	r3, PRIMASK
  if (IS_IRQ()) {
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f8      	bne.n	8008072 <osKernelInitialize+0x6>
 8008080:	4b07      	ldr	r3, [pc, #28]	; (80080a0 <osKernelInitialize+0x34>)
 8008082:	6818      	ldr	r0, [r3, #0]
 8008084:	2802      	cmp	r0, #2
 8008086:	d106      	bne.n	8008096 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008088:	f3ef 8311 	mrs	r3, BASEPRI
 800808c:	2b00      	cmp	r3, #0
 800808e:	d1f0      	bne.n	8008072 <osKernelInitialize+0x6>
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
      stat = osOK;
    } else {
      stat = osError;
 8008090:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 8008094:	4770      	bx	lr
    if (KernelState == osKernelInactive) {
 8008096:	2800      	cmp	r0, #0
 8008098:	d1fa      	bne.n	8008090 <osKernelInitialize+0x24>
      KernelState = osKernelReady;
 800809a:	2201      	movs	r2, #1
 800809c:	601a      	str	r2, [r3, #0]
 800809e:	4770      	bx	lr
 80080a0:	20000848 	.word	0x20000848

080080a4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80080a4:	b510      	push	{r4, lr}
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080a6:	f3ef 8305 	mrs	r3, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 80080aa:	b113      	cbz	r3, 80080b2 <osKernelStart+0xe>
    stat = osErrorISR;
 80080ac:	f06f 0005 	mvn.w	r0, #5
      stat = osError;
    }
  }

  return (stat);
}
 80080b0:	bd10      	pop	{r4, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080b2:	f3ef 8410 	mrs	r4, PRIMASK
  if (IS_IRQ()) {
 80080b6:	2c00      	cmp	r4, #0
 80080b8:	d1f8      	bne.n	80080ac <osKernelStart+0x8>
 80080ba:	4b09      	ldr	r3, [pc, #36]	; (80080e0 <osKernelStart+0x3c>)
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	2a02      	cmp	r2, #2
 80080c0:	d106      	bne.n	80080d0 <osKernelStart+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80080c2:	f3ef 8311 	mrs	r3, BASEPRI
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d1f0      	bne.n	80080ac <osKernelStart+0x8>
      stat = osError;
 80080ca:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 80080ce:	e7ef      	b.n	80080b0 <osKernelStart+0xc>
    if (KernelState == osKernelReady) {
 80080d0:	2a01      	cmp	r2, #1
 80080d2:	d1fa      	bne.n	80080ca <osKernelStart+0x26>
      KernelState = osKernelRunning;
 80080d4:	2202      	movs	r2, #2
 80080d6:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80080d8:	f001 f824 	bl	8009124 <vTaskStartScheduler>
      stat = osOK;
 80080dc:	4620      	mov	r0, r4
 80080de:	e7e7      	b.n	80080b0 <osKernelStart+0xc>
 80080e0:	20000848 	.word	0x20000848

080080e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080e6:	4614      	mov	r4, r2
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80080e8:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80080ea:	b087      	sub	sp, #28
 80080ec:	460b      	mov	r3, r1
  hTask = NULL;
 80080ee:	9205      	str	r2, [sp, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080f0:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 80080f4:	bb62      	cbnz	r2, 8008150 <osThreadNew+0x6c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080f6:	f3ef 8210 	mrs	r2, PRIMASK
 80080fa:	bb4a      	cbnz	r2, 8008150 <osThreadNew+0x6c>
 80080fc:	4a26      	ldr	r2, [pc, #152]	; (8008198 <osThreadNew+0xb4>)
 80080fe:	6812      	ldr	r2, [r2, #0]
 8008100:	2a02      	cmp	r2, #2
 8008102:	d102      	bne.n	800810a <osThreadNew+0x26>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8008104:	f3ef 8211 	mrs	r2, BASEPRI
 8008108:	bb12      	cbnz	r2, 8008150 <osThreadNew+0x6c>
 800810a:	b308      	cbz	r0, 8008150 <osThreadNew+0x6c>
    stack = configMINIMAL_STACK_SIZE;
    prio  = (UBaseType_t)osPriorityNormal;

    empty = '\0';
 800810c:	2200      	movs	r2, #0
 800810e:	f88d 2013 	strb.w	r2, [sp, #19]
    name  = &empty;
    mem   = -1;

    if (attr != NULL) {
 8008112:	2c00      	cmp	r4, #0
 8008114:	d039      	beq.n	800818a <osThreadNew+0xa6>
      if (attr->name != NULL) {
 8008116:	6821      	ldr	r1, [r4, #0]
 8008118:	b909      	cbnz	r1, 800811e <osThreadNew+0x3a>
    name  = &empty;
 800811a:	f10d 0113 	add.w	r1, sp, #19
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800811e:	69a5      	ldr	r5, [r4, #24]
 8008120:	2d00      	cmp	r5, #0
 8008122:	bf08      	it	eq
 8008124:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008126:	1e6a      	subs	r2, r5, #1
 8008128:	2a37      	cmp	r2, #55	; 0x37
 800812a:	462f      	mov	r7, r5
 800812c:	d832      	bhi.n	8008194 <osThreadNew+0xb0>
 800812e:	6862      	ldr	r2, [r4, #4]
 8008130:	07d2      	lsls	r2, r2, #31
 8008132:	d42f      	bmi.n	8008194 <osThreadNew+0xb0>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 8008134:	6966      	ldr	r6, [r4, #20]
 8008136:	b176      	cbz	r6, 8008156 <osThreadNew+0x72>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008138:	08b2      	lsrs	r2, r6, #2
 800813a:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800813e:	f1bc 0f00 	cmp.w	ip, #0
 8008142:	d00a      	beq.n	800815a <osThreadNew+0x76>
 8008144:	f1be 0f53 	cmp.w	lr, #83	; 0x53
 8008148:	d902      	bls.n	8008150 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800814a:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800814c:	b104      	cbz	r4, 8008150 <osThreadNew+0x6c>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800814e:	b9ae      	cbnz	r6, 800817c <osThreadNew+0x98>
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008150:	9805      	ldr	r0, [sp, #20]
}
 8008152:	b007      	add	sp, #28
 8008154:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 8008156:	2280      	movs	r2, #128	; 0x80
 8008158:	e7ef      	b.n	800813a <osThreadNew+0x56>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800815a:	f1be 0f00 	cmp.w	lr, #0
 800815e:	d1f7      	bne.n	8008150 <osThreadNew+0x6c>
      if (mem == 0) {
 8008160:	6924      	ldr	r4, [r4, #16]
 8008162:	2c00      	cmp	r4, #0
 8008164:	d1f4      	bne.n	8008150 <osThreadNew+0x6c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008166:	ac05      	add	r4, sp, #20
 8008168:	e9cd 7400 	strd	r7, r4, [sp]
 800816c:	b292      	uxth	r2, r2
 800816e:	f000 ffac 	bl	80090ca <xTaskCreate>
 8008172:	2801      	cmp	r0, #1
          hTask = NULL;
 8008174:	bf1c      	itt	ne
 8008176:	2300      	movne	r3, #0
 8008178:	9305      	strne	r3, [sp, #20]
 800817a:	e7e9      	b.n	8008150 <osThreadNew+0x6c>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800817c:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 8008180:	9500      	str	r5, [sp, #0]
 8008182:	f000 ff6b 	bl	800905c <xTaskCreateStatic>
 8008186:	9005      	str	r0, [sp, #20]
 8008188:	e7e2      	b.n	8008150 <osThreadNew+0x6c>
    prio  = (UBaseType_t)osPriorityNormal;
 800818a:	2718      	movs	r7, #24
    stack = configMINIMAL_STACK_SIZE;
 800818c:	2280      	movs	r2, #128	; 0x80
    name  = &empty;
 800818e:	f10d 0113 	add.w	r1, sp, #19
 8008192:	e7e8      	b.n	8008166 <osThreadNew+0x82>
        return (NULL);
 8008194:	2000      	movs	r0, #0
 8008196:	e7dc      	b.n	8008152 <osThreadNew+0x6e>
 8008198:	20000848 	.word	0x20000848

0800819c <vApplicationGetIdleTaskMemory>:
/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800819c:	4b03      	ldr	r3, [pc, #12]	; (80081ac <vApplicationGetIdleTaskMemory+0x10>)
 800819e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80081a0:	4b03      	ldr	r3, [pc, #12]	; (80081b0 <vApplicationGetIdleTaskMemory+0x14>)
 80081a2:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80081a4:	2380      	movs	r3, #128	; 0x80
 80081a6:	6013      	str	r3, [r2, #0]
}
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	200007f4 	.word	0x200007f4
 80081b0:	200005f4 	.word	0x200005f4

080081b4 <vApplicationGetTimerTaskMemory>:
/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80081b4:	4b03      	ldr	r3, [pc, #12]	; (80081c4 <vApplicationGetTimerTaskMemory+0x10>)
 80081b6:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80081b8:	4b03      	ldr	r3, [pc, #12]	; (80081c8 <vApplicationGetTimerTaskMemory+0x14>)
 80081ba:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80081bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081c0:	6013      	str	r3, [r2, #0]
}
 80081c2:	4770      	bx	lr
 80081c4:	20000c4c 	.word	0x20000c4c
 80081c8:	2000084c 	.word	0x2000084c

080081cc <vListInitialise>:
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80081cc:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d0:	f100 0308 	add.w	r3, r0, #8
 80081d4:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081d6:	e9c0 2302 	strd	r2, r3, [r0, #8]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80081da:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80081e0:	4770      	bx	lr

080081e2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80081e2:	2300      	movs	r3, #0
 80081e4:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80081e6:	4770      	bx	lr

080081e8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 80081e8:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081ea:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 80081ec:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081ee:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081f0:	689a      	ldr	r2, [r3, #8]
 80081f2:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081f4:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 80081f6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 80081f8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 80081fa:	3301      	adds	r3, #1
 80081fc:	6003      	str	r3, [r0, #0]
}
 80081fe:	4770      	bx	lr

08008200 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008200:	680a      	ldr	r2, [r1, #0]
{
 8008202:	b530      	push	{r4, r5, lr}
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008204:	1c53      	adds	r3, r2, #1
 8008206:	d10a      	bne.n	800821e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008208:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800820e:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008210:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 8008212:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;

	( pxList->uxNumberOfItems )++;
 8008214:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pvContainer = ( void * ) pxList;
 8008216:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 8008218:	3301      	adds	r3, #1
 800821a:	6003      	str	r3, [r0, #0]
}
 800821c:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800821e:	f100 0308 	add.w	r3, r0, #8
 8008222:	685c      	ldr	r4, [r3, #4]
 8008224:	6825      	ldr	r5, [r4, #0]
 8008226:	4295      	cmp	r5, r2
 8008228:	d8ef      	bhi.n	800820a <vListInsert+0xa>
 800822a:	4623      	mov	r3, r4
 800822c:	e7f9      	b.n	8008222 <vListInsert+0x22>

0800822e <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800822e:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008230:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8008234:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008236:	6882      	ldr	r2, [r0, #8]
 8008238:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800823a:	6859      	ldr	r1, [r3, #4]
 800823c:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800823e:	bf08      	it	eq
 8008240:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8008242:	2200      	movs	r2, #0
 8008244:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 8008246:	681a      	ldr	r2, [r3, #0]
 8008248:	3a01      	subs	r2, #1
 800824a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800824c:	6818      	ldr	r0, [r3, #0]
}
 800824e:	4770      	bx	lr

08008250 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008250:	b510      	push	{r4, lr}
 8008252:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008254:	f001 fdde 	bl	8009e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008258:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800825a:	f001 fdfd 	bl	8009e58 <vPortExitCritical>

	return xReturn;
}
 800825e:	fab4 f084 	clz	r0, r4
 8008262:	0940      	lsrs	r0, r0, #5
 8008264:	bd10      	pop	{r4, pc}

08008266 <prvCopyDataToQueue>:
{
 8008266:	b570      	push	{r4, r5, r6, lr}
 8008268:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800826a:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 800826c:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826e:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008270:	b942      	cbnz	r2, 8008284 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008272:	6805      	ldr	r5, [r0, #0]
 8008274:	b99d      	cbnz	r5, 800829e <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8008276:	6840      	ldr	r0, [r0, #4]
 8008278:	f001 fa40 	bl	80096fc <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 800827c:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800827e:	3601      	adds	r6, #1
 8008280:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8008282:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 8008284:	b96d      	cbnz	r5, 80082a2 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8008286:	6880      	ldr	r0, [r0, #8]
 8008288:	f001 fffd 	bl	800a286 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 800828c:	68a3      	ldr	r3, [r4, #8]
 800828e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008290:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008292:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8008294:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008296:	4293      	cmp	r3, r2
 8008298:	d301      	bcc.n	800829e <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800829a:	6823      	ldr	r3, [r4, #0]
 800829c:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 800829e:	2000      	movs	r0, #0
 80082a0:	e7ed      	b.n	800827e <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082a2:	68c0      	ldr	r0, [r0, #12]
 80082a4:	f001 ffef 	bl	800a286 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082a8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082aa:	68e2      	ldr	r2, [r4, #12]
 80082ac:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ae:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082b0:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082b2:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80082b4:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80082b6:	bf3e      	ittt	cc
 80082b8:	6862      	ldrcc	r2, [r4, #4]
 80082ba:	189b      	addcc	r3, r3, r2
 80082bc:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 80082be:	2d02      	cmp	r5, #2
 80082c0:	d1ed      	bne.n	800829e <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80082c2:	b10e      	cbz	r6, 80082c8 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 80082c4:	3e01      	subs	r6, #1
 80082c6:	e7ea      	b.n	800829e <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 80082c8:	4630      	mov	r0, r6
 80082ca:	e7d8      	b.n	800827e <prvCopyDataToQueue+0x18>

080082cc <prvCopyDataFromQueue>:
{
 80082cc:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 80082d0:	b410      	push	{r4}
 80082d2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80082d4:	b162      	cbz	r2, 80082f0 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082d6:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082d8:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082da:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80082dc:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80082de:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082e0:	bf28      	it	cs
 80082e2:	6819      	ldrcs	r1, [r3, #0]
}
 80082e4:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80082e6:	bf28      	it	cs
 80082e8:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80082ea:	68d9      	ldr	r1, [r3, #12]
 80082ec:	f001 bfcb 	b.w	800a286 <memcpy>
}
 80082f0:	bc10      	pop	{r4}
 80082f2:	4770      	bx	lr

080082f4 <prvUnlockQueue>:
{
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 80082f8:	f001 fd8c 	bl	8009e14 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 80082fc:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008300:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 8008304:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008306:	2d00      	cmp	r5, #0
 8008308:	dc14      	bgt.n	8008334 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800830a:	23ff      	movs	r3, #255	; 0xff
 800830c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008310:	f001 fda2 	bl	8009e58 <vPortExitCritical>
	taskENTER_CRITICAL();
 8008314:	f001 fd7e 	bl	8009e14 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008318:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800831c:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008320:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008322:	2d00      	cmp	r5, #0
 8008324:	dc12      	bgt.n	800834c <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 8008326:	23ff      	movs	r3, #255	; 0xff
 8008328:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 800832c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008330:	f001 bd92 	b.w	8009e58 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008334:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008336:	2b00      	cmp	r3, #0
 8008338:	d0e7      	beq.n	800830a <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800833a:	4630      	mov	r0, r6
 800833c:	f001 f8de 	bl	80094fc <xTaskRemoveFromEventList>
 8008340:	b108      	cbz	r0, 8008346 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 8008342:	f001 f97d 	bl	8009640 <vTaskMissedYield>
 8008346:	3d01      	subs	r5, #1
 8008348:	b26d      	sxtb	r5, r5
 800834a:	e7dc      	b.n	8008306 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800834c:	6923      	ldr	r3, [r4, #16]
 800834e:	2b00      	cmp	r3, #0
 8008350:	d0e9      	beq.n	8008326 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008352:	4630      	mov	r0, r6
 8008354:	f001 f8d2 	bl	80094fc <xTaskRemoveFromEventList>
 8008358:	b108      	cbz	r0, 800835e <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800835a:	f001 f971 	bl	8009640 <vTaskMissedYield>
 800835e:	3d01      	subs	r5, #1
 8008360:	b26d      	sxtb	r5, r5
 8008362:	e7de      	b.n	8008322 <prvUnlockQueue+0x2e>

08008364 <xQueueGenericReset>:
{
 8008364:	b538      	push	{r3, r4, r5, lr}
 8008366:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 8008368:	4604      	mov	r4, r0
 800836a:	b940      	cbnz	r0, 800837e <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	e7fe      	b.n	800837c <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800837e:	f001 fd49 	bl	8009e14 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008382:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 8008386:	4343      	muls	r3, r0
 8008388:	6822      	ldr	r2, [r4, #0]
 800838a:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800838c:	1a1b      	subs	r3, r3, r0
 800838e:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8008390:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8008392:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008394:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 8008396:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008398:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800839a:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 800839c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083a0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80083a4:	b995      	cbnz	r5, 80083cc <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a6:	6923      	ldr	r3, [r4, #16]
 80083a8:	b163      	cbz	r3, 80083c4 <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083aa:	f104 0010 	add.w	r0, r4, #16
 80083ae:	f001 f8a5 	bl	80094fc <xTaskRemoveFromEventList>
 80083b2:	b138      	cbz	r0, 80083c4 <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 80083b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083b8:	4b09      	ldr	r3, [pc, #36]	; (80083e0 <xQueueGenericReset+0x7c>)
 80083ba:	601a      	str	r2, [r3, #0]
 80083bc:	f3bf 8f4f 	dsb	sy
 80083c0:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 80083c4:	f001 fd48 	bl	8009e58 <vPortExitCritical>
}
 80083c8:	2001      	movs	r0, #1
 80083ca:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80083cc:	f104 0010 	add.w	r0, r4, #16
 80083d0:	f7ff fefc 	bl	80081cc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80083d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80083d8:	f7ff fef8 	bl	80081cc <vListInitialise>
 80083dc:	e7f2      	b.n	80083c4 <xQueueGenericReset+0x60>
 80083de:	bf00      	nop
 80083e0:	e000ed04 	.word	0xe000ed04

080083e4 <xQueueGenericCreateStatic>:
	{
 80083e4:	b513      	push	{r0, r1, r4, lr}
 80083e6:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80083e8:	b940      	cbnz	r0, 80083fc <xQueueGenericCreateStatic+0x18>
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	e7fe      	b.n	80083fa <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 80083fc:	b943      	cbnz	r3, 8008410 <xQueueGenericCreateStatic+0x2c>
 80083fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008402:	f383 8811 	msr	BASEPRI, r3
 8008406:	f3bf 8f6f 	isb	sy
 800840a:	f3bf 8f4f 	dsb	sy
 800840e:	e7fe      	b.n	800840e <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008410:	b14a      	cbz	r2, 8008426 <xQueueGenericCreateStatic+0x42>
 8008412:	b991      	cbnz	r1, 800843a <xQueueGenericCreateStatic+0x56>
 8008414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008418:	f383 8811 	msr	BASEPRI, r3
 800841c:	f3bf 8f6f 	isb	sy
 8008420:	f3bf 8f4f 	dsb	sy
 8008424:	e7fe      	b.n	8008424 <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008426:	b141      	cbz	r1, 800843a <xQueueGenericCreateStatic+0x56>
 8008428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800842c:	f383 8811 	msr	BASEPRI, r3
 8008430:	f3bf 8f6f 	isb	sy
 8008434:	f3bf 8f4f 	dsb	sy
 8008438:	e7fe      	b.n	8008438 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800843a:	2348      	movs	r3, #72	; 0x48
 800843c:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800843e:	9b01      	ldr	r3, [sp, #4]
 8008440:	2b48      	cmp	r3, #72	; 0x48
 8008442:	d008      	beq.n	8008456 <xQueueGenericCreateStatic+0x72>
 8008444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008448:	f383 8811 	msr	BASEPRI, r3
 800844c:	f3bf 8f6f 	isb	sy
 8008450:	f3bf 8f4f 	dsb	sy
 8008454:	e7fe      	b.n	8008454 <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008456:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008458:	2900      	cmp	r1, #0
 800845a:	bf08      	it	eq
 800845c:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 800845e:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008462:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008466:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008468:	4619      	mov	r1, r3
 800846a:	4620      	mov	r0, r4
 800846c:	f7ff ff7a 	bl	8008364 <xQueueGenericReset>
	}
 8008470:	4620      	mov	r0, r4
 8008472:	b002      	add	sp, #8
 8008474:	bd10      	pop	{r4, pc}

08008476 <xQueueGenericCreate>:
	{
 8008476:	b570      	push	{r4, r5, r6, lr}
 8008478:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800847a:	4606      	mov	r6, r0
 800847c:	b940      	cbnz	r0, 8008490 <xQueueGenericCreate+0x1a>
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	e7fe      	b.n	800848e <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008490:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8008492:	3048      	adds	r0, #72	; 0x48
 8008494:	f001 fdf2 	bl	800a07c <pvPortMalloc>
		if( pxNewQueue != NULL )
 8008498:	4604      	mov	r4, r0
 800849a:	b150      	cbz	r0, 80084b2 <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800849c:	2300      	movs	r3, #0
 800849e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80084a2:	b945      	cbnz	r5, 80084b6 <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084a4:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80084a6:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084aa:	2101      	movs	r1, #1
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7ff ff59 	bl	8008364 <xQueueGenericReset>
	}
 80084b2:	4620      	mov	r0, r4
 80084b4:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80084b6:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084ba:	6003      	str	r3, [r0, #0]
 80084bc:	e7f3      	b.n	80084a6 <xQueueGenericCreate+0x30>
	...

080084c0 <xQueueGenericSend>:
{
 80084c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084c4:	4688      	mov	r8, r1
 80084c6:	9201      	str	r2, [sp, #4]
 80084c8:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 80084ca:	4604      	mov	r4, r0
 80084cc:	b940      	cbnz	r0, 80084e0 <xQueueGenericSend+0x20>
 80084ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084d2:	f383 8811 	msr	BASEPRI, r3
 80084d6:	f3bf 8f6f 	isb	sy
 80084da:	f3bf 8f4f 	dsb	sy
 80084de:	e7fe      	b.n	80084de <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80084e0:	b951      	cbnz	r1, 80084f8 <xQueueGenericSend+0x38>
 80084e2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80084e4:	b143      	cbz	r3, 80084f8 <xQueueGenericSend+0x38>
 80084e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ea:	f383 8811 	msr	BASEPRI, r3
 80084ee:	f3bf 8f6f 	isb	sy
 80084f2:	f3bf 8f4f 	dsb	sy
 80084f6:	e7fe      	b.n	80084f6 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80084f8:	2f02      	cmp	r7, #2
 80084fa:	d10b      	bne.n	8008514 <xQueueGenericSend+0x54>
 80084fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d008      	beq.n	8008514 <xQueueGenericSend+0x54>
 8008502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008506:	f383 8811 	msr	BASEPRI, r3
 800850a:	f3bf 8f6f 	isb	sy
 800850e:	f3bf 8f4f 	dsb	sy
 8008512:	e7fe      	b.n	8008512 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008514:	f001 f8a0 	bl	8009658 <xTaskGetSchedulerState>
 8008518:	b950      	cbnz	r0, 8008530 <xQueueGenericSend+0x70>
 800851a:	9e01      	ldr	r6, [sp, #4]
 800851c:	b14e      	cbz	r6, 8008532 <xQueueGenericSend+0x72>
 800851e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	e7fe      	b.n	800852e <xQueueGenericSend+0x6e>
 8008530:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008532:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 8008536:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8008620 <xQueueGenericSend+0x160>
 800853a:	e037      	b.n	80085ac <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 800853c:	9d01      	ldr	r5, [sp, #4]
 800853e:	b91d      	cbnz	r5, 8008548 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8008540:	f001 fc8a 	bl	8009e58 <vPortExitCritical>
			return errQUEUE_FULL;
 8008544:	2000      	movs	r0, #0
 8008546:	e050      	b.n	80085ea <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 8008548:	b916      	cbnz	r6, 8008550 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800854a:	a802      	add	r0, sp, #8
 800854c:	f001 f832 	bl	80095b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 8008550:	f001 fc82 	bl	8009e58 <vPortExitCritical>
		vTaskSuspendAll();
 8008554:	f000 fe2a 	bl	80091ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008558:	f001 fc5c 	bl	8009e14 <vPortEnterCritical>
 800855c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008560:	2bff      	cmp	r3, #255	; 0xff
 8008562:	bf08      	it	eq
 8008564:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8008568:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800856c:	2bff      	cmp	r3, #255	; 0xff
 800856e:	bf08      	it	eq
 8008570:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8008574:	f001 fc70 	bl	8009e58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008578:	a901      	add	r1, sp, #4
 800857a:	a802      	add	r0, sp, #8
 800857c:	f001 f826 	bl	80095cc <xTaskCheckForTimeOut>
 8008580:	2800      	cmp	r0, #0
 8008582:	d146      	bne.n	8008612 <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008584:	f001 fc46 	bl	8009e14 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008588:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800858a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800858c:	429a      	cmp	r2, r3
 800858e:	d12f      	bne.n	80085f0 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 8008590:	f001 fc62 	bl	8009e58 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008594:	9901      	ldr	r1, [sp, #4]
 8008596:	f104 0010 	add.w	r0, r4, #16
 800859a:	f000 ff79 	bl	8009490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800859e:	4620      	mov	r0, r4
 80085a0:	f7ff fea8 	bl	80082f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085a4:	f000 fea0 	bl	80092e8 <xTaskResumeAll>
 80085a8:	b350      	cbz	r0, 8008600 <xQueueGenericSend+0x140>
 80085aa:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80085ac:	f001 fc32 	bl	8009e14 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80085b0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085b2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085b4:	429a      	cmp	r2, r3
 80085b6:	d301      	bcc.n	80085bc <xQueueGenericSend+0xfc>
 80085b8:	2f02      	cmp	r7, #2
 80085ba:	d1bf      	bne.n	800853c <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085bc:	463a      	mov	r2, r7
 80085be:	4641      	mov	r1, r8
 80085c0:	4620      	mov	r0, r4
 80085c2:	f7ff fe50 	bl	8008266 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085c6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80085c8:	b11b      	cbz	r3, 80085d2 <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085ca:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80085ce:	f000 ff95 	bl	80094fc <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 80085d2:	b138      	cbz	r0, 80085e4 <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 80085d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085d8:	4b11      	ldr	r3, [pc, #68]	; (8008620 <xQueueGenericSend+0x160>)
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80085e4:	f001 fc38 	bl	8009e58 <vPortExitCritical>
				return pdPASS;
 80085e8:	2001      	movs	r0, #1
}
 80085ea:	b004      	add	sp, #16
 80085ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 80085f0:	f001 fc32 	bl	8009e58 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 80085f4:	4620      	mov	r0, r4
 80085f6:	f7ff fe7d 	bl	80082f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80085fa:	f000 fe75 	bl	80092e8 <xTaskResumeAll>
 80085fe:	e7d4      	b.n	80085aa <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008600:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008604:	f8ca 3000 	str.w	r3, [sl]
 8008608:	f3bf 8f4f 	dsb	sy
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	e7cb      	b.n	80085aa <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 8008612:	4620      	mov	r0, r4
 8008614:	f7ff fe6e 	bl	80082f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008618:	f000 fe66 	bl	80092e8 <xTaskResumeAll>
 800861c:	e792      	b.n	8008544 <xQueueGenericSend+0x84>
 800861e:	bf00      	nop
 8008620:	e000ed04 	.word	0xe000ed04

08008624 <xQueueGenericSendFromISR>:
{
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4689      	mov	r9, r1
 800862a:	4690      	mov	r8, r2
 800862c:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 800862e:	4604      	mov	r4, r0
 8008630:	b940      	cbnz	r0, 8008644 <xQueueGenericSendFromISR+0x20>
 8008632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008636:	f383 8811 	msr	BASEPRI, r3
 800863a:	f3bf 8f6f 	isb	sy
 800863e:	f3bf 8f4f 	dsb	sy
 8008642:	e7fe      	b.n	8008642 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008644:	b951      	cbnz	r1, 800865c <xQueueGenericSendFromISR+0x38>
 8008646:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008648:	b143      	cbz	r3, 800865c <xQueueGenericSendFromISR+0x38>
 800864a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800864e:	f383 8811 	msr	BASEPRI, r3
 8008652:	f3bf 8f6f 	isb	sy
 8008656:	f3bf 8f4f 	dsb	sy
 800865a:	e7fe      	b.n	800865a <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800865c:	2f02      	cmp	r7, #2
 800865e:	d10b      	bne.n	8008678 <xQueueGenericSendFromISR+0x54>
 8008660:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008662:	2b01      	cmp	r3, #1
 8008664:	d008      	beq.n	8008678 <xQueueGenericSendFromISR+0x54>
 8008666:	f04f 0350 	mov.w	r3, #80	; 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	e7fe      	b.n	8008676 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008678:	f001 fcae 	bl	8009fd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800867c:	f3ef 8611 	mrs	r6, BASEPRI
 8008680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8008692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008694:	429a      	cmp	r2, r3
 8008696:	d301      	bcc.n	800869c <xQueueGenericSendFromISR+0x78>
 8008698:	2f02      	cmp	r7, #2
 800869a:	d122      	bne.n	80086e2 <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 800869c:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086a0:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80086a2:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086a4:	4649      	mov	r1, r9
 80086a6:	4620      	mov	r0, r4
 80086a8:	f7ff fddd 	bl	8008266 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 80086ac:	1c6b      	adds	r3, r5, #1
 80086ae:	d113      	bne.n	80086d8 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80086b2:	b90b      	cbnz	r3, 80086b8 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 80086b4:	2001      	movs	r0, #1
 80086b6:	e00b      	b.n	80086d0 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086b8:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80086bc:	f000 ff1e 	bl	80094fc <xTaskRemoveFromEventList>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d0f7      	beq.n	80086b4 <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 80086c4:	f1b8 0f00 	cmp.w	r8, #0
 80086c8:	d0f4      	beq.n	80086b4 <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 80086ca:	2001      	movs	r0, #1
 80086cc:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80086d0:	f386 8811 	msr	BASEPRI, r6
}
 80086d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80086d8:	3501      	adds	r5, #1
 80086da:	b26d      	sxtb	r5, r5
 80086dc:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 80086e0:	e7e8      	b.n	80086b4 <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 80086e2:	2000      	movs	r0, #0
 80086e4:	e7f4      	b.n	80086d0 <xQueueGenericSendFromISR+0xac>
	...

080086e8 <xQueueReceive>:
{
 80086e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80086ec:	b085      	sub	sp, #20
 80086ee:	460f      	mov	r7, r1
 80086f0:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 80086f2:	4604      	mov	r4, r0
 80086f4:	b940      	cbnz	r0, 8008708 <xQueueReceive+0x20>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	e7fe      	b.n	8008706 <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008708:	b951      	cbnz	r1, 8008720 <xQueueReceive+0x38>
 800870a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800870c:	b143      	cbz	r3, 8008720 <xQueueReceive+0x38>
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	f383 8811 	msr	BASEPRI, r3
 8008716:	f3bf 8f6f 	isb	sy
 800871a:	f3bf 8f4f 	dsb	sy
 800871e:	e7fe      	b.n	800871e <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008720:	f000 ff9a 	bl	8009658 <xTaskGetSchedulerState>
 8008724:	b950      	cbnz	r0, 800873c <xQueueReceive+0x54>
 8008726:	9e01      	ldr	r6, [sp, #4]
 8008728:	b14e      	cbz	r6, 800873e <xQueueReceive+0x56>
 800872a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800872e:	f383 8811 	msr	BASEPRI, r3
 8008732:	f3bf 8f6f 	isb	sy
 8008736:	f3bf 8f4f 	dsb	sy
 800873a:	e7fe      	b.n	800873a <xQueueReceive+0x52>
 800873c:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800873e:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 8008742:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 8008824 <xQueueReceive+0x13c>
 8008746:	e03b      	b.n	80087c0 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008748:	9d01      	ldr	r5, [sp, #4]
 800874a:	b91d      	cbnz	r5, 8008754 <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 800874c:	f001 fb84 	bl	8009e58 <vPortExitCritical>
				return errQUEUE_EMPTY;
 8008750:	2000      	movs	r0, #0
 8008752:	e052      	b.n	80087fa <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 8008754:	b916      	cbnz	r6, 800875c <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008756:	a802      	add	r0, sp, #8
 8008758:	f000 ff2c 	bl	80095b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800875c:	f001 fb7c 	bl	8009e58 <vPortExitCritical>
		vTaskSuspendAll();
 8008760:	f000 fd24 	bl	80091ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008764:	f001 fb56 	bl	8009e14 <vPortEnterCritical>
 8008768:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800876c:	2bff      	cmp	r3, #255	; 0xff
 800876e:	bf08      	it	eq
 8008770:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8008774:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008778:	2bff      	cmp	r3, #255	; 0xff
 800877a:	bf08      	it	eq
 800877c:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8008780:	f001 fb6a 	bl	8009e58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008784:	a901      	add	r1, sp, #4
 8008786:	a802      	add	r0, sp, #8
 8008788:	f000 ff20 	bl	80095cc <xTaskCheckForTimeOut>
 800878c:	2800      	cmp	r0, #0
 800878e:	d13d      	bne.n	800880c <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008790:	4620      	mov	r0, r4
 8008792:	f7ff fd5d 	bl	8008250 <prvIsQueueEmpty>
 8008796:	b398      	cbz	r0, 8008800 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008798:	9901      	ldr	r1, [sp, #4]
 800879a:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800879e:	f000 fe77 	bl	8009490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087a2:	4620      	mov	r0, r4
 80087a4:	f7ff fda6 	bl	80082f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80087a8:	f000 fd9e 	bl	80092e8 <xTaskResumeAll>
 80087ac:	b938      	cbnz	r0, 80087be <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 80087ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80087b2:	f8c9 3000 	str.w	r3, [r9]
 80087b6:	f3bf 8f4f 	dsb	sy
 80087ba:	f3bf 8f6f 	isb	sy
 80087be:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 80087c0:	f001 fb28 	bl	8009e14 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	d0be      	beq.n	8008748 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087ca:	4639      	mov	r1, r7
 80087cc:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087ce:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80087d0:	f7ff fd7c 	bl	80082cc <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80087d4:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80087d6:	6923      	ldr	r3, [r4, #16]
 80087d8:	b163      	cbz	r3, 80087f4 <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80087da:	f104 0010 	add.w	r0, r4, #16
 80087de:	f000 fe8d 	bl	80094fc <xTaskRemoveFromEventList>
 80087e2:	b138      	cbz	r0, 80087f4 <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 80087e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087e8:	4b0e      	ldr	r3, [pc, #56]	; (8008824 <xQueueReceive+0x13c>)
 80087ea:	601a      	str	r2, [r3, #0]
 80087ec:	f3bf 8f4f 	dsb	sy
 80087f0:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80087f4:	f001 fb30 	bl	8009e58 <vPortExitCritical>
				return pdPASS;
 80087f8:	2001      	movs	r0, #1
}
 80087fa:	b005      	add	sp, #20
 80087fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008800:	4620      	mov	r0, r4
 8008802:	f7ff fd77 	bl	80082f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008806:	f000 fd6f 	bl	80092e8 <xTaskResumeAll>
 800880a:	e7d8      	b.n	80087be <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 800880c:	4620      	mov	r0, r4
 800880e:	f7ff fd71 	bl	80082f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008812:	f000 fd69 	bl	80092e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008816:	4620      	mov	r0, r4
 8008818:	f7ff fd1a 	bl	8008250 <prvIsQueueEmpty>
 800881c:	2800      	cmp	r0, #0
 800881e:	d0ce      	beq.n	80087be <xQueueReceive+0xd6>
 8008820:	e796      	b.n	8008750 <xQueueReceive+0x68>
 8008822:	bf00      	nop
 8008824:	e000ed04 	.word	0xe000ed04

08008828 <xQueueSemaphoreTake>:
{
 8008828:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 800882c:	4604      	mov	r4, r0
{
 800882e:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008830:	b940      	cbnz	r0, 8008844 <xQueueSemaphoreTake+0x1c>
 8008832:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	e7fe      	b.n	8008842 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 8008844:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8008846:	b145      	cbz	r5, 800885a <xQueueSemaphoreTake+0x32>
 8008848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	e7fe      	b.n	8008858 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800885a:	f000 fefd 	bl	8009658 <xTaskGetSchedulerState>
 800885e:	b950      	cbnz	r0, 8008876 <xQueueSemaphoreTake+0x4e>
 8008860:	9d01      	ldr	r5, [sp, #4]
 8008862:	b145      	cbz	r5, 8008876 <xQueueSemaphoreTake+0x4e>
 8008864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008868:	f383 8811 	msr	BASEPRI, r3
 800886c:	f3bf 8f6f 	isb	sy
 8008870:	f3bf 8f4f 	dsb	sy
 8008874:	e7fe      	b.n	8008874 <xQueueSemaphoreTake+0x4c>
 8008876:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 8008878:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 800887a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80089a8 <xQueueSemaphoreTake+0x180>
 800887e:	e04f      	b.n	8008920 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	b963      	cbnz	r3, 800889e <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008884:	b145      	cbz	r5, 8008898 <xQueueSemaphoreTake+0x70>
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	e7fe      	b.n	8008896 <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 8008898:	f001 fade 	bl	8009e58 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800889c:	e05e      	b.n	800895c <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 800889e:	b916      	cbnz	r6, 80088a6 <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088a0:	a802      	add	r0, sp, #8
 80088a2:	f000 fe87 	bl	80095b4 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80088a6:	f001 fad7 	bl	8009e58 <vPortExitCritical>
		vTaskSuspendAll();
 80088aa:	f000 fc7f 	bl	80091ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ae:	f001 fab1 	bl	8009e14 <vPortEnterCritical>
 80088b2:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80088b6:	2bff      	cmp	r3, #255	; 0xff
 80088b8:	bf08      	it	eq
 80088ba:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 80088be:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80088c2:	2bff      	cmp	r3, #255	; 0xff
 80088c4:	bf08      	it	eq
 80088c6:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 80088ca:	f001 fac5 	bl	8009e58 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088ce:	a901      	add	r1, sp, #4
 80088d0:	a802      	add	r0, sp, #8
 80088d2:	f000 fe7b 	bl	80095cc <xTaskCheckForTimeOut>
 80088d6:	2800      	cmp	r0, #0
 80088d8:	d14a      	bne.n	8008970 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80088da:	4620      	mov	r0, r4
 80088dc:	f7ff fcb8 	bl	8008250 <prvIsQueueEmpty>
 80088e0:	2800      	cmp	r0, #0
 80088e2:	d03f      	beq.n	8008964 <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088e4:	6823      	ldr	r3, [r4, #0]
 80088e6:	b93b      	cbnz	r3, 80088f8 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 80088e8:	f001 fa94 	bl	8009e14 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80088ec:	6860      	ldr	r0, [r4, #4]
 80088ee:	f000 fec3 	bl	8009678 <xTaskPriorityInherit>
 80088f2:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 80088f4:	f001 fab0 	bl	8009e58 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80088f8:	9901      	ldr	r1, [sp, #4]
 80088fa:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80088fe:	f000 fdc7 	bl	8009490 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008902:	4620      	mov	r0, r4
 8008904:	f7ff fcf6 	bl	80082f4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008908:	f000 fcee 	bl	80092e8 <xTaskResumeAll>
 800890c:	b938      	cbnz	r0, 800891e <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 800890e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008912:	f8c8 3000 	str.w	r3, [r8]
 8008916:	f3bf 8f4f 	dsb	sy
 800891a:	f3bf 8f6f 	isb	sy
 800891e:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008920:	f001 fa78 	bl	8009e14 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008924:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008926:	2b00      	cmp	r3, #0
 8008928:	d0aa      	beq.n	8008880 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800892a:	3b01      	subs	r3, #1
 800892c:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800892e:	6823      	ldr	r3, [r4, #0]
 8008930:	b913      	cbnz	r3, 8008938 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8008932:	f000 ff73 	bl	800981c <pvTaskIncrementMutexHeldCount>
 8008936:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008938:	6923      	ldr	r3, [r4, #16]
 800893a:	b163      	cbz	r3, 8008956 <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800893c:	f104 0010 	add.w	r0, r4, #16
 8008940:	f000 fddc 	bl	80094fc <xTaskRemoveFromEventList>
 8008944:	b138      	cbz	r0, 8008956 <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 8008946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800894a:	4b17      	ldr	r3, [pc, #92]	; (80089a8 <xQueueSemaphoreTake+0x180>)
 800894c:	601a      	str	r2, [r3, #0]
 800894e:	f3bf 8f4f 	dsb	sy
 8008952:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 8008956:	f001 fa7f 	bl	8009e58 <vPortExitCritical>
				return pdPASS;
 800895a:	2501      	movs	r5, #1
}
 800895c:	4628      	mov	r0, r5
 800895e:	b004      	add	sp, #16
 8008960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 8008964:	4620      	mov	r0, r4
 8008966:	f7ff fcc5 	bl	80082f4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800896a:	f000 fcbd 	bl	80092e8 <xTaskResumeAll>
 800896e:	e7d6      	b.n	800891e <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 8008970:	4620      	mov	r0, r4
 8008972:	f7ff fcbf 	bl	80082f4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008976:	f000 fcb7 	bl	80092e8 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800897a:	4620      	mov	r0, r4
 800897c:	f7ff fc68 	bl	8008250 <prvIsQueueEmpty>
 8008980:	2800      	cmp	r0, #0
 8008982:	d0cc      	beq.n	800891e <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 8008984:	2d00      	cmp	r5, #0
 8008986:	d0e9      	beq.n	800895c <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 8008988:	f001 fa44 	bl	8009e14 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 800898c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800898e:	b119      	cbz	r1, 8008998 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008990:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008992:	6819      	ldr	r1, [r3, #0]
 8008994:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 8008998:	6860      	ldr	r0, [r4, #4]
 800899a:	f000 fef1 	bl	8009780 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 800899e:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80089a0:	f001 fa5a 	bl	8009e58 <vPortExitCritical>
 80089a4:	e7da      	b.n	800895c <xQueueSemaphoreTake+0x134>
 80089a6:	bf00      	nop
 80089a8:	e000ed04 	.word	0xe000ed04

080089ac <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089ac:	2300      	movs	r3, #0
	{
 80089ae:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80089b0:	4a06      	ldr	r2, [pc, #24]	; (80089cc <vQueueAddToRegistry+0x20>)
 80089b2:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 80089b6:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 80089ba:	b91d      	cbnz	r5, 80089c4 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80089bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80089c0:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80089c2:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80089c4:	3301      	adds	r3, #1
 80089c6:	2b08      	cmp	r3, #8
 80089c8:	d1f3      	bne.n	80089b2 <vQueueAddToRegistry+0x6>
 80089ca:	e7fa      	b.n	80089c2 <vQueueAddToRegistry+0x16>
 80089cc:	20004500 	.word	0x20004500

080089d0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80089d0:	b570      	push	{r4, r5, r6, lr}
 80089d2:	4604      	mov	r4, r0
 80089d4:	460d      	mov	r5, r1
 80089d6:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80089d8:	f001 fa1c 	bl	8009e14 <vPortEnterCritical>
 80089dc:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089e0:	2bff      	cmp	r3, #255	; 0xff
 80089e2:	bf04      	itt	eq
 80089e4:	2300      	moveq	r3, #0
 80089e6:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 80089ea:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80089ee:	2bff      	cmp	r3, #255	; 0xff
 80089f0:	bf04      	itt	eq
 80089f2:	2300      	moveq	r3, #0
 80089f4:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 80089f8:	f001 fa2e 	bl	8009e58 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80089fc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80089fe:	b92b      	cbnz	r3, 8008a0c <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a00:	4632      	mov	r2, r6
 8008a02:	4629      	mov	r1, r5
 8008a04:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a08:	f000 fd5a 	bl	80094c0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a0c:	4620      	mov	r0, r4
	}
 8008a0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008a12:	f7ff bc6f 	b.w	80082f4 <prvUnlockQueue>

08008a16 <prvBytesInBuffer>:
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008a16:	6882      	ldr	r2, [r0, #8]
 8008a18:	6843      	ldr	r3, [r0, #4]
	xCount -= pxStreamBuffer->xTail;
 8008a1a:	6800      	ldr	r0, [r0, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008a1c:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
 8008a1e:	1a18      	subs	r0, r3, r0
	if ( xCount >= pxStreamBuffer->xLength )
 8008a20:	4282      	cmp	r2, r0
	{
		xCount -= pxStreamBuffer->xLength;
 8008a22:	bf98      	it	ls
 8008a24:	1a80      	subls	r0, r0, r2
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
 8008a26:	4770      	bx	lr

08008a28 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8008a28:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8008a2c:	460e      	mov	r6, r1
 8008a2e:	4604      	mov	r4, r0
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008a30:	2155      	movs	r1, #85	; 0x55
 8008a32:	4630      	mov	r0, r6
{
 8008a34:	4691      	mov	r9, r2
 8008a36:	461f      	mov	r7, r3
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008a38:	f001 fc30 	bl	800a29c <memset>
 8008a3c:	42b0      	cmp	r0, r6
 8008a3e:	4605      	mov	r5, r0
 8008a40:	d008      	beq.n	8008a54 <prvInitialiseNewStreamBuffer+0x2c>
 8008a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a46:	f383 8811 	msr	BASEPRI, r3
 8008a4a:	f3bf 8f6f 	isb	sy
 8008a4e:	f3bf 8f4f 	dsb	sy
 8008a52:	e7fe      	b.n	8008a52 <prvInitialiseNewStreamBuffer+0x2a>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8008a54:	2220      	movs	r2, #32
 8008a56:	2100      	movs	r1, #0
 8008a58:	4620      	mov	r0, r4
 8008a5a:	f001 fc1f 	bl	800a29c <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
	pxStreamBuffer->xLength = xBufferSizeBytes;
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;

	if( xIsMessageBuffer != pdFALSE )
 8008a5e:	9b06      	ldr	r3, [sp, #24]
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008a60:	61a5      	str	r5, [r4, #24]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008a62:	e9c4 9702 	strd	r9, r7, [r4, #8]
	if( xIsMessageBuffer != pdFALSE )
 8008a66:	b11b      	cbz	r3, 8008a70 <prvInitialiseNewStreamBuffer+0x48>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8008a68:	7f23      	ldrb	r3, [r4, #28]
 8008a6a:	f043 0301 	orr.w	r3, r3, #1
 8008a6e:	7723      	strb	r3, [r4, #28]
	}
}
 8008a70:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08008a74 <prvWriteBytesToBuffer>:
{
 8008a74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a78:	4605      	mov	r5, r0
 8008a7a:	4688      	mov	r8, r1
	configASSERT( xCount > ( size_t ) 0 );
 8008a7c:	4617      	mov	r7, r2
 8008a7e:	b942      	cbnz	r2, 8008a92 <prvWriteBytesToBuffer+0x1e>
 8008a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a84:	f383 8811 	msr	BASEPRI, r3
 8008a88:	f3bf 8f6f 	isb	sy
 8008a8c:	f3bf 8f4f 	dsb	sy
 8008a90:	e7fe      	b.n	8008a90 <prvWriteBytesToBuffer+0x1c>
	xNextHead = pxStreamBuffer->xHead;
 8008a92:	6844      	ldr	r4, [r0, #4]
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008a94:	6883      	ldr	r3, [r0, #8]
 8008a96:	1b1e      	subs	r6, r3, r4
 8008a98:	4296      	cmp	r6, r2
 8008a9a:	bf28      	it	cs
 8008a9c:	4616      	movcs	r6, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008a9e:	19a2      	adds	r2, r4, r6
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d208      	bcs.n	8008ab6 <prvWriteBytesToBuffer+0x42>
 8008aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aa8:	f383 8811 	msr	BASEPRI, r3
 8008aac:	f3bf 8f6f 	isb	sy
 8008ab0:	f3bf 8f4f 	dsb	sy
 8008ab4:	e7fe      	b.n	8008ab4 <prvWriteBytesToBuffer+0x40>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008ab6:	6980      	ldr	r0, [r0, #24]
 8008ab8:	4632      	mov	r2, r6
 8008aba:	4420      	add	r0, r4
 8008abc:	f001 fbe3 	bl	800a286 <memcpy>
	if( xCount > xFirstLength )
 8008ac0:	42b7      	cmp	r7, r6
 8008ac2:	d911      	bls.n	8008ae8 <prvWriteBytesToBuffer+0x74>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008ac4:	68ab      	ldr	r3, [r5, #8]
 8008ac6:	1bba      	subs	r2, r7, r6
 8008ac8:	429a      	cmp	r2, r3
 8008aca:	d908      	bls.n	8008ade <prvWriteBytesToBuffer+0x6a>
 8008acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	e7fe      	b.n	8008adc <prvWriteBytesToBuffer+0x68>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008ade:	eb08 0106 	add.w	r1, r8, r6
 8008ae2:	69a8      	ldr	r0, [r5, #24]
 8008ae4:	f001 fbcf 	bl	800a286 <memcpy>
	if( xNextHead >= pxStreamBuffer->xLength )
 8008ae8:	68ab      	ldr	r3, [r5, #8]
	xNextHead += xCount;
 8008aea:	443c      	add	r4, r7
	if( xNextHead >= pxStreamBuffer->xLength )
 8008aec:	42a3      	cmp	r3, r4
		xNextHead -= pxStreamBuffer->xLength;
 8008aee:	bf98      	it	ls
 8008af0:	1ae4      	subls	r4, r4, r3
	pxStreamBuffer->xHead = xNextHead;
 8008af2:	606c      	str	r4, [r5, #4]
}
 8008af4:	4638      	mov	r0, r7
 8008af6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008afa <prvReadBytesFromBuffer>:
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008afa:	429a      	cmp	r2, r3
{
 8008afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008b00:	4616      	mov	r6, r2
 8008b02:	bf28      	it	cs
 8008b04:	461e      	movcs	r6, r3
{
 8008b06:	4607      	mov	r7, r0
 8008b08:	4689      	mov	r9, r1
 8008b0a:	4690      	mov	r8, r2
	if( xCount > ( size_t ) 0 )
 8008b0c:	2e00      	cmp	r6, #0
 8008b0e:	d03b      	beq.n	8008b88 <prvReadBytesFromBuffer+0x8e>
		xNextTail = pxStreamBuffer->xTail;
 8008b10:	6804      	ldr	r4, [r0, #0]
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008b12:	6883      	ldr	r3, [r0, #8]
 8008b14:	1b1d      	subs	r5, r3, r4
 8008b16:	42b5      	cmp	r5, r6
 8008b18:	bf28      	it	cs
 8008b1a:	4635      	movcs	r5, r6
		configASSERT( xFirstLength <= xMaxCount );
 8008b1c:	42aa      	cmp	r2, r5
 8008b1e:	d208      	bcs.n	8008b32 <prvReadBytesFromBuffer+0x38>
 8008b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	e7fe      	b.n	8008b30 <prvReadBytesFromBuffer+0x36>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008b32:	1962      	adds	r2, r4, r5
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d208      	bcs.n	8008b4a <prvReadBytesFromBuffer+0x50>
 8008b38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b3c:	f383 8811 	msr	BASEPRI, r3
 8008b40:	f3bf 8f6f 	isb	sy
 8008b44:	f3bf 8f4f 	dsb	sy
 8008b48:	e7fe      	b.n	8008b48 <prvReadBytesFromBuffer+0x4e>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008b4a:	6981      	ldr	r1, [r0, #24]
 8008b4c:	462a      	mov	r2, r5
 8008b4e:	4421      	add	r1, r4
 8008b50:	4648      	mov	r0, r9
 8008b52:	f001 fb98 	bl	800a286 <memcpy>
		if( xCount > xFirstLength )
 8008b56:	42ae      	cmp	r6, r5
 8008b58:	d910      	bls.n	8008b7c <prvReadBytesFromBuffer+0x82>
			configASSERT( xCount <= xMaxCount );
 8008b5a:	45b0      	cmp	r8, r6
 8008b5c:	d208      	bcs.n	8008b70 <prvReadBytesFromBuffer+0x76>
 8008b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b62:	f383 8811 	msr	BASEPRI, r3
 8008b66:	f3bf 8f6f 	isb	sy
 8008b6a:	f3bf 8f4f 	dsb	sy
 8008b6e:	e7fe      	b.n	8008b6e <prvReadBytesFromBuffer+0x74>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008b70:	1b72      	subs	r2, r6, r5
 8008b72:	69b9      	ldr	r1, [r7, #24]
 8008b74:	eb09 0005 	add.w	r0, r9, r5
 8008b78:	f001 fb85 	bl	800a286 <memcpy>
		if( xNextTail >= pxStreamBuffer->xLength )
 8008b7c:	68bb      	ldr	r3, [r7, #8]
		xNextTail += xCount;
 8008b7e:	4434      	add	r4, r6
		if( xNextTail >= pxStreamBuffer->xLength )
 8008b80:	42a3      	cmp	r3, r4
			xNextTail -= pxStreamBuffer->xLength;
 8008b82:	bf98      	it	ls
 8008b84:	1ae4      	subls	r4, r4, r3
		pxStreamBuffer->xTail = xNextTail;
 8008b86:	603c      	str	r4, [r7, #0]
}
 8008b88:	4630      	mov	r0, r6
 8008b8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008b8e <prvReadMessageFromBuffer>:
{
 8008b8e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b92:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008b94:	4604      	mov	r4, r0
 8008b96:	4688      	mov	r8, r1
 8008b98:	4617      	mov	r7, r2
 8008b9a:	461d      	mov	r5, r3
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008b9c:	b1b6      	cbz	r6, 8008bcc <prvReadMessageFromBuffer+0x3e>
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008b9e:	4632      	mov	r2, r6
 8008ba0:	a901      	add	r1, sp, #4
		xOriginalTail = pxStreamBuffer->xTail;
 8008ba2:	f8d0 9000 	ldr.w	r9, [r0]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008ba6:	f7ff ffa8 	bl	8008afa <prvReadBytesFromBuffer>
		if( xNextMessageLength > xBufferLengthBytes )
 8008baa:	9b01      	ldr	r3, [sp, #4]
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008bac:	1bad      	subs	r5, r5, r6
		if( xNextMessageLength > xBufferLengthBytes )
 8008bae:	42bb      	cmp	r3, r7
 8008bb0:	d903      	bls.n	8008bba <prvReadMessageFromBuffer+0x2c>
			xNextMessageLength = 0;
 8008bb2:	2300      	movs	r3, #0
			pxStreamBuffer->xTail = xOriginalTail;
 8008bb4:	f8c4 9000 	str.w	r9, [r4]
			xNextMessageLength = 0;
 8008bb8:	9301      	str	r3, [sp, #4]
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008bba:	462b      	mov	r3, r5
 8008bbc:	9a01      	ldr	r2, [sp, #4]
 8008bbe:	4641      	mov	r1, r8
 8008bc0:	4620      	mov	r0, r4
 8008bc2:	f7ff ff9a 	bl	8008afa <prvReadBytesFromBuffer>
}
 8008bc6:	b003      	add	sp, #12
 8008bc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xNextMessageLength = xBufferLengthBytes;
 8008bcc:	9201      	str	r2, [sp, #4]
 8008bce:	e7f4      	b.n	8008bba <prvReadMessageFromBuffer+0x2c>

08008bd0 <xStreamBufferGenericCreate>:
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008bd0:	2804      	cmp	r0, #4
	{
 8008bd2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bd4:	460c      	mov	r4, r1
 8008bd6:	4617      	mov	r7, r2
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008bd8:	d808      	bhi.n	8008bec <xStreamBufferGenericCreate+0x1c>
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	e7fe      	b.n	8008bea <xStreamBufferGenericCreate+0x1a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8008bec:	4288      	cmp	r0, r1
 8008bee:	d208      	bcs.n	8008c02 <xStreamBufferGenericCreate+0x32>
 8008bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bf4:	f383 8811 	msr	BASEPRI, r3
 8008bf8:	f3bf 8f6f 	isb	sy
 8008bfc:	f3bf 8f4f 	dsb	sy
 8008c00:	e7fe      	b.n	8008c00 <xStreamBufferGenericCreate+0x30>
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8008c02:	2900      	cmp	r1, #0
		xBufferSizeBytes++;
 8008c04:	f100 0601 	add.w	r6, r0, #1
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008c08:	f100 0021 	add.w	r0, r0, #33	; 0x21
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8008c0c:	bf14      	ite	ne
 8008c0e:	460c      	movne	r4, r1
 8008c10:	2401      	moveq	r4, #1
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008c12:	f001 fa33 	bl	800a07c <pvPortMalloc>
		if( pucAllocatedMemory != NULL )
 8008c16:	4605      	mov	r5, r0
 8008c18:	b130      	cbz	r0, 8008c28 <xStreamBufferGenericCreate+0x58>
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008c1a:	9700      	str	r7, [sp, #0]
 8008c1c:	4623      	mov	r3, r4
 8008c1e:	4632      	mov	r2, r6
 8008c20:	f100 0120 	add.w	r1, r0, #32
 8008c24:	f7ff ff00 	bl	8008a28 <prvInitialiseNewStreamBuffer>
	}
 8008c28:	4628      	mov	r0, r5
 8008c2a:	b003      	add	sp, #12
 8008c2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c2e <xStreamBufferSpacesAvailable>:
	configASSERT( pxStreamBuffer );
 8008c2e:	b940      	cbnz	r0, 8008c42 <xStreamBufferSpacesAvailable+0x14>
 8008c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c34:	f383 8811 	msr	BASEPRI, r3
 8008c38:	f3bf 8f6f 	isb	sy
 8008c3c:	f3bf 8f4f 	dsb	sy
 8008c40:	e7fe      	b.n	8008c40 <xStreamBufferSpacesAvailable+0x12>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008c42:	6882      	ldr	r2, [r0, #8]
 8008c44:	6803      	ldr	r3, [r0, #0]
	xSpace -= pxStreamBuffer->xHead;
 8008c46:	6841      	ldr	r1, [r0, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008c48:	18d0      	adds	r0, r2, r3
 8008c4a:	3801      	subs	r0, #1
	xSpace -= ( size_t ) 1;
 8008c4c:	1a40      	subs	r0, r0, r1
	if( xSpace >= pxStreamBuffer->xLength )
 8008c4e:	4282      	cmp	r2, r0
		xSpace -= pxStreamBuffer->xLength;
 8008c50:	bf98      	it	ls
 8008c52:	1a80      	subls	r0, r0, r2
}
 8008c54:	4770      	bx	lr

08008c56 <xStreamBufferSend>:
{
 8008c56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c5a:	b087      	sub	sp, #28
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	4616      	mov	r6, r2
 8008c60:	9301      	str	r3, [sp, #4]
	configASSERT( pvTxData );
 8008c62:	4689      	mov	r9, r1
 8008c64:	b941      	cbnz	r1, 8008c78 <xStreamBufferSend+0x22>
 8008c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c6a:	f383 8811 	msr	BASEPRI, r3
 8008c6e:	f3bf 8f6f 	isb	sy
 8008c72:	f3bf 8f4f 	dsb	sy
 8008c76:	e7fe      	b.n	8008c76 <xStreamBufferSend+0x20>
	configASSERT( pxStreamBuffer );
 8008c78:	b940      	cbnz	r0, 8008c8c <xStreamBufferSend+0x36>
 8008c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c7e:	f383 8811 	msr	BASEPRI, r3
 8008c82:	f3bf 8f6f 	isb	sy
 8008c86:	f3bf 8f4f 	dsb	sy
 8008c8a:	e7fe      	b.n	8008c8a <xStreamBufferSend+0x34>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008c8c:	7f03      	ldrb	r3, [r0, #28]
 8008c8e:	07da      	lsls	r2, r3, #31
	if( xTicksToWait != ( TickType_t ) 0 )
 8008c90:	9b01      	ldr	r3, [sp, #4]
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008c92:	bf4c      	ite	mi
 8008c94:	f106 0804 	addmi.w	r8, r6, #4
size_t xRequiredSpace = xDataLengthBytes;
 8008c98:	46b0      	movpl	r8, r6
	if( xTicksToWait != ( TickType_t ) 0 )
 8008c9a:	b95b      	cbnz	r3, 8008cb4 <xStreamBufferSend+0x5e>
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008c9c:	4620      	mov	r0, r4
 8008c9e:	f7ff ffc6 	bl	8008c2e <xStreamBufferSpacesAvailable>
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	9603      	str	r6, [sp, #12]
	if( xSpace == ( size_t ) 0 )
 8008ca6:	2d00      	cmp	r5, #0
 8008ca8:	d136      	bne.n	8008d18 <xStreamBufferSend+0xc2>
		xReturn = 0;
 8008caa:	2500      	movs	r5, #0
}
 8008cac:	4628      	mov	r0, r5
 8008cae:	b007      	add	sp, #28
 8008cb0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		vTaskSetTimeOutState( &xTimeOut );
 8008cb4:	a804      	add	r0, sp, #16
 8008cb6:	f000 fc61 	bl	800957c <vTaskSetTimeOutState>
			taskENTER_CRITICAL();
 8008cba:	f001 f8ab 	bl	8009e14 <vPortEnterCritical>
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008cbe:	4620      	mov	r0, r4
 8008cc0:	f7ff ffb5 	bl	8008c2e <xStreamBufferSpacesAvailable>
				if( xSpace < xRequiredSpace )
 8008cc4:	4580      	cmp	r8, r0
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008cc6:	4605      	mov	r5, r0
				if( xSpace < xRequiredSpace )
 8008cc8:	d923      	bls.n	8008d12 <xStreamBufferSend+0xbc>
					( void ) xTaskNotifyStateClear( NULL );
 8008cca:	2000      	movs	r0, #0
 8008ccc:	f000 fe5c 	bl	8009988 <xTaskNotifyStateClear>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8008cd0:	6967      	ldr	r7, [r4, #20]
 8008cd2:	b147      	cbz	r7, 8008ce6 <xStreamBufferSend+0x90>
 8008cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd8:	f383 8811 	msr	BASEPRI, r3
 8008cdc:	f3bf 8f6f 	isb	sy
 8008ce0:	f3bf 8f4f 	dsb	sy
 8008ce4:	e7fe      	b.n	8008ce4 <xStreamBufferSend+0x8e>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8008ce6:	f000 fcb1 	bl	800964c <xTaskGetCurrentTaskHandle>
 8008cea:	6160      	str	r0, [r4, #20]
			taskEXIT_CRITICAL();
 8008cec:	f001 f8b4 	bl	8009e58 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8008cf0:	f04f 31ff 	mov.w	r1, #4294967295
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	463a      	mov	r2, r7
 8008cf8:	4638      	mov	r0, r7
 8008cfa:	f000 fd9b 	bl	8009834 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8008cfe:	6167      	str	r7, [r4, #20]
		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8008d00:	a901      	add	r1, sp, #4
 8008d02:	a804      	add	r0, sp, #16
 8008d04:	f000 fc62 	bl	80095cc <xTaskCheckForTimeOut>
 8008d08:	2800      	cmp	r0, #0
 8008d0a:	d0d6      	beq.n	8008cba <xStreamBufferSend+0x64>
	if( xSpace == ( size_t ) 0 )
 8008d0c:	2d00      	cmp	r5, #0
 8008d0e:	d0c5      	beq.n	8008c9c <xStreamBufferSend+0x46>
 8008d10:	e7c8      	b.n	8008ca4 <xStreamBufferSend+0x4e>
					taskEXIT_CRITICAL();
 8008d12:	f001 f8a1 	bl	8009e58 <vPortExitCritical>
					break;
 8008d16:	e7f9      	b.n	8008d0c <xStreamBufferSend+0xb6>
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008d18:	7f23      	ldrb	r3, [r4, #28]
 8008d1a:	07db      	lsls	r3, r3, #31
 8008d1c:	d420      	bmi.n	8008d60 <xStreamBufferSend+0x10a>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8008d1e:	42b5      	cmp	r5, r6
 8008d20:	bf94      	ite	ls
 8008d22:	9503      	strls	r5, [sp, #12]
 8008d24:	9603      	strhi	r6, [sp, #12]
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008d26:	9a03      	ldr	r2, [sp, #12]
 8008d28:	4649      	mov	r1, r9
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f7ff fea2 	bl	8008a74 <prvWriteBytesToBuffer>
	if( xReturn > ( size_t ) 0 )
 8008d30:	4605      	mov	r5, r0
 8008d32:	2800      	cmp	r0, #0
 8008d34:	d0b9      	beq.n	8008caa <xStreamBufferSend+0x54>
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008d36:	4620      	mov	r0, r4
 8008d38:	f7ff fe6d 	bl	8008a16 <prvBytesInBuffer>
 8008d3c:	68e3      	ldr	r3, [r4, #12]
 8008d3e:	4298      	cmp	r0, r3
 8008d40:	d3b4      	bcc.n	8008cac <xStreamBufferSend+0x56>
			sbSEND_COMPLETED( pxStreamBuffer );
 8008d42:	f000 fa33 	bl	80091ac <vTaskSuspendAll>
 8008d46:	6923      	ldr	r3, [r4, #16]
 8008d48:	b13b      	cbz	r3, 8008d5a <xStreamBufferSend+0x104>
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	6920      	ldr	r0, [r4, #16]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4619      	mov	r1, r3
 8008d52:	f000 fdb3 	bl	80098bc <xTaskGenericNotify>
 8008d56:	2300      	movs	r3, #0
 8008d58:	6123      	str	r3, [r4, #16]
 8008d5a:	f000 fac5 	bl	80092e8 <xTaskResumeAll>
	return xReturn;
 8008d5e:	e7a5      	b.n	8008cac <xStreamBufferSend+0x56>
	else if( xSpace >= xRequiredSpace )
 8008d60:	4545      	cmp	r5, r8
 8008d62:	d3a2      	bcc.n	8008caa <xStreamBufferSend+0x54>
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008d64:	2204      	movs	r2, #4
 8008d66:	a903      	add	r1, sp, #12
 8008d68:	4620      	mov	r0, r4
 8008d6a:	f7ff fe83 	bl	8008a74 <prvWriteBytesToBuffer>
 8008d6e:	e7da      	b.n	8008d26 <xStreamBufferSend+0xd0>

08008d70 <xStreamBufferReceive>:
{
 8008d70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	4691      	mov	r9, r2
 8008d78:	4698      	mov	r8, r3
	configASSERT( pvRxData );
 8008d7a:	460f      	mov	r7, r1
 8008d7c:	b941      	cbnz	r1, 8008d90 <xStreamBufferReceive+0x20>
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	e7fe      	b.n	8008d8e <xStreamBufferReceive+0x1e>
	configASSERT( pxStreamBuffer );
 8008d90:	b940      	cbnz	r0, 8008da4 <xStreamBufferReceive+0x34>
 8008d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d96:	f383 8811 	msr	BASEPRI, r3
 8008d9a:	f3bf 8f6f 	isb	sy
 8008d9e:	f3bf 8f4f 	dsb	sy
 8008da2:	e7fe      	b.n	8008da2 <xStreamBufferReceive+0x32>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008da4:	7f03      	ldrb	r3, [r0, #28]
		xBytesToStoreMessageLength = 0;
 8008da6:	f013 0f01 	tst.w	r3, #1
 8008daa:	bf14      	ite	ne
 8008dac:	2604      	movne	r6, #4
 8008dae:	2600      	moveq	r6, #0
	if( xTicksToWait != ( TickType_t ) 0 )
 8008db0:	f1b8 0f00 	cmp.w	r8, #0
 8008db4:	d026      	beq.n	8008e04 <xStreamBufferReceive+0x94>
		taskENTER_CRITICAL();
 8008db6:	f001 f82d 	bl	8009e14 <vPortEnterCritical>
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f7ff fe2b 	bl	8008a16 <prvBytesInBuffer>
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008dc0:	4286      	cmp	r6, r0
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008dc2:	4605      	mov	r5, r0
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008dc4:	d310      	bcc.n	8008de8 <xStreamBufferReceive+0x78>
				( void ) xTaskNotifyStateClear( NULL );
 8008dc6:	2000      	movs	r0, #0
 8008dc8:	f000 fdde 	bl	8009988 <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008dcc:	6923      	ldr	r3, [r4, #16]
 8008dce:	b143      	cbz	r3, 8008de2 <xStreamBufferReceive+0x72>
 8008dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	e7fe      	b.n	8008de0 <xStreamBufferReceive+0x70>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008de2:	f000 fc33 	bl	800964c <xTaskGetCurrentTaskHandle>
 8008de6:	6120      	str	r0, [r4, #16]
		taskEXIT_CRITICAL();
 8008de8:	f001 f836 	bl	8009e58 <vPortExitCritical>
		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008dec:	42ae      	cmp	r6, r5
 8008dee:	d313      	bcc.n	8008e18 <xStreamBufferReceive+0xa8>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8008df0:	2200      	movs	r2, #0
 8008df2:	4643      	mov	r3, r8
 8008df4:	f04f 31ff 	mov.w	r1, #4294967295
 8008df8:	4610      	mov	r0, r2
 8008dfa:	f000 fd1b 	bl	8009834 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008dfe:	2300      	movs	r3, #0
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e00:	4620      	mov	r0, r4
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008e02:	6123      	str	r3, [r4, #16]
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e04:	f7ff fe07 	bl	8008a16 <prvBytesInBuffer>
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008e08:	42b0      	cmp	r0, r6
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e0a:	4605      	mov	r5, r0
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008e0c:	d804      	bhi.n	8008e18 <xStreamBufferReceive+0xa8>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008e0e:	2500      	movs	r5, #0
}
 8008e10:	4628      	mov	r0, r5
 8008e12:	b003      	add	sp, #12
 8008e14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008e18:	462b      	mov	r3, r5
 8008e1a:	9600      	str	r6, [sp, #0]
 8008e1c:	464a      	mov	r2, r9
 8008e1e:	4639      	mov	r1, r7
 8008e20:	4620      	mov	r0, r4
 8008e22:	f7ff feb4 	bl	8008b8e <prvReadMessageFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 8008e26:	4605      	mov	r5, r0
 8008e28:	2800      	cmp	r0, #0
 8008e2a:	d0f0      	beq.n	8008e0e <xStreamBufferReceive+0x9e>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008e2c:	f000 f9be 	bl	80091ac <vTaskSuspendAll>
 8008e30:	6963      	ldr	r3, [r4, #20]
 8008e32:	b13b      	cbz	r3, 8008e44 <xStreamBufferReceive+0xd4>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6960      	ldr	r0, [r4, #20]
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	f000 fd3e 	bl	80098bc <xTaskGenericNotify>
 8008e40:	2300      	movs	r3, #0
 8008e42:	6163      	str	r3, [r4, #20]
 8008e44:	f000 fa50 	bl	80092e8 <xTaskResumeAll>
	return xReceivedLength;
 8008e48:	e7e2      	b.n	8008e10 <xStreamBufferReceive+0xa0>
	...

08008e4c <prvIdleTask>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8008e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e50:	4905      	ldr	r1, [pc, #20]	; (8008e68 <prvIdleTask+0x1c>)
				taskYIELD();
 8008e52:	4b06      	ldr	r3, [pc, #24]	; (8008e6c <prvIdleTask+0x20>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e54:	6808      	ldr	r0, [r1, #0]
 8008e56:	2801      	cmp	r0, #1
 8008e58:	d9fc      	bls.n	8008e54 <prvIdleTask+0x8>
				taskYIELD();
 8008e5a:	601a      	str	r2, [r3, #0]
 8008e5c:	f3bf 8f4f 	dsb	sy
 8008e60:	f3bf 8f6f 	isb	sy
 8008e64:	e7f6      	b.n	8008e54 <prvIdleTask+0x8>
 8008e66:	bf00      	nop
 8008e68:	20000cac 	.word	0x20000cac
 8008e6c:	e000ed04 	.word	0xe000ed04

08008e70 <prvAddNewTaskToReadyList>:
{
 8008e70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e74:	4606      	mov	r6, r0
	taskENTER_CRITICAL();
 8008e76:	f000 ffcd 	bl	8009e14 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008e7a:	4b2b      	ldr	r3, [pc, #172]	; (8008f28 <prvAddNewTaskToReadyList+0xb8>)
		if( pxCurrentTCB == NULL )
 8008e7c:	4c2b      	ldr	r4, [pc, #172]	; (8008f2c <prvAddNewTaskToReadyList+0xbc>)
		uxCurrentNumberOfTasks++;
 8008e7e:	681a      	ldr	r2, [r3, #0]
 8008e80:	4f2b      	ldr	r7, [pc, #172]	; (8008f30 <prvAddNewTaskToReadyList+0xc0>)
 8008e82:	3201      	adds	r2, #1
 8008e84:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008e86:	6825      	ldr	r5, [r4, #0]
 8008e88:	2d00      	cmp	r5, #0
 8008e8a:	d142      	bne.n	8008f12 <prvAddNewTaskToReadyList+0xa2>
			pxCurrentTCB = pxNewTCB;
 8008e8c:	6026      	str	r6, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	2b01      	cmp	r3, #1
 8008e92:	d119      	bne.n	8008ec8 <prvAddNewTaskToReadyList+0x58>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e94:	f04f 0814 	mov.w	r8, #20
 8008e98:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e9c:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e9e:	f7ff f995 	bl	80081cc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ea2:	2d38      	cmp	r5, #56	; 0x38
 8008ea4:	d1f8      	bne.n	8008e98 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ea6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008f54 <prvAddNewTaskToReadyList+0xe4>
	vListInitialise( &xDelayedTaskList2 );
 8008eaa:	4d22      	ldr	r5, [pc, #136]	; (8008f34 <prvAddNewTaskToReadyList+0xc4>)
	vListInitialise( &xDelayedTaskList1 );
 8008eac:	4640      	mov	r0, r8
 8008eae:	f7ff f98d 	bl	80081cc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008eb2:	4628      	mov	r0, r5
 8008eb4:	f7ff f98a 	bl	80081cc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008eb8:	481f      	ldr	r0, [pc, #124]	; (8008f38 <prvAddNewTaskToReadyList+0xc8>)
 8008eba:	f7ff f987 	bl	80081cc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008ebe:	4b1f      	ldr	r3, [pc, #124]	; (8008f3c <prvAddNewTaskToReadyList+0xcc>)
 8008ec0:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ec4:	4b1e      	ldr	r3, [pc, #120]	; (8008f40 <prvAddNewTaskToReadyList+0xd0>)
 8008ec6:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008ec8:	2014      	movs	r0, #20
		uxTaskNumber++;
 8008eca:	4a1e      	ldr	r2, [pc, #120]	; (8008f44 <prvAddNewTaskToReadyList+0xd4>)
 8008ecc:	6813      	ldr	r3, [r2, #0]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008ed2:	4a1d      	ldr	r2, [pc, #116]	; (8008f48 <prvAddNewTaskToReadyList+0xd8>)
 8008ed4:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008ed6:	6811      	ldr	r1, [r2, #0]
 8008ed8:	fb00 7003 	mla	r0, r0, r3, r7
 8008edc:	428b      	cmp	r3, r1
 8008ede:	f106 0104 	add.w	r1, r6, #4
 8008ee2:	bf88      	it	hi
 8008ee4:	6013      	strhi	r3, [r2, #0]
 8008ee6:	f7ff f97f 	bl	80081e8 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008eea:	f000 ffb5 	bl	8009e58 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008eee:	4b17      	ldr	r3, [pc, #92]	; (8008f4c <prvAddNewTaskToReadyList+0xdc>)
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	b163      	cbz	r3, 8008f0e <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ef8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008efa:	429a      	cmp	r2, r3
 8008efc:	d207      	bcs.n	8008f0e <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 8008efe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f02:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <prvAddNewTaskToReadyList+0xe0>)
 8008f04:	601a      	str	r2, [r3, #0]
 8008f06:	f3bf 8f4f 	dsb	sy
 8008f0a:	f3bf 8f6f 	isb	sy
}
 8008f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008f12:	4b0e      	ldr	r3, [pc, #56]	; (8008f4c <prvAddNewTaskToReadyList+0xdc>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1d6      	bne.n	8008ec8 <prvAddNewTaskToReadyList+0x58>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f1a:	6823      	ldr	r3, [r4, #0]
 8008f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f1e:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008f20:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008f22:	bf98      	it	ls
 8008f24:	6026      	strls	r6, [r4, #0]
 8008f26:	e7cf      	b.n	8008ec8 <prvAddNewTaskToReadyList+0x58>
 8008f28:	2000110c 	.word	0x2000110c
 8008f2c:	20000ca0 	.word	0x20000ca0
 8008f30:	20000cac 	.word	0x20000cac
 8008f34:	20001134 	.word	0x20001134
 8008f38:	20001150 	.word	0x20001150
 8008f3c:	20000ca4 	.word	0x20000ca4
 8008f40:	20000ca8 	.word	0x20000ca8
 8008f44:	20001118 	.word	0x20001118
 8008f48:	2000111c 	.word	0x2000111c
 8008f4c:	20001164 	.word	0x20001164
 8008f50:	e000ed04 	.word	0xe000ed04
 8008f54:	20001120 	.word	0x20001120

08008f58 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f58:	4a06      	ldr	r2, [pc, #24]	; (8008f74 <prvResetNextTaskUnblockTime+0x1c>)
 8008f5a:	6813      	ldr	r3, [r2, #0]
 8008f5c:	6819      	ldr	r1, [r3, #0]
 8008f5e:	4b06      	ldr	r3, [pc, #24]	; (8008f78 <prvResetNextTaskUnblockTime+0x20>)
 8008f60:	b919      	cbnz	r1, 8008f6a <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f62:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f66:	601a      	str	r2, [r3, #0]
	}
}
 8008f68:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008f6a:	6812      	ldr	r2, [r2, #0]
 8008f6c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f6e:	68d2      	ldr	r2, [r2, #12]
 8008f70:	6852      	ldr	r2, [r2, #4]
 8008f72:	e7f8      	b.n	8008f66 <prvResetNextTaskUnblockTime+0xe>
 8008f74:	20000ca4 	.word	0x20000ca4
 8008f78:	20001148 	.word	0x20001148

08008f7c <prvInitialiseNewTask.isra.1>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f80:	460d      	mov	r5, r1
 8008f82:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f86:	0096      	lsls	r6, r2, #2
 8008f88:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f8a:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f8c:	21a5      	movs	r1, #165	; 0xa5
 8008f8e:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008f90:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008f92:	f001 f983 	bl	800a29c <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008f96:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008f98:	3e04      	subs	r6, #4
 8008f9a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008f9c:	f026 0607 	bic.w	r6, r6, #7
 8008fa0:	1e6b      	subs	r3, r5, #1
 8008fa2:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008fa6:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008fa8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8008fac:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8008fb0:	7819      	ldrb	r1, [r3, #0]
 8008fb2:	b109      	cbz	r1, 8008fb8 <prvInitialiseNewTask.isra.1+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008fb4:	42ab      	cmp	r3, r5
 8008fb6:	d1f7      	bne.n	8008fa8 <prvInitialiseNewTask.isra.1+0x2c>
 8008fb8:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fba:	f04f 0a00 	mov.w	sl, #0
 8008fbe:	2d37      	cmp	r5, #55	; 0x37
 8008fc0:	bf28      	it	cs
 8008fc2:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fc4:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 8008fc6:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8008fc8:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008fcc:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008fd0:	f7ff f907 	bl	80081e2 <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd4:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008fd8:	f104 0018 	add.w	r0, r4, #24
 8008fdc:	f7ff f901 	bl	80081e2 <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8008fe0:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008fe4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fe6:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008fe8:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008fea:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008fee:	464a      	mov	r2, r9
 8008ff0:	4641      	mov	r1, r8
 8008ff2:	4630      	mov	r0, r6
 8008ff4:	f000 fee4 	bl	8009dc0 <pxPortInitialiseStack>
 8008ff8:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8008ffa:	b107      	cbz	r7, 8008ffe <prvInitialiseNewTask.isra.1+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008ffc:	603c      	str	r4, [r7, #0]
}
 8008ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08009004 <prvAddCurrentTaskToDelayedList.isra.2>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	4606      	mov	r6, r0
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009008:	4b0f      	ldr	r3, [pc, #60]	; (8009048 <prvAddCurrentTaskToDelayedList.isra.2+0x44>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800900a:	4d10      	ldr	r5, [pc, #64]	; (800904c <prvAddCurrentTaskToDelayedList.isra.2+0x48>)
const TickType_t xConstTickCount = xTickCount;
 800900c:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800900e:	6828      	ldr	r0, [r5, #0]
 8009010:	3004      	adds	r0, #4
 8009012:	f7ff f90c 	bl	800822e <uxListRemove>
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009016:	682b      	ldr	r3, [r5, #0]
 8009018:	19a4      	adds	r4, r4, r6
 800901a:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 800901c:	d307      	bcc.n	800902e <prvAddCurrentTaskToDelayedList.isra.2+0x2a>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800901e:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <prvAddCurrentTaskToDelayedList.isra.2+0x4c>)
 8009020:	6818      	ldr	r0, [r3, #0]
 8009022:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009024:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009028:	3104      	adds	r1, #4
 800902a:	f7ff b8e9 	b.w	8008200 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800902e:	4b09      	ldr	r3, [pc, #36]	; (8009054 <prvAddCurrentTaskToDelayedList.isra.2+0x50>)
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	6829      	ldr	r1, [r5, #0]
 8009034:	3104      	adds	r1, #4
 8009036:	f7ff f8e3 	bl	8008200 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 800903a:	4b07      	ldr	r3, [pc, #28]	; (8009058 <prvAddCurrentTaskToDelayedList.isra.2+0x54>)
 800903c:	681a      	ldr	r2, [r3, #0]
 800903e:	4294      	cmp	r4, r2
				xNextTaskUnblockTime = xTimeToWake;
 8009040:	bf38      	it	cc
 8009042:	601c      	strcc	r4, [r3, #0]
}
 8009044:	bd70      	pop	{r4, r5, r6, pc}
 8009046:	bf00      	nop
 8009048:	20001168 	.word	0x20001168
 800904c:	20000ca0 	.word	0x20000ca0
 8009050:	20000ca8 	.word	0x20000ca8
 8009054:	20000ca4 	.word	0x20000ca4
 8009058:	20001148 	.word	0x20001148

0800905c <xTaskCreateStatic>:
	{
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	b086      	sub	sp, #24
 8009060:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 8009064:	b945      	cbnz	r5, 8009078 <xTaskCreateStatic+0x1c>
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	e7fe      	b.n	8009076 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 8009078:	b944      	cbnz	r4, 800908c <xTaskCreateStatic+0x30>
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	e7fe      	b.n	800908a <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800908c:	2654      	movs	r6, #84	; 0x54
 800908e:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8009090:	9e04      	ldr	r6, [sp, #16]
 8009092:	2e54      	cmp	r6, #84	; 0x54
 8009094:	d008      	beq.n	80090a8 <xTaskCreateStatic+0x4c>
 8009096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	e7fe      	b.n	80090a6 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80090a8:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80090aa:	2502      	movs	r5, #2
 80090ac:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80090b0:	ad05      	add	r5, sp, #20
 80090b2:	9501      	str	r5, [sp, #4]
 80090b4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80090b6:	9402      	str	r4, [sp, #8]
 80090b8:	9500      	str	r5, [sp, #0]
 80090ba:	f7ff ff5f 	bl	8008f7c <prvInitialiseNewTask.isra.1>
			prvAddNewTaskToReadyList( pxNewTCB );
 80090be:	4620      	mov	r0, r4
 80090c0:	f7ff fed6 	bl	8008e70 <prvAddNewTaskToReadyList>
	}
 80090c4:	9805      	ldr	r0, [sp, #20]
 80090c6:	b006      	add	sp, #24
 80090c8:	bd70      	pop	{r4, r5, r6, pc}

080090ca <xTaskCreate>:
	{
 80090ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80090ce:	4607      	mov	r7, r0
 80090d0:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090d2:	0090      	lsls	r0, r2, #2
	{
 80090d4:	4688      	mov	r8, r1
 80090d6:	4616      	mov	r6, r2
 80090d8:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090da:	f000 ffcf 	bl	800a07c <pvPortMalloc>
			if( pxStack != NULL )
 80090de:	4605      	mov	r5, r0
 80090e0:	b1e8      	cbz	r0, 800911e <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80090e2:	2054      	movs	r0, #84	; 0x54
 80090e4:	f000 ffca 	bl	800a07c <pvPortMalloc>
				if( pxNewTCB != NULL )
 80090e8:	4604      	mov	r4, r0
 80090ea:	b1a8      	cbz	r0, 8009118 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80090ec:	2300      	movs	r3, #0
 80090ee:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 80090f4:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80090f6:	9301      	str	r3, [sp, #4]
 80090f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090fa:	9002      	str	r0, [sp, #8]
 80090fc:	9300      	str	r3, [sp, #0]
 80090fe:	4632      	mov	r2, r6
 8009100:	464b      	mov	r3, r9
 8009102:	4641      	mov	r1, r8
 8009104:	4638      	mov	r0, r7
 8009106:	f7ff ff39 	bl	8008f7c <prvInitialiseNewTask.isra.1>
			prvAddNewTaskToReadyList( pxNewTCB );
 800910a:	4620      	mov	r0, r4
 800910c:	f7ff feb0 	bl	8008e70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009110:	2001      	movs	r0, #1
	}
 8009112:	b005      	add	sp, #20
 8009114:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009118:	4628      	mov	r0, r5
 800911a:	f001 f83d 	bl	800a198 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800911e:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 8009122:	e7f6      	b.n	8009112 <xTaskCreate+0x48>

08009124 <vTaskStartScheduler>:
{
 8009124:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009126:	2400      	movs	r4, #0
{
 8009128:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800912a:	aa07      	add	r2, sp, #28
 800912c:	a906      	add	r1, sp, #24
 800912e:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009130:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009134:	f7ff f832 	bl	800819c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009138:	9b05      	ldr	r3, [sp, #20]
 800913a:	9a07      	ldr	r2, [sp, #28]
 800913c:	9302      	str	r3, [sp, #8]
 800913e:	9b06      	ldr	r3, [sp, #24]
 8009140:	4915      	ldr	r1, [pc, #84]	; (8009198 <vTaskStartScheduler+0x74>)
 8009142:	e9cd 4300 	strd	r4, r3, [sp]
 8009146:	4815      	ldr	r0, [pc, #84]	; (800919c <vTaskStartScheduler+0x78>)
 8009148:	4623      	mov	r3, r4
 800914a:	f7ff ff87 	bl	800905c <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800914e:	b1a8      	cbz	r0, 800917c <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 8009150:	f000 fc82 	bl	8009a58 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 8009154:	2801      	cmp	r0, #1
 8009156:	d113      	bne.n	8009180 <vTaskStartScheduler+0x5c>
 8009158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800915c:	f383 8811 	msr	BASEPRI, r3
 8009160:	f3bf 8f6f 	isb	sy
 8009164:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 8009168:	f04f 32ff 	mov.w	r2, #4294967295
 800916c:	4b0c      	ldr	r3, [pc, #48]	; (80091a0 <vTaskStartScheduler+0x7c>)
 800916e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009170:	4b0c      	ldr	r3, [pc, #48]	; (80091a4 <vTaskStartScheduler+0x80>)
 8009172:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8009174:	4b0c      	ldr	r3, [pc, #48]	; (80091a8 <vTaskStartScheduler+0x84>)
 8009176:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 8009178:	f000 fed4 	bl	8009f24 <xPortStartScheduler>
}
 800917c:	b008      	add	sp, #32
 800917e:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009180:	3001      	adds	r0, #1
 8009182:	d1fb      	bne.n	800917c <vTaskStartScheduler+0x58>
 8009184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009188:	f383 8811 	msr	BASEPRI, r3
 800918c:	f3bf 8f6f 	isb	sy
 8009190:	f3bf 8f4f 	dsb	sy
 8009194:	e7fe      	b.n	8009194 <vTaskStartScheduler+0x70>
 8009196:	bf00      	nop
 8009198:	0800dbd5 	.word	0x0800dbd5
 800919c:	08008e4d 	.word	0x08008e4d
 80091a0:	20001148 	.word	0x20001148
 80091a4:	20001164 	.word	0x20001164
 80091a8:	20001168 	.word	0x20001168

080091ac <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 80091ac:	4a02      	ldr	r2, [pc, #8]	; (80091b8 <vTaskSuspendAll+0xc>)
 80091ae:	6813      	ldr	r3, [r2, #0]
 80091b0:	3301      	adds	r3, #1
 80091b2:	6013      	str	r3, [r2, #0]
}
 80091b4:	4770      	bx	lr
 80091b6:	bf00      	nop
 80091b8:	20001114 	.word	0x20001114

080091bc <xTaskGetTickCount>:
		xTicks = xTickCount;
 80091bc:	4b01      	ldr	r3, [pc, #4]	; (80091c4 <xTaskGetTickCount+0x8>)
 80091be:	6818      	ldr	r0, [r3, #0]
}
 80091c0:	4770      	bx	lr
 80091c2:	bf00      	nop
 80091c4:	20001168 	.word	0x20001168

080091c8 <xTaskIncrementTick>:
{
 80091c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091cc:	4b3b      	ldr	r3, [pc, #236]	; (80092bc <xTaskIncrementTick+0xf4>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d16b      	bne.n	80092ac <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80091d4:	4b3a      	ldr	r3, [pc, #232]	; (80092c0 <xTaskIncrementTick+0xf8>)
 80091d6:	681c      	ldr	r4, [r3, #0]
 80091d8:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 80091da:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091dc:	b9bc      	cbnz	r4, 800920e <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 80091de:	4b39      	ldr	r3, [pc, #228]	; (80092c4 <xTaskIncrementTick+0xfc>)
 80091e0:	681a      	ldr	r2, [r3, #0]
 80091e2:	6812      	ldr	r2, [r2, #0]
 80091e4:	b142      	cbz	r2, 80091f8 <xTaskIncrementTick+0x30>
 80091e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091ea:	f383 8811 	msr	BASEPRI, r3
 80091ee:	f3bf 8f6f 	isb	sy
 80091f2:	f3bf 8f4f 	dsb	sy
 80091f6:	e7fe      	b.n	80091f6 <xTaskIncrementTick+0x2e>
 80091f8:	4a33      	ldr	r2, [pc, #204]	; (80092c8 <xTaskIncrementTick+0x100>)
 80091fa:	6819      	ldr	r1, [r3, #0]
 80091fc:	6810      	ldr	r0, [r2, #0]
 80091fe:	6018      	str	r0, [r3, #0]
 8009200:	6011      	str	r1, [r2, #0]
 8009202:	4a32      	ldr	r2, [pc, #200]	; (80092cc <xTaskIncrementTick+0x104>)
 8009204:	6813      	ldr	r3, [r2, #0]
 8009206:	3301      	adds	r3, #1
 8009208:	6013      	str	r3, [r2, #0]
 800920a:	f7ff fea5 	bl	8008f58 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800920e:	4d30      	ldr	r5, [pc, #192]	; (80092d0 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8009210:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	4f2f      	ldr	r7, [pc, #188]	; (80092d4 <xTaskIncrementTick+0x10c>)
 8009218:	42a3      	cmp	r3, r4
 800921a:	d911      	bls.n	8009240 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800921c:	683a      	ldr	r2, [r7, #0]
 800921e:	4b2e      	ldr	r3, [pc, #184]	; (80092d8 <xTaskIncrementTick+0x110>)
 8009220:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009222:	2214      	movs	r2, #20
 8009224:	434a      	muls	r2, r1
 8009226:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8009228:	2a02      	cmp	r2, #2
 800922a:	bf28      	it	cs
 800922c:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8009230:	4a2a      	ldr	r2, [pc, #168]	; (80092dc <xTaskIncrementTick+0x114>)
 8009232:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 8009234:	2a00      	cmp	r2, #0
}
 8009236:	bf0c      	ite	eq
 8009238:	4658      	moveq	r0, fp
 800923a:	2001      	movne	r0, #1
 800923c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009240:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80092c4 <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 8009244:	f8df a09c 	ldr.w	sl, [pc, #156]	; 80092e4 <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009248:	f8d9 2000 	ldr.w	r2, [r9]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	b91a      	cbnz	r2, 8009258 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009250:	f04f 32ff 	mov.w	r2, #4294967295
 8009254:	602a      	str	r2, [r5, #0]
					break;
 8009256:	e7e1      	b.n	800921c <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009258:	f8d9 2000 	ldr.w	r2, [r9]
 800925c:	68d2      	ldr	r2, [r2, #12]
 800925e:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009260:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 8009262:	428c      	cmp	r4, r1
 8009264:	d201      	bcs.n	800926a <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 8009266:	6029      	str	r1, [r5, #0]
						break;
 8009268:	e7d8      	b.n	800921c <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800926a:	f106 0804 	add.w	r8, r6, #4
 800926e:	4640      	mov	r0, r8
 8009270:	f7fe ffdd 	bl	800822e <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009274:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 8009276:	b119      	cbz	r1, 8009280 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009278:	f106 0018 	add.w	r0, r6, #24
 800927c:	f7fe ffd7 	bl	800822e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009280:	2214      	movs	r2, #20
 8009282:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 8009284:	f8da 1000 	ldr.w	r1, [sl]
 8009288:	4b13      	ldr	r3, [pc, #76]	; (80092d8 <xTaskIncrementTick+0x110>)
 800928a:	4288      	cmp	r0, r1
 800928c:	bf88      	it	hi
 800928e:	f8ca 0000 	strhi.w	r0, [sl]
 8009292:	4641      	mov	r1, r8
 8009294:	fb02 3000 	mla	r0, r2, r0, r3
 8009298:	f7fe ffa6 	bl	80081e8 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800929c:	6838      	ldr	r0, [r7, #0]
 800929e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80092a0:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80092a2:	4291      	cmp	r1, r2
 80092a4:	bf28      	it	cs
 80092a6:	f04f 0b01 	movcs.w	fp, #1
 80092aa:	e7cd      	b.n	8009248 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 80092ac:	4a0c      	ldr	r2, [pc, #48]	; (80092e0 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 80092ae:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 80092b2:	6813      	ldr	r3, [r2, #0]
 80092b4:	3301      	adds	r3, #1
 80092b6:	6013      	str	r3, [r2, #0]
 80092b8:	e7ba      	b.n	8009230 <xTaskIncrementTick+0x68>
 80092ba:	bf00      	nop
 80092bc:	20001114 	.word	0x20001114
 80092c0:	20001168 	.word	0x20001168
 80092c4:	20000ca4 	.word	0x20000ca4
 80092c8:	20000ca8 	.word	0x20000ca8
 80092cc:	2000114c 	.word	0x2000114c
 80092d0:	20001148 	.word	0x20001148
 80092d4:	20000ca0 	.word	0x20000ca0
 80092d8:	20000cac 	.word	0x20000cac
 80092dc:	2000116c 	.word	0x2000116c
 80092e0:	20001110 	.word	0x20001110
 80092e4:	2000111c 	.word	0x2000111c

080092e8 <xTaskResumeAll>:
{
 80092e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 80092ec:	4c2f      	ldr	r4, [pc, #188]	; (80093ac <xTaskResumeAll+0xc4>)
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	b943      	cbnz	r3, 8009304 <xTaskResumeAll+0x1c>
 80092f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f6:	f383 8811 	msr	BASEPRI, r3
 80092fa:	f3bf 8f6f 	isb	sy
 80092fe:	f3bf 8f4f 	dsb	sy
 8009302:	e7fe      	b.n	8009302 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 8009304:	f000 fd86 	bl	8009e14 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009308:	6823      	ldr	r3, [r4, #0]
 800930a:	3b01      	subs	r3, #1
 800930c:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800930e:	6824      	ldr	r4, [r4, #0]
 8009310:	b12c      	cbz	r4, 800931e <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 8009312:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009314:	f000 fda0 	bl	8009e58 <vPortExitCritical>
}
 8009318:	4620      	mov	r0, r4
 800931a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800931e:	4b24      	ldr	r3, [pc, #144]	; (80093b0 <xTaskResumeAll+0xc8>)
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d0f5      	beq.n	8009312 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009326:	4d23      	ldr	r5, [pc, #140]	; (80093b4 <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8009328:	4e23      	ldr	r6, [pc, #140]	; (80093b8 <xTaskResumeAll+0xd0>)
 800932a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 80093cc <xTaskResumeAll+0xe4>
 800932e:	e01d      	b.n	800936c <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009330:	68eb      	ldr	r3, [r5, #12]
 8009332:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009334:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009336:	f104 0018 	add.w	r0, r4, #24
 800933a:	f7fe ff78 	bl	800822e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800933e:	4638      	mov	r0, r7
 8009340:	f7fe ff75 	bl	800822e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009344:	2014      	movs	r0, #20
 8009346:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	fb00 8003 	mla	r0, r0, r3, r8
 800934e:	4293      	cmp	r3, r2
 8009350:	4639      	mov	r1, r7
 8009352:	bf88      	it	hi
 8009354:	6033      	strhi	r3, [r6, #0]
 8009356:	f7fe ff47 	bl	80081e8 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800935a:	4b18      	ldr	r3, [pc, #96]	; (80093bc <xTaskResumeAll+0xd4>)
 800935c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009362:	429a      	cmp	r2, r3
 8009364:	d302      	bcc.n	800936c <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 8009366:	2201      	movs	r2, #1
 8009368:	4b15      	ldr	r3, [pc, #84]	; (80093c0 <xTaskResumeAll+0xd8>)
 800936a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800936c:	682b      	ldr	r3, [r5, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d1de      	bne.n	8009330 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 8009372:	b10c      	cbz	r4, 8009378 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 8009374:	f7ff fdf0 	bl	8008f58 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8009378:	4d12      	ldr	r5, [pc, #72]	; (80093c4 <xTaskResumeAll+0xdc>)
 800937a:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800937c:	b144      	cbz	r4, 8009390 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800937e:	2701      	movs	r7, #1
 8009380:	4e0f      	ldr	r6, [pc, #60]	; (80093c0 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 8009382:	f7ff ff21 	bl	80091c8 <xTaskIncrementTick>
 8009386:	b100      	cbz	r0, 800938a <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 8009388:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800938a:	3c01      	subs	r4, #1
 800938c:	d1f9      	bne.n	8009382 <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 800938e:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 8009390:	4b0b      	ldr	r3, [pc, #44]	; (80093c0 <xTaskResumeAll+0xd8>)
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d0bc      	beq.n	8009312 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 8009398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <xTaskResumeAll+0xe0>)
 800939e:	601a      	str	r2, [r3, #0]
 80093a0:	f3bf 8f4f 	dsb	sy
 80093a4:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 80093a8:	2401      	movs	r4, #1
 80093aa:	e7b3      	b.n	8009314 <xTaskResumeAll+0x2c>
 80093ac:	20001114 	.word	0x20001114
 80093b0:	2000110c 	.word	0x2000110c
 80093b4:	20001150 	.word	0x20001150
 80093b8:	2000111c 	.word	0x2000111c
 80093bc:	20000ca0 	.word	0x20000ca0
 80093c0:	2000116c 	.word	0x2000116c
 80093c4:	20001110 	.word	0x20001110
 80093c8:	e000ed04 	.word	0xe000ed04
 80093cc:	20000cac 	.word	0x20000cac

080093d0 <vTaskDelay>:
	{
 80093d0:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 80093d2:	b940      	cbnz	r0, 80093e6 <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 80093d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093d8:	4b0d      	ldr	r3, [pc, #52]	; (8009410 <vTaskDelay+0x40>)
 80093da:	601a      	str	r2, [r3, #0]
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	f3bf 8f6f 	isb	sy
	}
 80093e4:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 80093e6:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <vTaskDelay+0x44>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	b143      	cbz	r3, 80093fe <vTaskDelay+0x2e>
 80093ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093f0:	f383 8811 	msr	BASEPRI, r3
 80093f4:	f3bf 8f6f 	isb	sy
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	e7fe      	b.n	80093fc <vTaskDelay+0x2c>
			vTaskSuspendAll();
 80093fe:	f7ff fed5 	bl	80091ac <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009402:	f7ff fdff 	bl	8009004 <prvAddCurrentTaskToDelayedList.isra.2>
			xAlreadyYielded = xTaskResumeAll();
 8009406:	f7ff ff6f 	bl	80092e8 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 800940a:	2800      	cmp	r0, #0
 800940c:	d0e2      	beq.n	80093d4 <vTaskDelay+0x4>
 800940e:	e7e9      	b.n	80093e4 <vTaskDelay+0x14>
 8009410:	e000ed04 	.word	0xe000ed04
 8009414:	20001114 	.word	0x20001114

08009418 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009418:	4b18      	ldr	r3, [pc, #96]	; (800947c <vTaskSwitchContext+0x64>)
{
 800941a:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800941c:	681a      	ldr	r2, [r3, #0]
 800941e:	4b18      	ldr	r3, [pc, #96]	; (8009480 <vTaskSwitchContext+0x68>)
 8009420:	b112      	cbz	r2, 8009428 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 8009422:	2201      	movs	r2, #1
 8009424:	601a      	str	r2, [r3, #0]
}
 8009426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8009428:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800942a:	4a16      	ldr	r2, [pc, #88]	; (8009484 <vTaskSwitchContext+0x6c>)
 800942c:	2714      	movs	r7, #20
 800942e:	4616      	mov	r6, r2
 8009430:	4d15      	ldr	r5, [pc, #84]	; (8009488 <vTaskSwitchContext+0x70>)
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	fb07 f103 	mul.w	r1, r7, r3
 8009438:	5854      	ldr	r4, [r2, r1]
 800943a:	1850      	adds	r0, r2, r1
 800943c:	b194      	cbz	r4, 8009464 <vTaskSwitchContext+0x4c>
 800943e:	6844      	ldr	r4, [r0, #4]
 8009440:	3108      	adds	r1, #8
 8009442:	6864      	ldr	r4, [r4, #4]
 8009444:	440a      	add	r2, r1
 8009446:	4294      	cmp	r4, r2
 8009448:	bf08      	it	eq
 800944a:	6862      	ldreq	r2, [r4, #4]
 800944c:	6044      	str	r4, [r0, #4]
 800944e:	bf08      	it	eq
 8009450:	6042      	streq	r2, [r0, #4]
 8009452:	2214      	movs	r2, #20
 8009454:	fb02 6203 	mla	r2, r2, r3, r6
 8009458:	6852      	ldr	r2, [r2, #4]
 800945a:	68d1      	ldr	r1, [r2, #12]
 800945c:	4a0b      	ldr	r2, [pc, #44]	; (800948c <vTaskSwitchContext+0x74>)
 800945e:	6011      	str	r1, [r2, #0]
 8009460:	602b      	str	r3, [r5, #0]
}
 8009462:	e7e0      	b.n	8009426 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009464:	b943      	cbnz	r3, 8009478 <vTaskSwitchContext+0x60>
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	e7fe      	b.n	8009476 <vTaskSwitchContext+0x5e>
 8009478:	3b01      	subs	r3, #1
 800947a:	e7db      	b.n	8009434 <vTaskSwitchContext+0x1c>
 800947c:	20001114 	.word	0x20001114
 8009480:	2000116c 	.word	0x2000116c
 8009484:	20000cac 	.word	0x20000cac
 8009488:	2000111c 	.word	0x2000111c
 800948c:	20000ca0 	.word	0x20000ca0

08009490 <vTaskPlaceOnEventList>:
{
 8009490:	b510      	push	{r4, lr}
 8009492:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 8009494:	b940      	cbnz	r0, 80094a8 <vTaskPlaceOnEventList+0x18>
 8009496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800949a:	f383 8811 	msr	BASEPRI, r3
 800949e:	f3bf 8f6f 	isb	sy
 80094a2:	f3bf 8f4f 	dsb	sy
 80094a6:	e7fe      	b.n	80094a6 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094a8:	4b04      	ldr	r3, [pc, #16]	; (80094bc <vTaskPlaceOnEventList+0x2c>)
 80094aa:	6819      	ldr	r1, [r3, #0]
 80094ac:	3118      	adds	r1, #24
 80094ae:	f7fe fea7 	bl	8008200 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094b2:	4620      	mov	r0, r4
}
 80094b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80094b8:	f7ff bda4 	b.w	8009004 <prvAddCurrentTaskToDelayedList.isra.2>
 80094bc:	20000ca0 	.word	0x20000ca0

080094c0 <vTaskPlaceOnEventListRestricted>:
	{
 80094c0:	b538      	push	{r3, r4, r5, lr}
 80094c2:	460c      	mov	r4, r1
 80094c4:	4615      	mov	r5, r2
		configASSERT( pxEventList );
 80094c6:	b940      	cbnz	r0, 80094da <vTaskPlaceOnEventListRestricted+0x1a>
 80094c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	e7fe      	b.n	80094d8 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80094da:	4b07      	ldr	r3, [pc, #28]	; (80094f8 <vTaskPlaceOnEventListRestricted+0x38>)
 80094dc:	6819      	ldr	r1, [r3, #0]
 80094de:	3118      	adds	r1, #24
 80094e0:	f7fe fe82 	bl	80081e8 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 80094e4:	2d00      	cmp	r5, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094e6:	bf08      	it	eq
 80094e8:	4620      	moveq	r0, r4
	}
 80094ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80094ee:	bf18      	it	ne
 80094f0:	f04f 30ff 	movne.w	r0, #4294967295
 80094f4:	f7ff bd86 	b.w	8009004 <prvAddCurrentTaskToDelayedList.isra.2>
 80094f8:	20000ca0 	.word	0x20000ca0

080094fc <xTaskRemoveFromEventList>:
{
 80094fc:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80094fe:	68c3      	ldr	r3, [r0, #12]
 8009500:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 8009502:	b944      	cbnz	r4, 8009516 <xTaskRemoveFromEventList+0x1a>
 8009504:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009508:	f383 8811 	msr	BASEPRI, r3
 800950c:	f3bf 8f6f 	isb	sy
 8009510:	f3bf 8f4f 	dsb	sy
 8009514:	e7fe      	b.n	8009514 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009516:	f104 0518 	add.w	r5, r4, #24
 800951a:	4628      	mov	r0, r5
 800951c:	f7fe fe87 	bl	800822e <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009520:	4b10      	ldr	r3, [pc, #64]	; (8009564 <xTaskRemoveFromEventList+0x68>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	b9db      	cbnz	r3, 800955e <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009526:	1d25      	adds	r5, r4, #4
 8009528:	4628      	mov	r0, r5
 800952a:	f7fe fe80 	bl	800822e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800952e:	4a0e      	ldr	r2, [pc, #56]	; (8009568 <xTaskRemoveFromEventList+0x6c>)
 8009530:	2014      	movs	r0, #20
 8009532:	6811      	ldr	r1, [r2, #0]
 8009534:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009536:	428b      	cmp	r3, r1
 8009538:	4629      	mov	r1, r5
 800953a:	bf88      	it	hi
 800953c:	6013      	strhi	r3, [r2, #0]
 800953e:	4a0b      	ldr	r2, [pc, #44]	; (800956c <xTaskRemoveFromEventList+0x70>)
 8009540:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8009544:	f7fe fe50 	bl	80081e8 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009548:	4b09      	ldr	r3, [pc, #36]	; (8009570 <xTaskRemoveFromEventList+0x74>)
 800954a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009550:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 8009552:	bf85      	ittet	hi
 8009554:	2001      	movhi	r0, #1
 8009556:	4b07      	ldrhi	r3, [pc, #28]	; (8009574 <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 8009558:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 800955a:	6018      	strhi	r0, [r3, #0]
}
 800955c:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800955e:	4629      	mov	r1, r5
 8009560:	4805      	ldr	r0, [pc, #20]	; (8009578 <xTaskRemoveFromEventList+0x7c>)
 8009562:	e7ef      	b.n	8009544 <xTaskRemoveFromEventList+0x48>
 8009564:	20001114 	.word	0x20001114
 8009568:	2000111c 	.word	0x2000111c
 800956c:	20000cac 	.word	0x20000cac
 8009570:	20000ca0 	.word	0x20000ca0
 8009574:	2000116c 	.word	0x2000116c
 8009578:	20001150 	.word	0x20001150

0800957c <vTaskSetTimeOutState>:
{
 800957c:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 800957e:	4604      	mov	r4, r0
 8009580:	b940      	cbnz	r0, 8009594 <vTaskSetTimeOutState+0x18>
 8009582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	e7fe      	b.n	8009592 <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 8009594:	f000 fc3e 	bl	8009e14 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009598:	4b04      	ldr	r3, [pc, #16]	; (80095ac <vTaskSetTimeOutState+0x30>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800959e:	4b04      	ldr	r3, [pc, #16]	; (80095b0 <vTaskSetTimeOutState+0x34>)
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	6063      	str	r3, [r4, #4]
}
 80095a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 80095a8:	f000 bc56 	b.w	8009e58 <vPortExitCritical>
 80095ac:	2000114c 	.word	0x2000114c
 80095b0:	20001168 	.word	0x20001168

080095b4 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095b4:	4b03      	ldr	r3, [pc, #12]	; (80095c4 <vTaskInternalSetTimeOutState+0x10>)
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80095ba:	4b03      	ldr	r3, [pc, #12]	; (80095c8 <vTaskInternalSetTimeOutState+0x14>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	6043      	str	r3, [r0, #4]
}
 80095c0:	4770      	bx	lr
 80095c2:	bf00      	nop
 80095c4:	2000114c 	.word	0x2000114c
 80095c8:	20001168 	.word	0x20001168

080095cc <xTaskCheckForTimeOut>:
{
 80095cc:	b570      	push	{r4, r5, r6, lr}
 80095ce:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 80095d0:	4605      	mov	r5, r0
 80095d2:	b940      	cbnz	r0, 80095e6 <xTaskCheckForTimeOut+0x1a>
 80095d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d8:	f383 8811 	msr	BASEPRI, r3
 80095dc:	f3bf 8f6f 	isb	sy
 80095e0:	f3bf 8f4f 	dsb	sy
 80095e4:	e7fe      	b.n	80095e4 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 80095e6:	b941      	cbnz	r1, 80095fa <xTaskCheckForTimeOut+0x2e>
 80095e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095ec:	f383 8811 	msr	BASEPRI, r3
 80095f0:	f3bf 8f6f 	isb	sy
 80095f4:	f3bf 8f4f 	dsb	sy
 80095f8:	e7fe      	b.n	80095f8 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 80095fa:	f000 fc0b 	bl	8009e14 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 80095fe:	4b0e      	ldr	r3, [pc, #56]	; (8009638 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009600:	480e      	ldr	r0, [pc, #56]	; (800963c <xTaskCheckForTimeOut+0x70>)
		const TickType_t xConstTickCount = xTickCount;
 8009602:	681b      	ldr	r3, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009604:	682e      	ldr	r6, [r5, #0]
 8009606:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009608:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800960a:	4286      	cmp	r6, r0
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800960c:	eba3 0201 	sub.w	r2, r3, r1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009610:	d001      	beq.n	8009616 <xTaskCheckForTimeOut+0x4a>
 8009612:	4299      	cmp	r1, r3
 8009614:	d90e      	bls.n	8009634 <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8009616:	6823      	ldr	r3, [r4, #0]
 8009618:	4293      	cmp	r3, r2
 800961a:	d909      	bls.n	8009630 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009620:	4628      	mov	r0, r5
 8009622:	f7ff ffc7 	bl	80095b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009626:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009628:	f000 fc16 	bl	8009e58 <vPortExitCritical>
}
 800962c:	4620      	mov	r0, r4
 800962e:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009630:	2300      	movs	r3, #0
 8009632:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 8009634:	2401      	movs	r4, #1
 8009636:	e7f7      	b.n	8009628 <xTaskCheckForTimeOut+0x5c>
 8009638:	20001168 	.word	0x20001168
 800963c:	2000114c 	.word	0x2000114c

08009640 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009640:	2201      	movs	r2, #1
 8009642:	4b01      	ldr	r3, [pc, #4]	; (8009648 <vTaskMissedYield+0x8>)
 8009644:	601a      	str	r2, [r3, #0]
}
 8009646:	4770      	bx	lr
 8009648:	2000116c 	.word	0x2000116c

0800964c <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800964c:	4b01      	ldr	r3, [pc, #4]	; (8009654 <xTaskGetCurrentTaskHandle+0x8>)
 800964e:	6818      	ldr	r0, [r3, #0]
	}
 8009650:	4770      	bx	lr
 8009652:	bf00      	nop
 8009654:	20000ca0 	.word	0x20000ca0

08009658 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 8009658:	4b05      	ldr	r3, [pc, #20]	; (8009670 <xTaskGetSchedulerState+0x18>)
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	b133      	cbz	r3, 800966c <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800965e:	4b05      	ldr	r3, [pc, #20]	; (8009674 <xTaskGetSchedulerState+0x1c>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 8009664:	bf0c      	ite	eq
 8009666:	2002      	moveq	r0, #2
 8009668:	2000      	movne	r0, #0
 800966a:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800966c:	2001      	movs	r0, #1
	}
 800966e:	4770      	bx	lr
 8009670:	20001164 	.word	0x20001164
 8009674:	20001114 	.word	0x20001114

08009678 <xTaskPriorityInherit>:
	{
 8009678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800967a:	4604      	mov	r4, r0
 800967c:	2800      	cmp	r0, #0
 800967e:	d02b      	beq.n	80096d8 <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8009680:	4a1b      	ldr	r2, [pc, #108]	; (80096f0 <xTaskPriorityInherit+0x78>)
 8009682:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009684:	6811      	ldr	r1, [r2, #0]
 8009686:	4616      	mov	r6, r2
 8009688:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 800968a:	428b      	cmp	r3, r1
 800968c:	d227      	bcs.n	80096de <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800968e:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8009690:	4d18      	ldr	r5, [pc, #96]	; (80096f4 <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009692:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009694:	bfa1      	itttt	ge
 8009696:	6832      	ldrge	r2, [r6, #0]
 8009698:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 800969a:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 800969e:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096a0:	2214      	movs	r2, #20
 80096a2:	fb02 5303 	mla	r3, r2, r3, r5
 80096a6:	6942      	ldr	r2, [r0, #20]
 80096a8:	429a      	cmp	r2, r3
 80096aa:	d111      	bne.n	80096d0 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096ac:	1d07      	adds	r7, r0, #4
 80096ae:	4638      	mov	r0, r7
 80096b0:	f7fe fdbd 	bl	800822e <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096b4:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096b6:	4a10      	ldr	r2, [pc, #64]	; (80096f8 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096ba:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096bc:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096be:	428b      	cmp	r3, r1
 80096c0:	d80b      	bhi.n	80096da <xTaskPriorityInherit+0x62>
 80096c2:	2014      	movs	r0, #20
 80096c4:	4639      	mov	r1, r7
 80096c6:	fb00 5003 	mla	r0, r0, r3, r5
 80096ca:	f7fe fd8d 	bl	80081e8 <vListInsertEnd>
 80096ce:	e002      	b.n	80096d6 <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096d0:	6833      	ldr	r3, [r6, #0]
 80096d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096d4:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 80096d6:	2001      	movs	r0, #1
	}
 80096d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80096da:	6013      	str	r3, [r2, #0]
 80096dc:	e7f1      	b.n	80096c2 <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096de:	6813      	ldr	r3, [r2, #0]
 80096e0:	6c40      	ldr	r0, [r0, #68]	; 0x44
 80096e2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80096e4:	42a0      	cmp	r0, r4
 80096e6:	bf2c      	ite	cs
 80096e8:	2000      	movcs	r0, #0
 80096ea:	2001      	movcc	r0, #1
 80096ec:	e7f4      	b.n	80096d8 <xTaskPriorityInherit+0x60>
 80096ee:	bf00      	nop
 80096f0:	20000ca0 	.word	0x20000ca0
 80096f4:	20000cac 	.word	0x20000cac
 80096f8:	2000111c 	.word	0x2000111c

080096fc <xTaskPriorityDisinherit>:
	{
 80096fc:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 80096fe:	b908      	cbnz	r0, 8009704 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009700:	2000      	movs	r0, #0
	}
 8009702:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 8009704:	4b1b      	ldr	r3, [pc, #108]	; (8009774 <xTaskPriorityDisinherit+0x78>)
 8009706:	681c      	ldr	r4, [r3, #0]
 8009708:	4284      	cmp	r4, r0
 800970a:	d008      	beq.n	800971e <xTaskPriorityDisinherit+0x22>
 800970c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009710:	f383 8811 	msr	BASEPRI, r3
 8009714:	f3bf 8f6f 	isb	sy
 8009718:	f3bf 8f4f 	dsb	sy
 800971c:	e7fe      	b.n	800971c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800971e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009720:	b943      	cbnz	r3, 8009734 <xTaskPriorityDisinherit+0x38>
 8009722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	e7fe      	b.n	8009732 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009734:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8009736:	6c62      	ldr	r2, [r4, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8009738:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800973a:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 800973c:	64a3      	str	r3, [r4, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800973e:	d0df      	beq.n	8009700 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1dd      	bne.n	8009700 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009744:	1d25      	adds	r5, r4, #4
 8009746:	4628      	mov	r0, r5
 8009748:	f7fe fd71 	bl	800822e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800974c:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800974e:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009750:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009754:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 8009756:	4a08      	ldr	r2, [pc, #32]	; (8009778 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009758:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 800975a:	6811      	ldr	r1, [r2, #0]
 800975c:	428b      	cmp	r3, r1
 800975e:	bf88      	it	hi
 8009760:	6013      	strhi	r3, [r2, #0]
 8009762:	4a06      	ldr	r2, [pc, #24]	; (800977c <xTaskPriorityDisinherit+0x80>)
 8009764:	4629      	mov	r1, r5
 8009766:	fb00 2003 	mla	r0, r0, r3, r2
 800976a:	f7fe fd3d 	bl	80081e8 <vListInsertEnd>
					xReturn = pdTRUE;
 800976e:	2001      	movs	r0, #1
		return xReturn;
 8009770:	e7c7      	b.n	8009702 <xTaskPriorityDisinherit+0x6>
 8009772:	bf00      	nop
 8009774:	20000ca0 	.word	0x20000ca0
 8009778:	2000111c 	.word	0x2000111c
 800977c:	20000cac 	.word	0x20000cac

08009780 <vTaskPriorityDisinheritAfterTimeout>:
	{
 8009780:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 8009782:	4604      	mov	r4, r0
 8009784:	2800      	cmp	r0, #0
 8009786:	d041      	beq.n	800980c <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 8009788:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800978a:	b942      	cbnz	r2, 800979e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800978c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009790:	f383 8811 	msr	BASEPRI, r3
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	f3bf 8f4f 	dsb	sy
 800979c:	e7fe      	b.n	800979c <vTaskPriorityDisinheritAfterTimeout+0x1c>
 800979e:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80097a0:	4299      	cmp	r1, r3
 80097a2:	bf38      	it	cc
 80097a4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097a6:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80097a8:	428b      	cmp	r3, r1
 80097aa:	d02f      	beq.n	800980c <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80097ac:	2a01      	cmp	r2, #1
 80097ae:	d12d      	bne.n	800980c <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 80097b0:	4a17      	ldr	r2, [pc, #92]	; (8009810 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 80097b2:	6812      	ldr	r2, [r2, #0]
 80097b4:	4282      	cmp	r2, r0
 80097b6:	d108      	bne.n	80097ca <vTaskPriorityDisinheritAfterTimeout+0x4a>
 80097b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097bc:	f383 8811 	msr	BASEPRI, r3
 80097c0:	f3bf 8f6f 	isb	sy
 80097c4:	f3bf 8f4f 	dsb	sy
 80097c8:	e7fe      	b.n	80097c8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097ca:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097cc:	4d11      	ldr	r5, [pc, #68]	; (8009814 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80097ce:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097d0:	f04f 0214 	mov.w	r2, #20
 80097d4:	fb02 5303 	mla	r3, r2, r3, r5
 80097d8:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 80097da:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097dc:	bfa4      	itt	ge
 80097de:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 80097e2:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d111      	bne.n	800980c <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097e8:	1d06      	adds	r6, r0, #4
 80097ea:	4630      	mov	r0, r6
 80097ec:	f7fe fd1f 	bl	800822e <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 80097f0:	2014      	movs	r0, #20
 80097f2:	4a09      	ldr	r2, [pc, #36]	; (8009818 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 80097f4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80097f6:	6811      	ldr	r1, [r2, #0]
 80097f8:	fb00 5003 	mla	r0, r0, r3, r5
 80097fc:	428b      	cmp	r3, r1
 80097fe:	4631      	mov	r1, r6
	}
 8009800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 8009804:	bf88      	it	hi
 8009806:	6013      	strhi	r3, [r2, #0]
 8009808:	f7fe bcee 	b.w	80081e8 <vListInsertEnd>
	}
 800980c:	bd70      	pop	{r4, r5, r6, pc}
 800980e:	bf00      	nop
 8009810:	20000ca0 	.word	0x20000ca0
 8009814:	20000cac 	.word	0x20000cac
 8009818:	2000111c 	.word	0x2000111c

0800981c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800981c:	4b04      	ldr	r3, [pc, #16]	; (8009830 <pvTaskIncrementMutexHeldCount+0x14>)
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	b11a      	cbz	r2, 800982a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 8009826:	3201      	adds	r2, #1
 8009828:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 800982a:	6818      	ldr	r0, [r3, #0]
	}
 800982c:	4770      	bx	lr
 800982e:	bf00      	nop
 8009830:	20000ca0 	.word	0x20000ca0

08009834 <xTaskNotifyWait>:
	{
 8009834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009838:	4c1e      	ldr	r4, [pc, #120]	; (80098b4 <xTaskNotifyWait+0x80>)
	{
 800983a:	461e      	mov	r6, r3
 800983c:	4680      	mov	r8, r0
 800983e:	460f      	mov	r7, r1
 8009840:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 8009842:	f000 fae7 	bl	8009e14 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009846:	6823      	ldr	r3, [r4, #0]
 8009848:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800984c:	2b02      	cmp	r3, #2
 800984e:	d014      	beq.n	800987a <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8009850:	6823      	ldr	r3, [r4, #0]
 8009852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009854:	ea22 0208 	bic.w	r2, r2, r8
 8009858:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800985a:	2201      	movs	r2, #1
 800985c:	6823      	ldr	r3, [r4, #0]
 800985e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 8009862:	b156      	cbz	r6, 800987a <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009864:	4630      	mov	r0, r6
 8009866:	f7ff fbcd 	bl	8009004 <prvAddCurrentTaskToDelayedList.isra.2>
					portYIELD_WITHIN_API();
 800986a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800986e:	4b12      	ldr	r3, [pc, #72]	; (80098b8 <xTaskNotifyWait+0x84>)
 8009870:	601a      	str	r2, [r3, #0]
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 800987a:	f000 faed 	bl	8009e58 <vPortExitCritical>
		taskENTER_CRITICAL();
 800987e:	f000 fac9 	bl	8009e14 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 8009882:	b115      	cbz	r5, 800988a <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8009884:	6823      	ldr	r3, [r4, #0]
 8009886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009888:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800988a:	6823      	ldr	r3, [r4, #0]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800988c:	2200      	movs	r2, #0
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800988e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009892:	2b02      	cmp	r3, #2
				xReturn = pdTRUE;
 8009894:	bf09      	itett	eq
 8009896:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 8009898:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800989a:	6823      	ldreq	r3, [r4, #0]
 800989c:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 800989e:	bf04      	itt	eq
 80098a0:	43b9      	biceq	r1, r7
 80098a2:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 80098aa:	f000 fad5 	bl	8009e58 <vPortExitCritical>
	}
 80098ae:	4628      	mov	r0, r5
 80098b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098b4:	20000ca0 	.word	0x20000ca0
 80098b8:	e000ed04 	.word	0xe000ed04

080098bc <xTaskGenericNotify>:
	{
 80098bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098be:	460e      	mov	r6, r1
 80098c0:	4615      	mov	r5, r2
 80098c2:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 80098c4:	4604      	mov	r4, r0
 80098c6:	b940      	cbnz	r0, 80098da <xTaskGenericNotify+0x1e>
 80098c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098cc:	f383 8811 	msr	BASEPRI, r3
 80098d0:	f3bf 8f6f 	isb	sy
 80098d4:	f3bf 8f4f 	dsb	sy
 80098d8:	e7fe      	b.n	80098d8 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 80098da:	f000 fa9b 	bl	8009e14 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 80098de:	b10f      	cbz	r7, 80098e4 <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80098e0:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80098e2:	603b      	str	r3, [r7, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80098e4:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80098e6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80098ea:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
			switch( eAction )
 80098ee:	1e6a      	subs	r2, r5, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80098f0:	b2db      	uxtb	r3, r3
			switch( eAction )
 80098f2:	2a03      	cmp	r2, #3
 80098f4:	d80a      	bhi.n	800990c <xTaskGenericNotify+0x50>
 80098f6:	e8df f002 	tbb	[pc, r2]
 80098fa:	0602      	.short	0x0602
 80098fc:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 80098fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009900:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 8009902:	64e6      	str	r6, [r4, #76]	; 0x4c
 8009904:	e002      	b.n	800990c <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 8009906:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009908:	3201      	adds	r2, #1
 800990a:	64e2      	str	r2, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800990c:	2b01      	cmp	r3, #1
 800990e:	d008      	beq.n	8009922 <xTaskGenericNotify+0x66>
 8009910:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 8009912:	f000 faa1 	bl	8009e58 <vPortExitCritical>
	}
 8009916:	4620      	mov	r0, r4
 8009918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800991a:	2b02      	cmp	r3, #2
 800991c:	d1f1      	bne.n	8009902 <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 800991e:	2400      	movs	r4, #0
 8009920:	e7f7      	b.n	8009912 <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009922:	1d25      	adds	r5, r4, #4
 8009924:	4628      	mov	r0, r5
 8009926:	f7fe fc82 	bl	800822e <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 800992a:	2014      	movs	r0, #20
 800992c:	4a12      	ldr	r2, [pc, #72]	; (8009978 <xTaskGenericNotify+0xbc>)
 800992e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009930:	6811      	ldr	r1, [r2, #0]
 8009932:	428b      	cmp	r3, r1
 8009934:	bf88      	it	hi
 8009936:	6013      	strhi	r3, [r2, #0]
 8009938:	4a10      	ldr	r2, [pc, #64]	; (800997c <xTaskGenericNotify+0xc0>)
 800993a:	4629      	mov	r1, r5
 800993c:	fb00 2003 	mla	r0, r0, r3, r2
 8009940:	f7fe fc52 	bl	80081e8 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009944:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009946:	b143      	cbz	r3, 800995a <xTaskGenericNotify+0x9e>
 8009948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800994c:	f383 8811 	msr	BASEPRI, r3
 8009950:	f3bf 8f6f 	isb	sy
 8009954:	f3bf 8f4f 	dsb	sy
 8009958:	e7fe      	b.n	8009958 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800995a:	4b09      	ldr	r3, [pc, #36]	; (8009980 <xTaskGenericNotify+0xc4>)
 800995c:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009962:	429a      	cmp	r2, r3
 8009964:	d9d4      	bls.n	8009910 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 8009966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800996a:	4b06      	ldr	r3, [pc, #24]	; (8009984 <xTaskGenericNotify+0xc8>)
 800996c:	601a      	str	r2, [r3, #0]
 800996e:	f3bf 8f4f 	dsb	sy
 8009972:	f3bf 8f6f 	isb	sy
 8009976:	e7cb      	b.n	8009910 <xTaskGenericNotify+0x54>
 8009978:	2000111c 	.word	0x2000111c
 800997c:	20000cac 	.word	0x20000cac
 8009980:	20000ca0 	.word	0x20000ca0
 8009984:	e000ed04 	.word	0xe000ed04

08009988 <xTaskNotifyStateClear>:
	{
 8009988:	b538      	push	{r3, r4, r5, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 800998a:	4605      	mov	r5, r0
 800998c:	b908      	cbnz	r0, 8009992 <xTaskNotifyStateClear+0xa>
 800998e:	4b08      	ldr	r3, [pc, #32]	; (80099b0 <xTaskNotifyStateClear+0x28>)
 8009990:	681d      	ldr	r5, [r3, #0]
 8009992:	2400      	movs	r4, #0
		taskENTER_CRITICAL();
 8009994:	f000 fa3e 	bl	8009e14 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8009998:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800999c:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800999e:	bf04      	itt	eq
 80099a0:	f885 4050 	strbeq.w	r4, [r5, #80]	; 0x50
				xReturn = pdPASS;
 80099a4:	2401      	moveq	r4, #1
		taskEXIT_CRITICAL();
 80099a6:	f000 fa57 	bl	8009e58 <vPortExitCritical>
	}
 80099aa:	4620      	mov	r0, r4
 80099ac:	bd38      	pop	{r3, r4, r5, pc}
 80099ae:	bf00      	nop
 80099b0:	20000ca0 	.word	0x20000ca0

080099b4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80099b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 80099b6:	4c11      	ldr	r4, [pc, #68]	; (80099fc <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 80099b8:	f000 fa2c 	bl	8009e14 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 80099bc:	6825      	ldr	r5, [r4, #0]
 80099be:	b9bd      	cbnz	r5, 80099f0 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 80099c0:	4f0f      	ldr	r7, [pc, #60]	; (8009a00 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 80099c2:	4e10      	ldr	r6, [pc, #64]	; (8009a04 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 80099c4:	4638      	mov	r0, r7
 80099c6:	f7fe fc01 	bl	80081cc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80099ca:	4630      	mov	r0, r6
 80099cc:	f7fe fbfe 	bl	80081cc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80099d0:	4b0d      	ldr	r3, [pc, #52]	; (8009a08 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099d2:	4a0e      	ldr	r2, [pc, #56]	; (8009a0c <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 80099d4:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80099d6:	4b0e      	ldr	r3, [pc, #56]	; (8009a10 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099d8:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 80099da:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80099dc:	200a      	movs	r0, #10
 80099de:	9500      	str	r5, [sp, #0]
 80099e0:	4b0c      	ldr	r3, [pc, #48]	; (8009a14 <prvCheckForValidListAndQueue+0x60>)
 80099e2:	f7fe fcff 	bl	80083e4 <xQueueGenericCreateStatic>
 80099e6:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80099e8:	b110      	cbz	r0, 80099f0 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80099ea:	490b      	ldr	r1, [pc, #44]	; (8009a18 <prvCheckForValidListAndQueue+0x64>)
 80099ec:	f7fe ffde 	bl	80089ac <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 80099f0:	b003      	add	sp, #12
 80099f2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 80099f6:	f000 ba2f 	b.w	8009e58 <vPortExitCritical>
 80099fa:	bf00      	nop
 80099fc:	2000128c 	.word	0x2000128c
 8009a00:	20001218 	.word	0x20001218
 8009a04:	2000122c 	.word	0x2000122c
 8009a08:	20001170 	.word	0x20001170
 8009a0c:	20001178 	.word	0x20001178
 8009a10:	20001174 	.word	0x20001174
 8009a14:	20001244 	.word	0x20001244
 8009a18:	0800dbda 	.word	0x0800dbda

08009a1c <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009a1c:	4291      	cmp	r1, r2
{
 8009a1e:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a20:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a22:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009a24:	d80a      	bhi.n	8009a3c <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a26:	1ad2      	subs	r2, r2, r3
 8009a28:	6983      	ldr	r3, [r0, #24]
 8009a2a:	429a      	cmp	r2, r3
 8009a2c:	d20d      	bcs.n	8009a4a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a2e:	4b08      	ldr	r3, [pc, #32]	; (8009a50 <prvInsertTimerInActiveList+0x34>)
 8009a30:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a32:	6818      	ldr	r0, [r3, #0]
 8009a34:	f7fe fbe4 	bl	8008200 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a38:	2000      	movs	r0, #0
}
 8009a3a:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a3c:	429a      	cmp	r2, r3
 8009a3e:	d201      	bcs.n	8009a44 <prvInsertTimerInActiveList+0x28>
 8009a40:	4299      	cmp	r1, r3
 8009a42:	d202      	bcs.n	8009a4a <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a44:	1d01      	adds	r1, r0, #4
 8009a46:	4b03      	ldr	r3, [pc, #12]	; (8009a54 <prvInsertTimerInActiveList+0x38>)
 8009a48:	e7f3      	b.n	8009a32 <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009a4a:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009a4c:	e7f5      	b.n	8009a3a <prvInsertTimerInActiveList+0x1e>
 8009a4e:	bf00      	nop
 8009a50:	20001174 	.word	0x20001174
 8009a54:	20001170 	.word	0x20001170

08009a58 <xTimerCreateTimerTask>:
{
 8009a58:	b510      	push	{r4, lr}
 8009a5a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009a5c:	f7ff ffaa 	bl	80099b4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009a60:	4b12      	ldr	r3, [pc, #72]	; (8009aac <xTimerCreateTimerTask+0x54>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	b1b3      	cbz	r3, 8009a94 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009a66:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a68:	aa07      	add	r2, sp, #28
 8009a6a:	a906      	add	r1, sp, #24
 8009a6c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009a6e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009a72:	f7fe fb9f 	bl	80081b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009a76:	9b05      	ldr	r3, [sp, #20]
 8009a78:	9a07      	ldr	r2, [sp, #28]
 8009a7a:	9302      	str	r3, [sp, #8]
 8009a7c:	9b06      	ldr	r3, [sp, #24]
 8009a7e:	490c      	ldr	r1, [pc, #48]	; (8009ab0 <xTimerCreateTimerTask+0x58>)
 8009a80:	9301      	str	r3, [sp, #4]
 8009a82:	2302      	movs	r3, #2
 8009a84:	480b      	ldr	r0, [pc, #44]	; (8009ab4 <xTimerCreateTimerTask+0x5c>)
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4623      	mov	r3, r4
 8009a8a:	f7ff fae7 	bl	800905c <xTaskCreateStatic>
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	; (8009ab8 <xTimerCreateTimerTask+0x60>)
 8009a90:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009a92:	b940      	cbnz	r0, 8009aa6 <xTimerCreateTimerTask+0x4e>
 8009a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a98:	f383 8811 	msr	BASEPRI, r3
 8009a9c:	f3bf 8f6f 	isb	sy
 8009aa0:	f3bf 8f4f 	dsb	sy
 8009aa4:	e7fe      	b.n	8009aa4 <xTimerCreateTimerTask+0x4c>
}
 8009aa6:	2001      	movs	r0, #1
 8009aa8:	b008      	add	sp, #32
 8009aaa:	bd10      	pop	{r4, pc}
 8009aac:	2000128c 	.word	0x2000128c
 8009ab0:	0800dbdf 	.word	0x0800dbdf
 8009ab4:	08009b91 	.word	0x08009b91
 8009ab8:	20001290 	.word	0x20001290

08009abc <xTimerGenericCommand>:
{
 8009abc:	b530      	push	{r4, r5, lr}
 8009abe:	4615      	mov	r5, r2
 8009ac0:	b085      	sub	sp, #20
 8009ac2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	b940      	cbnz	r0, 8009ada <xTimerGenericCommand+0x1e>
 8009ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009acc:	f383 8811 	msr	BASEPRI, r3
 8009ad0:	f3bf 8f6f 	isb	sy
 8009ad4:	f3bf 8f4f 	dsb	sy
 8009ad8:	e7fe      	b.n	8009ad8 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8009ada:	4c0d      	ldr	r4, [pc, #52]	; (8009b10 <xTimerGenericCommand+0x54>)
 8009adc:	6820      	ldr	r0, [r4, #0]
 8009ade:	b178      	cbz	r0, 8009b00 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ae0:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009ae2:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009ae6:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009ae8:	dc0c      	bgt.n	8009b04 <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009aea:	f7ff fdb5 	bl	8009658 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009aee:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009af0:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009af2:	bf0c      	ite	eq
 8009af4:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009af6:	461a      	movne	r2, r3
 8009af8:	4669      	mov	r1, sp
 8009afa:	6820      	ldr	r0, [r4, #0]
 8009afc:	f7fe fce0 	bl	80084c0 <xQueueGenericSend>
}
 8009b00:	b005      	add	sp, #20
 8009b02:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b04:	2300      	movs	r3, #0
 8009b06:	4669      	mov	r1, sp
 8009b08:	f7fe fd8c 	bl	8008624 <xQueueGenericSendFromISR>
 8009b0c:	e7f8      	b.n	8009b00 <xTimerGenericCommand+0x44>
 8009b0e:	bf00      	nop
 8009b10:	2000128c 	.word	0x2000128c

08009b14 <prvSwitchTimerLists>:
{
 8009b14:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b18:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b1c:	4d1a      	ldr	r5, [pc, #104]	; (8009b88 <prvSwitchTimerLists+0x74>)
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	b932      	cbnz	r2, 8009b32 <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8009b24:	4a19      	ldr	r2, [pc, #100]	; (8009b8c <prvSwitchTimerLists+0x78>)
 8009b26:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b28:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b2a:	6029      	str	r1, [r5, #0]
}
 8009b2c:	b002      	add	sp, #8
 8009b2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b32:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b34:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b36:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b38:	1d27      	adds	r7, r4, #4
 8009b3a:	4638      	mov	r0, r7
 8009b3c:	f7fe fb77 	bl	800822e <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b42:	4620      	mov	r0, r4
 8009b44:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b46:	69e3      	ldr	r3, [r4, #28]
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d1e8      	bne.n	8009b1e <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b4c:	69a3      	ldr	r3, [r4, #24]
 8009b4e:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009b50:	429e      	cmp	r6, r3
 8009b52:	d206      	bcs.n	8009b62 <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b54:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b56:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b58:	4639      	mov	r1, r7
 8009b5a:	6828      	ldr	r0, [r5, #0]
 8009b5c:	f7fe fb50 	bl	8008200 <vListInsert>
 8009b60:	e7dd      	b.n	8009b1e <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b62:	2300      	movs	r3, #0
 8009b64:	f8cd 8000 	str.w	r8, [sp]
 8009b68:	4632      	mov	r2, r6
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	4620      	mov	r0, r4
 8009b6e:	f7ff ffa5 	bl	8009abc <xTimerGenericCommand>
				configASSERT( xResult );
 8009b72:	2800      	cmp	r0, #0
 8009b74:	d1d3      	bne.n	8009b1e <prvSwitchTimerLists+0xa>
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	e7fe      	b.n	8009b86 <prvSwitchTimerLists+0x72>
 8009b88:	20001170 	.word	0x20001170
 8009b8c:	20001174 	.word	0x20001174

08009b90 <prvTimerTask>:
{
 8009b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b94:	4d6d      	ldr	r5, [pc, #436]	; (8009d4c <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 8009b96:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8009d5c <prvTimerTask+0x1cc>
 8009b9a:	462f      	mov	r7, r5
{
 8009b9c:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009b9e:	682b      	ldr	r3, [r5, #0]
 8009ba0:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8009ba4:	f1bb 0f00 	cmp.w	fp, #0
 8009ba8:	d04b      	beq.n	8009c42 <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8009bb0:	f7ff fafc 	bl	80091ac <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8009bb4:	f7ff fb02 	bl	80091bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009bb8:	4c65      	ldr	r4, [pc, #404]	; (8009d50 <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 8009bba:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8009bbc:	6823      	ldr	r3, [r4, #0]
 8009bbe:	4626      	mov	r6, r4
 8009bc0:	4298      	cmp	r0, r3
 8009bc2:	d240      	bcs.n	8009c46 <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8009bc4:	f7ff ffa6 	bl	8009b14 <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009bc8:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8009bcc:	f7ff fb8c 	bl	80092e8 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009bd0:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8009d58 <prvTimerTask+0x1c8>
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	a902      	add	r1, sp, #8
 8009bd8:	f8d9 0000 	ldr.w	r0, [r9]
 8009bdc:	f7fe fd84 	bl	80086e8 <xQueueReceive>
 8009be0:	2800      	cmp	r0, #0
 8009be2:	d0dc      	beq.n	8009b9e <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009be4:	9b02      	ldr	r3, [sp, #8]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	da03      	bge.n	8009bf2 <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009bea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009bf2:	9b02      	ldr	r3, [sp, #8]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	dbed      	blt.n	8009bd4 <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009bf8:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009bfa:	6963      	ldr	r3, [r4, #20]
 8009bfc:	b113      	cbz	r3, 8009c04 <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009bfe:	1d20      	adds	r0, r4, #4
 8009c00:	f7fe fb15 	bl	800822e <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8009c04:	f7ff fada 	bl	80091bc <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009c08:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8009c0a:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8009c0c:	4298      	cmp	r0, r3
 8009c0e:	d201      	bcs.n	8009c14 <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8009c10:	f7ff ff80 	bl	8009b14 <prvSwitchTimerLists>
 8009c14:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 8009c16:	f8c6 b000 	str.w	fp, [r6]
 8009c1a:	2a09      	cmp	r2, #9
 8009c1c:	d8da      	bhi.n	8009bd4 <prvTimerTask+0x44>
 8009c1e:	2301      	movs	r3, #1
 8009c20:	4093      	lsls	r3, r2
 8009c22:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8009c26:	d17e      	bne.n	8009d26 <prvTimerTask+0x196>
 8009c28:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8009c2c:	d154      	bne.n	8009cd8 <prvTimerTask+0x148>
 8009c2e:	069b      	lsls	r3, r3, #26
 8009c30:	d5d0      	bpl.n	8009bd4 <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c32:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d1cc      	bne.n	8009bd4 <prvTimerTask+0x44>
							vPortFree( pxTimer );
 8009c3a:	4620      	mov	r0, r4
 8009c3c:	f000 faac 	bl	800a198 <vPortFree>
 8009c40:	e7c8      	b.n	8009bd4 <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 8009c42:	46da      	mov	sl, fp
 8009c44:	e7b4      	b.n	8009bb0 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8009c46:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009c48:	f1bb 0f00 	cmp.w	fp, #0
 8009c4c:	d029      	beq.n	8009ca2 <prvTimerTask+0x112>
 8009c4e:	4582      	cmp	sl, r0
 8009c50:	d840      	bhi.n	8009cd4 <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8009c52:	f7ff fb49 	bl	80092e8 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	68db      	ldr	r3, [r3, #12]
 8009c5a:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c5c:	1d20      	adds	r0, r4, #4
 8009c5e:	f7fe fae6 	bl	800822e <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009c62:	69e3      	ldr	r3, [r4, #28]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	d118      	bne.n	8009c9a <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c68:	69a1      	ldr	r1, [r4, #24]
 8009c6a:	4653      	mov	r3, sl
 8009c6c:	464a      	mov	r2, r9
 8009c6e:	4451      	add	r1, sl
 8009c70:	4620      	mov	r0, r4
 8009c72:	f7ff fed3 	bl	8009a1c <prvInsertTimerInActiveList>
 8009c76:	b180      	cbz	r0, 8009c9a <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c78:	2300      	movs	r3, #0
 8009c7a:	4652      	mov	r2, sl
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	4619      	mov	r1, r3
 8009c80:	4620      	mov	r0, r4
 8009c82:	f7ff ff1b 	bl	8009abc <xTimerGenericCommand>
			configASSERT( xResult );
 8009c86:	b940      	cbnz	r0, 8009c9a <prvTimerTask+0x10a>
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	e7fe      	b.n	8009c98 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009c9c:	4620      	mov	r0, r4
 8009c9e:	4798      	blx	r3
 8009ca0:	e796      	b.n	8009bd0 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009ca2:	4b2c      	ldr	r3, [pc, #176]	; (8009d54 <prvTimerTask+0x1c4>)
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	fab2 f282 	clz	r2, r2
 8009cac:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009cae:	4b2a      	ldr	r3, [pc, #168]	; (8009d58 <prvTimerTask+0x1c8>)
 8009cb0:	ebaa 0109 	sub.w	r1, sl, r9
 8009cb4:	6818      	ldr	r0, [r3, #0]
 8009cb6:	f7fe fe8b 	bl	80089d0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009cba:	f7ff fb15 	bl	80092e8 <xTaskResumeAll>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	d186      	bne.n	8009bd0 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8009cc2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009cc6:	f8c8 3000 	str.w	r3, [r8]
 8009cca:	f3bf 8f4f 	dsb	sy
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	e77d      	b.n	8009bd0 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	e7ea      	b.n	8009cae <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009cd8:	69a1      	ldr	r1, [r4, #24]
 8009cda:	9b03      	ldr	r3, [sp, #12]
 8009cdc:	465a      	mov	r2, fp
 8009cde:	4419      	add	r1, r3
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	f7ff fe9b 	bl	8009a1c <prvInsertTimerInActiveList>
 8009ce6:	2800      	cmp	r0, #0
 8009ce8:	f43f af74 	beq.w	8009bd4 <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cee:	4620      	mov	r0, r4
 8009cf0:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cf2:	69e3      	ldr	r3, [r4, #28]
 8009cf4:	2b01      	cmp	r3, #1
 8009cf6:	f47f af6d 	bne.w	8009bd4 <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009cfa:	69a2      	ldr	r2, [r4, #24]
 8009cfc:	9903      	ldr	r1, [sp, #12]
 8009cfe:	f8cd a000 	str.w	sl, [sp]
 8009d02:	440a      	add	r2, r1
 8009d04:	4653      	mov	r3, sl
 8009d06:	4651      	mov	r1, sl
 8009d08:	4620      	mov	r0, r4
 8009d0a:	f7ff fed7 	bl	8009abc <xTimerGenericCommand>
							configASSERT( xResult );
 8009d0e:	2800      	cmp	r0, #0
 8009d10:	f47f af60 	bne.w	8009bd4 <prvTimerTask+0x44>
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	e7fe      	b.n	8009d24 <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d26:	9903      	ldr	r1, [sp, #12]
 8009d28:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d2a:	b941      	cbnz	r1, 8009d3e <prvTimerTask+0x1ae>
 8009d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d30:	f383 8811 	msr	BASEPRI, r3
 8009d34:	f3bf 8f6f 	isb	sy
 8009d38:	f3bf 8f4f 	dsb	sy
 8009d3c:	e7fe      	b.n	8009d3c <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d3e:	465b      	mov	r3, fp
 8009d40:	465a      	mov	r2, fp
 8009d42:	4459      	add	r1, fp
 8009d44:	4620      	mov	r0, r4
 8009d46:	f7ff fe69 	bl	8009a1c <prvInsertTimerInActiveList>
 8009d4a:	e743      	b.n	8009bd4 <prvTimerTask+0x44>
 8009d4c:	20001170 	.word	0x20001170
 8009d50:	20001240 	.word	0x20001240
 8009d54:	20001174 	.word	0x20001174
 8009d58:	2000128c 	.word	0x2000128c
 8009d5c:	e000ed04 	.word	0xe000ed04

08009d60 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
volatile uint32_t ulDummy = 0UL;
 8009d60:	2300      	movs	r3, #0
{
 8009d62:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0UL;
 8009d64:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009d66:	4b0d      	ldr	r3, [pc, #52]	; (8009d9c <prvTaskExitError+0x3c>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	d008      	beq.n	8009d80 <prvTaskExitError+0x20>
 8009d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d72:	f383 8811 	msr	BASEPRI, r3
 8009d76:	f3bf 8f6f 	isb	sy
 8009d7a:	f3bf 8f4f 	dsb	sy
 8009d7e:	e7fe      	b.n	8009d7e <prvTaskExitError+0x1e>
 8009d80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d84:	f383 8811 	msr	BASEPRI, r3
 8009d88:	f3bf 8f6f 	isb	sy
 8009d8c:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009d90:	9b01      	ldr	r3, [sp, #4]
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d0fc      	beq.n	8009d90 <prvTaskExitError+0x30>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009d96:	b002      	add	sp, #8
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	200003d8 	.word	0x200003d8

08009da0 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8009da0:	4806      	ldr	r0, [pc, #24]	; (8009dbc <prvPortStartFirstTask+0x1c>)
 8009da2:	6800      	ldr	r0, [r0, #0]
 8009da4:	6800      	ldr	r0, [r0, #0]
 8009da6:	f380 8808 	msr	MSP, r0
 8009daa:	b662      	cpsie	i
 8009dac:	b661      	cpsie	f
 8009dae:	f3bf 8f4f 	dsb	sy
 8009db2:	f3bf 8f6f 	isb	sy
 8009db6:	df00      	svc	0
 8009db8:	bf00      	nop
 8009dba:	0000      	.short	0x0000
 8009dbc:	e000ed08 	.word	0xe000ed08

08009dc0 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009dc0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009dc4:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dc8:	4b05      	ldr	r3, [pc, #20]	; (8009de0 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009dca:	f021 0101 	bic.w	r1, r1, #1
 8009dce:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009dd2:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009dd6:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8009dda:	3840      	subs	r0, #64	; 0x40
 8009ddc:	4770      	bx	lr
 8009dde:	bf00      	nop
 8009de0:	08009d61 	.word	0x08009d61
	...

08009df0 <SVC_Handler>:
	__asm volatile (
 8009df0:	4b07      	ldr	r3, [pc, #28]	; (8009e10 <pxCurrentTCBConst2>)
 8009df2:	6819      	ldr	r1, [r3, #0]
 8009df4:	6808      	ldr	r0, [r1, #0]
 8009df6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009dfa:	f380 8809 	msr	PSP, r0
 8009dfe:	f3bf 8f6f 	isb	sy
 8009e02:	f04f 0000 	mov.w	r0, #0
 8009e06:	f380 8811 	msr	BASEPRI, r0
 8009e0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009e0e:	4770      	bx	lr

08009e10 <pxCurrentTCBConst2>:
 8009e10:	20000ca0 	.word	0x20000ca0

08009e14 <vPortEnterCritical>:
 8009e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e24:	4a0a      	ldr	r2, [pc, #40]	; (8009e50 <vPortEnterCritical+0x3c>)
 8009e26:	6813      	ldr	r3, [r2, #0]
 8009e28:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e2a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 8009e2c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 8009e2e:	d10d      	bne.n	8009e4c <vPortEnterCritical+0x38>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e30:	4b08      	ldr	r3, [pc, #32]	; (8009e54 <vPortEnterCritical+0x40>)
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e38:	d008      	beq.n	8009e4c <vPortEnterCritical+0x38>
 8009e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e3e:	f383 8811 	msr	BASEPRI, r3
 8009e42:	f3bf 8f6f 	isb	sy
 8009e46:	f3bf 8f4f 	dsb	sy
 8009e4a:	e7fe      	b.n	8009e4a <vPortEnterCritical+0x36>
	}
}
 8009e4c:	4770      	bx	lr
 8009e4e:	bf00      	nop
 8009e50:	200003d8 	.word	0x200003d8
 8009e54:	e000ed04 	.word	0xe000ed04

08009e58 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 8009e58:	4a08      	ldr	r2, [pc, #32]	; (8009e7c <vPortExitCritical+0x24>)
 8009e5a:	6813      	ldr	r3, [r2, #0]
 8009e5c:	b943      	cbnz	r3, 8009e70 <vPortExitCritical+0x18>
 8009e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e62:	f383 8811 	msr	BASEPRI, r3
 8009e66:	f3bf 8f6f 	isb	sy
 8009e6a:	f3bf 8f4f 	dsb	sy
 8009e6e:	e7fe      	b.n	8009e6e <vPortExitCritical+0x16>
	uxCriticalNesting--;
 8009e70:	3b01      	subs	r3, #1
 8009e72:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009e74:	b90b      	cbnz	r3, 8009e7a <vPortExitCritical+0x22>
	__asm volatile
 8009e76:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8009e7a:	4770      	bx	lr
 8009e7c:	200003d8 	.word	0x200003d8

08009e80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009e80:	f3ef 8009 	mrs	r0, PSP
 8009e84:	f3bf 8f6f 	isb	sy
 8009e88:	4b0d      	ldr	r3, [pc, #52]	; (8009ec0 <pxCurrentTCBConst>)
 8009e8a:	681a      	ldr	r2, [r3, #0]
 8009e8c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e90:	6010      	str	r0, [r2, #0]
 8009e92:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009e96:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009e9a:	f380 8811 	msr	BASEPRI, r0
 8009e9e:	f7ff fabb 	bl	8009418 <vTaskSwitchContext>
 8009ea2:	f04f 0000 	mov.w	r0, #0
 8009ea6:	f380 8811 	msr	BASEPRI, r0
 8009eaa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009eae:	6819      	ldr	r1, [r3, #0]
 8009eb0:	6808      	ldr	r0, [r1, #0]
 8009eb2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009eb6:	f380 8809 	msr	PSP, r0
 8009eba:	f3bf 8f6f 	isb	sy
 8009ebe:	4770      	bx	lr

08009ec0 <pxCurrentTCBConst>:
 8009ec0:	20000ca0 	.word	0x20000ca0

08009ec4 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ec4:	b508      	push	{r3, lr}
	__asm volatile
 8009ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eca:	f383 8811 	msr	BASEPRI, r3
 8009ece:	f3bf 8f6f 	isb	sy
 8009ed2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009ed6:	f7ff f977 	bl	80091c8 <xTaskIncrementTick>
 8009eda:	b118      	cbz	r0, 8009ee4 <SysTick_Handler+0x20>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee0:	4b02      	ldr	r3, [pc, #8]	; (8009eec <SysTick_Handler+0x28>)
 8009ee2:	601a      	str	r2, [r3, #0]
	__asm volatile
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8009eea:	bd08      	pop	{r3, pc}
 8009eec:	e000ed04 	.word	0xe000ed04

08009ef0 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	4a08      	ldr	r2, [pc, #32]	; (8009f14 <vPortSetupTimerInterrupt+0x24>)
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ef4:	4908      	ldr	r1, [pc, #32]	; (8009f18 <vPortSetupTimerInterrupt+0x28>)
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009ef6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009ef8:	600b      	str	r3, [r1, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009efa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009efe:	4b07      	ldr	r3, [pc, #28]	; (8009f1c <vPortSetupTimerInterrupt+0x2c>)
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f06:	4906      	ldr	r1, [pc, #24]	; (8009f20 <vPortSetupTimerInterrupt+0x30>)
 8009f08:	3b01      	subs	r3, #1
 8009f0a:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009f0c:	2307      	movs	r3, #7
 8009f0e:	6013      	str	r3, [r2, #0]
}
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	e000e010 	.word	0xe000e010
 8009f18:	e000e018 	.word	0xe000e018
 8009f1c:	2000033c 	.word	0x2000033c
 8009f20:	e000e014 	.word	0xe000e014

08009f24 <xPortStartScheduler>:
{
 8009f24:	b513      	push	{r0, r1, r4, lr}
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f26:	4b27      	ldr	r3, [pc, #156]	; (8009fc4 <xPortStartScheduler+0xa0>)
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f28:	2100      	movs	r1, #0
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009f2a:	781a      	ldrb	r2, [r3, #0]
 8009f2c:	b2d2      	uxtb	r2, r2
 8009f2e:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009f30:	22ff      	movs	r2, #255	; 0xff
 8009f32:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f34:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f36:	4a24      	ldr	r2, [pc, #144]	; (8009fc8 <xPortStartScheduler+0xa4>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009f3e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009f42:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f46:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009f48:	2207      	movs	r2, #7
 8009f4a:	4b20      	ldr	r3, [pc, #128]	; (8009fcc <xPortStartScheduler+0xa8>)
 8009f4c:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009f4e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009f52:	1e54      	subs	r4, r2, #1
 8009f54:	0600      	lsls	r0, r0, #24
 8009f56:	d40d      	bmi.n	8009f74 <xPortStartScheduler+0x50>
 8009f58:	b101      	cbz	r1, 8009f5c <xPortStartScheduler+0x38>
 8009f5a:	601a      	str	r2, [r3, #0]
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009f5c:	681a      	ldr	r2, [r3, #0]
 8009f5e:	2a03      	cmp	r2, #3
 8009f60:	d011      	beq.n	8009f86 <xPortStartScheduler+0x62>
	__asm volatile
 8009f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f66:	f383 8811 	msr	BASEPRI, r3
 8009f6a:	f3bf 8f6f 	isb	sy
 8009f6e:	f3bf 8f4f 	dsb	sy
 8009f72:	e7fe      	b.n	8009f72 <xPortStartScheduler+0x4e>
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009f74:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009f78:	2101      	movs	r1, #1
 8009f7a:	0052      	lsls	r2, r2, #1
 8009f7c:	b2d2      	uxtb	r2, r2
 8009f7e:	f88d 2003 	strb.w	r2, [sp, #3]
 8009f82:	4622      	mov	r2, r4
 8009f84:	e7e3      	b.n	8009f4e <xPortStartScheduler+0x2a>
	uxCriticalNesting = 0;
 8009f86:	2400      	movs	r4, #0
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009f88:	0212      	lsls	r2, r2, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009f8a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009f8e:	601a      	str	r2, [r3, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009f90:	9b01      	ldr	r3, [sp, #4]
 8009f92:	4a0c      	ldr	r2, [pc, #48]	; (8009fc4 <xPortStartScheduler+0xa0>)
 8009f94:	b2db      	uxtb	r3, r3
 8009f96:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009f98:	4b0d      	ldr	r3, [pc, #52]	; (8009fd0 <xPortStartScheduler+0xac>)
 8009f9a:	681a      	ldr	r2, [r3, #0]
 8009f9c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009fa0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009fa2:	681a      	ldr	r2, [r3, #0]
 8009fa4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009fa8:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
 8009faa:	f7ff ffa1 	bl	8009ef0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 8009fae:	4b09      	ldr	r3, [pc, #36]	; (8009fd4 <xPortStartScheduler+0xb0>)
 8009fb0:	601c      	str	r4, [r3, #0]
	prvPortStartFirstTask();
 8009fb2:	f7ff fef5 	bl	8009da0 <prvPortStartFirstTask>
	vTaskSwitchContext();
 8009fb6:	f7ff fa2f 	bl	8009418 <vTaskSwitchContext>
	prvTaskExitError();
 8009fba:	f7ff fed1 	bl	8009d60 <prvTaskExitError>
}
 8009fbe:	4620      	mov	r0, r4
 8009fc0:	b002      	add	sp, #8
 8009fc2:	bd10      	pop	{r4, pc}
 8009fc4:	e000e400 	.word	0xe000e400
 8009fc8:	20001294 	.word	0x20001294
 8009fcc:	20001298 	.word	0x20001298
 8009fd0:	e000ed20 	.word	0xe000ed20
 8009fd4:	200003d8 	.word	0x200003d8

08009fd8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fd8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fdc:	2b0f      	cmp	r3, #15
 8009fde:	d90e      	bls.n	8009ffe <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fe0:	4a10      	ldr	r2, [pc, #64]	; (800a024 <vPortValidateInterruptPriority+0x4c>)
 8009fe2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009fe4:	4a10      	ldr	r2, [pc, #64]	; (800a028 <vPortValidateInterruptPriority+0x50>)
 8009fe6:	7812      	ldrb	r2, [r2, #0]
 8009fe8:	429a      	cmp	r2, r3
 8009fea:	d908      	bls.n	8009ffe <vPortValidateInterruptPriority+0x26>
 8009fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ff0:	f383 8811 	msr	BASEPRI, r3
 8009ff4:	f3bf 8f6f 	isb	sy
 8009ff8:	f3bf 8f4f 	dsb	sy
 8009ffc:	e7fe      	b.n	8009ffc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <vPortValidateInterruptPriority+0x54>)
 800a000:	4a0b      	ldr	r2, [pc, #44]	; (800a030 <vPortValidateInterruptPriority+0x58>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	6812      	ldr	r2, [r2, #0]
 800a006:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a00a:	4293      	cmp	r3, r2
 800a00c:	d908      	bls.n	800a020 <vPortValidateInterruptPriority+0x48>
 800a00e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a012:	f383 8811 	msr	BASEPRI, r3
 800a016:	f3bf 8f6f 	isb	sy
 800a01a:	f3bf 8f4f 	dsb	sy
 800a01e:	e7fe      	b.n	800a01e <vPortValidateInterruptPriority+0x46>
	}
 800a020:	4770      	bx	lr
 800a022:	bf00      	nop
 800a024:	e000e3f0 	.word	0xe000e3f0
 800a028:	20001294 	.word	0x20001294
 800a02c:	e000ed0c 	.word	0xe000ed0c
 800a030:	20001298 	.word	0x20001298

0800a034 <prvInsertBlockIntoFreeList>:
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a034:	b510      	push	{r4, lr}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a036:	4b0f      	ldr	r3, [pc, #60]	; (800a074 <prvInsertBlockIntoFreeList+0x40>)
 800a038:	681a      	ldr	r2, [r3, #0]
 800a03a:	4282      	cmp	r2, r0
 800a03c:	d318      	bcc.n	800a070 <prvInsertBlockIntoFreeList+0x3c>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a03e:	685c      	ldr	r4, [r3, #4]
 800a040:	1919      	adds	r1, r3, r4
 800a042:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a044:	bf01      	itttt	eq
 800a046:	6841      	ldreq	r1, [r0, #4]
 800a048:	4618      	moveq	r0, r3
 800a04a:	1909      	addeq	r1, r1, r4
 800a04c:	6059      	streq	r1, [r3, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a04e:	6844      	ldr	r4, [r0, #4]
 800a050:	1901      	adds	r1, r0, r4
 800a052:	428a      	cmp	r2, r1
 800a054:	d107      	bne.n	800a066 <prvInsertBlockIntoFreeList+0x32>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a056:	4908      	ldr	r1, [pc, #32]	; (800a078 <prvInsertBlockIntoFreeList+0x44>)
 800a058:	6809      	ldr	r1, [r1, #0]
 800a05a:	428a      	cmp	r2, r1
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a05c:	bf1f      	itttt	ne
 800a05e:	6851      	ldrne	r1, [r2, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a060:	6812      	ldrne	r2, [r2, #0]
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a062:	1909      	addne	r1, r1, r4
 800a064:	6041      	strne	r1, [r0, #4]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a066:	4298      	cmp	r0, r3
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a068:	6002      	str	r2, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a06a:	bf18      	it	ne
 800a06c:	6018      	strne	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a06e:	bd10      	pop	{r4, pc}
 800a070:	4613      	mov	r3, r2
 800a072:	e7e1      	b.n	800a038 <prvInsertBlockIntoFreeList+0x4>
 800a074:	2000418c 	.word	0x2000418c
 800a078:	2000129c 	.word	0x2000129c

0800a07c <pvPortMalloc>:
{
 800a07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a080:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800a082:	f7ff f893 	bl	80091ac <vTaskSuspendAll>
		if( pxEnd == NULL )
 800a086:	493d      	ldr	r1, [pc, #244]	; (800a17c <pvPortMalloc+0x100>)
 800a088:	4d3d      	ldr	r5, [pc, #244]	; (800a180 <pvPortMalloc+0x104>)
 800a08a:	680b      	ldr	r3, [r1, #0]
 800a08c:	b9fb      	cbnz	r3, 800a0ce <pvPortMalloc+0x52>
	uxAddress = ( size_t ) ucHeap;
 800a08e:	4a3d      	ldr	r2, [pc, #244]	; (800a184 <pvPortMalloc+0x108>)
	xStart.xBlockSize = ( size_t ) 0;
 800a090:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a092:	0756      	lsls	r6, r2, #29
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a094:	bf0f      	iteee	eq
 800a096:	f642 63e0 	movweq	r3, #12000	; 0x2ee0
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a09a:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a09c:	4b3a      	ldrne	r3, [pc, #232]	; (800a188 <pvPortMalloc+0x10c>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a09e:	f022 0207 	bicne.w	r2, r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a0a2:	bf18      	it	ne
 800a0a4:	1a9b      	subne	r3, r3, r2
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0a6:	4413      	add	r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0a8:	4e38      	ldr	r6, [pc, #224]	; (800a18c <pvPortMalloc+0x110>)
	uxAddress -= xHeapStructSize;
 800a0aa:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0ac:	f023 0307 	bic.w	r3, r3, #7
	xStart.xBlockSize = ( size_t ) 0;
 800a0b0:	6070      	str	r0, [r6, #4]
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a0b2:	6032      	str	r2, [r6, #0]
	pxEnd->pxNextFreeBlock = NULL;
 800a0b4:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0b8:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800a0ba:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0bc:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0c0:	4b33      	ldr	r3, [pc, #204]	; (800a190 <pvPortMalloc+0x114>)
 800a0c2:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0c4:	4b33      	ldr	r3, [pc, #204]	; (800a194 <pvPortMalloc+0x118>)
 800a0c6:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a0cc:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0ce:	682f      	ldr	r7, [r5, #0]
 800a0d0:	4227      	tst	r7, r4
 800a0d2:	d14d      	bne.n	800a170 <pvPortMalloc+0xf4>
			if( xWantedSize > 0 )
 800a0d4:	2c00      	cmp	r4, #0
 800a0d6:	d03e      	beq.n	800a156 <pvPortMalloc+0xda>
				xWantedSize += xHeapStructSize;
 800a0d8:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0dc:	0758      	lsls	r0, r3, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0de:	bf1c      	itt	ne
 800a0e0:	f023 0307 	bicne.w	r3, r3, #7
 800a0e4:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d042      	beq.n	800a170 <pvPortMalloc+0xf4>
 800a0ea:	4a2a      	ldr	r2, [pc, #168]	; (800a194 <pvPortMalloc+0x118>)
 800a0ec:	6816      	ldr	r6, [r2, #0]
 800a0ee:	4690      	mov	r8, r2
 800a0f0:	429e      	cmp	r6, r3
 800a0f2:	d33d      	bcc.n	800a170 <pvPortMalloc+0xf4>
				pxBlock = xStart.pxNextFreeBlock;
 800a0f4:	4a25      	ldr	r2, [pc, #148]	; (800a18c <pvPortMalloc+0x110>)
 800a0f6:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0f8:	6868      	ldr	r0, [r5, #4]
 800a0fa:	4298      	cmp	r0, r3
 800a0fc:	d201      	bcs.n	800a102 <pvPortMalloc+0x86>
 800a0fe:	682c      	ldr	r4, [r5, #0]
 800a100:	b9a4      	cbnz	r4, 800a12c <pvPortMalloc+0xb0>
				if( pxBlock != pxEnd )
 800a102:	6809      	ldr	r1, [r1, #0]
 800a104:	42a9      	cmp	r1, r5
 800a106:	d033      	beq.n	800a170 <pvPortMalloc+0xf4>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a108:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a10a:	6814      	ldr	r4, [r2, #0]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a10c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a10e:	1ac2      	subs	r2, r0, r3
 800a110:	2a10      	cmp	r2, #16
 800a112:	d912      	bls.n	800a13a <pvPortMalloc+0xbe>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a114:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a116:	0741      	lsls	r1, r0, #29
 800a118:	d00b      	beq.n	800a132 <pvPortMalloc+0xb6>
 800a11a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a11e:	f383 8811 	msr	BASEPRI, r3
 800a122:	f3bf 8f6f 	isb	sy
 800a126:	f3bf 8f4f 	dsb	sy
 800a12a:	e7fe      	b.n	800a12a <pvPortMalloc+0xae>
 800a12c:	462a      	mov	r2, r5
 800a12e:	4625      	mov	r5, r4
 800a130:	e7e2      	b.n	800a0f8 <pvPortMalloc+0x7c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a132:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a134:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a136:	f7ff ff7d 	bl	800a034 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a13a:	686b      	ldr	r3, [r5, #4]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a13c:	4914      	ldr	r1, [pc, #80]	; (800a190 <pvPortMalloc+0x114>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a13e:	1af6      	subs	r6, r6, r3
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a140:	431f      	orrs	r7, r3
					pxBlock->pxNextFreeBlock = NULL;
 800a142:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a144:	6808      	ldr	r0, [r1, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a146:	f8c8 6000 	str.w	r6, [r8]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a14a:	4286      	cmp	r6, r0
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a14c:	bf38      	it	cc
 800a14e:	600e      	strcc	r6, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a150:	3408      	adds	r4, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a152:	606f      	str	r7, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a154:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
 800a156:	f7ff f8c7 	bl	80092e8 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a15a:	0763      	lsls	r3, r4, #29
 800a15c:	d00a      	beq.n	800a174 <pvPortMalloc+0xf8>
 800a15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a162:	f383 8811 	msr	BASEPRI, r3
 800a166:	f3bf 8f6f 	isb	sy
 800a16a:	f3bf 8f4f 	dsb	sy
 800a16e:	e7fe      	b.n	800a16e <pvPortMalloc+0xf2>
void *pvReturn = NULL;
 800a170:	2400      	movs	r4, #0
 800a172:	e7f0      	b.n	800a156 <pvPortMalloc+0xda>
}
 800a174:	4620      	mov	r0, r4
 800a176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a17a:	bf00      	nop
 800a17c:	2000129c 	.word	0x2000129c
 800a180:	20004180 	.word	0x20004180
 800a184:	200012a0 	.word	0x200012a0
 800a188:	20004180 	.word	0x20004180
 800a18c:	2000418c 	.word	0x2000418c
 800a190:	20004188 	.word	0x20004188
 800a194:	20004184 	.word	0x20004184

0800a198 <vPortFree>:
{
 800a198:	b510      	push	{r4, lr}
	if( pv != NULL )
 800a19a:	4604      	mov	r4, r0
 800a19c:	b370      	cbz	r0, 800a1fc <vPortFree+0x64>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a19e:	4a18      	ldr	r2, [pc, #96]	; (800a200 <vPortFree+0x68>)
 800a1a0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a1a4:	6812      	ldr	r2, [r2, #0]
 800a1a6:	4213      	tst	r3, r2
 800a1a8:	d108      	bne.n	800a1bc <vPortFree+0x24>
 800a1aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1ae:	f383 8811 	msr	BASEPRI, r3
 800a1b2:	f3bf 8f6f 	isb	sy
 800a1b6:	f3bf 8f4f 	dsb	sy
 800a1ba:	e7fe      	b.n	800a1ba <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a1bc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a1c0:	b141      	cbz	r1, 800a1d4 <vPortFree+0x3c>
 800a1c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	e7fe      	b.n	800a1d2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a1d4:	ea23 0302 	bic.w	r3, r3, r2
 800a1d8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800a1dc:	f7fe ffe6 	bl	80091ac <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1e0:	4a08      	ldr	r2, [pc, #32]	; (800a204 <vPortFree+0x6c>)
 800a1e2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a1e6:	6811      	ldr	r1, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1e8:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a1ec:	440b      	add	r3, r1
 800a1ee:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a1f0:	f7ff ff20 	bl	800a034 <prvInsertBlockIntoFreeList>
}
 800a1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				( void ) xTaskResumeAll();
 800a1f8:	f7ff b876 	b.w	80092e8 <xTaskResumeAll>
}
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	bf00      	nop
 800a200:	20004180 	.word	0x20004180
 800a204:	20004184 	.word	0x20004184

0800a208 <xPortGetFreeHeapSize>:
}
 800a208:	4b01      	ldr	r3, [pc, #4]	; (800a210 <xPortGetFreeHeapSize+0x8>)
 800a20a:	6818      	ldr	r0, [r3, #0]
 800a20c:	4770      	bx	lr
 800a20e:	bf00      	nop
 800a210:	20004184 	.word	0x20004184

0800a214 <__errno>:
 800a214:	4b01      	ldr	r3, [pc, #4]	; (800a21c <__errno+0x8>)
 800a216:	6818      	ldr	r0, [r3, #0]
 800a218:	4770      	bx	lr
 800a21a:	bf00      	nop
 800a21c:	200003dc 	.word	0x200003dc

0800a220 <__libc_init_array>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	2500      	movs	r5, #0
 800a224:	4e0c      	ldr	r6, [pc, #48]	; (800a258 <__libc_init_array+0x38>)
 800a226:	4c0d      	ldr	r4, [pc, #52]	; (800a25c <__libc_init_array+0x3c>)
 800a228:	1ba4      	subs	r4, r4, r6
 800a22a:	10a4      	asrs	r4, r4, #2
 800a22c:	42a5      	cmp	r5, r4
 800a22e:	d109      	bne.n	800a244 <__libc_init_array+0x24>
 800a230:	f001 ffb8 	bl	800c1a4 <_init>
 800a234:	2500      	movs	r5, #0
 800a236:	4e0a      	ldr	r6, [pc, #40]	; (800a260 <__libc_init_array+0x40>)
 800a238:	4c0a      	ldr	r4, [pc, #40]	; (800a264 <__libc_init_array+0x44>)
 800a23a:	1ba4      	subs	r4, r4, r6
 800a23c:	10a4      	asrs	r4, r4, #2
 800a23e:	42a5      	cmp	r5, r4
 800a240:	d105      	bne.n	800a24e <__libc_init_array+0x2e>
 800a242:	bd70      	pop	{r4, r5, r6, pc}
 800a244:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a248:	4798      	blx	r3
 800a24a:	3501      	adds	r5, #1
 800a24c:	e7ee      	b.n	800a22c <__libc_init_array+0xc>
 800a24e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a252:	4798      	blx	r3
 800a254:	3501      	adds	r5, #1
 800a256:	e7f2      	b.n	800a23e <__libc_init_array+0x1e>
 800a258:	0800de50 	.word	0x0800de50
 800a25c:	0800de50 	.word	0x0800de50
 800a260:	0800de50 	.word	0x0800de50
 800a264:	0800de54 	.word	0x0800de54

0800a268 <memcmp>:
 800a268:	b530      	push	{r4, r5, lr}
 800a26a:	2400      	movs	r4, #0
 800a26c:	42a2      	cmp	r2, r4
 800a26e:	d101      	bne.n	800a274 <memcmp+0xc>
 800a270:	2000      	movs	r0, #0
 800a272:	e007      	b.n	800a284 <memcmp+0x1c>
 800a274:	5d03      	ldrb	r3, [r0, r4]
 800a276:	3401      	adds	r4, #1
 800a278:	190d      	adds	r5, r1, r4
 800a27a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a27e:	42ab      	cmp	r3, r5
 800a280:	d0f4      	beq.n	800a26c <memcmp+0x4>
 800a282:	1b58      	subs	r0, r3, r5
 800a284:	bd30      	pop	{r4, r5, pc}

0800a286 <memcpy>:
 800a286:	b510      	push	{r4, lr}
 800a288:	1e43      	subs	r3, r0, #1
 800a28a:	440a      	add	r2, r1
 800a28c:	4291      	cmp	r1, r2
 800a28e:	d100      	bne.n	800a292 <memcpy+0xc>
 800a290:	bd10      	pop	{r4, pc}
 800a292:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a296:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a29a:	e7f7      	b.n	800a28c <memcpy+0x6>

0800a29c <memset>:
 800a29c:	4603      	mov	r3, r0
 800a29e:	4402      	add	r2, r0
 800a2a0:	4293      	cmp	r3, r2
 800a2a2:	d100      	bne.n	800a2a6 <memset+0xa>
 800a2a4:	4770      	bx	lr
 800a2a6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2aa:	e7f9      	b.n	800a2a0 <memset+0x4>

0800a2ac <strchr>:
 800a2ac:	b2c9      	uxtb	r1, r1
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a2b4:	b11a      	cbz	r2, 800a2be <strchr+0x12>
 800a2b6:	428a      	cmp	r2, r1
 800a2b8:	d1f9      	bne.n	800a2ae <strchr+0x2>
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	4770      	bx	lr
 800a2be:	2900      	cmp	r1, #0
 800a2c0:	bf18      	it	ne
 800a2c2:	2300      	movne	r3, #0
 800a2c4:	e7f9      	b.n	800a2ba <strchr+0xe>

0800a2c6 <sulp>:
 800a2c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2ca:	460f      	mov	r7, r1
 800a2cc:	4690      	mov	r8, r2
 800a2ce:	f001 fd95 	bl	800bdfc <__ulp>
 800a2d2:	4604      	mov	r4, r0
 800a2d4:	460d      	mov	r5, r1
 800a2d6:	f1b8 0f00 	cmp.w	r8, #0
 800a2da:	d011      	beq.n	800a300 <sulp+0x3a>
 800a2dc:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a2e0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	dd0b      	ble.n	800a300 <sulp+0x3a>
 800a2e8:	2400      	movs	r4, #0
 800a2ea:	051b      	lsls	r3, r3, #20
 800a2ec:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a2f0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a2f4:	4622      	mov	r2, r4
 800a2f6:	462b      	mov	r3, r5
 800a2f8:	f7f6 f8ee 	bl	80004d8 <__aeabi_dmul>
 800a2fc:	4604      	mov	r4, r0
 800a2fe:	460d      	mov	r5, r1
 800a300:	4620      	mov	r0, r4
 800a302:	4629      	mov	r1, r5
 800a304:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a308 <_strtod_l>:
 800a308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a30c:	461f      	mov	r7, r3
 800a30e:	2300      	movs	r3, #0
 800a310:	b0a1      	sub	sp, #132	; 0x84
 800a312:	4683      	mov	fp, r0
 800a314:	4638      	mov	r0, r7
 800a316:	460e      	mov	r6, r1
 800a318:	9217      	str	r2, [sp, #92]	; 0x5c
 800a31a:	931c      	str	r3, [sp, #112]	; 0x70
 800a31c:	f001 fa8f 	bl	800b83e <__localeconv_l>
 800a320:	4680      	mov	r8, r0
 800a322:	6800      	ldr	r0, [r0, #0]
 800a324:	f7f5 ff14 	bl	8000150 <strlen>
 800a328:	f04f 0900 	mov.w	r9, #0
 800a32c:	4604      	mov	r4, r0
 800a32e:	f04f 0a00 	mov.w	sl, #0
 800a332:	961b      	str	r6, [sp, #108]	; 0x6c
 800a334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a336:	781a      	ldrb	r2, [r3, #0]
 800a338:	2a0d      	cmp	r2, #13
 800a33a:	d832      	bhi.n	800a3a2 <_strtod_l+0x9a>
 800a33c:	2a09      	cmp	r2, #9
 800a33e:	d236      	bcs.n	800a3ae <_strtod_l+0xa6>
 800a340:	2a00      	cmp	r2, #0
 800a342:	d03e      	beq.n	800a3c2 <_strtod_l+0xba>
 800a344:	2300      	movs	r3, #0
 800a346:	930d      	str	r3, [sp, #52]	; 0x34
 800a348:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a34a:	782b      	ldrb	r3, [r5, #0]
 800a34c:	2b30      	cmp	r3, #48	; 0x30
 800a34e:	f040 80ac 	bne.w	800a4aa <_strtod_l+0x1a2>
 800a352:	786b      	ldrb	r3, [r5, #1]
 800a354:	2b58      	cmp	r3, #88	; 0x58
 800a356:	d001      	beq.n	800a35c <_strtod_l+0x54>
 800a358:	2b78      	cmp	r3, #120	; 0x78
 800a35a:	d167      	bne.n	800a42c <_strtod_l+0x124>
 800a35c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a35e:	9702      	str	r7, [sp, #8]
 800a360:	9301      	str	r3, [sp, #4]
 800a362:	ab1c      	add	r3, sp, #112	; 0x70
 800a364:	9300      	str	r3, [sp, #0]
 800a366:	4a89      	ldr	r2, [pc, #548]	; (800a58c <_strtod_l+0x284>)
 800a368:	ab1d      	add	r3, sp, #116	; 0x74
 800a36a:	a91b      	add	r1, sp, #108	; 0x6c
 800a36c:	4658      	mov	r0, fp
 800a36e:	f000 ff8b 	bl	800b288 <__gethex>
 800a372:	f010 0407 	ands.w	r4, r0, #7
 800a376:	4606      	mov	r6, r0
 800a378:	d005      	beq.n	800a386 <_strtod_l+0x7e>
 800a37a:	2c06      	cmp	r4, #6
 800a37c:	d12b      	bne.n	800a3d6 <_strtod_l+0xce>
 800a37e:	2300      	movs	r3, #0
 800a380:	3501      	adds	r5, #1
 800a382:	951b      	str	r5, [sp, #108]	; 0x6c
 800a384:	930d      	str	r3, [sp, #52]	; 0x34
 800a386:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a388:	2b00      	cmp	r3, #0
 800a38a:	f040 85a6 	bne.w	800aeda <_strtod_l+0xbd2>
 800a38e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a390:	b1e3      	cbz	r3, 800a3cc <_strtod_l+0xc4>
 800a392:	464a      	mov	r2, r9
 800a394:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a398:	4610      	mov	r0, r2
 800a39a:	4619      	mov	r1, r3
 800a39c:	b021      	add	sp, #132	; 0x84
 800a39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3a2:	2a2b      	cmp	r2, #43	; 0x2b
 800a3a4:	d015      	beq.n	800a3d2 <_strtod_l+0xca>
 800a3a6:	2a2d      	cmp	r2, #45	; 0x2d
 800a3a8:	d004      	beq.n	800a3b4 <_strtod_l+0xac>
 800a3aa:	2a20      	cmp	r2, #32
 800a3ac:	d1ca      	bne.n	800a344 <_strtod_l+0x3c>
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800a3b2:	e7bf      	b.n	800a334 <_strtod_l+0x2c>
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	920d      	str	r2, [sp, #52]	; 0x34
 800a3b8:	1c5a      	adds	r2, r3, #1
 800a3ba:	921b      	str	r2, [sp, #108]	; 0x6c
 800a3bc:	785b      	ldrb	r3, [r3, #1]
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d1c2      	bne.n	800a348 <_strtod_l+0x40>
 800a3c2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3c4:	961b      	str	r6, [sp, #108]	; 0x6c
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	f040 8585 	bne.w	800aed6 <_strtod_l+0xbce>
 800a3cc:	464a      	mov	r2, r9
 800a3ce:	4653      	mov	r3, sl
 800a3d0:	e7e2      	b.n	800a398 <_strtod_l+0x90>
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	e7ef      	b.n	800a3b6 <_strtod_l+0xae>
 800a3d6:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a3d8:	b13a      	cbz	r2, 800a3ea <_strtod_l+0xe2>
 800a3da:	2135      	movs	r1, #53	; 0x35
 800a3dc:	a81e      	add	r0, sp, #120	; 0x78
 800a3de:	f001 fe00 	bl	800bfe2 <__copybits>
 800a3e2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a3e4:	4658      	mov	r0, fp
 800a3e6:	f001 fa72 	bl	800b8ce <_Bfree>
 800a3ea:	3c01      	subs	r4, #1
 800a3ec:	2c04      	cmp	r4, #4
 800a3ee:	d806      	bhi.n	800a3fe <_strtod_l+0xf6>
 800a3f0:	e8df f004 	tbb	[pc, r4]
 800a3f4:	1714030a 	.word	0x1714030a
 800a3f8:	0a          	.byte	0x0a
 800a3f9:	00          	.byte	0x00
 800a3fa:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a3fe:	0731      	lsls	r1, r6, #28
 800a400:	d5c1      	bpl.n	800a386 <_strtod_l+0x7e>
 800a402:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a406:	e7be      	b.n	800a386 <_strtod_l+0x7e>
 800a408:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a40a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a40e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a412:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a416:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a41a:	e7f0      	b.n	800a3fe <_strtod_l+0xf6>
 800a41c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a590 <_strtod_l+0x288>
 800a420:	e7ed      	b.n	800a3fe <_strtod_l+0xf6>
 800a422:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a426:	f04f 39ff 	mov.w	r9, #4294967295
 800a42a:	e7e8      	b.n	800a3fe <_strtod_l+0xf6>
 800a42c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a42e:	1c5a      	adds	r2, r3, #1
 800a430:	921b      	str	r2, [sp, #108]	; 0x6c
 800a432:	785b      	ldrb	r3, [r3, #1]
 800a434:	2b30      	cmp	r3, #48	; 0x30
 800a436:	d0f9      	beq.n	800a42c <_strtod_l+0x124>
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d0a4      	beq.n	800a386 <_strtod_l+0x7e>
 800a43c:	2301      	movs	r3, #1
 800a43e:	2500      	movs	r5, #0
 800a440:	220a      	movs	r2, #10
 800a442:	9307      	str	r3, [sp, #28]
 800a444:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a446:	9506      	str	r5, [sp, #24]
 800a448:	9308      	str	r3, [sp, #32]
 800a44a:	9504      	str	r5, [sp, #16]
 800a44c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a44e:	7807      	ldrb	r7, [r0, #0]
 800a450:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a454:	b2d9      	uxtb	r1, r3
 800a456:	2909      	cmp	r1, #9
 800a458:	d929      	bls.n	800a4ae <_strtod_l+0x1a6>
 800a45a:	4622      	mov	r2, r4
 800a45c:	f8d8 1000 	ldr.w	r1, [r8]
 800a460:	f001 fe76 	bl	800c150 <strncmp>
 800a464:	2800      	cmp	r0, #0
 800a466:	d031      	beq.n	800a4cc <_strtod_l+0x1c4>
 800a468:	2000      	movs	r0, #0
 800a46a:	463b      	mov	r3, r7
 800a46c:	4602      	mov	r2, r0
 800a46e:	9c04      	ldr	r4, [sp, #16]
 800a470:	9005      	str	r0, [sp, #20]
 800a472:	2b65      	cmp	r3, #101	; 0x65
 800a474:	d001      	beq.n	800a47a <_strtod_l+0x172>
 800a476:	2b45      	cmp	r3, #69	; 0x45
 800a478:	d114      	bne.n	800a4a4 <_strtod_l+0x19c>
 800a47a:	b924      	cbnz	r4, 800a486 <_strtod_l+0x17e>
 800a47c:	b910      	cbnz	r0, 800a484 <_strtod_l+0x17c>
 800a47e:	9b07      	ldr	r3, [sp, #28]
 800a480:	2b00      	cmp	r3, #0
 800a482:	d09e      	beq.n	800a3c2 <_strtod_l+0xba>
 800a484:	2400      	movs	r4, #0
 800a486:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a488:	1c73      	adds	r3, r6, #1
 800a48a:	931b      	str	r3, [sp, #108]	; 0x6c
 800a48c:	7873      	ldrb	r3, [r6, #1]
 800a48e:	2b2b      	cmp	r3, #43	; 0x2b
 800a490:	d078      	beq.n	800a584 <_strtod_l+0x27c>
 800a492:	2b2d      	cmp	r3, #45	; 0x2d
 800a494:	d070      	beq.n	800a578 <_strtod_l+0x270>
 800a496:	f04f 0c00 	mov.w	ip, #0
 800a49a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a49e:	2f09      	cmp	r7, #9
 800a4a0:	d97c      	bls.n	800a59c <_strtod_l+0x294>
 800a4a2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4a4:	f04f 0e00 	mov.w	lr, #0
 800a4a8:	e09a      	b.n	800a5e0 <_strtod_l+0x2d8>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	e7c7      	b.n	800a43e <_strtod_l+0x136>
 800a4ae:	9904      	ldr	r1, [sp, #16]
 800a4b0:	3001      	adds	r0, #1
 800a4b2:	2908      	cmp	r1, #8
 800a4b4:	bfd7      	itett	le
 800a4b6:	9906      	ldrle	r1, [sp, #24]
 800a4b8:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a4bc:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4c0:	9306      	strle	r3, [sp, #24]
 800a4c2:	9b04      	ldr	r3, [sp, #16]
 800a4c4:	901b      	str	r0, [sp, #108]	; 0x6c
 800a4c6:	3301      	adds	r3, #1
 800a4c8:	9304      	str	r3, [sp, #16]
 800a4ca:	e7bf      	b.n	800a44c <_strtod_l+0x144>
 800a4cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4ce:	191a      	adds	r2, r3, r4
 800a4d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4d2:	9a04      	ldr	r2, [sp, #16]
 800a4d4:	5d1b      	ldrb	r3, [r3, r4]
 800a4d6:	2a00      	cmp	r2, #0
 800a4d8:	d037      	beq.n	800a54a <_strtod_l+0x242>
 800a4da:	4602      	mov	r2, r0
 800a4dc:	9c04      	ldr	r4, [sp, #16]
 800a4de:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a4e2:	2909      	cmp	r1, #9
 800a4e4:	d913      	bls.n	800a50e <_strtod_l+0x206>
 800a4e6:	2101      	movs	r1, #1
 800a4e8:	9105      	str	r1, [sp, #20]
 800a4ea:	e7c2      	b.n	800a472 <_strtod_l+0x16a>
 800a4ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4ee:	3001      	adds	r0, #1
 800a4f0:	1c5a      	adds	r2, r3, #1
 800a4f2:	921b      	str	r2, [sp, #108]	; 0x6c
 800a4f4:	785b      	ldrb	r3, [r3, #1]
 800a4f6:	2b30      	cmp	r3, #48	; 0x30
 800a4f8:	d0f8      	beq.n	800a4ec <_strtod_l+0x1e4>
 800a4fa:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a4fe:	2a08      	cmp	r2, #8
 800a500:	f200 84f0 	bhi.w	800aee4 <_strtod_l+0xbdc>
 800a504:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a506:	9208      	str	r2, [sp, #32]
 800a508:	4602      	mov	r2, r0
 800a50a:	2000      	movs	r0, #0
 800a50c:	4604      	mov	r4, r0
 800a50e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a512:	f100 0101 	add.w	r1, r0, #1
 800a516:	d012      	beq.n	800a53e <_strtod_l+0x236>
 800a518:	440a      	add	r2, r1
 800a51a:	270a      	movs	r7, #10
 800a51c:	4621      	mov	r1, r4
 800a51e:	eb00 0c04 	add.w	ip, r0, r4
 800a522:	458c      	cmp	ip, r1
 800a524:	d113      	bne.n	800a54e <_strtod_l+0x246>
 800a526:	1821      	adds	r1, r4, r0
 800a528:	2908      	cmp	r1, #8
 800a52a:	f104 0401 	add.w	r4, r4, #1
 800a52e:	4404      	add	r4, r0
 800a530:	dc19      	bgt.n	800a566 <_strtod_l+0x25e>
 800a532:	210a      	movs	r1, #10
 800a534:	9b06      	ldr	r3, [sp, #24]
 800a536:	fb01 e303 	mla	r3, r1, r3, lr
 800a53a:	9306      	str	r3, [sp, #24]
 800a53c:	2100      	movs	r1, #0
 800a53e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a540:	1c58      	adds	r0, r3, #1
 800a542:	901b      	str	r0, [sp, #108]	; 0x6c
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	4608      	mov	r0, r1
 800a548:	e7c9      	b.n	800a4de <_strtod_l+0x1d6>
 800a54a:	9804      	ldr	r0, [sp, #16]
 800a54c:	e7d3      	b.n	800a4f6 <_strtod_l+0x1ee>
 800a54e:	2908      	cmp	r1, #8
 800a550:	f101 0101 	add.w	r1, r1, #1
 800a554:	dc03      	bgt.n	800a55e <_strtod_l+0x256>
 800a556:	9b06      	ldr	r3, [sp, #24]
 800a558:	437b      	muls	r3, r7
 800a55a:	9306      	str	r3, [sp, #24]
 800a55c:	e7e1      	b.n	800a522 <_strtod_l+0x21a>
 800a55e:	2910      	cmp	r1, #16
 800a560:	bfd8      	it	le
 800a562:	437d      	mulle	r5, r7
 800a564:	e7dd      	b.n	800a522 <_strtod_l+0x21a>
 800a566:	2c10      	cmp	r4, #16
 800a568:	bfdc      	itt	le
 800a56a:	210a      	movle	r1, #10
 800a56c:	fb01 e505 	mlale	r5, r1, r5, lr
 800a570:	e7e4      	b.n	800a53c <_strtod_l+0x234>
 800a572:	2301      	movs	r3, #1
 800a574:	9305      	str	r3, [sp, #20]
 800a576:	e781      	b.n	800a47c <_strtod_l+0x174>
 800a578:	f04f 0c01 	mov.w	ip, #1
 800a57c:	1cb3      	adds	r3, r6, #2
 800a57e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a580:	78b3      	ldrb	r3, [r6, #2]
 800a582:	e78a      	b.n	800a49a <_strtod_l+0x192>
 800a584:	f04f 0c00 	mov.w	ip, #0
 800a588:	e7f8      	b.n	800a57c <_strtod_l+0x274>
 800a58a:	bf00      	nop
 800a58c:	0800dbf4 	.word	0x0800dbf4
 800a590:	7ff00000 	.word	0x7ff00000
 800a594:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a596:	1c5f      	adds	r7, r3, #1
 800a598:	971b      	str	r7, [sp, #108]	; 0x6c
 800a59a:	785b      	ldrb	r3, [r3, #1]
 800a59c:	2b30      	cmp	r3, #48	; 0x30
 800a59e:	d0f9      	beq.n	800a594 <_strtod_l+0x28c>
 800a5a0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a5a4:	2f08      	cmp	r7, #8
 800a5a6:	f63f af7d 	bhi.w	800a4a4 <_strtod_l+0x19c>
 800a5aa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a5ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800a5b2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5b4:	1c5f      	adds	r7, r3, #1
 800a5b6:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5b8:	785b      	ldrb	r3, [r3, #1]
 800a5ba:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a5be:	f1b8 0f09 	cmp.w	r8, #9
 800a5c2:	d937      	bls.n	800a634 <_strtod_l+0x32c>
 800a5c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5c6:	1a7f      	subs	r7, r7, r1
 800a5c8:	2f08      	cmp	r7, #8
 800a5ca:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a5ce:	dc37      	bgt.n	800a640 <_strtod_l+0x338>
 800a5d0:	45be      	cmp	lr, r7
 800a5d2:	bfa8      	it	ge
 800a5d4:	46be      	movge	lr, r7
 800a5d6:	f1bc 0f00 	cmp.w	ip, #0
 800a5da:	d001      	beq.n	800a5e0 <_strtod_l+0x2d8>
 800a5dc:	f1ce 0e00 	rsb	lr, lr, #0
 800a5e0:	2c00      	cmp	r4, #0
 800a5e2:	d151      	bne.n	800a688 <_strtod_l+0x380>
 800a5e4:	2800      	cmp	r0, #0
 800a5e6:	f47f aece 	bne.w	800a386 <_strtod_l+0x7e>
 800a5ea:	9a07      	ldr	r2, [sp, #28]
 800a5ec:	2a00      	cmp	r2, #0
 800a5ee:	f47f aeca 	bne.w	800a386 <_strtod_l+0x7e>
 800a5f2:	9a05      	ldr	r2, [sp, #20]
 800a5f4:	2a00      	cmp	r2, #0
 800a5f6:	f47f aee4 	bne.w	800a3c2 <_strtod_l+0xba>
 800a5fa:	2b4e      	cmp	r3, #78	; 0x4e
 800a5fc:	d027      	beq.n	800a64e <_strtod_l+0x346>
 800a5fe:	dc21      	bgt.n	800a644 <_strtod_l+0x33c>
 800a600:	2b49      	cmp	r3, #73	; 0x49
 800a602:	f47f aede 	bne.w	800a3c2 <_strtod_l+0xba>
 800a606:	49a4      	ldr	r1, [pc, #656]	; (800a898 <_strtod_l+0x590>)
 800a608:	a81b      	add	r0, sp, #108	; 0x6c
 800a60a:	f001 f871 	bl	800b6f0 <__match>
 800a60e:	2800      	cmp	r0, #0
 800a610:	f43f aed7 	beq.w	800a3c2 <_strtod_l+0xba>
 800a614:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a616:	49a1      	ldr	r1, [pc, #644]	; (800a89c <_strtod_l+0x594>)
 800a618:	3b01      	subs	r3, #1
 800a61a:	a81b      	add	r0, sp, #108	; 0x6c
 800a61c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a61e:	f001 f867 	bl	800b6f0 <__match>
 800a622:	b910      	cbnz	r0, 800a62a <_strtod_l+0x322>
 800a624:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a626:	3301      	adds	r3, #1
 800a628:	931b      	str	r3, [sp, #108]	; 0x6c
 800a62a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a8b0 <_strtod_l+0x5a8>
 800a62e:	f04f 0900 	mov.w	r9, #0
 800a632:	e6a8      	b.n	800a386 <_strtod_l+0x7e>
 800a634:	210a      	movs	r1, #10
 800a636:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a63a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a63e:	e7b8      	b.n	800a5b2 <_strtod_l+0x2aa>
 800a640:	46be      	mov	lr, r7
 800a642:	e7c8      	b.n	800a5d6 <_strtod_l+0x2ce>
 800a644:	2b69      	cmp	r3, #105	; 0x69
 800a646:	d0de      	beq.n	800a606 <_strtod_l+0x2fe>
 800a648:	2b6e      	cmp	r3, #110	; 0x6e
 800a64a:	f47f aeba 	bne.w	800a3c2 <_strtod_l+0xba>
 800a64e:	4994      	ldr	r1, [pc, #592]	; (800a8a0 <_strtod_l+0x598>)
 800a650:	a81b      	add	r0, sp, #108	; 0x6c
 800a652:	f001 f84d 	bl	800b6f0 <__match>
 800a656:	2800      	cmp	r0, #0
 800a658:	f43f aeb3 	beq.w	800a3c2 <_strtod_l+0xba>
 800a65c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a65e:	781b      	ldrb	r3, [r3, #0]
 800a660:	2b28      	cmp	r3, #40	; 0x28
 800a662:	d10e      	bne.n	800a682 <_strtod_l+0x37a>
 800a664:	aa1e      	add	r2, sp, #120	; 0x78
 800a666:	498f      	ldr	r1, [pc, #572]	; (800a8a4 <_strtod_l+0x59c>)
 800a668:	a81b      	add	r0, sp, #108	; 0x6c
 800a66a:	f001 f855 	bl	800b718 <__hexnan>
 800a66e:	2805      	cmp	r0, #5
 800a670:	d107      	bne.n	800a682 <_strtod_l+0x37a>
 800a672:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a674:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a678:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a67c:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a680:	e681      	b.n	800a386 <_strtod_l+0x7e>
 800a682:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a8b8 <_strtod_l+0x5b0>
 800a686:	e7d2      	b.n	800a62e <_strtod_l+0x326>
 800a688:	ebae 0302 	sub.w	r3, lr, r2
 800a68c:	9307      	str	r3, [sp, #28]
 800a68e:	9b04      	ldr	r3, [sp, #16]
 800a690:	9806      	ldr	r0, [sp, #24]
 800a692:	2b00      	cmp	r3, #0
 800a694:	bf08      	it	eq
 800a696:	4623      	moveq	r3, r4
 800a698:	2c10      	cmp	r4, #16
 800a69a:	9304      	str	r3, [sp, #16]
 800a69c:	46a0      	mov	r8, r4
 800a69e:	bfa8      	it	ge
 800a6a0:	f04f 0810 	movge.w	r8, #16
 800a6a4:	f7f5 fe9e 	bl	80003e4 <__aeabi_ui2d>
 800a6a8:	2c09      	cmp	r4, #9
 800a6aa:	4681      	mov	r9, r0
 800a6ac:	468a      	mov	sl, r1
 800a6ae:	dc13      	bgt.n	800a6d8 <_strtod_l+0x3d0>
 800a6b0:	9b07      	ldr	r3, [sp, #28]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	f43f ae67 	beq.w	800a386 <_strtod_l+0x7e>
 800a6b8:	9b07      	ldr	r3, [sp, #28]
 800a6ba:	dd7e      	ble.n	800a7ba <_strtod_l+0x4b2>
 800a6bc:	2b16      	cmp	r3, #22
 800a6be:	dc65      	bgt.n	800a78c <_strtod_l+0x484>
 800a6c0:	4a79      	ldr	r2, [pc, #484]	; (800a8a8 <_strtod_l+0x5a0>)
 800a6c2:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a6c6:	464a      	mov	r2, r9
 800a6c8:	e9de 0100 	ldrd	r0, r1, [lr]
 800a6cc:	4653      	mov	r3, sl
 800a6ce:	f7f5 ff03 	bl	80004d8 <__aeabi_dmul>
 800a6d2:	4681      	mov	r9, r0
 800a6d4:	468a      	mov	sl, r1
 800a6d6:	e656      	b.n	800a386 <_strtod_l+0x7e>
 800a6d8:	4b73      	ldr	r3, [pc, #460]	; (800a8a8 <_strtod_l+0x5a0>)
 800a6da:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a6de:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6e2:	f7f5 fef9 	bl	80004d8 <__aeabi_dmul>
 800a6e6:	4606      	mov	r6, r0
 800a6e8:	4628      	mov	r0, r5
 800a6ea:	460f      	mov	r7, r1
 800a6ec:	f7f5 fe7a 	bl	80003e4 <__aeabi_ui2d>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	f7f5 fd38 	bl	800016c <__adddf3>
 800a6fc:	2c0f      	cmp	r4, #15
 800a6fe:	4681      	mov	r9, r0
 800a700:	468a      	mov	sl, r1
 800a702:	ddd5      	ble.n	800a6b0 <_strtod_l+0x3a8>
 800a704:	9b07      	ldr	r3, [sp, #28]
 800a706:	eba4 0808 	sub.w	r8, r4, r8
 800a70a:	4498      	add	r8, r3
 800a70c:	f1b8 0f00 	cmp.w	r8, #0
 800a710:	f340 809a 	ble.w	800a848 <_strtod_l+0x540>
 800a714:	f018 030f 	ands.w	r3, r8, #15
 800a718:	d00a      	beq.n	800a730 <_strtod_l+0x428>
 800a71a:	4963      	ldr	r1, [pc, #396]	; (800a8a8 <_strtod_l+0x5a0>)
 800a71c:	464a      	mov	r2, r9
 800a71e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a722:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a726:	4653      	mov	r3, sl
 800a728:	f7f5 fed6 	bl	80004d8 <__aeabi_dmul>
 800a72c:	4681      	mov	r9, r0
 800a72e:	468a      	mov	sl, r1
 800a730:	f038 080f 	bics.w	r8, r8, #15
 800a734:	d077      	beq.n	800a826 <_strtod_l+0x51e>
 800a736:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a73a:	dd4b      	ble.n	800a7d4 <_strtod_l+0x4cc>
 800a73c:	f04f 0800 	mov.w	r8, #0
 800a740:	f8cd 8010 	str.w	r8, [sp, #16]
 800a744:	f8cd 8020 	str.w	r8, [sp, #32]
 800a748:	f8cd 8018 	str.w	r8, [sp, #24]
 800a74c:	2322      	movs	r3, #34	; 0x22
 800a74e:	f04f 0900 	mov.w	r9, #0
 800a752:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a8b0 <_strtod_l+0x5a8>
 800a756:	f8cb 3000 	str.w	r3, [fp]
 800a75a:	9b08      	ldr	r3, [sp, #32]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f43f ae12 	beq.w	800a386 <_strtod_l+0x7e>
 800a762:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a764:	4658      	mov	r0, fp
 800a766:	f001 f8b2 	bl	800b8ce <_Bfree>
 800a76a:	9906      	ldr	r1, [sp, #24]
 800a76c:	4658      	mov	r0, fp
 800a76e:	f001 f8ae 	bl	800b8ce <_Bfree>
 800a772:	9904      	ldr	r1, [sp, #16]
 800a774:	4658      	mov	r0, fp
 800a776:	f001 f8aa 	bl	800b8ce <_Bfree>
 800a77a:	9908      	ldr	r1, [sp, #32]
 800a77c:	4658      	mov	r0, fp
 800a77e:	f001 f8a6 	bl	800b8ce <_Bfree>
 800a782:	4641      	mov	r1, r8
 800a784:	4658      	mov	r0, fp
 800a786:	f001 f8a2 	bl	800b8ce <_Bfree>
 800a78a:	e5fc      	b.n	800a386 <_strtod_l+0x7e>
 800a78c:	9a07      	ldr	r2, [sp, #28]
 800a78e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a792:	4293      	cmp	r3, r2
 800a794:	dbb6      	blt.n	800a704 <_strtod_l+0x3fc>
 800a796:	4d44      	ldr	r5, [pc, #272]	; (800a8a8 <_strtod_l+0x5a0>)
 800a798:	f1c4 040f 	rsb	r4, r4, #15
 800a79c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a7a0:	464a      	mov	r2, r9
 800a7a2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7a6:	4653      	mov	r3, sl
 800a7a8:	f7f5 fe96 	bl	80004d8 <__aeabi_dmul>
 800a7ac:	9b07      	ldr	r3, [sp, #28]
 800a7ae:	1b1c      	subs	r4, r3, r4
 800a7b0:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a7b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a7b8:	e789      	b.n	800a6ce <_strtod_l+0x3c6>
 800a7ba:	f113 0f16 	cmn.w	r3, #22
 800a7be:	dba1      	blt.n	800a704 <_strtod_l+0x3fc>
 800a7c0:	4a39      	ldr	r2, [pc, #228]	; (800a8a8 <_strtod_l+0x5a0>)
 800a7c2:	4648      	mov	r0, r9
 800a7c4:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a7c8:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a7cc:	4651      	mov	r1, sl
 800a7ce:	f7f5 ffad 	bl	800072c <__aeabi_ddiv>
 800a7d2:	e77e      	b.n	800a6d2 <_strtod_l+0x3ca>
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4648      	mov	r0, r9
 800a7d8:	4651      	mov	r1, sl
 800a7da:	461d      	mov	r5, r3
 800a7dc:	4e33      	ldr	r6, [pc, #204]	; (800a8ac <_strtod_l+0x5a4>)
 800a7de:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a7e2:	f1b8 0f01 	cmp.w	r8, #1
 800a7e6:	dc21      	bgt.n	800a82c <_strtod_l+0x524>
 800a7e8:	b10b      	cbz	r3, 800a7ee <_strtod_l+0x4e6>
 800a7ea:	4681      	mov	r9, r0
 800a7ec:	468a      	mov	sl, r1
 800a7ee:	4b2f      	ldr	r3, [pc, #188]	; (800a8ac <_strtod_l+0x5a4>)
 800a7f0:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a7f4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a7f8:	464a      	mov	r2, r9
 800a7fa:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a7fe:	4653      	mov	r3, sl
 800a800:	f7f5 fe6a 	bl	80004d8 <__aeabi_dmul>
 800a804:	4b2a      	ldr	r3, [pc, #168]	; (800a8b0 <_strtod_l+0x5a8>)
 800a806:	460a      	mov	r2, r1
 800a808:	400b      	ands	r3, r1
 800a80a:	492a      	ldr	r1, [pc, #168]	; (800a8b4 <_strtod_l+0x5ac>)
 800a80c:	4681      	mov	r9, r0
 800a80e:	428b      	cmp	r3, r1
 800a810:	d894      	bhi.n	800a73c <_strtod_l+0x434>
 800a812:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a816:	428b      	cmp	r3, r1
 800a818:	bf86      	itte	hi
 800a81a:	f04f 39ff 	movhi.w	r9, #4294967295
 800a81e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a8bc <_strtod_l+0x5b4>
 800a822:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a826:	2300      	movs	r3, #0
 800a828:	9305      	str	r3, [sp, #20]
 800a82a:	e07b      	b.n	800a924 <_strtod_l+0x61c>
 800a82c:	f018 0f01 	tst.w	r8, #1
 800a830:	d006      	beq.n	800a840 <_strtod_l+0x538>
 800a832:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83a:	f7f5 fe4d 	bl	80004d8 <__aeabi_dmul>
 800a83e:	2301      	movs	r3, #1
 800a840:	3501      	adds	r5, #1
 800a842:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a846:	e7cc      	b.n	800a7e2 <_strtod_l+0x4da>
 800a848:	d0ed      	beq.n	800a826 <_strtod_l+0x51e>
 800a84a:	f1c8 0800 	rsb	r8, r8, #0
 800a84e:	f018 020f 	ands.w	r2, r8, #15
 800a852:	d00a      	beq.n	800a86a <_strtod_l+0x562>
 800a854:	4b14      	ldr	r3, [pc, #80]	; (800a8a8 <_strtod_l+0x5a0>)
 800a856:	4648      	mov	r0, r9
 800a858:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a85c:	4651      	mov	r1, sl
 800a85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a862:	f7f5 ff63 	bl	800072c <__aeabi_ddiv>
 800a866:	4681      	mov	r9, r0
 800a868:	468a      	mov	sl, r1
 800a86a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a86e:	d0da      	beq.n	800a826 <_strtod_l+0x51e>
 800a870:	f1b8 0f1f 	cmp.w	r8, #31
 800a874:	dd24      	ble.n	800a8c0 <_strtod_l+0x5b8>
 800a876:	f04f 0800 	mov.w	r8, #0
 800a87a:	f8cd 8010 	str.w	r8, [sp, #16]
 800a87e:	f8cd 8020 	str.w	r8, [sp, #32]
 800a882:	f8cd 8018 	str.w	r8, [sp, #24]
 800a886:	2322      	movs	r3, #34	; 0x22
 800a888:	f04f 0900 	mov.w	r9, #0
 800a88c:	f04f 0a00 	mov.w	sl, #0
 800a890:	f8cb 3000 	str.w	r3, [fp]
 800a894:	e761      	b.n	800a75a <_strtod_l+0x452>
 800a896:	bf00      	nop
 800a898:	0800dbe7 	.word	0x0800dbe7
 800a89c:	0800dbea 	.word	0x0800dbea
 800a8a0:	0800dbf0 	.word	0x0800dbf0
 800a8a4:	0800dc08 	.word	0x0800dc08
 800a8a8:	0800dc78 	.word	0x0800dc78
 800a8ac:	0800dc50 	.word	0x0800dc50
 800a8b0:	7ff00000 	.word	0x7ff00000
 800a8b4:	7ca00000 	.word	0x7ca00000
 800a8b8:	fff80000 	.word	0xfff80000
 800a8bc:	7fefffff 	.word	0x7fefffff
 800a8c0:	f018 0310 	ands.w	r3, r8, #16
 800a8c4:	bf18      	it	ne
 800a8c6:	236a      	movne	r3, #106	; 0x6a
 800a8c8:	4648      	mov	r0, r9
 800a8ca:	9305      	str	r3, [sp, #20]
 800a8cc:	4651      	mov	r1, sl
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4da1      	ldr	r5, [pc, #644]	; (800ab58 <_strtod_l+0x850>)
 800a8d2:	f1b8 0f00 	cmp.w	r8, #0
 800a8d6:	f300 8113 	bgt.w	800ab00 <_strtod_l+0x7f8>
 800a8da:	b10b      	cbz	r3, 800a8e0 <_strtod_l+0x5d8>
 800a8dc:	4681      	mov	r9, r0
 800a8de:	468a      	mov	sl, r1
 800a8e0:	9b05      	ldr	r3, [sp, #20]
 800a8e2:	b1bb      	cbz	r3, 800a914 <_strtod_l+0x60c>
 800a8e4:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a8e8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	4651      	mov	r1, sl
 800a8f0:	dd10      	ble.n	800a914 <_strtod_l+0x60c>
 800a8f2:	2b1f      	cmp	r3, #31
 800a8f4:	f340 8110 	ble.w	800ab18 <_strtod_l+0x810>
 800a8f8:	2b34      	cmp	r3, #52	; 0x34
 800a8fa:	bfd8      	it	le
 800a8fc:	f04f 32ff 	movle.w	r2, #4294967295
 800a900:	f04f 0900 	mov.w	r9, #0
 800a904:	bfcf      	iteee	gt
 800a906:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a90a:	3b20      	suble	r3, #32
 800a90c:	fa02 f303 	lslle.w	r3, r2, r3
 800a910:	ea03 0a01 	andle.w	sl, r3, r1
 800a914:	2200      	movs	r2, #0
 800a916:	2300      	movs	r3, #0
 800a918:	4648      	mov	r0, r9
 800a91a:	4651      	mov	r1, sl
 800a91c:	f7f6 f844 	bl	80009a8 <__aeabi_dcmpeq>
 800a920:	2800      	cmp	r0, #0
 800a922:	d1a8      	bne.n	800a876 <_strtod_l+0x56e>
 800a924:	9b06      	ldr	r3, [sp, #24]
 800a926:	9a04      	ldr	r2, [sp, #16]
 800a928:	9300      	str	r3, [sp, #0]
 800a92a:	9908      	ldr	r1, [sp, #32]
 800a92c:	4623      	mov	r3, r4
 800a92e:	4658      	mov	r0, fp
 800a930:	f001 f81f 	bl	800b972 <__s2b>
 800a934:	9008      	str	r0, [sp, #32]
 800a936:	2800      	cmp	r0, #0
 800a938:	f43f af00 	beq.w	800a73c <_strtod_l+0x434>
 800a93c:	9a07      	ldr	r2, [sp, #28]
 800a93e:	9b07      	ldr	r3, [sp, #28]
 800a940:	2a00      	cmp	r2, #0
 800a942:	f1c3 0300 	rsb	r3, r3, #0
 800a946:	bfa8      	it	ge
 800a948:	2300      	movge	r3, #0
 800a94a:	f04f 0800 	mov.w	r8, #0
 800a94e:	930e      	str	r3, [sp, #56]	; 0x38
 800a950:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a954:	9316      	str	r3, [sp, #88]	; 0x58
 800a956:	f8cd 8010 	str.w	r8, [sp, #16]
 800a95a:	9b08      	ldr	r3, [sp, #32]
 800a95c:	4658      	mov	r0, fp
 800a95e:	6859      	ldr	r1, [r3, #4]
 800a960:	f000 ff81 	bl	800b866 <_Balloc>
 800a964:	9006      	str	r0, [sp, #24]
 800a966:	2800      	cmp	r0, #0
 800a968:	f43f aef0 	beq.w	800a74c <_strtod_l+0x444>
 800a96c:	9b08      	ldr	r3, [sp, #32]
 800a96e:	300c      	adds	r0, #12
 800a970:	691a      	ldr	r2, [r3, #16]
 800a972:	f103 010c 	add.w	r1, r3, #12
 800a976:	3202      	adds	r2, #2
 800a978:	0092      	lsls	r2, r2, #2
 800a97a:	f7ff fc84 	bl	800a286 <memcpy>
 800a97e:	ab1e      	add	r3, sp, #120	; 0x78
 800a980:	9301      	str	r3, [sp, #4]
 800a982:	ab1d      	add	r3, sp, #116	; 0x74
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	464a      	mov	r2, r9
 800a988:	4653      	mov	r3, sl
 800a98a:	4658      	mov	r0, fp
 800a98c:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a990:	f001 faaa 	bl	800bee8 <__d2b>
 800a994:	901c      	str	r0, [sp, #112]	; 0x70
 800a996:	2800      	cmp	r0, #0
 800a998:	f43f aed8 	beq.w	800a74c <_strtod_l+0x444>
 800a99c:	2101      	movs	r1, #1
 800a99e:	4658      	mov	r0, fp
 800a9a0:	f001 f873 	bl	800ba8a <__i2b>
 800a9a4:	9004      	str	r0, [sp, #16]
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f43f aecf 	beq.w	800a74c <_strtod_l+0x444>
 800a9ae:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800a9b0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a9b2:	2d00      	cmp	r5, #0
 800a9b4:	bfab      	itete	ge
 800a9b6:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a9b8:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800a9ba:	18ee      	addge	r6, r5, r3
 800a9bc:	1b5c      	sublt	r4, r3, r5
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	bfa8      	it	ge
 800a9c2:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800a9c4:	eba5 0503 	sub.w	r5, r5, r3
 800a9c8:	4415      	add	r5, r2
 800a9ca:	4b64      	ldr	r3, [pc, #400]	; (800ab5c <_strtod_l+0x854>)
 800a9cc:	f105 35ff 	add.w	r5, r5, #4294967295
 800a9d0:	bfb8      	it	lt
 800a9d2:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a9d4:	429d      	cmp	r5, r3
 800a9d6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9da:	f280 80af 	bge.w	800ab3c <_strtod_l+0x834>
 800a9de:	1b5b      	subs	r3, r3, r5
 800a9e0:	2b1f      	cmp	r3, #31
 800a9e2:	eba2 0203 	sub.w	r2, r2, r3
 800a9e6:	f04f 0701 	mov.w	r7, #1
 800a9ea:	f300 809c 	bgt.w	800ab26 <_strtod_l+0x81e>
 800a9ee:	2500      	movs	r5, #0
 800a9f0:	fa07 f303 	lsl.w	r3, r7, r3
 800a9f4:	930f      	str	r3, [sp, #60]	; 0x3c
 800a9f6:	18b7      	adds	r7, r6, r2
 800a9f8:	9b05      	ldr	r3, [sp, #20]
 800a9fa:	42be      	cmp	r6, r7
 800a9fc:	4414      	add	r4, r2
 800a9fe:	441c      	add	r4, r3
 800aa00:	4633      	mov	r3, r6
 800aa02:	bfa8      	it	ge
 800aa04:	463b      	movge	r3, r7
 800aa06:	42a3      	cmp	r3, r4
 800aa08:	bfa8      	it	ge
 800aa0a:	4623      	movge	r3, r4
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	bfc2      	ittt	gt
 800aa10:	1aff      	subgt	r7, r7, r3
 800aa12:	1ae4      	subgt	r4, r4, r3
 800aa14:	1af6      	subgt	r6, r6, r3
 800aa16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa18:	b1bb      	cbz	r3, 800aa4a <_strtod_l+0x742>
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	9904      	ldr	r1, [sp, #16]
 800aa1e:	4658      	mov	r0, fp
 800aa20:	f001 f8d2 	bl	800bbc8 <__pow5mult>
 800aa24:	9004      	str	r0, [sp, #16]
 800aa26:	2800      	cmp	r0, #0
 800aa28:	f43f ae90 	beq.w	800a74c <_strtod_l+0x444>
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa30:	4658      	mov	r0, fp
 800aa32:	f001 f833 	bl	800ba9c <__multiply>
 800aa36:	9009      	str	r0, [sp, #36]	; 0x24
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	f43f ae87 	beq.w	800a74c <_strtod_l+0x444>
 800aa3e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa40:	4658      	mov	r0, fp
 800aa42:	f000 ff44 	bl	800b8ce <_Bfree>
 800aa46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa48:	931c      	str	r3, [sp, #112]	; 0x70
 800aa4a:	2f00      	cmp	r7, #0
 800aa4c:	dc7a      	bgt.n	800ab44 <_strtod_l+0x83c>
 800aa4e:	9b07      	ldr	r3, [sp, #28]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	dd08      	ble.n	800aa66 <_strtod_l+0x75e>
 800aa54:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aa56:	9906      	ldr	r1, [sp, #24]
 800aa58:	4658      	mov	r0, fp
 800aa5a:	f001 f8b5 	bl	800bbc8 <__pow5mult>
 800aa5e:	9006      	str	r0, [sp, #24]
 800aa60:	2800      	cmp	r0, #0
 800aa62:	f43f ae73 	beq.w	800a74c <_strtod_l+0x444>
 800aa66:	2c00      	cmp	r4, #0
 800aa68:	dd08      	ble.n	800aa7c <_strtod_l+0x774>
 800aa6a:	4622      	mov	r2, r4
 800aa6c:	9906      	ldr	r1, [sp, #24]
 800aa6e:	4658      	mov	r0, fp
 800aa70:	f001 f8f8 	bl	800bc64 <__lshift>
 800aa74:	9006      	str	r0, [sp, #24]
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f43f ae68 	beq.w	800a74c <_strtod_l+0x444>
 800aa7c:	2e00      	cmp	r6, #0
 800aa7e:	dd08      	ble.n	800aa92 <_strtod_l+0x78a>
 800aa80:	4632      	mov	r2, r6
 800aa82:	9904      	ldr	r1, [sp, #16]
 800aa84:	4658      	mov	r0, fp
 800aa86:	f001 f8ed 	bl	800bc64 <__lshift>
 800aa8a:	9004      	str	r0, [sp, #16]
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f43f ae5d 	beq.w	800a74c <_strtod_l+0x444>
 800aa92:	9a06      	ldr	r2, [sp, #24]
 800aa94:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa96:	4658      	mov	r0, fp
 800aa98:	f001 f952 	bl	800bd40 <__mdiff>
 800aa9c:	4680      	mov	r8, r0
 800aa9e:	2800      	cmp	r0, #0
 800aaa0:	f43f ae54 	beq.w	800a74c <_strtod_l+0x444>
 800aaa4:	2400      	movs	r4, #0
 800aaa6:	68c3      	ldr	r3, [r0, #12]
 800aaa8:	9904      	ldr	r1, [sp, #16]
 800aaaa:	60c4      	str	r4, [r0, #12]
 800aaac:	930c      	str	r3, [sp, #48]	; 0x30
 800aaae:	f001 f92d 	bl	800bd0c <__mcmp>
 800aab2:	42a0      	cmp	r0, r4
 800aab4:	da54      	bge.n	800ab60 <_strtod_l+0x858>
 800aab6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aab8:	b9f3      	cbnz	r3, 800aaf8 <_strtod_l+0x7f0>
 800aaba:	f1b9 0f00 	cmp.w	r9, #0
 800aabe:	d11b      	bne.n	800aaf8 <_strtod_l+0x7f0>
 800aac0:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800aac4:	b9c3      	cbnz	r3, 800aaf8 <_strtod_l+0x7f0>
 800aac6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800aaca:	0d1b      	lsrs	r3, r3, #20
 800aacc:	051b      	lsls	r3, r3, #20
 800aace:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aad2:	d911      	bls.n	800aaf8 <_strtod_l+0x7f0>
 800aad4:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800aad8:	b91b      	cbnz	r3, 800aae2 <_strtod_l+0x7da>
 800aada:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800aade:	2b01      	cmp	r3, #1
 800aae0:	dd0a      	ble.n	800aaf8 <_strtod_l+0x7f0>
 800aae2:	4641      	mov	r1, r8
 800aae4:	2201      	movs	r2, #1
 800aae6:	4658      	mov	r0, fp
 800aae8:	f001 f8bc 	bl	800bc64 <__lshift>
 800aaec:	9904      	ldr	r1, [sp, #16]
 800aaee:	4680      	mov	r8, r0
 800aaf0:	f001 f90c 	bl	800bd0c <__mcmp>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	dc68      	bgt.n	800abca <_strtod_l+0x8c2>
 800aaf8:	9b05      	ldr	r3, [sp, #20]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d172      	bne.n	800abe4 <_strtod_l+0x8dc>
 800aafe:	e630      	b.n	800a762 <_strtod_l+0x45a>
 800ab00:	f018 0f01 	tst.w	r8, #1
 800ab04:	d004      	beq.n	800ab10 <_strtod_l+0x808>
 800ab06:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab0a:	f7f5 fce5 	bl	80004d8 <__aeabi_dmul>
 800ab0e:	2301      	movs	r3, #1
 800ab10:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab14:	3508      	adds	r5, #8
 800ab16:	e6dc      	b.n	800a8d2 <_strtod_l+0x5ca>
 800ab18:	f04f 32ff 	mov.w	r2, #4294967295
 800ab1c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab20:	ea03 0909 	and.w	r9, r3, r9
 800ab24:	e6f6      	b.n	800a914 <_strtod_l+0x60c>
 800ab26:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ab2a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ab2e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ab32:	35e2      	adds	r5, #226	; 0xe2
 800ab34:	fa07 f505 	lsl.w	r5, r7, r5
 800ab38:	970f      	str	r7, [sp, #60]	; 0x3c
 800ab3a:	e75c      	b.n	800a9f6 <_strtod_l+0x6ee>
 800ab3c:	2301      	movs	r3, #1
 800ab3e:	2500      	movs	r5, #0
 800ab40:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab42:	e758      	b.n	800a9f6 <_strtod_l+0x6ee>
 800ab44:	463a      	mov	r2, r7
 800ab46:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab48:	4658      	mov	r0, fp
 800ab4a:	f001 f88b 	bl	800bc64 <__lshift>
 800ab4e:	901c      	str	r0, [sp, #112]	; 0x70
 800ab50:	2800      	cmp	r0, #0
 800ab52:	f47f af7c 	bne.w	800aa4e <_strtod_l+0x746>
 800ab56:	e5f9      	b.n	800a74c <_strtod_l+0x444>
 800ab58:	0800dc20 	.word	0x0800dc20
 800ab5c:	fffffc02 	.word	0xfffffc02
 800ab60:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800ab64:	f040 8089 	bne.w	800ac7a <_strtod_l+0x972>
 800ab68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab6a:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ab6e:	b342      	cbz	r2, 800abc2 <_strtod_l+0x8ba>
 800ab70:	4aaf      	ldr	r2, [pc, #700]	; (800ae30 <_strtod_l+0xb28>)
 800ab72:	4293      	cmp	r3, r2
 800ab74:	d156      	bne.n	800ac24 <_strtod_l+0x91c>
 800ab76:	9b05      	ldr	r3, [sp, #20]
 800ab78:	4648      	mov	r0, r9
 800ab7a:	b1eb      	cbz	r3, 800abb8 <_strtod_l+0x8b0>
 800ab7c:	4653      	mov	r3, sl
 800ab7e:	4aad      	ldr	r2, [pc, #692]	; (800ae34 <_strtod_l+0xb2c>)
 800ab80:	f04f 31ff 	mov.w	r1, #4294967295
 800ab84:	401a      	ands	r2, r3
 800ab86:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ab8a:	d818      	bhi.n	800abbe <_strtod_l+0x8b6>
 800ab8c:	0d12      	lsrs	r2, r2, #20
 800ab8e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ab92:	fa01 f303 	lsl.w	r3, r1, r3
 800ab96:	4298      	cmp	r0, r3
 800ab98:	d144      	bne.n	800ac24 <_strtod_l+0x91c>
 800ab9a:	4ba7      	ldr	r3, [pc, #668]	; (800ae38 <_strtod_l+0xb30>)
 800ab9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d102      	bne.n	800aba8 <_strtod_l+0x8a0>
 800aba2:	3001      	adds	r0, #1
 800aba4:	f43f add2 	beq.w	800a74c <_strtod_l+0x444>
 800aba8:	4ba2      	ldr	r3, [pc, #648]	; (800ae34 <_strtod_l+0xb2c>)
 800abaa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abac:	f04f 0900 	mov.w	r9, #0
 800abb0:	401a      	ands	r2, r3
 800abb2:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800abb6:	e79f      	b.n	800aaf8 <_strtod_l+0x7f0>
 800abb8:	f04f 33ff 	mov.w	r3, #4294967295
 800abbc:	e7eb      	b.n	800ab96 <_strtod_l+0x88e>
 800abbe:	460b      	mov	r3, r1
 800abc0:	e7e9      	b.n	800ab96 <_strtod_l+0x88e>
 800abc2:	bb7b      	cbnz	r3, 800ac24 <_strtod_l+0x91c>
 800abc4:	f1b9 0f00 	cmp.w	r9, #0
 800abc8:	d12c      	bne.n	800ac24 <_strtod_l+0x91c>
 800abca:	9905      	ldr	r1, [sp, #20]
 800abcc:	4653      	mov	r3, sl
 800abce:	4a99      	ldr	r2, [pc, #612]	; (800ae34 <_strtod_l+0xb2c>)
 800abd0:	b1f1      	cbz	r1, 800ac10 <_strtod_l+0x908>
 800abd2:	ea02 010a 	and.w	r1, r2, sl
 800abd6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800abda:	dc19      	bgt.n	800ac10 <_strtod_l+0x908>
 800abdc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800abe0:	f77f ae51 	ble.w	800a886 <_strtod_l+0x57e>
 800abe4:	2300      	movs	r3, #0
 800abe6:	4a95      	ldr	r2, [pc, #596]	; (800ae3c <_strtod_l+0xb34>)
 800abe8:	4648      	mov	r0, r9
 800abea:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800abee:	4651      	mov	r1, sl
 800abf0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800abf4:	f7f5 fc70 	bl	80004d8 <__aeabi_dmul>
 800abf8:	4681      	mov	r9, r0
 800abfa:	468a      	mov	sl, r1
 800abfc:	2900      	cmp	r1, #0
 800abfe:	f47f adb0 	bne.w	800a762 <_strtod_l+0x45a>
 800ac02:	2800      	cmp	r0, #0
 800ac04:	f47f adad 	bne.w	800a762 <_strtod_l+0x45a>
 800ac08:	2322      	movs	r3, #34	; 0x22
 800ac0a:	f8cb 3000 	str.w	r3, [fp]
 800ac0e:	e5a8      	b.n	800a762 <_strtod_l+0x45a>
 800ac10:	4013      	ands	r3, r2
 800ac12:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac16:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800ac1a:	f04f 39ff 	mov.w	r9, #4294967295
 800ac1e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ac22:	e769      	b.n	800aaf8 <_strtod_l+0x7f0>
 800ac24:	b19d      	cbz	r5, 800ac4e <_strtod_l+0x946>
 800ac26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac28:	421d      	tst	r5, r3
 800ac2a:	f43f af65 	beq.w	800aaf8 <_strtod_l+0x7f0>
 800ac2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac30:	9a05      	ldr	r2, [sp, #20]
 800ac32:	4648      	mov	r0, r9
 800ac34:	4651      	mov	r1, sl
 800ac36:	b173      	cbz	r3, 800ac56 <_strtod_l+0x94e>
 800ac38:	f7ff fb45 	bl	800a2c6 <sulp>
 800ac3c:	4602      	mov	r2, r0
 800ac3e:	460b      	mov	r3, r1
 800ac40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac44:	f7f5 fa92 	bl	800016c <__adddf3>
 800ac48:	4681      	mov	r9, r0
 800ac4a:	468a      	mov	sl, r1
 800ac4c:	e754      	b.n	800aaf8 <_strtod_l+0x7f0>
 800ac4e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac50:	ea13 0f09 	tst.w	r3, r9
 800ac54:	e7e9      	b.n	800ac2a <_strtod_l+0x922>
 800ac56:	f7ff fb36 	bl	800a2c6 <sulp>
 800ac5a:	4602      	mov	r2, r0
 800ac5c:	460b      	mov	r3, r1
 800ac5e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac62:	f7f5 fa81 	bl	8000168 <__aeabi_dsub>
 800ac66:	2200      	movs	r2, #0
 800ac68:	2300      	movs	r3, #0
 800ac6a:	4681      	mov	r9, r0
 800ac6c:	468a      	mov	sl, r1
 800ac6e:	f7f5 fe9b 	bl	80009a8 <__aeabi_dcmpeq>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	f47f ae07 	bne.w	800a886 <_strtod_l+0x57e>
 800ac78:	e73e      	b.n	800aaf8 <_strtod_l+0x7f0>
 800ac7a:	9904      	ldr	r1, [sp, #16]
 800ac7c:	4640      	mov	r0, r8
 800ac7e:	f001 f982 	bl	800bf86 <__ratio>
 800ac82:	2200      	movs	r2, #0
 800ac84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac88:	4606      	mov	r6, r0
 800ac8a:	460f      	mov	r7, r1
 800ac8c:	f7f5 fea0 	bl	80009d0 <__aeabi_dcmple>
 800ac90:	2800      	cmp	r0, #0
 800ac92:	d075      	beq.n	800ad80 <_strtod_l+0xa78>
 800ac94:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d047      	beq.n	800ad2a <_strtod_l+0xa22>
 800ac9a:	2600      	movs	r6, #0
 800ac9c:	4f68      	ldr	r7, [pc, #416]	; (800ae40 <_strtod_l+0xb38>)
 800ac9e:	4d68      	ldr	r5, [pc, #416]	; (800ae40 <_strtod_l+0xb38>)
 800aca0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aca2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca6:	0d1b      	lsrs	r3, r3, #20
 800aca8:	051b      	lsls	r3, r3, #20
 800acaa:	930f      	str	r3, [sp, #60]	; 0x3c
 800acac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acae:	4b65      	ldr	r3, [pc, #404]	; (800ae44 <_strtod_l+0xb3c>)
 800acb0:	429a      	cmp	r2, r3
 800acb2:	f040 80cf 	bne.w	800ae54 <_strtod_l+0xb4c>
 800acb6:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800acba:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800acbe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acc0:	4648      	mov	r0, r9
 800acc2:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800acc6:	4651      	mov	r1, sl
 800acc8:	f001 f898 	bl	800bdfc <__ulp>
 800accc:	4602      	mov	r2, r0
 800acce:	460b      	mov	r3, r1
 800acd0:	4630      	mov	r0, r6
 800acd2:	4639      	mov	r1, r7
 800acd4:	f7f5 fc00 	bl	80004d8 <__aeabi_dmul>
 800acd8:	464a      	mov	r2, r9
 800acda:	4653      	mov	r3, sl
 800acdc:	f7f5 fa46 	bl	800016c <__adddf3>
 800ace0:	460b      	mov	r3, r1
 800ace2:	4954      	ldr	r1, [pc, #336]	; (800ae34 <_strtod_l+0xb2c>)
 800ace4:	4a58      	ldr	r2, [pc, #352]	; (800ae48 <_strtod_l+0xb40>)
 800ace6:	4019      	ands	r1, r3
 800ace8:	4291      	cmp	r1, r2
 800acea:	4681      	mov	r9, r0
 800acec:	d95e      	bls.n	800adac <_strtod_l+0xaa4>
 800acee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800acf0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d103      	bne.n	800ad00 <_strtod_l+0x9f8>
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	3301      	adds	r3, #1
 800acfc:	f43f ad26 	beq.w	800a74c <_strtod_l+0x444>
 800ad00:	f04f 39ff 	mov.w	r9, #4294967295
 800ad04:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ae38 <_strtod_l+0xb30>
 800ad08:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad0a:	4658      	mov	r0, fp
 800ad0c:	f000 fddf 	bl	800b8ce <_Bfree>
 800ad10:	9906      	ldr	r1, [sp, #24]
 800ad12:	4658      	mov	r0, fp
 800ad14:	f000 fddb 	bl	800b8ce <_Bfree>
 800ad18:	9904      	ldr	r1, [sp, #16]
 800ad1a:	4658      	mov	r0, fp
 800ad1c:	f000 fdd7 	bl	800b8ce <_Bfree>
 800ad20:	4641      	mov	r1, r8
 800ad22:	4658      	mov	r0, fp
 800ad24:	f000 fdd3 	bl	800b8ce <_Bfree>
 800ad28:	e617      	b.n	800a95a <_strtod_l+0x652>
 800ad2a:	f1b9 0f00 	cmp.w	r9, #0
 800ad2e:	d119      	bne.n	800ad64 <_strtod_l+0xa5c>
 800ad30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad32:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad36:	b9e3      	cbnz	r3, 800ad72 <_strtod_l+0xa6a>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4b41      	ldr	r3, [pc, #260]	; (800ae40 <_strtod_l+0xb38>)
 800ad3c:	4630      	mov	r0, r6
 800ad3e:	4639      	mov	r1, r7
 800ad40:	f7f5 fe3c 	bl	80009bc <__aeabi_dcmplt>
 800ad44:	b9c8      	cbnz	r0, 800ad7a <_strtod_l+0xa72>
 800ad46:	2200      	movs	r2, #0
 800ad48:	4b40      	ldr	r3, [pc, #256]	; (800ae4c <_strtod_l+0xb44>)
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	4639      	mov	r1, r7
 800ad4e:	f7f5 fbc3 	bl	80004d8 <__aeabi_dmul>
 800ad52:	4604      	mov	r4, r0
 800ad54:	460d      	mov	r5, r1
 800ad56:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ad5a:	9418      	str	r4, [sp, #96]	; 0x60
 800ad5c:	9319      	str	r3, [sp, #100]	; 0x64
 800ad5e:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800ad62:	e79d      	b.n	800aca0 <_strtod_l+0x998>
 800ad64:	f1b9 0f01 	cmp.w	r9, #1
 800ad68:	d103      	bne.n	800ad72 <_strtod_l+0xa6a>
 800ad6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	f43f ad8a 	beq.w	800a886 <_strtod_l+0x57e>
 800ad72:	2600      	movs	r6, #0
 800ad74:	4f36      	ldr	r7, [pc, #216]	; (800ae50 <_strtod_l+0xb48>)
 800ad76:	2400      	movs	r4, #0
 800ad78:	e791      	b.n	800ac9e <_strtod_l+0x996>
 800ad7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ad7c:	4d33      	ldr	r5, [pc, #204]	; (800ae4c <_strtod_l+0xb44>)
 800ad7e:	e7ea      	b.n	800ad56 <_strtod_l+0xa4e>
 800ad80:	4b32      	ldr	r3, [pc, #200]	; (800ae4c <_strtod_l+0xb44>)
 800ad82:	2200      	movs	r2, #0
 800ad84:	4630      	mov	r0, r6
 800ad86:	4639      	mov	r1, r7
 800ad88:	f7f5 fba6 	bl	80004d8 <__aeabi_dmul>
 800ad8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad8e:	4604      	mov	r4, r0
 800ad90:	460d      	mov	r5, r1
 800ad92:	b933      	cbnz	r3, 800ada2 <_strtod_l+0xa9a>
 800ad94:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad98:	9010      	str	r0, [sp, #64]	; 0x40
 800ad9a:	9311      	str	r3, [sp, #68]	; 0x44
 800ad9c:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ada0:	e77e      	b.n	800aca0 <_strtod_l+0x998>
 800ada2:	4602      	mov	r2, r0
 800ada4:	460b      	mov	r3, r1
 800ada6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800adaa:	e7f7      	b.n	800ad9c <_strtod_l+0xa94>
 800adac:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800adb0:	9b05      	ldr	r3, [sp, #20]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d1a8      	bne.n	800ad08 <_strtod_l+0xa00>
 800adb6:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800adba:	0d1b      	lsrs	r3, r3, #20
 800adbc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adbe:	051b      	lsls	r3, r3, #20
 800adc0:	429a      	cmp	r2, r3
 800adc2:	4656      	mov	r6, sl
 800adc4:	d1a0      	bne.n	800ad08 <_strtod_l+0xa00>
 800adc6:	4629      	mov	r1, r5
 800adc8:	4620      	mov	r0, r4
 800adca:	f7f5 fe35 	bl	8000a38 <__aeabi_d2iz>
 800adce:	f7f5 fb19 	bl	8000404 <__aeabi_i2d>
 800add2:	460b      	mov	r3, r1
 800add4:	4602      	mov	r2, r0
 800add6:	4629      	mov	r1, r5
 800add8:	4620      	mov	r0, r4
 800adda:	f7f5 f9c5 	bl	8000168 <__aeabi_dsub>
 800adde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ade0:	4604      	mov	r4, r0
 800ade2:	460d      	mov	r5, r1
 800ade4:	b933      	cbnz	r3, 800adf4 <_strtod_l+0xaec>
 800ade6:	f1b9 0f00 	cmp.w	r9, #0
 800adea:	d103      	bne.n	800adf4 <_strtod_l+0xaec>
 800adec:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800adf0:	2e00      	cmp	r6, #0
 800adf2:	d06a      	beq.n	800aeca <_strtod_l+0xbc2>
 800adf4:	a30a      	add	r3, pc, #40	; (adr r3, 800ae20 <_strtod_l+0xb18>)
 800adf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adfa:	4620      	mov	r0, r4
 800adfc:	4629      	mov	r1, r5
 800adfe:	f7f5 fddd 	bl	80009bc <__aeabi_dcmplt>
 800ae02:	2800      	cmp	r0, #0
 800ae04:	f47f acad 	bne.w	800a762 <_strtod_l+0x45a>
 800ae08:	a307      	add	r3, pc, #28	; (adr r3, 800ae28 <_strtod_l+0xb20>)
 800ae0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae0e:	4620      	mov	r0, r4
 800ae10:	4629      	mov	r1, r5
 800ae12:	f7f5 fdf1 	bl	80009f8 <__aeabi_dcmpgt>
 800ae16:	2800      	cmp	r0, #0
 800ae18:	f43f af76 	beq.w	800ad08 <_strtod_l+0xa00>
 800ae1c:	e4a1      	b.n	800a762 <_strtod_l+0x45a>
 800ae1e:	bf00      	nop
 800ae20:	94a03595 	.word	0x94a03595
 800ae24:	3fdfffff 	.word	0x3fdfffff
 800ae28:	35afe535 	.word	0x35afe535
 800ae2c:	3fe00000 	.word	0x3fe00000
 800ae30:	000fffff 	.word	0x000fffff
 800ae34:	7ff00000 	.word	0x7ff00000
 800ae38:	7fefffff 	.word	0x7fefffff
 800ae3c:	39500000 	.word	0x39500000
 800ae40:	3ff00000 	.word	0x3ff00000
 800ae44:	7fe00000 	.word	0x7fe00000
 800ae48:	7c9fffff 	.word	0x7c9fffff
 800ae4c:	3fe00000 	.word	0x3fe00000
 800ae50:	bff00000 	.word	0xbff00000
 800ae54:	9b05      	ldr	r3, [sp, #20]
 800ae56:	b313      	cbz	r3, 800ae9e <_strtod_l+0xb96>
 800ae58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae5a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae5e:	d81e      	bhi.n	800ae9e <_strtod_l+0xb96>
 800ae60:	a325      	add	r3, pc, #148	; (adr r3, 800aef8 <_strtod_l+0xbf0>)
 800ae62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae66:	4620      	mov	r0, r4
 800ae68:	4629      	mov	r1, r5
 800ae6a:	f7f5 fdb1 	bl	80009d0 <__aeabi_dcmple>
 800ae6e:	b190      	cbz	r0, 800ae96 <_strtod_l+0xb8e>
 800ae70:	4629      	mov	r1, r5
 800ae72:	4620      	mov	r0, r4
 800ae74:	f7f5 fe08 	bl	8000a88 <__aeabi_d2uiz>
 800ae78:	2800      	cmp	r0, #0
 800ae7a:	bf08      	it	eq
 800ae7c:	2001      	moveq	r0, #1
 800ae7e:	f7f5 fab1 	bl	80003e4 <__aeabi_ui2d>
 800ae82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae84:	4604      	mov	r4, r0
 800ae86:	460d      	mov	r5, r1
 800ae88:	b9d3      	cbnz	r3, 800aec0 <_strtod_l+0xbb8>
 800ae8a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae8e:	9012      	str	r0, [sp, #72]	; 0x48
 800ae90:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae92:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ae96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae98:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ae9c:	1a9f      	subs	r7, r3, r2
 800ae9e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aea2:	f000 ffab 	bl	800bdfc <__ulp>
 800aea6:	4602      	mov	r2, r0
 800aea8:	460b      	mov	r3, r1
 800aeaa:	4630      	mov	r0, r6
 800aeac:	4639      	mov	r1, r7
 800aeae:	f7f5 fb13 	bl	80004d8 <__aeabi_dmul>
 800aeb2:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800aeb6:	f7f5 f959 	bl	800016c <__adddf3>
 800aeba:	4681      	mov	r9, r0
 800aebc:	468a      	mov	sl, r1
 800aebe:	e777      	b.n	800adb0 <_strtod_l+0xaa8>
 800aec0:	4602      	mov	r2, r0
 800aec2:	460b      	mov	r3, r1
 800aec4:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aec8:	e7e3      	b.n	800ae92 <_strtod_l+0xb8a>
 800aeca:	a30d      	add	r3, pc, #52	; (adr r3, 800af00 <_strtod_l+0xbf8>)
 800aecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed0:	f7f5 fd74 	bl	80009bc <__aeabi_dcmplt>
 800aed4:	e79f      	b.n	800ae16 <_strtod_l+0xb0e>
 800aed6:	2300      	movs	r3, #0
 800aed8:	930d      	str	r3, [sp, #52]	; 0x34
 800aeda:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800aedc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aede:	6013      	str	r3, [r2, #0]
 800aee0:	f7ff ba55 	b.w	800a38e <_strtod_l+0x86>
 800aee4:	2b65      	cmp	r3, #101	; 0x65
 800aee6:	f04f 0200 	mov.w	r2, #0
 800aeea:	f43f ab42 	beq.w	800a572 <_strtod_l+0x26a>
 800aeee:	2101      	movs	r1, #1
 800aef0:	4614      	mov	r4, r2
 800aef2:	9105      	str	r1, [sp, #20]
 800aef4:	f7ff babf 	b.w	800a476 <_strtod_l+0x16e>
 800aef8:	ffc00000 	.word	0xffc00000
 800aefc:	41dfffff 	.word	0x41dfffff
 800af00:	94a03595 	.word	0x94a03595
 800af04:	3fcfffff 	.word	0x3fcfffff

0800af08 <strtof>:
 800af08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af0c:	4e21      	ldr	r6, [pc, #132]	; (800af94 <strtof+0x8c>)
 800af0e:	4a22      	ldr	r2, [pc, #136]	; (800af98 <strtof+0x90>)
 800af10:	6834      	ldr	r4, [r6, #0]
 800af12:	6a23      	ldr	r3, [r4, #32]
 800af14:	2b00      	cmp	r3, #0
 800af16:	bf08      	it	eq
 800af18:	4613      	moveq	r3, r2
 800af1a:	460a      	mov	r2, r1
 800af1c:	4601      	mov	r1, r0
 800af1e:	4620      	mov	r0, r4
 800af20:	f7ff f9f2 	bl	800a308 <_strtod_l>
 800af24:	4605      	mov	r5, r0
 800af26:	460c      	mov	r4, r1
 800af28:	4602      	mov	r2, r0
 800af2a:	460b      	mov	r3, r1
 800af2c:	4628      	mov	r0, r5
 800af2e:	4621      	mov	r1, r4
 800af30:	f7f5 fd6c 	bl	8000a0c <__aeabi_dcmpun>
 800af34:	b120      	cbz	r0, 800af40 <strtof+0x38>
 800af36:	2000      	movs	r0, #0
 800af38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af3c:	f001 b904 	b.w	800c148 <nanf>
 800af40:	4621      	mov	r1, r4
 800af42:	4628      	mov	r0, r5
 800af44:	f7f5 fdc0 	bl	8000ac8 <__aeabi_d2f>
 800af48:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800af4c:	4607      	mov	r7, r0
 800af4e:	4913      	ldr	r1, [pc, #76]	; (800af9c <strtof+0x94>)
 800af50:	4640      	mov	r0, r8
 800af52:	f7f6 f8dd 	bl	8001110 <__aeabi_fcmpun>
 800af56:	b9c8      	cbnz	r0, 800af8c <strtof+0x84>
 800af58:	4910      	ldr	r1, [pc, #64]	; (800af9c <strtof+0x94>)
 800af5a:	4640      	mov	r0, r8
 800af5c:	f7f6 f8ba 	bl	80010d4 <__aeabi_fcmple>
 800af60:	b9a0      	cbnz	r0, 800af8c <strtof+0x84>
 800af62:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800af66:	f04f 32ff 	mov.w	r2, #4294967295
 800af6a:	4b0d      	ldr	r3, [pc, #52]	; (800afa0 <strtof+0x98>)
 800af6c:	4628      	mov	r0, r5
 800af6e:	4621      	mov	r1, r4
 800af70:	f7f5 fd4c 	bl	8000a0c <__aeabi_dcmpun>
 800af74:	b938      	cbnz	r0, 800af86 <strtof+0x7e>
 800af76:	f04f 32ff 	mov.w	r2, #4294967295
 800af7a:	4b09      	ldr	r3, [pc, #36]	; (800afa0 <strtof+0x98>)
 800af7c:	4628      	mov	r0, r5
 800af7e:	4621      	mov	r1, r4
 800af80:	f7f5 fd26 	bl	80009d0 <__aeabi_dcmple>
 800af84:	b110      	cbz	r0, 800af8c <strtof+0x84>
 800af86:	2222      	movs	r2, #34	; 0x22
 800af88:	6833      	ldr	r3, [r6, #0]
 800af8a:	601a      	str	r2, [r3, #0]
 800af8c:	4638      	mov	r0, r7
 800af8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af92:	bf00      	nop
 800af94:	200003dc 	.word	0x200003dc
 800af98:	20000440 	.word	0x20000440
 800af9c:	7f7fffff 	.word	0x7f7fffff
 800afa0:	7fefffff 	.word	0x7fefffff

0800afa4 <_strtol_l.isra.0>:
 800afa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800afa8:	4680      	mov	r8, r0
 800afaa:	4689      	mov	r9, r1
 800afac:	4692      	mov	sl, r2
 800afae:	461e      	mov	r6, r3
 800afb0:	460f      	mov	r7, r1
 800afb2:	463d      	mov	r5, r7
 800afb4:	9808      	ldr	r0, [sp, #32]
 800afb6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afba:	f000 fc3d 	bl	800b838 <__locale_ctype_ptr_l>
 800afbe:	4420      	add	r0, r4
 800afc0:	7843      	ldrb	r3, [r0, #1]
 800afc2:	f013 0308 	ands.w	r3, r3, #8
 800afc6:	d132      	bne.n	800b02e <_strtol_l.isra.0+0x8a>
 800afc8:	2c2d      	cmp	r4, #45	; 0x2d
 800afca:	d132      	bne.n	800b032 <_strtol_l.isra.0+0x8e>
 800afcc:	2201      	movs	r2, #1
 800afce:	787c      	ldrb	r4, [r7, #1]
 800afd0:	1cbd      	adds	r5, r7, #2
 800afd2:	2e00      	cmp	r6, #0
 800afd4:	d05d      	beq.n	800b092 <_strtol_l.isra.0+0xee>
 800afd6:	2e10      	cmp	r6, #16
 800afd8:	d109      	bne.n	800afee <_strtol_l.isra.0+0x4a>
 800afda:	2c30      	cmp	r4, #48	; 0x30
 800afdc:	d107      	bne.n	800afee <_strtol_l.isra.0+0x4a>
 800afde:	782b      	ldrb	r3, [r5, #0]
 800afe0:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800afe4:	2b58      	cmp	r3, #88	; 0x58
 800afe6:	d14f      	bne.n	800b088 <_strtol_l.isra.0+0xe4>
 800afe8:	2610      	movs	r6, #16
 800afea:	786c      	ldrb	r4, [r5, #1]
 800afec:	3502      	adds	r5, #2
 800afee:	2a00      	cmp	r2, #0
 800aff0:	bf14      	ite	ne
 800aff2:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800aff6:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800affa:	2700      	movs	r7, #0
 800affc:	fbb1 fcf6 	udiv	ip, r1, r6
 800b000:	4638      	mov	r0, r7
 800b002:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b006:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b00a:	2b09      	cmp	r3, #9
 800b00c:	d817      	bhi.n	800b03e <_strtol_l.isra.0+0x9a>
 800b00e:	461c      	mov	r4, r3
 800b010:	42a6      	cmp	r6, r4
 800b012:	dd23      	ble.n	800b05c <_strtol_l.isra.0+0xb8>
 800b014:	1c7b      	adds	r3, r7, #1
 800b016:	d007      	beq.n	800b028 <_strtol_l.isra.0+0x84>
 800b018:	4584      	cmp	ip, r0
 800b01a:	d31c      	bcc.n	800b056 <_strtol_l.isra.0+0xb2>
 800b01c:	d101      	bne.n	800b022 <_strtol_l.isra.0+0x7e>
 800b01e:	45a6      	cmp	lr, r4
 800b020:	db19      	blt.n	800b056 <_strtol_l.isra.0+0xb2>
 800b022:	2701      	movs	r7, #1
 800b024:	fb00 4006 	mla	r0, r0, r6, r4
 800b028:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b02c:	e7eb      	b.n	800b006 <_strtol_l.isra.0+0x62>
 800b02e:	462f      	mov	r7, r5
 800b030:	e7bf      	b.n	800afb2 <_strtol_l.isra.0+0xe>
 800b032:	2c2b      	cmp	r4, #43	; 0x2b
 800b034:	bf04      	itt	eq
 800b036:	1cbd      	addeq	r5, r7, #2
 800b038:	787c      	ldrbeq	r4, [r7, #1]
 800b03a:	461a      	mov	r2, r3
 800b03c:	e7c9      	b.n	800afd2 <_strtol_l.isra.0+0x2e>
 800b03e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b042:	2b19      	cmp	r3, #25
 800b044:	d801      	bhi.n	800b04a <_strtol_l.isra.0+0xa6>
 800b046:	3c37      	subs	r4, #55	; 0x37
 800b048:	e7e2      	b.n	800b010 <_strtol_l.isra.0+0x6c>
 800b04a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b04e:	2b19      	cmp	r3, #25
 800b050:	d804      	bhi.n	800b05c <_strtol_l.isra.0+0xb8>
 800b052:	3c57      	subs	r4, #87	; 0x57
 800b054:	e7dc      	b.n	800b010 <_strtol_l.isra.0+0x6c>
 800b056:	f04f 37ff 	mov.w	r7, #4294967295
 800b05a:	e7e5      	b.n	800b028 <_strtol_l.isra.0+0x84>
 800b05c:	1c7b      	adds	r3, r7, #1
 800b05e:	d108      	bne.n	800b072 <_strtol_l.isra.0+0xce>
 800b060:	2322      	movs	r3, #34	; 0x22
 800b062:	4608      	mov	r0, r1
 800b064:	f8c8 3000 	str.w	r3, [r8]
 800b068:	f1ba 0f00 	cmp.w	sl, #0
 800b06c:	d107      	bne.n	800b07e <_strtol_l.isra.0+0xda>
 800b06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b072:	b102      	cbz	r2, 800b076 <_strtol_l.isra.0+0xd2>
 800b074:	4240      	negs	r0, r0
 800b076:	f1ba 0f00 	cmp.w	sl, #0
 800b07a:	d0f8      	beq.n	800b06e <_strtol_l.isra.0+0xca>
 800b07c:	b10f      	cbz	r7, 800b082 <_strtol_l.isra.0+0xde>
 800b07e:	f105 39ff 	add.w	r9, r5, #4294967295
 800b082:	f8ca 9000 	str.w	r9, [sl]
 800b086:	e7f2      	b.n	800b06e <_strtol_l.isra.0+0xca>
 800b088:	2430      	movs	r4, #48	; 0x30
 800b08a:	2e00      	cmp	r6, #0
 800b08c:	d1af      	bne.n	800afee <_strtol_l.isra.0+0x4a>
 800b08e:	2608      	movs	r6, #8
 800b090:	e7ad      	b.n	800afee <_strtol_l.isra.0+0x4a>
 800b092:	2c30      	cmp	r4, #48	; 0x30
 800b094:	d0a3      	beq.n	800afde <_strtol_l.isra.0+0x3a>
 800b096:	260a      	movs	r6, #10
 800b098:	e7a9      	b.n	800afee <_strtol_l.isra.0+0x4a>
	...

0800b09c <strtol>:
 800b09c:	4b08      	ldr	r3, [pc, #32]	; (800b0c0 <strtol+0x24>)
 800b09e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0a0:	681c      	ldr	r4, [r3, #0]
 800b0a2:	4d08      	ldr	r5, [pc, #32]	; (800b0c4 <strtol+0x28>)
 800b0a4:	6a23      	ldr	r3, [r4, #32]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	bf08      	it	eq
 800b0aa:	462b      	moveq	r3, r5
 800b0ac:	9300      	str	r3, [sp, #0]
 800b0ae:	4613      	mov	r3, r2
 800b0b0:	460a      	mov	r2, r1
 800b0b2:	4601      	mov	r1, r0
 800b0b4:	4620      	mov	r0, r4
 800b0b6:	f7ff ff75 	bl	800afa4 <_strtol_l.isra.0>
 800b0ba:	b003      	add	sp, #12
 800b0bc:	bd30      	pop	{r4, r5, pc}
 800b0be:	bf00      	nop
 800b0c0:	200003dc 	.word	0x200003dc
 800b0c4:	20000440 	.word	0x20000440

0800b0c8 <_strtoul_l.isra.0>:
 800b0c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b0cc:	4680      	mov	r8, r0
 800b0ce:	4689      	mov	r9, r1
 800b0d0:	4692      	mov	sl, r2
 800b0d2:	461e      	mov	r6, r3
 800b0d4:	460f      	mov	r7, r1
 800b0d6:	463d      	mov	r5, r7
 800b0d8:	9808      	ldr	r0, [sp, #32]
 800b0da:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b0de:	f000 fbab 	bl	800b838 <__locale_ctype_ptr_l>
 800b0e2:	4420      	add	r0, r4
 800b0e4:	7843      	ldrb	r3, [r0, #1]
 800b0e6:	f013 0308 	ands.w	r3, r3, #8
 800b0ea:	d130      	bne.n	800b14e <_strtoul_l.isra.0+0x86>
 800b0ec:	2c2d      	cmp	r4, #45	; 0x2d
 800b0ee:	d130      	bne.n	800b152 <_strtoul_l.isra.0+0x8a>
 800b0f0:	2101      	movs	r1, #1
 800b0f2:	787c      	ldrb	r4, [r7, #1]
 800b0f4:	1cbd      	adds	r5, r7, #2
 800b0f6:	2e00      	cmp	r6, #0
 800b0f8:	d05c      	beq.n	800b1b4 <_strtoul_l.isra.0+0xec>
 800b0fa:	2e10      	cmp	r6, #16
 800b0fc:	d109      	bne.n	800b112 <_strtoul_l.isra.0+0x4a>
 800b0fe:	2c30      	cmp	r4, #48	; 0x30
 800b100:	d107      	bne.n	800b112 <_strtoul_l.isra.0+0x4a>
 800b102:	782b      	ldrb	r3, [r5, #0]
 800b104:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b108:	2b58      	cmp	r3, #88	; 0x58
 800b10a:	d14e      	bne.n	800b1aa <_strtoul_l.isra.0+0xe2>
 800b10c:	2610      	movs	r6, #16
 800b10e:	786c      	ldrb	r4, [r5, #1]
 800b110:	3502      	adds	r5, #2
 800b112:	f04f 32ff 	mov.w	r2, #4294967295
 800b116:	fbb2 f2f6 	udiv	r2, r2, r6
 800b11a:	2300      	movs	r3, #0
 800b11c:	fb06 fc02 	mul.w	ip, r6, r2
 800b120:	4618      	mov	r0, r3
 800b122:	ea6f 0c0c 	mvn.w	ip, ip
 800b126:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b12a:	2f09      	cmp	r7, #9
 800b12c:	d817      	bhi.n	800b15e <_strtoul_l.isra.0+0x96>
 800b12e:	463c      	mov	r4, r7
 800b130:	42a6      	cmp	r6, r4
 800b132:	dd23      	ble.n	800b17c <_strtoul_l.isra.0+0xb4>
 800b134:	2b00      	cmp	r3, #0
 800b136:	db1e      	blt.n	800b176 <_strtoul_l.isra.0+0xae>
 800b138:	4282      	cmp	r2, r0
 800b13a:	d31c      	bcc.n	800b176 <_strtoul_l.isra.0+0xae>
 800b13c:	d101      	bne.n	800b142 <_strtoul_l.isra.0+0x7a>
 800b13e:	45a4      	cmp	ip, r4
 800b140:	db19      	blt.n	800b176 <_strtoul_l.isra.0+0xae>
 800b142:	2301      	movs	r3, #1
 800b144:	fb00 4006 	mla	r0, r0, r6, r4
 800b148:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b14c:	e7eb      	b.n	800b126 <_strtoul_l.isra.0+0x5e>
 800b14e:	462f      	mov	r7, r5
 800b150:	e7c1      	b.n	800b0d6 <_strtoul_l.isra.0+0xe>
 800b152:	2c2b      	cmp	r4, #43	; 0x2b
 800b154:	bf04      	itt	eq
 800b156:	1cbd      	addeq	r5, r7, #2
 800b158:	787c      	ldrbeq	r4, [r7, #1]
 800b15a:	4619      	mov	r1, r3
 800b15c:	e7cb      	b.n	800b0f6 <_strtoul_l.isra.0+0x2e>
 800b15e:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b162:	2f19      	cmp	r7, #25
 800b164:	d801      	bhi.n	800b16a <_strtoul_l.isra.0+0xa2>
 800b166:	3c37      	subs	r4, #55	; 0x37
 800b168:	e7e2      	b.n	800b130 <_strtoul_l.isra.0+0x68>
 800b16a:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b16e:	2f19      	cmp	r7, #25
 800b170:	d804      	bhi.n	800b17c <_strtoul_l.isra.0+0xb4>
 800b172:	3c57      	subs	r4, #87	; 0x57
 800b174:	e7dc      	b.n	800b130 <_strtoul_l.isra.0+0x68>
 800b176:	f04f 33ff 	mov.w	r3, #4294967295
 800b17a:	e7e5      	b.n	800b148 <_strtoul_l.isra.0+0x80>
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	da09      	bge.n	800b194 <_strtoul_l.isra.0+0xcc>
 800b180:	2322      	movs	r3, #34	; 0x22
 800b182:	f04f 30ff 	mov.w	r0, #4294967295
 800b186:	f8c8 3000 	str.w	r3, [r8]
 800b18a:	f1ba 0f00 	cmp.w	sl, #0
 800b18e:	d107      	bne.n	800b1a0 <_strtoul_l.isra.0+0xd8>
 800b190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b194:	b101      	cbz	r1, 800b198 <_strtoul_l.isra.0+0xd0>
 800b196:	4240      	negs	r0, r0
 800b198:	f1ba 0f00 	cmp.w	sl, #0
 800b19c:	d0f8      	beq.n	800b190 <_strtoul_l.isra.0+0xc8>
 800b19e:	b10b      	cbz	r3, 800b1a4 <_strtoul_l.isra.0+0xdc>
 800b1a0:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1a4:	f8ca 9000 	str.w	r9, [sl]
 800b1a8:	e7f2      	b.n	800b190 <_strtoul_l.isra.0+0xc8>
 800b1aa:	2430      	movs	r4, #48	; 0x30
 800b1ac:	2e00      	cmp	r6, #0
 800b1ae:	d1b0      	bne.n	800b112 <_strtoul_l.isra.0+0x4a>
 800b1b0:	2608      	movs	r6, #8
 800b1b2:	e7ae      	b.n	800b112 <_strtoul_l.isra.0+0x4a>
 800b1b4:	2c30      	cmp	r4, #48	; 0x30
 800b1b6:	d0a4      	beq.n	800b102 <_strtoul_l.isra.0+0x3a>
 800b1b8:	260a      	movs	r6, #10
 800b1ba:	e7aa      	b.n	800b112 <_strtoul_l.isra.0+0x4a>

0800b1bc <strtoul>:
 800b1bc:	4b08      	ldr	r3, [pc, #32]	; (800b1e0 <strtoul+0x24>)
 800b1be:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1c0:	681c      	ldr	r4, [r3, #0]
 800b1c2:	4d08      	ldr	r5, [pc, #32]	; (800b1e4 <strtoul+0x28>)
 800b1c4:	6a23      	ldr	r3, [r4, #32]
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	bf08      	it	eq
 800b1ca:	462b      	moveq	r3, r5
 800b1cc:	9300      	str	r3, [sp, #0]
 800b1ce:	4613      	mov	r3, r2
 800b1d0:	460a      	mov	r2, r1
 800b1d2:	4601      	mov	r1, r0
 800b1d4:	4620      	mov	r0, r4
 800b1d6:	f7ff ff77 	bl	800b0c8 <_strtoul_l.isra.0>
 800b1da:	b003      	add	sp, #12
 800b1dc:	bd30      	pop	{r4, r5, pc}
 800b1de:	bf00      	nop
 800b1e0:	200003dc 	.word	0x200003dc
 800b1e4:	20000440 	.word	0x20000440

0800b1e8 <rshift>:
 800b1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ea:	6906      	ldr	r6, [r0, #16]
 800b1ec:	114b      	asrs	r3, r1, #5
 800b1ee:	429e      	cmp	r6, r3
 800b1f0:	f100 0414 	add.w	r4, r0, #20
 800b1f4:	dd31      	ble.n	800b25a <rshift+0x72>
 800b1f6:	f011 011f 	ands.w	r1, r1, #31
 800b1fa:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b1fe:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b202:	d108      	bne.n	800b216 <rshift+0x2e>
 800b204:	4621      	mov	r1, r4
 800b206:	42b2      	cmp	r2, r6
 800b208:	460b      	mov	r3, r1
 800b20a:	d211      	bcs.n	800b230 <rshift+0x48>
 800b20c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b210:	f841 3b04 	str.w	r3, [r1], #4
 800b214:	e7f7      	b.n	800b206 <rshift+0x1e>
 800b216:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b21a:	4623      	mov	r3, r4
 800b21c:	f1c1 0c20 	rsb	ip, r1, #32
 800b220:	40cd      	lsrs	r5, r1
 800b222:	3204      	adds	r2, #4
 800b224:	42b2      	cmp	r2, r6
 800b226:	4617      	mov	r7, r2
 800b228:	d30d      	bcc.n	800b246 <rshift+0x5e>
 800b22a:	601d      	str	r5, [r3, #0]
 800b22c:	b105      	cbz	r5, 800b230 <rshift+0x48>
 800b22e:	3304      	adds	r3, #4
 800b230:	42a3      	cmp	r3, r4
 800b232:	eba3 0204 	sub.w	r2, r3, r4
 800b236:	bf08      	it	eq
 800b238:	2300      	moveq	r3, #0
 800b23a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b23e:	6102      	str	r2, [r0, #16]
 800b240:	bf08      	it	eq
 800b242:	6143      	streq	r3, [r0, #20]
 800b244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b246:	683f      	ldr	r7, [r7, #0]
 800b248:	fa07 f70c 	lsl.w	r7, r7, ip
 800b24c:	433d      	orrs	r5, r7
 800b24e:	f843 5b04 	str.w	r5, [r3], #4
 800b252:	f852 5b04 	ldr.w	r5, [r2], #4
 800b256:	40cd      	lsrs	r5, r1
 800b258:	e7e4      	b.n	800b224 <rshift+0x3c>
 800b25a:	4623      	mov	r3, r4
 800b25c:	e7e8      	b.n	800b230 <rshift+0x48>

0800b25e <__hexdig_fun>:
 800b25e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b262:	2b09      	cmp	r3, #9
 800b264:	d802      	bhi.n	800b26c <__hexdig_fun+0xe>
 800b266:	3820      	subs	r0, #32
 800b268:	b2c0      	uxtb	r0, r0
 800b26a:	4770      	bx	lr
 800b26c:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b270:	2b05      	cmp	r3, #5
 800b272:	d801      	bhi.n	800b278 <__hexdig_fun+0x1a>
 800b274:	3847      	subs	r0, #71	; 0x47
 800b276:	e7f7      	b.n	800b268 <__hexdig_fun+0xa>
 800b278:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b27c:	2b05      	cmp	r3, #5
 800b27e:	d801      	bhi.n	800b284 <__hexdig_fun+0x26>
 800b280:	3827      	subs	r0, #39	; 0x27
 800b282:	e7f1      	b.n	800b268 <__hexdig_fun+0xa>
 800b284:	2000      	movs	r0, #0
 800b286:	4770      	bx	lr

0800b288 <__gethex>:
 800b288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b28c:	b08b      	sub	sp, #44	; 0x2c
 800b28e:	9002      	str	r0, [sp, #8]
 800b290:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b292:	468a      	mov	sl, r1
 800b294:	4690      	mov	r8, r2
 800b296:	9306      	str	r3, [sp, #24]
 800b298:	f000 fad1 	bl	800b83e <__localeconv_l>
 800b29c:	6803      	ldr	r3, [r0, #0]
 800b29e:	f04f 0b00 	mov.w	fp, #0
 800b2a2:	4618      	mov	r0, r3
 800b2a4:	9303      	str	r3, [sp, #12]
 800b2a6:	f7f4 ff53 	bl	8000150 <strlen>
 800b2aa:	9b03      	ldr	r3, [sp, #12]
 800b2ac:	9001      	str	r0, [sp, #4]
 800b2ae:	4403      	add	r3, r0
 800b2b0:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b2b4:	9307      	str	r3, [sp, #28]
 800b2b6:	f8da 3000 	ldr.w	r3, [sl]
 800b2ba:	3302      	adds	r3, #2
 800b2bc:	461f      	mov	r7, r3
 800b2be:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b2c2:	2830      	cmp	r0, #48	; 0x30
 800b2c4:	d06c      	beq.n	800b3a0 <__gethex+0x118>
 800b2c6:	f7ff ffca 	bl	800b25e <__hexdig_fun>
 800b2ca:	4604      	mov	r4, r0
 800b2cc:	2800      	cmp	r0, #0
 800b2ce:	d16a      	bne.n	800b3a6 <__gethex+0x11e>
 800b2d0:	9a01      	ldr	r2, [sp, #4]
 800b2d2:	9903      	ldr	r1, [sp, #12]
 800b2d4:	4638      	mov	r0, r7
 800b2d6:	f000 ff3b 	bl	800c150 <strncmp>
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	d166      	bne.n	800b3ac <__gethex+0x124>
 800b2de:	9b01      	ldr	r3, [sp, #4]
 800b2e0:	5cf8      	ldrb	r0, [r7, r3]
 800b2e2:	18fe      	adds	r6, r7, r3
 800b2e4:	f7ff ffbb 	bl	800b25e <__hexdig_fun>
 800b2e8:	2800      	cmp	r0, #0
 800b2ea:	d062      	beq.n	800b3b2 <__gethex+0x12a>
 800b2ec:	4633      	mov	r3, r6
 800b2ee:	7818      	ldrb	r0, [r3, #0]
 800b2f0:	461f      	mov	r7, r3
 800b2f2:	2830      	cmp	r0, #48	; 0x30
 800b2f4:	f103 0301 	add.w	r3, r3, #1
 800b2f8:	d0f9      	beq.n	800b2ee <__gethex+0x66>
 800b2fa:	f7ff ffb0 	bl	800b25e <__hexdig_fun>
 800b2fe:	fab0 f580 	clz	r5, r0
 800b302:	4634      	mov	r4, r6
 800b304:	f04f 0b01 	mov.w	fp, #1
 800b308:	096d      	lsrs	r5, r5, #5
 800b30a:	463a      	mov	r2, r7
 800b30c:	4616      	mov	r6, r2
 800b30e:	7830      	ldrb	r0, [r6, #0]
 800b310:	3201      	adds	r2, #1
 800b312:	f7ff ffa4 	bl	800b25e <__hexdig_fun>
 800b316:	2800      	cmp	r0, #0
 800b318:	d1f8      	bne.n	800b30c <__gethex+0x84>
 800b31a:	9a01      	ldr	r2, [sp, #4]
 800b31c:	9903      	ldr	r1, [sp, #12]
 800b31e:	4630      	mov	r0, r6
 800b320:	f000 ff16 	bl	800c150 <strncmp>
 800b324:	b950      	cbnz	r0, 800b33c <__gethex+0xb4>
 800b326:	b954      	cbnz	r4, 800b33e <__gethex+0xb6>
 800b328:	9b01      	ldr	r3, [sp, #4]
 800b32a:	18f4      	adds	r4, r6, r3
 800b32c:	4622      	mov	r2, r4
 800b32e:	4616      	mov	r6, r2
 800b330:	7830      	ldrb	r0, [r6, #0]
 800b332:	3201      	adds	r2, #1
 800b334:	f7ff ff93 	bl	800b25e <__hexdig_fun>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d1f8      	bne.n	800b32e <__gethex+0xa6>
 800b33c:	b10c      	cbz	r4, 800b342 <__gethex+0xba>
 800b33e:	1ba4      	subs	r4, r4, r6
 800b340:	00a4      	lsls	r4, r4, #2
 800b342:	7833      	ldrb	r3, [r6, #0]
 800b344:	2b50      	cmp	r3, #80	; 0x50
 800b346:	d001      	beq.n	800b34c <__gethex+0xc4>
 800b348:	2b70      	cmp	r3, #112	; 0x70
 800b34a:	d140      	bne.n	800b3ce <__gethex+0x146>
 800b34c:	7873      	ldrb	r3, [r6, #1]
 800b34e:	2b2b      	cmp	r3, #43	; 0x2b
 800b350:	d031      	beq.n	800b3b6 <__gethex+0x12e>
 800b352:	2b2d      	cmp	r3, #45	; 0x2d
 800b354:	d033      	beq.n	800b3be <__gethex+0x136>
 800b356:	f04f 0900 	mov.w	r9, #0
 800b35a:	1c71      	adds	r1, r6, #1
 800b35c:	7808      	ldrb	r0, [r1, #0]
 800b35e:	f7ff ff7e 	bl	800b25e <__hexdig_fun>
 800b362:	1e43      	subs	r3, r0, #1
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b18      	cmp	r3, #24
 800b368:	d831      	bhi.n	800b3ce <__gethex+0x146>
 800b36a:	f1a0 0210 	sub.w	r2, r0, #16
 800b36e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b372:	f7ff ff74 	bl	800b25e <__hexdig_fun>
 800b376:	1e43      	subs	r3, r0, #1
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	2b18      	cmp	r3, #24
 800b37c:	d922      	bls.n	800b3c4 <__gethex+0x13c>
 800b37e:	f1b9 0f00 	cmp.w	r9, #0
 800b382:	d000      	beq.n	800b386 <__gethex+0xfe>
 800b384:	4252      	negs	r2, r2
 800b386:	4414      	add	r4, r2
 800b388:	f8ca 1000 	str.w	r1, [sl]
 800b38c:	b30d      	cbz	r5, 800b3d2 <__gethex+0x14a>
 800b38e:	f1bb 0f00 	cmp.w	fp, #0
 800b392:	bf0c      	ite	eq
 800b394:	2706      	moveq	r7, #6
 800b396:	2700      	movne	r7, #0
 800b398:	4638      	mov	r0, r7
 800b39a:	b00b      	add	sp, #44	; 0x2c
 800b39c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3a0:	f10b 0b01 	add.w	fp, fp, #1
 800b3a4:	e78a      	b.n	800b2bc <__gethex+0x34>
 800b3a6:	2500      	movs	r5, #0
 800b3a8:	462c      	mov	r4, r5
 800b3aa:	e7ae      	b.n	800b30a <__gethex+0x82>
 800b3ac:	463e      	mov	r6, r7
 800b3ae:	2501      	movs	r5, #1
 800b3b0:	e7c7      	b.n	800b342 <__gethex+0xba>
 800b3b2:	4604      	mov	r4, r0
 800b3b4:	e7fb      	b.n	800b3ae <__gethex+0x126>
 800b3b6:	f04f 0900 	mov.w	r9, #0
 800b3ba:	1cb1      	adds	r1, r6, #2
 800b3bc:	e7ce      	b.n	800b35c <__gethex+0xd4>
 800b3be:	f04f 0901 	mov.w	r9, #1
 800b3c2:	e7fa      	b.n	800b3ba <__gethex+0x132>
 800b3c4:	230a      	movs	r3, #10
 800b3c6:	fb03 0202 	mla	r2, r3, r2, r0
 800b3ca:	3a10      	subs	r2, #16
 800b3cc:	e7cf      	b.n	800b36e <__gethex+0xe6>
 800b3ce:	4631      	mov	r1, r6
 800b3d0:	e7da      	b.n	800b388 <__gethex+0x100>
 800b3d2:	4629      	mov	r1, r5
 800b3d4:	1bf3      	subs	r3, r6, r7
 800b3d6:	3b01      	subs	r3, #1
 800b3d8:	2b07      	cmp	r3, #7
 800b3da:	dc49      	bgt.n	800b470 <__gethex+0x1e8>
 800b3dc:	9802      	ldr	r0, [sp, #8]
 800b3de:	f000 fa42 	bl	800b866 <_Balloc>
 800b3e2:	f04f 0b00 	mov.w	fp, #0
 800b3e6:	4605      	mov	r5, r0
 800b3e8:	46da      	mov	sl, fp
 800b3ea:	9b01      	ldr	r3, [sp, #4]
 800b3ec:	f100 0914 	add.w	r9, r0, #20
 800b3f0:	f1c3 0301 	rsb	r3, r3, #1
 800b3f4:	f8cd 9010 	str.w	r9, [sp, #16]
 800b3f8:	9308      	str	r3, [sp, #32]
 800b3fa:	42b7      	cmp	r7, r6
 800b3fc:	d33b      	bcc.n	800b476 <__gethex+0x1ee>
 800b3fe:	9804      	ldr	r0, [sp, #16]
 800b400:	f840 ab04 	str.w	sl, [r0], #4
 800b404:	eba0 0009 	sub.w	r0, r0, r9
 800b408:	1080      	asrs	r0, r0, #2
 800b40a:	6128      	str	r0, [r5, #16]
 800b40c:	0147      	lsls	r7, r0, #5
 800b40e:	4650      	mov	r0, sl
 800b410:	f000 faed 	bl	800b9ee <__hi0bits>
 800b414:	f8d8 6000 	ldr.w	r6, [r8]
 800b418:	1a3f      	subs	r7, r7, r0
 800b41a:	42b7      	cmp	r7, r6
 800b41c:	dd64      	ble.n	800b4e8 <__gethex+0x260>
 800b41e:	1bbf      	subs	r7, r7, r6
 800b420:	4639      	mov	r1, r7
 800b422:	4628      	mov	r0, r5
 800b424:	f000 fdf7 	bl	800c016 <__any_on>
 800b428:	4682      	mov	sl, r0
 800b42a:	b178      	cbz	r0, 800b44c <__gethex+0x1c4>
 800b42c:	f04f 0a01 	mov.w	sl, #1
 800b430:	1e7b      	subs	r3, r7, #1
 800b432:	1159      	asrs	r1, r3, #5
 800b434:	f003 021f 	and.w	r2, r3, #31
 800b438:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b43c:	fa0a f202 	lsl.w	r2, sl, r2
 800b440:	420a      	tst	r2, r1
 800b442:	d003      	beq.n	800b44c <__gethex+0x1c4>
 800b444:	4553      	cmp	r3, sl
 800b446:	dc46      	bgt.n	800b4d6 <__gethex+0x24e>
 800b448:	f04f 0a02 	mov.w	sl, #2
 800b44c:	4639      	mov	r1, r7
 800b44e:	4628      	mov	r0, r5
 800b450:	f7ff feca 	bl	800b1e8 <rshift>
 800b454:	443c      	add	r4, r7
 800b456:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b45a:	42a3      	cmp	r3, r4
 800b45c:	da52      	bge.n	800b504 <__gethex+0x27c>
 800b45e:	4629      	mov	r1, r5
 800b460:	9802      	ldr	r0, [sp, #8]
 800b462:	f000 fa34 	bl	800b8ce <_Bfree>
 800b466:	2300      	movs	r3, #0
 800b468:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b46a:	27a3      	movs	r7, #163	; 0xa3
 800b46c:	6013      	str	r3, [r2, #0]
 800b46e:	e793      	b.n	800b398 <__gethex+0x110>
 800b470:	3101      	adds	r1, #1
 800b472:	105b      	asrs	r3, r3, #1
 800b474:	e7b0      	b.n	800b3d8 <__gethex+0x150>
 800b476:	1e73      	subs	r3, r6, #1
 800b478:	9305      	str	r3, [sp, #20]
 800b47a:	9a07      	ldr	r2, [sp, #28]
 800b47c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b480:	4293      	cmp	r3, r2
 800b482:	d018      	beq.n	800b4b6 <__gethex+0x22e>
 800b484:	f1bb 0f20 	cmp.w	fp, #32
 800b488:	d107      	bne.n	800b49a <__gethex+0x212>
 800b48a:	9b04      	ldr	r3, [sp, #16]
 800b48c:	f8c3 a000 	str.w	sl, [r3]
 800b490:	f04f 0a00 	mov.w	sl, #0
 800b494:	46d3      	mov	fp, sl
 800b496:	3304      	adds	r3, #4
 800b498:	9304      	str	r3, [sp, #16]
 800b49a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b49e:	f7ff fede 	bl	800b25e <__hexdig_fun>
 800b4a2:	f000 000f 	and.w	r0, r0, #15
 800b4a6:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4aa:	ea4a 0a00 	orr.w	sl, sl, r0
 800b4ae:	f10b 0b04 	add.w	fp, fp, #4
 800b4b2:	9b05      	ldr	r3, [sp, #20]
 800b4b4:	e00d      	b.n	800b4d2 <__gethex+0x24a>
 800b4b6:	9b05      	ldr	r3, [sp, #20]
 800b4b8:	9a08      	ldr	r2, [sp, #32]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	42bb      	cmp	r3, r7
 800b4be:	d3e1      	bcc.n	800b484 <__gethex+0x1fc>
 800b4c0:	4618      	mov	r0, r3
 800b4c2:	9a01      	ldr	r2, [sp, #4]
 800b4c4:	9903      	ldr	r1, [sp, #12]
 800b4c6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4c8:	f000 fe42 	bl	800c150 <strncmp>
 800b4cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4ce:	2800      	cmp	r0, #0
 800b4d0:	d1d8      	bne.n	800b484 <__gethex+0x1fc>
 800b4d2:	461e      	mov	r6, r3
 800b4d4:	e791      	b.n	800b3fa <__gethex+0x172>
 800b4d6:	1eb9      	subs	r1, r7, #2
 800b4d8:	4628      	mov	r0, r5
 800b4da:	f000 fd9c 	bl	800c016 <__any_on>
 800b4de:	2800      	cmp	r0, #0
 800b4e0:	d0b2      	beq.n	800b448 <__gethex+0x1c0>
 800b4e2:	f04f 0a03 	mov.w	sl, #3
 800b4e6:	e7b1      	b.n	800b44c <__gethex+0x1c4>
 800b4e8:	da09      	bge.n	800b4fe <__gethex+0x276>
 800b4ea:	1bf7      	subs	r7, r6, r7
 800b4ec:	4629      	mov	r1, r5
 800b4ee:	463a      	mov	r2, r7
 800b4f0:	9802      	ldr	r0, [sp, #8]
 800b4f2:	f000 fbb7 	bl	800bc64 <__lshift>
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	1be4      	subs	r4, r4, r7
 800b4fa:	f100 0914 	add.w	r9, r0, #20
 800b4fe:	f04f 0a00 	mov.w	sl, #0
 800b502:	e7a8      	b.n	800b456 <__gethex+0x1ce>
 800b504:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b508:	42a0      	cmp	r0, r4
 800b50a:	dd6b      	ble.n	800b5e4 <__gethex+0x35c>
 800b50c:	1b04      	subs	r4, r0, r4
 800b50e:	42a6      	cmp	r6, r4
 800b510:	dc2e      	bgt.n	800b570 <__gethex+0x2e8>
 800b512:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b516:	2b02      	cmp	r3, #2
 800b518:	d022      	beq.n	800b560 <__gethex+0x2d8>
 800b51a:	2b03      	cmp	r3, #3
 800b51c:	d024      	beq.n	800b568 <__gethex+0x2e0>
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d115      	bne.n	800b54e <__gethex+0x2c6>
 800b522:	42a6      	cmp	r6, r4
 800b524:	d113      	bne.n	800b54e <__gethex+0x2c6>
 800b526:	2e01      	cmp	r6, #1
 800b528:	dc0b      	bgt.n	800b542 <__gethex+0x2ba>
 800b52a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b52e:	9a06      	ldr	r2, [sp, #24]
 800b530:	2762      	movs	r7, #98	; 0x62
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	2301      	movs	r3, #1
 800b536:	612b      	str	r3, [r5, #16]
 800b538:	f8c9 3000 	str.w	r3, [r9]
 800b53c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b53e:	601d      	str	r5, [r3, #0]
 800b540:	e72a      	b.n	800b398 <__gethex+0x110>
 800b542:	1e71      	subs	r1, r6, #1
 800b544:	4628      	mov	r0, r5
 800b546:	f000 fd66 	bl	800c016 <__any_on>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	d1ed      	bne.n	800b52a <__gethex+0x2a2>
 800b54e:	4629      	mov	r1, r5
 800b550:	9802      	ldr	r0, [sp, #8]
 800b552:	f000 f9bc 	bl	800b8ce <_Bfree>
 800b556:	2300      	movs	r3, #0
 800b558:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b55a:	2750      	movs	r7, #80	; 0x50
 800b55c:	6013      	str	r3, [r2, #0]
 800b55e:	e71b      	b.n	800b398 <__gethex+0x110>
 800b560:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b562:	2b00      	cmp	r3, #0
 800b564:	d0e1      	beq.n	800b52a <__gethex+0x2a2>
 800b566:	e7f2      	b.n	800b54e <__gethex+0x2c6>
 800b568:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d1dd      	bne.n	800b52a <__gethex+0x2a2>
 800b56e:	e7ee      	b.n	800b54e <__gethex+0x2c6>
 800b570:	1e67      	subs	r7, r4, #1
 800b572:	f1ba 0f00 	cmp.w	sl, #0
 800b576:	d132      	bne.n	800b5de <__gethex+0x356>
 800b578:	b127      	cbz	r7, 800b584 <__gethex+0x2fc>
 800b57a:	4639      	mov	r1, r7
 800b57c:	4628      	mov	r0, r5
 800b57e:	f000 fd4a 	bl	800c016 <__any_on>
 800b582:	4682      	mov	sl, r0
 800b584:	2301      	movs	r3, #1
 800b586:	117a      	asrs	r2, r7, #5
 800b588:	f007 071f 	and.w	r7, r7, #31
 800b58c:	fa03 f707 	lsl.w	r7, r3, r7
 800b590:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b594:	4621      	mov	r1, r4
 800b596:	421f      	tst	r7, r3
 800b598:	f04f 0702 	mov.w	r7, #2
 800b59c:	4628      	mov	r0, r5
 800b59e:	bf18      	it	ne
 800b5a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5a4:	1b36      	subs	r6, r6, r4
 800b5a6:	f7ff fe1f 	bl	800b1e8 <rshift>
 800b5aa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b5ae:	f1ba 0f00 	cmp.w	sl, #0
 800b5b2:	d048      	beq.n	800b646 <__gethex+0x3be>
 800b5b4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b5b8:	2b02      	cmp	r3, #2
 800b5ba:	d015      	beq.n	800b5e8 <__gethex+0x360>
 800b5bc:	2b03      	cmp	r3, #3
 800b5be:	d017      	beq.n	800b5f0 <__gethex+0x368>
 800b5c0:	2b01      	cmp	r3, #1
 800b5c2:	d109      	bne.n	800b5d8 <__gethex+0x350>
 800b5c4:	f01a 0f02 	tst.w	sl, #2
 800b5c8:	d006      	beq.n	800b5d8 <__gethex+0x350>
 800b5ca:	f8d9 3000 	ldr.w	r3, [r9]
 800b5ce:	ea4a 0a03 	orr.w	sl, sl, r3
 800b5d2:	f01a 0f01 	tst.w	sl, #1
 800b5d6:	d10e      	bne.n	800b5f6 <__gethex+0x36e>
 800b5d8:	f047 0710 	orr.w	r7, r7, #16
 800b5dc:	e033      	b.n	800b646 <__gethex+0x3be>
 800b5de:	f04f 0a01 	mov.w	sl, #1
 800b5e2:	e7cf      	b.n	800b584 <__gethex+0x2fc>
 800b5e4:	2701      	movs	r7, #1
 800b5e6:	e7e2      	b.n	800b5ae <__gethex+0x326>
 800b5e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ea:	f1c3 0301 	rsb	r3, r3, #1
 800b5ee:	9315      	str	r3, [sp, #84]	; 0x54
 800b5f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f0      	beq.n	800b5d8 <__gethex+0x350>
 800b5f6:	f04f 0c00 	mov.w	ip, #0
 800b5fa:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b5fe:	f105 0314 	add.w	r3, r5, #20
 800b602:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b606:	eb03 010a 	add.w	r1, r3, sl
 800b60a:	4618      	mov	r0, r3
 800b60c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b610:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b614:	d01c      	beq.n	800b650 <__gethex+0x3c8>
 800b616:	3201      	adds	r2, #1
 800b618:	6002      	str	r2, [r0, #0]
 800b61a:	2f02      	cmp	r7, #2
 800b61c:	f105 0314 	add.w	r3, r5, #20
 800b620:	d138      	bne.n	800b694 <__gethex+0x40c>
 800b622:	f8d8 2000 	ldr.w	r2, [r8]
 800b626:	3a01      	subs	r2, #1
 800b628:	42b2      	cmp	r2, r6
 800b62a:	d10a      	bne.n	800b642 <__gethex+0x3ba>
 800b62c:	2201      	movs	r2, #1
 800b62e:	1171      	asrs	r1, r6, #5
 800b630:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b634:	f006 061f 	and.w	r6, r6, #31
 800b638:	fa02 f606 	lsl.w	r6, r2, r6
 800b63c:	421e      	tst	r6, r3
 800b63e:	bf18      	it	ne
 800b640:	4617      	movne	r7, r2
 800b642:	f047 0720 	orr.w	r7, r7, #32
 800b646:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b648:	601d      	str	r5, [r3, #0]
 800b64a:	9b06      	ldr	r3, [sp, #24]
 800b64c:	601c      	str	r4, [r3, #0]
 800b64e:	e6a3      	b.n	800b398 <__gethex+0x110>
 800b650:	4299      	cmp	r1, r3
 800b652:	f843 cc04 	str.w	ip, [r3, #-4]
 800b656:	d8d8      	bhi.n	800b60a <__gethex+0x382>
 800b658:	68ab      	ldr	r3, [r5, #8]
 800b65a:	4599      	cmp	r9, r3
 800b65c:	db12      	blt.n	800b684 <__gethex+0x3fc>
 800b65e:	6869      	ldr	r1, [r5, #4]
 800b660:	9802      	ldr	r0, [sp, #8]
 800b662:	3101      	adds	r1, #1
 800b664:	f000 f8ff 	bl	800b866 <_Balloc>
 800b668:	4683      	mov	fp, r0
 800b66a:	692a      	ldr	r2, [r5, #16]
 800b66c:	f105 010c 	add.w	r1, r5, #12
 800b670:	3202      	adds	r2, #2
 800b672:	0092      	lsls	r2, r2, #2
 800b674:	300c      	adds	r0, #12
 800b676:	f7fe fe06 	bl	800a286 <memcpy>
 800b67a:	4629      	mov	r1, r5
 800b67c:	9802      	ldr	r0, [sp, #8]
 800b67e:	f000 f926 	bl	800b8ce <_Bfree>
 800b682:	465d      	mov	r5, fp
 800b684:	692b      	ldr	r3, [r5, #16]
 800b686:	1c5a      	adds	r2, r3, #1
 800b688:	612a      	str	r2, [r5, #16]
 800b68a:	2201      	movs	r2, #1
 800b68c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b690:	615a      	str	r2, [r3, #20]
 800b692:	e7c2      	b.n	800b61a <__gethex+0x392>
 800b694:	692a      	ldr	r2, [r5, #16]
 800b696:	454a      	cmp	r2, r9
 800b698:	dd0b      	ble.n	800b6b2 <__gethex+0x42a>
 800b69a:	2101      	movs	r1, #1
 800b69c:	4628      	mov	r0, r5
 800b69e:	f7ff fda3 	bl	800b1e8 <rshift>
 800b6a2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6a6:	3401      	adds	r4, #1
 800b6a8:	42a3      	cmp	r3, r4
 800b6aa:	f6ff aed8 	blt.w	800b45e <__gethex+0x1d6>
 800b6ae:	2701      	movs	r7, #1
 800b6b0:	e7c7      	b.n	800b642 <__gethex+0x3ba>
 800b6b2:	f016 061f 	ands.w	r6, r6, #31
 800b6b6:	d0fa      	beq.n	800b6ae <__gethex+0x426>
 800b6b8:	449a      	add	sl, r3
 800b6ba:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b6be:	f000 f996 	bl	800b9ee <__hi0bits>
 800b6c2:	f1c6 0620 	rsb	r6, r6, #32
 800b6c6:	42b0      	cmp	r0, r6
 800b6c8:	dbe7      	blt.n	800b69a <__gethex+0x412>
 800b6ca:	e7f0      	b.n	800b6ae <__gethex+0x426>

0800b6cc <L_shift>:
 800b6cc:	f1c2 0208 	rsb	r2, r2, #8
 800b6d0:	0092      	lsls	r2, r2, #2
 800b6d2:	b570      	push	{r4, r5, r6, lr}
 800b6d4:	f1c2 0620 	rsb	r6, r2, #32
 800b6d8:	6843      	ldr	r3, [r0, #4]
 800b6da:	6804      	ldr	r4, [r0, #0]
 800b6dc:	fa03 f506 	lsl.w	r5, r3, r6
 800b6e0:	432c      	orrs	r4, r5
 800b6e2:	40d3      	lsrs	r3, r2
 800b6e4:	6004      	str	r4, [r0, #0]
 800b6e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800b6ea:	4288      	cmp	r0, r1
 800b6ec:	d3f4      	bcc.n	800b6d8 <L_shift+0xc>
 800b6ee:	bd70      	pop	{r4, r5, r6, pc}

0800b6f0 <__match>:
 800b6f0:	b530      	push	{r4, r5, lr}
 800b6f2:	6803      	ldr	r3, [r0, #0]
 800b6f4:	3301      	adds	r3, #1
 800b6f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b6fa:	b914      	cbnz	r4, 800b702 <__match+0x12>
 800b6fc:	6003      	str	r3, [r0, #0]
 800b6fe:	2001      	movs	r0, #1
 800b700:	bd30      	pop	{r4, r5, pc}
 800b702:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b706:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b70a:	2d19      	cmp	r5, #25
 800b70c:	bf98      	it	ls
 800b70e:	3220      	addls	r2, #32
 800b710:	42a2      	cmp	r2, r4
 800b712:	d0f0      	beq.n	800b6f6 <__match+0x6>
 800b714:	2000      	movs	r0, #0
 800b716:	e7f3      	b.n	800b700 <__match+0x10>

0800b718 <__hexnan>:
 800b718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b71c:	2500      	movs	r5, #0
 800b71e:	680b      	ldr	r3, [r1, #0]
 800b720:	4682      	mov	sl, r0
 800b722:	115f      	asrs	r7, r3, #5
 800b724:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b728:	f013 031f 	ands.w	r3, r3, #31
 800b72c:	bf18      	it	ne
 800b72e:	3704      	addne	r7, #4
 800b730:	1f3e      	subs	r6, r7, #4
 800b732:	4690      	mov	r8, r2
 800b734:	46b1      	mov	r9, r6
 800b736:	4634      	mov	r4, r6
 800b738:	46ab      	mov	fp, r5
 800b73a:	b087      	sub	sp, #28
 800b73c:	6801      	ldr	r1, [r0, #0]
 800b73e:	9301      	str	r3, [sp, #4]
 800b740:	f847 5c04 	str.w	r5, [r7, #-4]
 800b744:	9502      	str	r5, [sp, #8]
 800b746:	784a      	ldrb	r2, [r1, #1]
 800b748:	1c4b      	adds	r3, r1, #1
 800b74a:	9303      	str	r3, [sp, #12]
 800b74c:	b342      	cbz	r2, 800b7a0 <__hexnan+0x88>
 800b74e:	4610      	mov	r0, r2
 800b750:	9105      	str	r1, [sp, #20]
 800b752:	9204      	str	r2, [sp, #16]
 800b754:	f7ff fd83 	bl	800b25e <__hexdig_fun>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d143      	bne.n	800b7e4 <__hexnan+0xcc>
 800b75c:	9a04      	ldr	r2, [sp, #16]
 800b75e:	9905      	ldr	r1, [sp, #20]
 800b760:	2a20      	cmp	r2, #32
 800b762:	d818      	bhi.n	800b796 <__hexnan+0x7e>
 800b764:	9b02      	ldr	r3, [sp, #8]
 800b766:	459b      	cmp	fp, r3
 800b768:	dd13      	ble.n	800b792 <__hexnan+0x7a>
 800b76a:	454c      	cmp	r4, r9
 800b76c:	d206      	bcs.n	800b77c <__hexnan+0x64>
 800b76e:	2d07      	cmp	r5, #7
 800b770:	dc04      	bgt.n	800b77c <__hexnan+0x64>
 800b772:	462a      	mov	r2, r5
 800b774:	4649      	mov	r1, r9
 800b776:	4620      	mov	r0, r4
 800b778:	f7ff ffa8 	bl	800b6cc <L_shift>
 800b77c:	4544      	cmp	r4, r8
 800b77e:	d944      	bls.n	800b80a <__hexnan+0xf2>
 800b780:	2300      	movs	r3, #0
 800b782:	f1a4 0904 	sub.w	r9, r4, #4
 800b786:	f844 3c04 	str.w	r3, [r4, #-4]
 800b78a:	461d      	mov	r5, r3
 800b78c:	464c      	mov	r4, r9
 800b78e:	f8cd b008 	str.w	fp, [sp, #8]
 800b792:	9903      	ldr	r1, [sp, #12]
 800b794:	e7d7      	b.n	800b746 <__hexnan+0x2e>
 800b796:	2a29      	cmp	r2, #41	; 0x29
 800b798:	d14a      	bne.n	800b830 <__hexnan+0x118>
 800b79a:	3102      	adds	r1, #2
 800b79c:	f8ca 1000 	str.w	r1, [sl]
 800b7a0:	f1bb 0f00 	cmp.w	fp, #0
 800b7a4:	d044      	beq.n	800b830 <__hexnan+0x118>
 800b7a6:	454c      	cmp	r4, r9
 800b7a8:	d206      	bcs.n	800b7b8 <__hexnan+0xa0>
 800b7aa:	2d07      	cmp	r5, #7
 800b7ac:	dc04      	bgt.n	800b7b8 <__hexnan+0xa0>
 800b7ae:	462a      	mov	r2, r5
 800b7b0:	4649      	mov	r1, r9
 800b7b2:	4620      	mov	r0, r4
 800b7b4:	f7ff ff8a 	bl	800b6cc <L_shift>
 800b7b8:	4544      	cmp	r4, r8
 800b7ba:	d928      	bls.n	800b80e <__hexnan+0xf6>
 800b7bc:	4643      	mov	r3, r8
 800b7be:	f854 2b04 	ldr.w	r2, [r4], #4
 800b7c2:	42a6      	cmp	r6, r4
 800b7c4:	f843 2b04 	str.w	r2, [r3], #4
 800b7c8:	d2f9      	bcs.n	800b7be <__hexnan+0xa6>
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f843 2b04 	str.w	r2, [r3], #4
 800b7d0:	429e      	cmp	r6, r3
 800b7d2:	d2fb      	bcs.n	800b7cc <__hexnan+0xb4>
 800b7d4:	6833      	ldr	r3, [r6, #0]
 800b7d6:	b91b      	cbnz	r3, 800b7e0 <__hexnan+0xc8>
 800b7d8:	4546      	cmp	r6, r8
 800b7da:	d127      	bne.n	800b82c <__hexnan+0x114>
 800b7dc:	2301      	movs	r3, #1
 800b7de:	6033      	str	r3, [r6, #0]
 800b7e0:	2005      	movs	r0, #5
 800b7e2:	e026      	b.n	800b832 <__hexnan+0x11a>
 800b7e4:	3501      	adds	r5, #1
 800b7e6:	2d08      	cmp	r5, #8
 800b7e8:	f10b 0b01 	add.w	fp, fp, #1
 800b7ec:	dd06      	ble.n	800b7fc <__hexnan+0xe4>
 800b7ee:	4544      	cmp	r4, r8
 800b7f0:	d9cf      	bls.n	800b792 <__hexnan+0x7a>
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	2501      	movs	r5, #1
 800b7f6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7fa:	3c04      	subs	r4, #4
 800b7fc:	6822      	ldr	r2, [r4, #0]
 800b7fe:	f000 000f 	and.w	r0, r0, #15
 800b802:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b806:	6020      	str	r0, [r4, #0]
 800b808:	e7c3      	b.n	800b792 <__hexnan+0x7a>
 800b80a:	2508      	movs	r5, #8
 800b80c:	e7c1      	b.n	800b792 <__hexnan+0x7a>
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d0df      	beq.n	800b7d4 <__hexnan+0xbc>
 800b814:	f04f 32ff 	mov.w	r2, #4294967295
 800b818:	f1c3 0320 	rsb	r3, r3, #32
 800b81c:	fa22 f303 	lsr.w	r3, r2, r3
 800b820:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b824:	401a      	ands	r2, r3
 800b826:	f847 2c04 	str.w	r2, [r7, #-4]
 800b82a:	e7d3      	b.n	800b7d4 <__hexnan+0xbc>
 800b82c:	3e04      	subs	r6, #4
 800b82e:	e7d1      	b.n	800b7d4 <__hexnan+0xbc>
 800b830:	2004      	movs	r0, #4
 800b832:	b007      	add	sp, #28
 800b834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b838 <__locale_ctype_ptr_l>:
 800b838:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b83c:	4770      	bx	lr

0800b83e <__localeconv_l>:
 800b83e:	30f0      	adds	r0, #240	; 0xf0
 800b840:	4770      	bx	lr

0800b842 <__ascii_mbtowc>:
 800b842:	b082      	sub	sp, #8
 800b844:	b901      	cbnz	r1, 800b848 <__ascii_mbtowc+0x6>
 800b846:	a901      	add	r1, sp, #4
 800b848:	b142      	cbz	r2, 800b85c <__ascii_mbtowc+0x1a>
 800b84a:	b14b      	cbz	r3, 800b860 <__ascii_mbtowc+0x1e>
 800b84c:	7813      	ldrb	r3, [r2, #0]
 800b84e:	600b      	str	r3, [r1, #0]
 800b850:	7812      	ldrb	r2, [r2, #0]
 800b852:	1c10      	adds	r0, r2, #0
 800b854:	bf18      	it	ne
 800b856:	2001      	movne	r0, #1
 800b858:	b002      	add	sp, #8
 800b85a:	4770      	bx	lr
 800b85c:	4610      	mov	r0, r2
 800b85e:	e7fb      	b.n	800b858 <__ascii_mbtowc+0x16>
 800b860:	f06f 0001 	mvn.w	r0, #1
 800b864:	e7f8      	b.n	800b858 <__ascii_mbtowc+0x16>

0800b866 <_Balloc>:
 800b866:	b570      	push	{r4, r5, r6, lr}
 800b868:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b86a:	4604      	mov	r4, r0
 800b86c:	460e      	mov	r6, r1
 800b86e:	b93d      	cbnz	r5, 800b880 <_Balloc+0x1a>
 800b870:	2010      	movs	r0, #16
 800b872:	f000 fc8d 	bl	800c190 <malloc>
 800b876:	6260      	str	r0, [r4, #36]	; 0x24
 800b878:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b87c:	6005      	str	r5, [r0, #0]
 800b87e:	60c5      	str	r5, [r0, #12]
 800b880:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b882:	68eb      	ldr	r3, [r5, #12]
 800b884:	b183      	cbz	r3, 800b8a8 <_Balloc+0x42>
 800b886:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b88e:	b9b8      	cbnz	r0, 800b8c0 <_Balloc+0x5a>
 800b890:	2101      	movs	r1, #1
 800b892:	fa01 f506 	lsl.w	r5, r1, r6
 800b896:	1d6a      	adds	r2, r5, #5
 800b898:	0092      	lsls	r2, r2, #2
 800b89a:	4620      	mov	r0, r4
 800b89c:	f000 fbdc 	bl	800c058 <_calloc_r>
 800b8a0:	b160      	cbz	r0, 800b8bc <_Balloc+0x56>
 800b8a2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b8a6:	e00e      	b.n	800b8c6 <_Balloc+0x60>
 800b8a8:	2221      	movs	r2, #33	; 0x21
 800b8aa:	2104      	movs	r1, #4
 800b8ac:	4620      	mov	r0, r4
 800b8ae:	f000 fbd3 	bl	800c058 <_calloc_r>
 800b8b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8b4:	60e8      	str	r0, [r5, #12]
 800b8b6:	68db      	ldr	r3, [r3, #12]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d1e4      	bne.n	800b886 <_Balloc+0x20>
 800b8bc:	2000      	movs	r0, #0
 800b8be:	bd70      	pop	{r4, r5, r6, pc}
 800b8c0:	6802      	ldr	r2, [r0, #0]
 800b8c2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b8cc:	e7f7      	b.n	800b8be <_Balloc+0x58>

0800b8ce <_Bfree>:
 800b8ce:	b570      	push	{r4, r5, r6, lr}
 800b8d0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b8d2:	4606      	mov	r6, r0
 800b8d4:	460d      	mov	r5, r1
 800b8d6:	b93c      	cbnz	r4, 800b8e8 <_Bfree+0x1a>
 800b8d8:	2010      	movs	r0, #16
 800b8da:	f000 fc59 	bl	800c190 <malloc>
 800b8de:	6270      	str	r0, [r6, #36]	; 0x24
 800b8e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8e4:	6004      	str	r4, [r0, #0]
 800b8e6:	60c4      	str	r4, [r0, #12]
 800b8e8:	b13d      	cbz	r5, 800b8fa <_Bfree+0x2c>
 800b8ea:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b8ec:	686a      	ldr	r2, [r5, #4]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b8f4:	6029      	str	r1, [r5, #0]
 800b8f6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b8fa:	bd70      	pop	{r4, r5, r6, pc}

0800b8fc <__multadd>:
 800b8fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b900:	461f      	mov	r7, r3
 800b902:	4606      	mov	r6, r0
 800b904:	460c      	mov	r4, r1
 800b906:	2300      	movs	r3, #0
 800b908:	690d      	ldr	r5, [r1, #16]
 800b90a:	f101 0c14 	add.w	ip, r1, #20
 800b90e:	f8dc 0000 	ldr.w	r0, [ip]
 800b912:	3301      	adds	r3, #1
 800b914:	b281      	uxth	r1, r0
 800b916:	fb02 7101 	mla	r1, r2, r1, r7
 800b91a:	0c00      	lsrs	r0, r0, #16
 800b91c:	0c0f      	lsrs	r7, r1, #16
 800b91e:	fb02 7000 	mla	r0, r2, r0, r7
 800b922:	b289      	uxth	r1, r1
 800b924:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b928:	429d      	cmp	r5, r3
 800b92a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b92e:	f84c 1b04 	str.w	r1, [ip], #4
 800b932:	dcec      	bgt.n	800b90e <__multadd+0x12>
 800b934:	b1d7      	cbz	r7, 800b96c <__multadd+0x70>
 800b936:	68a3      	ldr	r3, [r4, #8]
 800b938:	42ab      	cmp	r3, r5
 800b93a:	dc12      	bgt.n	800b962 <__multadd+0x66>
 800b93c:	6861      	ldr	r1, [r4, #4]
 800b93e:	4630      	mov	r0, r6
 800b940:	3101      	adds	r1, #1
 800b942:	f7ff ff90 	bl	800b866 <_Balloc>
 800b946:	4680      	mov	r8, r0
 800b948:	6922      	ldr	r2, [r4, #16]
 800b94a:	f104 010c 	add.w	r1, r4, #12
 800b94e:	3202      	adds	r2, #2
 800b950:	0092      	lsls	r2, r2, #2
 800b952:	300c      	adds	r0, #12
 800b954:	f7fe fc97 	bl	800a286 <memcpy>
 800b958:	4621      	mov	r1, r4
 800b95a:	4630      	mov	r0, r6
 800b95c:	f7ff ffb7 	bl	800b8ce <_Bfree>
 800b960:	4644      	mov	r4, r8
 800b962:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b966:	3501      	adds	r5, #1
 800b968:	615f      	str	r7, [r3, #20]
 800b96a:	6125      	str	r5, [r4, #16]
 800b96c:	4620      	mov	r0, r4
 800b96e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b972 <__s2b>:
 800b972:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b976:	4615      	mov	r5, r2
 800b978:	2209      	movs	r2, #9
 800b97a:	461f      	mov	r7, r3
 800b97c:	3308      	adds	r3, #8
 800b97e:	460c      	mov	r4, r1
 800b980:	fb93 f3f2 	sdiv	r3, r3, r2
 800b984:	4606      	mov	r6, r0
 800b986:	2201      	movs	r2, #1
 800b988:	2100      	movs	r1, #0
 800b98a:	429a      	cmp	r2, r3
 800b98c:	db20      	blt.n	800b9d0 <__s2b+0x5e>
 800b98e:	4630      	mov	r0, r6
 800b990:	f7ff ff69 	bl	800b866 <_Balloc>
 800b994:	9b08      	ldr	r3, [sp, #32]
 800b996:	2d09      	cmp	r5, #9
 800b998:	6143      	str	r3, [r0, #20]
 800b99a:	f04f 0301 	mov.w	r3, #1
 800b99e:	6103      	str	r3, [r0, #16]
 800b9a0:	dd19      	ble.n	800b9d6 <__s2b+0x64>
 800b9a2:	f104 0809 	add.w	r8, r4, #9
 800b9a6:	46c1      	mov	r9, r8
 800b9a8:	442c      	add	r4, r5
 800b9aa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b9ae:	4601      	mov	r1, r0
 800b9b0:	3b30      	subs	r3, #48	; 0x30
 800b9b2:	220a      	movs	r2, #10
 800b9b4:	4630      	mov	r0, r6
 800b9b6:	f7ff ffa1 	bl	800b8fc <__multadd>
 800b9ba:	45a1      	cmp	r9, r4
 800b9bc:	d1f5      	bne.n	800b9aa <__s2b+0x38>
 800b9be:	eb08 0405 	add.w	r4, r8, r5
 800b9c2:	3c08      	subs	r4, #8
 800b9c4:	1b2d      	subs	r5, r5, r4
 800b9c6:	1963      	adds	r3, r4, r5
 800b9c8:	42bb      	cmp	r3, r7
 800b9ca:	db07      	blt.n	800b9dc <__s2b+0x6a>
 800b9cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9d0:	0052      	lsls	r2, r2, #1
 800b9d2:	3101      	adds	r1, #1
 800b9d4:	e7d9      	b.n	800b98a <__s2b+0x18>
 800b9d6:	340a      	adds	r4, #10
 800b9d8:	2509      	movs	r5, #9
 800b9da:	e7f3      	b.n	800b9c4 <__s2b+0x52>
 800b9dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9e0:	4601      	mov	r1, r0
 800b9e2:	3b30      	subs	r3, #48	; 0x30
 800b9e4:	220a      	movs	r2, #10
 800b9e6:	4630      	mov	r0, r6
 800b9e8:	f7ff ff88 	bl	800b8fc <__multadd>
 800b9ec:	e7eb      	b.n	800b9c6 <__s2b+0x54>

0800b9ee <__hi0bits>:
 800b9ee:	0c02      	lsrs	r2, r0, #16
 800b9f0:	0412      	lsls	r2, r2, #16
 800b9f2:	4603      	mov	r3, r0
 800b9f4:	b9b2      	cbnz	r2, 800ba24 <__hi0bits+0x36>
 800b9f6:	0403      	lsls	r3, r0, #16
 800b9f8:	2010      	movs	r0, #16
 800b9fa:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800b9fe:	bf04      	itt	eq
 800ba00:	021b      	lsleq	r3, r3, #8
 800ba02:	3008      	addeq	r0, #8
 800ba04:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba08:	bf04      	itt	eq
 800ba0a:	011b      	lsleq	r3, r3, #4
 800ba0c:	3004      	addeq	r0, #4
 800ba0e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba12:	bf04      	itt	eq
 800ba14:	009b      	lsleq	r3, r3, #2
 800ba16:	3002      	addeq	r0, #2
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	db06      	blt.n	800ba2a <__hi0bits+0x3c>
 800ba1c:	005b      	lsls	r3, r3, #1
 800ba1e:	d503      	bpl.n	800ba28 <__hi0bits+0x3a>
 800ba20:	3001      	adds	r0, #1
 800ba22:	4770      	bx	lr
 800ba24:	2000      	movs	r0, #0
 800ba26:	e7e8      	b.n	800b9fa <__hi0bits+0xc>
 800ba28:	2020      	movs	r0, #32
 800ba2a:	4770      	bx	lr

0800ba2c <__lo0bits>:
 800ba2c:	6803      	ldr	r3, [r0, #0]
 800ba2e:	4601      	mov	r1, r0
 800ba30:	f013 0207 	ands.w	r2, r3, #7
 800ba34:	d00b      	beq.n	800ba4e <__lo0bits+0x22>
 800ba36:	07da      	lsls	r2, r3, #31
 800ba38:	d423      	bmi.n	800ba82 <__lo0bits+0x56>
 800ba3a:	0798      	lsls	r0, r3, #30
 800ba3c:	bf49      	itett	mi
 800ba3e:	085b      	lsrmi	r3, r3, #1
 800ba40:	089b      	lsrpl	r3, r3, #2
 800ba42:	2001      	movmi	r0, #1
 800ba44:	600b      	strmi	r3, [r1, #0]
 800ba46:	bf5c      	itt	pl
 800ba48:	600b      	strpl	r3, [r1, #0]
 800ba4a:	2002      	movpl	r0, #2
 800ba4c:	4770      	bx	lr
 800ba4e:	b298      	uxth	r0, r3
 800ba50:	b9a8      	cbnz	r0, 800ba7e <__lo0bits+0x52>
 800ba52:	2010      	movs	r0, #16
 800ba54:	0c1b      	lsrs	r3, r3, #16
 800ba56:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ba5a:	bf04      	itt	eq
 800ba5c:	0a1b      	lsreq	r3, r3, #8
 800ba5e:	3008      	addeq	r0, #8
 800ba60:	071a      	lsls	r2, r3, #28
 800ba62:	bf04      	itt	eq
 800ba64:	091b      	lsreq	r3, r3, #4
 800ba66:	3004      	addeq	r0, #4
 800ba68:	079a      	lsls	r2, r3, #30
 800ba6a:	bf04      	itt	eq
 800ba6c:	089b      	lsreq	r3, r3, #2
 800ba6e:	3002      	addeq	r0, #2
 800ba70:	07da      	lsls	r2, r3, #31
 800ba72:	d402      	bmi.n	800ba7a <__lo0bits+0x4e>
 800ba74:	085b      	lsrs	r3, r3, #1
 800ba76:	d006      	beq.n	800ba86 <__lo0bits+0x5a>
 800ba78:	3001      	adds	r0, #1
 800ba7a:	600b      	str	r3, [r1, #0]
 800ba7c:	4770      	bx	lr
 800ba7e:	4610      	mov	r0, r2
 800ba80:	e7e9      	b.n	800ba56 <__lo0bits+0x2a>
 800ba82:	2000      	movs	r0, #0
 800ba84:	4770      	bx	lr
 800ba86:	2020      	movs	r0, #32
 800ba88:	4770      	bx	lr

0800ba8a <__i2b>:
 800ba8a:	b510      	push	{r4, lr}
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	2101      	movs	r1, #1
 800ba90:	f7ff fee9 	bl	800b866 <_Balloc>
 800ba94:	2201      	movs	r2, #1
 800ba96:	6144      	str	r4, [r0, #20]
 800ba98:	6102      	str	r2, [r0, #16]
 800ba9a:	bd10      	pop	{r4, pc}

0800ba9c <__multiply>:
 800ba9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baa0:	4614      	mov	r4, r2
 800baa2:	690a      	ldr	r2, [r1, #16]
 800baa4:	6923      	ldr	r3, [r4, #16]
 800baa6:	4688      	mov	r8, r1
 800baa8:	429a      	cmp	r2, r3
 800baaa:	bfbe      	ittt	lt
 800baac:	460b      	movlt	r3, r1
 800baae:	46a0      	movlt	r8, r4
 800bab0:	461c      	movlt	r4, r3
 800bab2:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bab6:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800baba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800babe:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bac2:	eb07 0609 	add.w	r6, r7, r9
 800bac6:	42b3      	cmp	r3, r6
 800bac8:	bfb8      	it	lt
 800baca:	3101      	addlt	r1, #1
 800bacc:	f7ff fecb 	bl	800b866 <_Balloc>
 800bad0:	f100 0514 	add.w	r5, r0, #20
 800bad4:	462b      	mov	r3, r5
 800bad6:	2200      	movs	r2, #0
 800bad8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800badc:	4573      	cmp	r3, lr
 800bade:	d316      	bcc.n	800bb0e <__multiply+0x72>
 800bae0:	f104 0214 	add.w	r2, r4, #20
 800bae4:	f108 0114 	add.w	r1, r8, #20
 800bae8:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800baec:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800baf0:	9300      	str	r3, [sp, #0]
 800baf2:	9b00      	ldr	r3, [sp, #0]
 800baf4:	9201      	str	r2, [sp, #4]
 800baf6:	4293      	cmp	r3, r2
 800baf8:	d80c      	bhi.n	800bb14 <__multiply+0x78>
 800bafa:	2e00      	cmp	r6, #0
 800bafc:	dd03      	ble.n	800bb06 <__multiply+0x6a>
 800bafe:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d05d      	beq.n	800bbc2 <__multiply+0x126>
 800bb06:	6106      	str	r6, [r0, #16]
 800bb08:	b003      	add	sp, #12
 800bb0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb0e:	f843 2b04 	str.w	r2, [r3], #4
 800bb12:	e7e3      	b.n	800badc <__multiply+0x40>
 800bb14:	f8b2 b000 	ldrh.w	fp, [r2]
 800bb18:	f1bb 0f00 	cmp.w	fp, #0
 800bb1c:	d023      	beq.n	800bb66 <__multiply+0xca>
 800bb1e:	4689      	mov	r9, r1
 800bb20:	46ac      	mov	ip, r5
 800bb22:	f04f 0800 	mov.w	r8, #0
 800bb26:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb2a:	f8dc a000 	ldr.w	sl, [ip]
 800bb2e:	b2a3      	uxth	r3, r4
 800bb30:	fa1f fa8a 	uxth.w	sl, sl
 800bb34:	fb0b a303 	mla	r3, fp, r3, sl
 800bb38:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb3c:	f8dc 4000 	ldr.w	r4, [ip]
 800bb40:	4443      	add	r3, r8
 800bb42:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb46:	fb0b 840a 	mla	r4, fp, sl, r8
 800bb4a:	46e2      	mov	sl, ip
 800bb4c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bb50:	b29b      	uxth	r3, r3
 800bb52:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb56:	454f      	cmp	r7, r9
 800bb58:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb5c:	f84a 3b04 	str.w	r3, [sl], #4
 800bb60:	d82b      	bhi.n	800bbba <__multiply+0x11e>
 800bb62:	f8cc 8004 	str.w	r8, [ip, #4]
 800bb66:	9b01      	ldr	r3, [sp, #4]
 800bb68:	3204      	adds	r2, #4
 800bb6a:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bb6e:	f1ba 0f00 	cmp.w	sl, #0
 800bb72:	d020      	beq.n	800bbb6 <__multiply+0x11a>
 800bb74:	4689      	mov	r9, r1
 800bb76:	46a8      	mov	r8, r5
 800bb78:	f04f 0b00 	mov.w	fp, #0
 800bb7c:	682b      	ldr	r3, [r5, #0]
 800bb7e:	f8b9 c000 	ldrh.w	ip, [r9]
 800bb82:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bb86:	b29b      	uxth	r3, r3
 800bb88:	fb0a 440c 	mla	r4, sl, ip, r4
 800bb8c:	46c4      	mov	ip, r8
 800bb8e:	445c      	add	r4, fp
 800bb90:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bb94:	f84c 3b04 	str.w	r3, [ip], #4
 800bb98:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb9c:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bba0:	0c1b      	lsrs	r3, r3, #16
 800bba2:	fb0a b303 	mla	r3, sl, r3, fp
 800bba6:	454f      	cmp	r7, r9
 800bba8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bbac:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bbb0:	d805      	bhi.n	800bbbe <__multiply+0x122>
 800bbb2:	f8c8 3004 	str.w	r3, [r8, #4]
 800bbb6:	3504      	adds	r5, #4
 800bbb8:	e79b      	b.n	800baf2 <__multiply+0x56>
 800bbba:	46d4      	mov	ip, sl
 800bbbc:	e7b3      	b.n	800bb26 <__multiply+0x8a>
 800bbbe:	46e0      	mov	r8, ip
 800bbc0:	e7dd      	b.n	800bb7e <__multiply+0xe2>
 800bbc2:	3e01      	subs	r6, #1
 800bbc4:	e799      	b.n	800bafa <__multiply+0x5e>
	...

0800bbc8 <__pow5mult>:
 800bbc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bbcc:	4615      	mov	r5, r2
 800bbce:	f012 0203 	ands.w	r2, r2, #3
 800bbd2:	4606      	mov	r6, r0
 800bbd4:	460f      	mov	r7, r1
 800bbd6:	d007      	beq.n	800bbe8 <__pow5mult+0x20>
 800bbd8:	4c21      	ldr	r4, [pc, #132]	; (800bc60 <__pow5mult+0x98>)
 800bbda:	3a01      	subs	r2, #1
 800bbdc:	2300      	movs	r3, #0
 800bbde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bbe2:	f7ff fe8b 	bl	800b8fc <__multadd>
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	10ad      	asrs	r5, r5, #2
 800bbea:	d035      	beq.n	800bc58 <__pow5mult+0x90>
 800bbec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bbee:	b93c      	cbnz	r4, 800bc00 <__pow5mult+0x38>
 800bbf0:	2010      	movs	r0, #16
 800bbf2:	f000 facd 	bl	800c190 <malloc>
 800bbf6:	6270      	str	r0, [r6, #36]	; 0x24
 800bbf8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bbfc:	6004      	str	r4, [r0, #0]
 800bbfe:	60c4      	str	r4, [r0, #12]
 800bc00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc08:	b94c      	cbnz	r4, 800bc1e <__pow5mult+0x56>
 800bc0a:	f240 2171 	movw	r1, #625	; 0x271
 800bc0e:	4630      	mov	r0, r6
 800bc10:	f7ff ff3b 	bl	800ba8a <__i2b>
 800bc14:	2300      	movs	r3, #0
 800bc16:	4604      	mov	r4, r0
 800bc18:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc1c:	6003      	str	r3, [r0, #0]
 800bc1e:	f04f 0800 	mov.w	r8, #0
 800bc22:	07eb      	lsls	r3, r5, #31
 800bc24:	d50a      	bpl.n	800bc3c <__pow5mult+0x74>
 800bc26:	4639      	mov	r1, r7
 800bc28:	4622      	mov	r2, r4
 800bc2a:	4630      	mov	r0, r6
 800bc2c:	f7ff ff36 	bl	800ba9c <__multiply>
 800bc30:	4681      	mov	r9, r0
 800bc32:	4639      	mov	r1, r7
 800bc34:	4630      	mov	r0, r6
 800bc36:	f7ff fe4a 	bl	800b8ce <_Bfree>
 800bc3a:	464f      	mov	r7, r9
 800bc3c:	106d      	asrs	r5, r5, #1
 800bc3e:	d00b      	beq.n	800bc58 <__pow5mult+0x90>
 800bc40:	6820      	ldr	r0, [r4, #0]
 800bc42:	b938      	cbnz	r0, 800bc54 <__pow5mult+0x8c>
 800bc44:	4622      	mov	r2, r4
 800bc46:	4621      	mov	r1, r4
 800bc48:	4630      	mov	r0, r6
 800bc4a:	f7ff ff27 	bl	800ba9c <__multiply>
 800bc4e:	6020      	str	r0, [r4, #0]
 800bc50:	f8c0 8000 	str.w	r8, [r0]
 800bc54:	4604      	mov	r4, r0
 800bc56:	e7e4      	b.n	800bc22 <__pow5mult+0x5a>
 800bc58:	4638      	mov	r0, r7
 800bc5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc5e:	bf00      	nop
 800bc60:	0800dd40 	.word	0x0800dd40

0800bc64 <__lshift>:
 800bc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc68:	460c      	mov	r4, r1
 800bc6a:	4607      	mov	r7, r0
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	6923      	ldr	r3, [r4, #16]
 800bc70:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bc74:	eb0a 0903 	add.w	r9, sl, r3
 800bc78:	6849      	ldr	r1, [r1, #4]
 800bc7a:	68a3      	ldr	r3, [r4, #8]
 800bc7c:	f109 0501 	add.w	r5, r9, #1
 800bc80:	42ab      	cmp	r3, r5
 800bc82:	db32      	blt.n	800bcea <__lshift+0x86>
 800bc84:	4638      	mov	r0, r7
 800bc86:	f7ff fdee 	bl	800b866 <_Balloc>
 800bc8a:	2300      	movs	r3, #0
 800bc8c:	4680      	mov	r8, r0
 800bc8e:	461a      	mov	r2, r3
 800bc90:	f100 0114 	add.w	r1, r0, #20
 800bc94:	4553      	cmp	r3, sl
 800bc96:	db2b      	blt.n	800bcf0 <__lshift+0x8c>
 800bc98:	6920      	ldr	r0, [r4, #16]
 800bc9a:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bc9e:	f104 0314 	add.w	r3, r4, #20
 800bca2:	f016 021f 	ands.w	r2, r6, #31
 800bca6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcaa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcae:	d025      	beq.n	800bcfc <__lshift+0x98>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	f1c2 0e20 	rsb	lr, r2, #32
 800bcb6:	468a      	mov	sl, r1
 800bcb8:	681e      	ldr	r6, [r3, #0]
 800bcba:	4096      	lsls	r6, r2
 800bcbc:	4330      	orrs	r0, r6
 800bcbe:	f84a 0b04 	str.w	r0, [sl], #4
 800bcc2:	f853 0b04 	ldr.w	r0, [r3], #4
 800bcc6:	459c      	cmp	ip, r3
 800bcc8:	fa20 f00e 	lsr.w	r0, r0, lr
 800bccc:	d814      	bhi.n	800bcf8 <__lshift+0x94>
 800bcce:	6048      	str	r0, [r1, #4]
 800bcd0:	b108      	cbz	r0, 800bcd6 <__lshift+0x72>
 800bcd2:	f109 0502 	add.w	r5, r9, #2
 800bcd6:	3d01      	subs	r5, #1
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f8c8 5010 	str.w	r5, [r8, #16]
 800bcde:	4621      	mov	r1, r4
 800bce0:	f7ff fdf5 	bl	800b8ce <_Bfree>
 800bce4:	4640      	mov	r0, r8
 800bce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcea:	3101      	adds	r1, #1
 800bcec:	005b      	lsls	r3, r3, #1
 800bcee:	e7c7      	b.n	800bc80 <__lshift+0x1c>
 800bcf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bcf4:	3301      	adds	r3, #1
 800bcf6:	e7cd      	b.n	800bc94 <__lshift+0x30>
 800bcf8:	4651      	mov	r1, sl
 800bcfa:	e7dc      	b.n	800bcb6 <__lshift+0x52>
 800bcfc:	3904      	subs	r1, #4
 800bcfe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd02:	459c      	cmp	ip, r3
 800bd04:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd08:	d8f9      	bhi.n	800bcfe <__lshift+0x9a>
 800bd0a:	e7e4      	b.n	800bcd6 <__lshift+0x72>

0800bd0c <__mcmp>:
 800bd0c:	6903      	ldr	r3, [r0, #16]
 800bd0e:	690a      	ldr	r2, [r1, #16]
 800bd10:	b530      	push	{r4, r5, lr}
 800bd12:	1a9b      	subs	r3, r3, r2
 800bd14:	d10c      	bne.n	800bd30 <__mcmp+0x24>
 800bd16:	0092      	lsls	r2, r2, #2
 800bd18:	3014      	adds	r0, #20
 800bd1a:	3114      	adds	r1, #20
 800bd1c:	1884      	adds	r4, r0, r2
 800bd1e:	4411      	add	r1, r2
 800bd20:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd24:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd28:	4295      	cmp	r5, r2
 800bd2a:	d003      	beq.n	800bd34 <__mcmp+0x28>
 800bd2c:	d305      	bcc.n	800bd3a <__mcmp+0x2e>
 800bd2e:	2301      	movs	r3, #1
 800bd30:	4618      	mov	r0, r3
 800bd32:	bd30      	pop	{r4, r5, pc}
 800bd34:	42a0      	cmp	r0, r4
 800bd36:	d3f3      	bcc.n	800bd20 <__mcmp+0x14>
 800bd38:	e7fa      	b.n	800bd30 <__mcmp+0x24>
 800bd3a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd3e:	e7f7      	b.n	800bd30 <__mcmp+0x24>

0800bd40 <__mdiff>:
 800bd40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd44:	460d      	mov	r5, r1
 800bd46:	4607      	mov	r7, r0
 800bd48:	4611      	mov	r1, r2
 800bd4a:	4628      	mov	r0, r5
 800bd4c:	4614      	mov	r4, r2
 800bd4e:	f7ff ffdd 	bl	800bd0c <__mcmp>
 800bd52:	1e06      	subs	r6, r0, #0
 800bd54:	d108      	bne.n	800bd68 <__mdiff+0x28>
 800bd56:	4631      	mov	r1, r6
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f7ff fd84 	bl	800b866 <_Balloc>
 800bd5e:	2301      	movs	r3, #1
 800bd60:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bd64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd68:	bfa4      	itt	ge
 800bd6a:	4623      	movge	r3, r4
 800bd6c:	462c      	movge	r4, r5
 800bd6e:	4638      	mov	r0, r7
 800bd70:	6861      	ldr	r1, [r4, #4]
 800bd72:	bfa6      	itte	ge
 800bd74:	461d      	movge	r5, r3
 800bd76:	2600      	movge	r6, #0
 800bd78:	2601      	movlt	r6, #1
 800bd7a:	f7ff fd74 	bl	800b866 <_Balloc>
 800bd7e:	f04f 0e00 	mov.w	lr, #0
 800bd82:	60c6      	str	r6, [r0, #12]
 800bd84:	692b      	ldr	r3, [r5, #16]
 800bd86:	6926      	ldr	r6, [r4, #16]
 800bd88:	f104 0214 	add.w	r2, r4, #20
 800bd8c:	f105 0914 	add.w	r9, r5, #20
 800bd90:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bd94:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bd98:	f100 0114 	add.w	r1, r0, #20
 800bd9c:	f852 ab04 	ldr.w	sl, [r2], #4
 800bda0:	f859 5b04 	ldr.w	r5, [r9], #4
 800bda4:	fa1f f38a 	uxth.w	r3, sl
 800bda8:	4473      	add	r3, lr
 800bdaa:	b2ac      	uxth	r4, r5
 800bdac:	1b1b      	subs	r3, r3, r4
 800bdae:	0c2c      	lsrs	r4, r5, #16
 800bdb0:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800bdb4:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800bdb8:	b29b      	uxth	r3, r3
 800bdba:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800bdbe:	45c8      	cmp	r8, r9
 800bdc0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800bdc4:	4694      	mov	ip, r2
 800bdc6:	f841 4b04 	str.w	r4, [r1], #4
 800bdca:	d8e7      	bhi.n	800bd9c <__mdiff+0x5c>
 800bdcc:	45bc      	cmp	ip, r7
 800bdce:	d304      	bcc.n	800bdda <__mdiff+0x9a>
 800bdd0:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800bdd4:	b183      	cbz	r3, 800bdf8 <__mdiff+0xb8>
 800bdd6:	6106      	str	r6, [r0, #16]
 800bdd8:	e7c4      	b.n	800bd64 <__mdiff+0x24>
 800bdda:	f85c 4b04 	ldr.w	r4, [ip], #4
 800bdde:	b2a2      	uxth	r2, r4
 800bde0:	4472      	add	r2, lr
 800bde2:	1413      	asrs	r3, r2, #16
 800bde4:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bde8:	b292      	uxth	r2, r2
 800bdea:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bdee:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800bdf2:	f841 2b04 	str.w	r2, [r1], #4
 800bdf6:	e7e9      	b.n	800bdcc <__mdiff+0x8c>
 800bdf8:	3e01      	subs	r6, #1
 800bdfa:	e7e9      	b.n	800bdd0 <__mdiff+0x90>

0800bdfc <__ulp>:
 800bdfc:	4b10      	ldr	r3, [pc, #64]	; (800be40 <__ulp+0x44>)
 800bdfe:	400b      	ands	r3, r1
 800be00:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be04:	2b00      	cmp	r3, #0
 800be06:	dd02      	ble.n	800be0e <__ulp+0x12>
 800be08:	2000      	movs	r0, #0
 800be0a:	4619      	mov	r1, r3
 800be0c:	4770      	bx	lr
 800be0e:	425b      	negs	r3, r3
 800be10:	151b      	asrs	r3, r3, #20
 800be12:	2b13      	cmp	r3, #19
 800be14:	f04f 0000 	mov.w	r0, #0
 800be18:	f04f 0100 	mov.w	r1, #0
 800be1c:	dc04      	bgt.n	800be28 <__ulp+0x2c>
 800be1e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800be22:	fa42 f103 	asr.w	r1, r2, r3
 800be26:	4770      	bx	lr
 800be28:	2201      	movs	r2, #1
 800be2a:	3b14      	subs	r3, #20
 800be2c:	2b1e      	cmp	r3, #30
 800be2e:	bfce      	itee	gt
 800be30:	4613      	movgt	r3, r2
 800be32:	f1c3 031f 	rsble	r3, r3, #31
 800be36:	fa02 f303 	lslle.w	r3, r2, r3
 800be3a:	4618      	mov	r0, r3
 800be3c:	4770      	bx	lr
 800be3e:	bf00      	nop
 800be40:	7ff00000 	.word	0x7ff00000

0800be44 <__b2d>:
 800be44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be48:	6907      	ldr	r7, [r0, #16]
 800be4a:	f100 0914 	add.w	r9, r0, #20
 800be4e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800be52:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800be56:	f1a7 0804 	sub.w	r8, r7, #4
 800be5a:	4630      	mov	r0, r6
 800be5c:	f7ff fdc7 	bl	800b9ee <__hi0bits>
 800be60:	f1c0 0320 	rsb	r3, r0, #32
 800be64:	280a      	cmp	r0, #10
 800be66:	600b      	str	r3, [r1, #0]
 800be68:	491e      	ldr	r1, [pc, #120]	; (800bee4 <__b2d+0xa0>)
 800be6a:	dc17      	bgt.n	800be9c <__b2d+0x58>
 800be6c:	45c1      	cmp	r9, r8
 800be6e:	bf28      	it	cs
 800be70:	2200      	movcs	r2, #0
 800be72:	f1c0 0c0b 	rsb	ip, r0, #11
 800be76:	fa26 f30c 	lsr.w	r3, r6, ip
 800be7a:	bf38      	it	cc
 800be7c:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800be80:	ea43 0501 	orr.w	r5, r3, r1
 800be84:	f100 0315 	add.w	r3, r0, #21
 800be88:	fa06 f303 	lsl.w	r3, r6, r3
 800be8c:	fa22 f20c 	lsr.w	r2, r2, ip
 800be90:	ea43 0402 	orr.w	r4, r3, r2
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be9c:	45c1      	cmp	r9, r8
 800be9e:	bf3a      	itte	cc
 800bea0:	f1a7 0808 	subcc.w	r8, r7, #8
 800bea4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bea8:	2200      	movcs	r2, #0
 800beaa:	f1b0 030b 	subs.w	r3, r0, #11
 800beae:	d015      	beq.n	800bedc <__b2d+0x98>
 800beb0:	409e      	lsls	r6, r3
 800beb2:	f1c3 0720 	rsb	r7, r3, #32
 800beb6:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800beba:	fa22 f107 	lsr.w	r1, r2, r7
 800bebe:	45c8      	cmp	r8, r9
 800bec0:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800bec4:	ea46 0501 	orr.w	r5, r6, r1
 800bec8:	bf94      	ite	ls
 800beca:	2100      	movls	r1, #0
 800becc:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bed0:	fa02 f003 	lsl.w	r0, r2, r3
 800bed4:	40f9      	lsrs	r1, r7
 800bed6:	ea40 0401 	orr.w	r4, r0, r1
 800beda:	e7db      	b.n	800be94 <__b2d+0x50>
 800bedc:	ea46 0501 	orr.w	r5, r6, r1
 800bee0:	4614      	mov	r4, r2
 800bee2:	e7d7      	b.n	800be94 <__b2d+0x50>
 800bee4:	3ff00000 	.word	0x3ff00000

0800bee8 <__d2b>:
 800bee8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800beec:	461c      	mov	r4, r3
 800beee:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800bef2:	2101      	movs	r1, #1
 800bef4:	4690      	mov	r8, r2
 800bef6:	f7ff fcb6 	bl	800b866 <_Balloc>
 800befa:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800befe:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bf02:	4607      	mov	r7, r0
 800bf04:	bb34      	cbnz	r4, 800bf54 <__d2b+0x6c>
 800bf06:	9201      	str	r2, [sp, #4]
 800bf08:	f1b8 0200 	subs.w	r2, r8, #0
 800bf0c:	d027      	beq.n	800bf5e <__d2b+0x76>
 800bf0e:	a802      	add	r0, sp, #8
 800bf10:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bf14:	f7ff fd8a 	bl	800ba2c <__lo0bits>
 800bf18:	9900      	ldr	r1, [sp, #0]
 800bf1a:	b1f0      	cbz	r0, 800bf5a <__d2b+0x72>
 800bf1c:	9a01      	ldr	r2, [sp, #4]
 800bf1e:	f1c0 0320 	rsb	r3, r0, #32
 800bf22:	fa02 f303 	lsl.w	r3, r2, r3
 800bf26:	430b      	orrs	r3, r1
 800bf28:	40c2      	lsrs	r2, r0
 800bf2a:	617b      	str	r3, [r7, #20]
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	9b01      	ldr	r3, [sp, #4]
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	bf14      	ite	ne
 800bf34:	2102      	movne	r1, #2
 800bf36:	2101      	moveq	r1, #1
 800bf38:	61bb      	str	r3, [r7, #24]
 800bf3a:	6139      	str	r1, [r7, #16]
 800bf3c:	b1c4      	cbz	r4, 800bf70 <__d2b+0x88>
 800bf3e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf42:	4404      	add	r4, r0
 800bf44:	6034      	str	r4, [r6, #0]
 800bf46:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf4a:	6028      	str	r0, [r5, #0]
 800bf4c:	4638      	mov	r0, r7
 800bf4e:	b002      	add	sp, #8
 800bf50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf54:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bf58:	e7d5      	b.n	800bf06 <__d2b+0x1e>
 800bf5a:	6179      	str	r1, [r7, #20]
 800bf5c:	e7e7      	b.n	800bf2e <__d2b+0x46>
 800bf5e:	a801      	add	r0, sp, #4
 800bf60:	f7ff fd64 	bl	800ba2c <__lo0bits>
 800bf64:	2101      	movs	r1, #1
 800bf66:	9b01      	ldr	r3, [sp, #4]
 800bf68:	6139      	str	r1, [r7, #16]
 800bf6a:	617b      	str	r3, [r7, #20]
 800bf6c:	3020      	adds	r0, #32
 800bf6e:	e7e5      	b.n	800bf3c <__d2b+0x54>
 800bf70:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bf74:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bf78:	6030      	str	r0, [r6, #0]
 800bf7a:	6918      	ldr	r0, [r3, #16]
 800bf7c:	f7ff fd37 	bl	800b9ee <__hi0bits>
 800bf80:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bf84:	e7e1      	b.n	800bf4a <__d2b+0x62>

0800bf86 <__ratio>:
 800bf86:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf8a:	4688      	mov	r8, r1
 800bf8c:	4669      	mov	r1, sp
 800bf8e:	4681      	mov	r9, r0
 800bf90:	f7ff ff58 	bl	800be44 <__b2d>
 800bf94:	468b      	mov	fp, r1
 800bf96:	4606      	mov	r6, r0
 800bf98:	460f      	mov	r7, r1
 800bf9a:	4640      	mov	r0, r8
 800bf9c:	a901      	add	r1, sp, #4
 800bf9e:	f7ff ff51 	bl	800be44 <__b2d>
 800bfa2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bfa6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bfaa:	460d      	mov	r5, r1
 800bfac:	eba3 0c02 	sub.w	ip, r3, r2
 800bfb0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bfb4:	1a9b      	subs	r3, r3, r2
 800bfb6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	bfd5      	itete	le
 800bfbe:	460a      	movle	r2, r1
 800bfc0:	463a      	movgt	r2, r7
 800bfc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bfc6:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800bfca:	bfd8      	it	le
 800bfcc:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800bfd0:	462b      	mov	r3, r5
 800bfd2:	4602      	mov	r2, r0
 800bfd4:	4659      	mov	r1, fp
 800bfd6:	4630      	mov	r0, r6
 800bfd8:	f7f4 fba8 	bl	800072c <__aeabi_ddiv>
 800bfdc:	b003      	add	sp, #12
 800bfde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bfe2 <__copybits>:
 800bfe2:	3901      	subs	r1, #1
 800bfe4:	b510      	push	{r4, lr}
 800bfe6:	1149      	asrs	r1, r1, #5
 800bfe8:	6914      	ldr	r4, [r2, #16]
 800bfea:	3101      	adds	r1, #1
 800bfec:	f102 0314 	add.w	r3, r2, #20
 800bff0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bff4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	4602      	mov	r2, r0
 800bffc:	d303      	bcc.n	800c006 <__copybits+0x24>
 800bffe:	2300      	movs	r3, #0
 800c000:	428a      	cmp	r2, r1
 800c002:	d305      	bcc.n	800c010 <__copybits+0x2e>
 800c004:	bd10      	pop	{r4, pc}
 800c006:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00a:	f840 2b04 	str.w	r2, [r0], #4
 800c00e:	e7f3      	b.n	800bff8 <__copybits+0x16>
 800c010:	f842 3b04 	str.w	r3, [r2], #4
 800c014:	e7f4      	b.n	800c000 <__copybits+0x1e>

0800c016 <__any_on>:
 800c016:	f100 0214 	add.w	r2, r0, #20
 800c01a:	6900      	ldr	r0, [r0, #16]
 800c01c:	114b      	asrs	r3, r1, #5
 800c01e:	4298      	cmp	r0, r3
 800c020:	b510      	push	{r4, lr}
 800c022:	db11      	blt.n	800c048 <__any_on+0x32>
 800c024:	dd0a      	ble.n	800c03c <__any_on+0x26>
 800c026:	f011 011f 	ands.w	r1, r1, #31
 800c02a:	d007      	beq.n	800c03c <__any_on+0x26>
 800c02c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c030:	fa24 f001 	lsr.w	r0, r4, r1
 800c034:	fa00 f101 	lsl.w	r1, r0, r1
 800c038:	428c      	cmp	r4, r1
 800c03a:	d10b      	bne.n	800c054 <__any_on+0x3e>
 800c03c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c040:	4293      	cmp	r3, r2
 800c042:	d803      	bhi.n	800c04c <__any_on+0x36>
 800c044:	2000      	movs	r0, #0
 800c046:	bd10      	pop	{r4, pc}
 800c048:	4603      	mov	r3, r0
 800c04a:	e7f7      	b.n	800c03c <__any_on+0x26>
 800c04c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c050:	2900      	cmp	r1, #0
 800c052:	d0f5      	beq.n	800c040 <__any_on+0x2a>
 800c054:	2001      	movs	r0, #1
 800c056:	e7f6      	b.n	800c046 <__any_on+0x30>

0800c058 <_calloc_r>:
 800c058:	b538      	push	{r3, r4, r5, lr}
 800c05a:	fb02 f401 	mul.w	r4, r2, r1
 800c05e:	4621      	mov	r1, r4
 800c060:	f000 f808 	bl	800c074 <_malloc_r>
 800c064:	4605      	mov	r5, r0
 800c066:	b118      	cbz	r0, 800c070 <_calloc_r+0x18>
 800c068:	4622      	mov	r2, r4
 800c06a:	2100      	movs	r1, #0
 800c06c:	f7fe f916 	bl	800a29c <memset>
 800c070:	4628      	mov	r0, r5
 800c072:	bd38      	pop	{r3, r4, r5, pc}

0800c074 <_malloc_r>:
 800c074:	b570      	push	{r4, r5, r6, lr}
 800c076:	1ccd      	adds	r5, r1, #3
 800c078:	f025 0503 	bic.w	r5, r5, #3
 800c07c:	3508      	adds	r5, #8
 800c07e:	2d0c      	cmp	r5, #12
 800c080:	bf38      	it	cc
 800c082:	250c      	movcc	r5, #12
 800c084:	2d00      	cmp	r5, #0
 800c086:	4606      	mov	r6, r0
 800c088:	db01      	blt.n	800c08e <_malloc_r+0x1a>
 800c08a:	42a9      	cmp	r1, r5
 800c08c:	d903      	bls.n	800c096 <_malloc_r+0x22>
 800c08e:	230c      	movs	r3, #12
 800c090:	6033      	str	r3, [r6, #0]
 800c092:	2000      	movs	r0, #0
 800c094:	bd70      	pop	{r4, r5, r6, pc}
 800c096:	f000 f883 	bl	800c1a0 <__malloc_lock>
 800c09a:	4a21      	ldr	r2, [pc, #132]	; (800c120 <_malloc_r+0xac>)
 800c09c:	6814      	ldr	r4, [r2, #0]
 800c09e:	4621      	mov	r1, r4
 800c0a0:	b991      	cbnz	r1, 800c0c8 <_malloc_r+0x54>
 800c0a2:	4c20      	ldr	r4, [pc, #128]	; (800c124 <_malloc_r+0xb0>)
 800c0a4:	6823      	ldr	r3, [r4, #0]
 800c0a6:	b91b      	cbnz	r3, 800c0b0 <_malloc_r+0x3c>
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f000 f83d 	bl	800c128 <_sbrk_r>
 800c0ae:	6020      	str	r0, [r4, #0]
 800c0b0:	4629      	mov	r1, r5
 800c0b2:	4630      	mov	r0, r6
 800c0b4:	f000 f838 	bl	800c128 <_sbrk_r>
 800c0b8:	1c43      	adds	r3, r0, #1
 800c0ba:	d124      	bne.n	800c106 <_malloc_r+0x92>
 800c0bc:	230c      	movs	r3, #12
 800c0be:	4630      	mov	r0, r6
 800c0c0:	6033      	str	r3, [r6, #0]
 800c0c2:	f000 f86e 	bl	800c1a2 <__malloc_unlock>
 800c0c6:	e7e4      	b.n	800c092 <_malloc_r+0x1e>
 800c0c8:	680b      	ldr	r3, [r1, #0]
 800c0ca:	1b5b      	subs	r3, r3, r5
 800c0cc:	d418      	bmi.n	800c100 <_malloc_r+0x8c>
 800c0ce:	2b0b      	cmp	r3, #11
 800c0d0:	d90f      	bls.n	800c0f2 <_malloc_r+0x7e>
 800c0d2:	600b      	str	r3, [r1, #0]
 800c0d4:	18cc      	adds	r4, r1, r3
 800c0d6:	50cd      	str	r5, [r1, r3]
 800c0d8:	4630      	mov	r0, r6
 800c0da:	f000 f862 	bl	800c1a2 <__malloc_unlock>
 800c0de:	f104 000b 	add.w	r0, r4, #11
 800c0e2:	1d23      	adds	r3, r4, #4
 800c0e4:	f020 0007 	bic.w	r0, r0, #7
 800c0e8:	1ac3      	subs	r3, r0, r3
 800c0ea:	d0d3      	beq.n	800c094 <_malloc_r+0x20>
 800c0ec:	425a      	negs	r2, r3
 800c0ee:	50e2      	str	r2, [r4, r3]
 800c0f0:	e7d0      	b.n	800c094 <_malloc_r+0x20>
 800c0f2:	684b      	ldr	r3, [r1, #4]
 800c0f4:	428c      	cmp	r4, r1
 800c0f6:	bf16      	itet	ne
 800c0f8:	6063      	strne	r3, [r4, #4]
 800c0fa:	6013      	streq	r3, [r2, #0]
 800c0fc:	460c      	movne	r4, r1
 800c0fe:	e7eb      	b.n	800c0d8 <_malloc_r+0x64>
 800c100:	460c      	mov	r4, r1
 800c102:	6849      	ldr	r1, [r1, #4]
 800c104:	e7cc      	b.n	800c0a0 <_malloc_r+0x2c>
 800c106:	1cc4      	adds	r4, r0, #3
 800c108:	f024 0403 	bic.w	r4, r4, #3
 800c10c:	42a0      	cmp	r0, r4
 800c10e:	d005      	beq.n	800c11c <_malloc_r+0xa8>
 800c110:	1a21      	subs	r1, r4, r0
 800c112:	4630      	mov	r0, r6
 800c114:	f000 f808 	bl	800c128 <_sbrk_r>
 800c118:	3001      	adds	r0, #1
 800c11a:	d0cf      	beq.n	800c0bc <_malloc_r+0x48>
 800c11c:	6025      	str	r5, [r4, #0]
 800c11e:	e7db      	b.n	800c0d8 <_malloc_r+0x64>
 800c120:	20004194 	.word	0x20004194
 800c124:	20004198 	.word	0x20004198

0800c128 <_sbrk_r>:
 800c128:	b538      	push	{r3, r4, r5, lr}
 800c12a:	2300      	movs	r3, #0
 800c12c:	4c05      	ldr	r4, [pc, #20]	; (800c144 <_sbrk_r+0x1c>)
 800c12e:	4605      	mov	r5, r0
 800c130:	4608      	mov	r0, r1
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	f7f8 fa78 	bl	8004628 <_sbrk>
 800c138:	1c43      	adds	r3, r0, #1
 800c13a:	d102      	bne.n	800c142 <_sbrk_r+0x1a>
 800c13c:	6823      	ldr	r3, [r4, #0]
 800c13e:	b103      	cbz	r3, 800c142 <_sbrk_r+0x1a>
 800c140:	602b      	str	r3, [r5, #0]
 800c142:	bd38      	pop	{r3, r4, r5, pc}
 800c144:	20004540 	.word	0x20004540

0800c148 <nanf>:
 800c148:	4800      	ldr	r0, [pc, #0]	; (800c14c <nanf+0x4>)
 800c14a:	4770      	bx	lr
 800c14c:	7fc00000 	.word	0x7fc00000

0800c150 <strncmp>:
 800c150:	b510      	push	{r4, lr}
 800c152:	b16a      	cbz	r2, 800c170 <strncmp+0x20>
 800c154:	3901      	subs	r1, #1
 800c156:	1884      	adds	r4, r0, r2
 800c158:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c15c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c160:	4293      	cmp	r3, r2
 800c162:	d103      	bne.n	800c16c <strncmp+0x1c>
 800c164:	42a0      	cmp	r0, r4
 800c166:	d001      	beq.n	800c16c <strncmp+0x1c>
 800c168:	2b00      	cmp	r3, #0
 800c16a:	d1f5      	bne.n	800c158 <strncmp+0x8>
 800c16c:	1a98      	subs	r0, r3, r2
 800c16e:	bd10      	pop	{r4, pc}
 800c170:	4610      	mov	r0, r2
 800c172:	e7fc      	b.n	800c16e <strncmp+0x1e>

0800c174 <__ascii_wctomb>:
 800c174:	b149      	cbz	r1, 800c18a <__ascii_wctomb+0x16>
 800c176:	2aff      	cmp	r2, #255	; 0xff
 800c178:	bf8b      	itete	hi
 800c17a:	238a      	movhi	r3, #138	; 0x8a
 800c17c:	700a      	strbls	r2, [r1, #0]
 800c17e:	6003      	strhi	r3, [r0, #0]
 800c180:	2001      	movls	r0, #1
 800c182:	bf88      	it	hi
 800c184:	f04f 30ff 	movhi.w	r0, #4294967295
 800c188:	4770      	bx	lr
 800c18a:	4608      	mov	r0, r1
 800c18c:	4770      	bx	lr
	...

0800c190 <malloc>:
 800c190:	4b02      	ldr	r3, [pc, #8]	; (800c19c <malloc+0xc>)
 800c192:	4601      	mov	r1, r0
 800c194:	6818      	ldr	r0, [r3, #0]
 800c196:	f7ff bf6d 	b.w	800c074 <_malloc_r>
 800c19a:	bf00      	nop
 800c19c:	200003dc 	.word	0x200003dc

0800c1a0 <__malloc_lock>:
 800c1a0:	4770      	bx	lr

0800c1a2 <__malloc_unlock>:
 800c1a2:	4770      	bx	lr

0800c1a4 <_init>:
 800c1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1a6:	bf00      	nop
 800c1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1aa:	bc08      	pop	{r3}
 800c1ac:	469e      	mov	lr, r3
 800c1ae:	4770      	bx	lr

0800c1b0 <_fini>:
 800c1b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1b2:	bf00      	nop
 800c1b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1b6:	bc08      	pop	{r3}
 800c1b8:	469e      	mov	lr, r3
 800c1ba:	4770      	bx	lr
