
M365_custom_firmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c0fc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001cb0  0800c210  0800c210  0001c210  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dec0  0800dec0  000205ac  2**0
                  CONTENTS
  4 .ARM          00000000  0800dec0  0800dec0  000205ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800dec0  0800dec0  000205ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dec0  0800dec0  0001dec0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dec4  0800dec4  0001dec4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005ac  20000000  0800dec8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003f94  200005b0  0800e474  000205b0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20004544  0800e474  00024544  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000205ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00033bfb  00000000  00000000  000205d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007517  00000000  00000000  000541d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017f6d  00000000  00000000  0005b6e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000019d0  00000000  00000000  00073658  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000025c8  00000000  00000000  00075028  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0001a1a7  00000000  00000000  000775f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00018940  00000000  00000000  00091797  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0008769e  00000000  00000000  000aa0d7  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00131775  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000056f0  00000000  00000000  001317f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200005b0 	.word	0x200005b0
 800012c:	00000000 	.word	0x00000000
 8000130:	0800c1f4 	.word	0x0800c1f4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200005b4 	.word	0x200005b4
 800014c:	0800c1f4 	.word	0x0800c1f4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800029e:	f1a4 0401 	sub.w	r4, r4, #1
 80002a2:	d1e9      	bne.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000c24:	f1a2 0201 	sub.w	r2, r2, #1
 8000c28:	d1ed      	bne.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_fcmpun>:
 8001110:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001114:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001118:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800111c:	d102      	bne.n	8001124 <__aeabi_fcmpun+0x14>
 800111e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001122:	d108      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001124:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001128:	d102      	bne.n	8001130 <__aeabi_fcmpun+0x20>
 800112a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800112e:	d102      	bne.n	8001136 <__aeabi_fcmpun+0x26>
 8001130:	f04f 0000 	mov.w	r0, #0
 8001134:	4770      	bx	lr
 8001136:	f04f 0001 	mov.w	r0, #1
 800113a:	4770      	bx	lr

0800113c <__aeabi_f2iz>:
 800113c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001140:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001144:	d30f      	bcc.n	8001166 <__aeabi_f2iz+0x2a>
 8001146:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800114e:	d90d      	bls.n	800116c <__aeabi_f2iz+0x30>
 8001150:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001154:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001158:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	bf18      	it	ne
 8001162:	4240      	negne	r0, r0
 8001164:	4770      	bx	lr
 8001166:	f04f 0000 	mov.w	r0, #0
 800116a:	4770      	bx	lr
 800116c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8001170:	d101      	bne.n	8001176 <__aeabi_f2iz+0x3a>
 8001172:	0242      	lsls	r2, r0, #9
 8001174:	d105      	bne.n	8001182 <__aeabi_f2iz+0x46>
 8001176:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 800117a:	bf08      	it	eq
 800117c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8001180:	4770      	bx	lr
 8001182:	f04f 0000 	mov.w	r0, #0
 8001186:	4770      	bx	lr

08001188 <div_nde_s32_floor>:
 8001188:	0fcb      	lsrs	r3, r1, #31
 800118a:	ebb3 7fd0 	cmp.w	r3, r0, lsr #31
 800118e:	fb90 f3f1 	sdiv	r3, r0, r1
 8001192:	d007      	beq.n	80011a4 <div_nde_s32_floor+0x1c>
 8001194:	fb01 0113 	mls	r1, r1, r3, r0
 8001198:	3100      	adds	r1, #0
 800119a:	bf18      	it	ne
 800119c:	2101      	movne	r1, #1
 800119e:	4249      	negs	r1, r1
 80011a0:	1858      	adds	r0, r3, r1
 80011a2:	4770      	bx	lr
 80011a4:	2100      	movs	r1, #0
 80011a6:	e7fb      	b.n	80011a0 <div_nde_s32_floor+0x18>

080011a8 <Counter>:
 80011a8:	b942      	cbnz	r2, 80011bc <Counter+0x14>
 80011aa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80011ae:	4410      	add	r0, r2
 80011b0:	b200      	sxth	r0, r0
 80011b2:	4281      	cmp	r1, r0
 80011b4:	bfa8      	it	ge
 80011b6:	4601      	movge	r1, r0
 80011b8:	8019      	strh	r1, [r3, #0]
 80011ba:	4770      	bx	lr
 80011bc:	2200      	movs	r2, #0
 80011be:	e7f6      	b.n	80011ae <Counter+0x6>

080011c0 <PI_clamp_fixdt>:
 80011c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011c2:	fb00 f402 	mul.w	r4, r0, r2
 80011c6:	e9dd 5c06 	ldrd	r5, ip, [sp, #24]
 80011ca:	2c00      	cmp	r4, #0
 80011cc:	f9bd 7014 	ldrsh.w	r7, [sp, #20]
 80011d0:	9e08      	ldr	r6, [sp, #32]
 80011d2:	da05      	bge.n	80011e0 <PI_clamp_fixdt+0x20>
 80011d4:	f1c4 4200 	rsb	r2, r4, #2147483648	; 0x80000000
 80011d8:	42aa      	cmp	r2, r5
 80011da:	dc40      	bgt.n	800125e <PI_clamp_fixdt+0x9e>
 80011dc:	1962      	adds	r2, r4, r5
 80011de:	e006      	b.n	80011ee <PI_clamp_fixdt+0x2e>
 80011e0:	d0fc      	beq.n	80011dc <PI_clamp_fixdt+0x1c>
 80011e2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80011e6:	eba2 0e04 	sub.w	lr, r2, r4
 80011ea:	45ae      	cmp	lr, r5
 80011ec:	daf6      	bge.n	80011dc <PI_clamp_fixdt+0x1c>
 80011ee:	7934      	ldrb	r4, [r6, #4]
 80011f0:	4348      	muls	r0, r1
 80011f2:	2c00      	cmp	r4, #0
 80011f4:	bf0c      	ite	eq
 80011f6:	4615      	moveq	r5, r2
 80011f8:	2500      	movne	r5, #0
 80011fa:	6834      	ldr	r4, [r6, #0]
 80011fc:	12c0      	asrs	r0, r0, #11
 80011fe:	4425      	add	r5, r4
 8001200:	4c22      	ldr	r4, [pc, #136]	; (800128c <PI_clamp_fixdt+0xcc>)
 8001202:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8001206:	42a0      	cmp	r0, r4
 8001208:	bfb8      	it	lt
 800120a:	4620      	movlt	r0, r4
 800120c:	4288      	cmp	r0, r1
 800120e:	bfa8      	it	ge
 8001210:	4608      	movge	r0, r1
 8001212:	ea4f 4e25 	mov.w	lr, r5, asr #16
 8001216:	eb00 004e 	add.w	r0, r0, lr, lsl #1
 800121a:	1040      	asrs	r0, r0, #1
 800121c:	4284      	cmp	r4, r0
 800121e:	bfb8      	it	lt
 8001220:	4604      	movlt	r4, r0
 8001222:	428c      	cmp	r4, r1
 8001224:	bfa8      	it	ge
 8001226:	460c      	movge	r4, r1
 8001228:	b221      	sxth	r1, r4
 800122a:	4299      	cmp	r1, r3
 800122c:	dd1a      	ble.n	8001264 <PI_clamp_fixdt+0xa4>
 800122e:	f8ac 3000 	strh.w	r3, [ip]
 8001232:	2a00      	cmp	r2, #0
 8001234:	db24      	blt.n	8001280 <PI_clamp_fixdt+0xc0>
 8001236:	bfcc      	ite	gt
 8001238:	2201      	movgt	r2, #1
 800123a:	2200      	movle	r2, #0
 800123c:	2800      	cmp	r0, #0
 800123e:	db18      	blt.n	8001272 <PI_clamp_fixdt+0xb2>
 8001240:	2900      	cmp	r1, #0
 8001242:	bfd4      	ite	le
 8001244:	2000      	movle	r0, #0
 8001246:	2001      	movgt	r0, #1
 8001248:	4290      	cmp	r0, r2
 800124a:	d115      	bne.n	8001278 <PI_clamp_fixdt+0xb8>
 800124c:	4299      	cmp	r1, r3
 800124e:	dc15      	bgt.n	800127c <PI_clamp_fixdt+0xbc>
 8001250:	42b9      	cmp	r1, r7
 8001252:	bfac      	ite	ge
 8001254:	2100      	movge	r1, #0
 8001256:	2101      	movlt	r1, #1
 8001258:	7131      	strb	r1, [r6, #4]
 800125a:	6035      	str	r5, [r6, #0]
 800125c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800125e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001262:	e7c4      	b.n	80011ee <PI_clamp_fixdt+0x2e>
 8001264:	42b9      	cmp	r1, r7
 8001266:	460c      	mov	r4, r1
 8001268:	bfb8      	it	lt
 800126a:	463c      	movlt	r4, r7
 800126c:	f8ac 4000 	strh.w	r4, [ip]
 8001270:	e7df      	b.n	8001232 <PI_clamp_fixdt+0x72>
 8001272:	f04f 30ff 	mov.w	r0, #4294967295
 8001276:	e7e7      	b.n	8001248 <PI_clamp_fixdt+0x88>
 8001278:	2100      	movs	r1, #0
 800127a:	e7ed      	b.n	8001258 <PI_clamp_fixdt+0x98>
 800127c:	2101      	movs	r1, #1
 800127e:	e7eb      	b.n	8001258 <PI_clamp_fixdt+0x98>
 8001280:	2800      	cmp	r0, #0
 8001282:	dbe3      	blt.n	800124c <PI_clamp_fixdt+0x8c>
 8001284:	f04f 32ff 	mov.w	r2, #4294967295
 8001288:	e7da      	b.n	8001240 <PI_clamp_fixdt+0x80>
 800128a:	bf00      	nop
 800128c:	ffff8000 	.word	0xffff8000

08001290 <Low_Pass_Filter>:
 8001290:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001292:	681d      	ldr	r5, [r3, #0]
 8001294:	f9b0 4000 	ldrsh.w	r4, [r0]
 8001298:	4f10      	ldr	r7, [pc, #64]	; (80012dc <Low_Pass_Filter+0x4c>)
 800129a:	eba4 4425 	sub.w	r4, r4, r5, asr #16
 800129e:	42bc      	cmp	r4, r7
 80012a0:	f647 76ff 	movw	r6, #32767	; 0x7fff
 80012a4:	bfb8      	it	lt
 80012a6:	463c      	movlt	r4, r7
 80012a8:	42b4      	cmp	r4, r6
 80012aa:	bfa8      	it	ge
 80012ac:	4634      	movge	r4, r6
 80012ae:	fb01 5404 	mla	r4, r1, r4, r5
 80012b2:	1425      	asrs	r5, r4, #16
 80012b4:	8015      	strh	r5, [r2, #0]
 80012b6:	685d      	ldr	r5, [r3, #4]
 80012b8:	601c      	str	r4, [r3, #0]
 80012ba:	f9b0 4002 	ldrsh.w	r4, [r0, #2]
 80012be:	eba4 4025 	sub.w	r0, r4, r5, asr #16
 80012c2:	42b8      	cmp	r0, r7
 80012c4:	bfb8      	it	lt
 80012c6:	4638      	movlt	r0, r7
 80012c8:	42b0      	cmp	r0, r6
 80012ca:	bfa8      	it	ge
 80012cc:	4630      	movge	r0, r6
 80012ce:	fb01 5100 	mla	r1, r1, r0, r5
 80012d2:	1408      	asrs	r0, r1, #16
 80012d4:	8050      	strh	r0, [r2, #2]
 80012d6:	6059      	str	r1, [r3, #4]
 80012d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012da:	bf00      	nop
 80012dc:	ffff8000 	.word	0xffff8000

080012e0 <I_backCalc_fixdt>:
 80012e0:	4341      	muls	r1, r0
 80012e2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012e4:	1109      	asrs	r1, r1, #4
 80012e6:	2900      	cmp	r1, #0
 80012e8:	e9dd 5406 	ldrd	r5, r4, [sp, #24]
 80012ec:	6826      	ldr	r6, [r4, #0]
 80012ee:	da05      	bge.n	80012fc <I_backCalc_fixdt+0x1c>
 80012f0:	f1c1 4000 	rsb	r0, r1, #2147483648	; 0x80000000
 80012f4:	42b0      	cmp	r0, r6
 80012f6:	dc15      	bgt.n	8001324 <I_backCalc_fixdt+0x44>
 80012f8:	1988      	adds	r0, r1, r6
 80012fa:	e005      	b.n	8001308 <I_backCalc_fixdt+0x28>
 80012fc:	d0fc      	beq.n	80012f8 <I_backCalc_fixdt+0x18>
 80012fe:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8001302:	1a47      	subs	r7, r0, r1
 8001304:	42b7      	cmp	r7, r6
 8001306:	daf7      	bge.n	80012f8 <I_backCalc_fixdt+0x18>
 8001308:	6861      	ldr	r1, [r4, #4]
 800130a:	4408      	add	r0, r1
 800130c:	1306      	asrs	r6, r0, #12
 800130e:	b231      	sxth	r1, r6
 8001310:	4299      	cmp	r1, r3
 8001312:	dd0a      	ble.n	800132a <I_backCalc_fixdt+0x4a>
 8001314:	802b      	strh	r3, [r5, #0]
 8001316:	882b      	ldrh	r3, [r5, #0]
 8001318:	1b9b      	subs	r3, r3, r6
 800131a:	b21b      	sxth	r3, r3
 800131c:	435a      	muls	r2, r3
 800131e:	e9c4 2000 	strd	r2, r0, [r4]
 8001322:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001324:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8001328:	e7ee      	b.n	8001308 <I_backCalc_fixdt+0x28>
 800132a:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 800132e:	4299      	cmp	r1, r3
 8001330:	bfb8      	it	lt
 8001332:	4619      	movlt	r1, r3
 8001334:	8029      	strh	r1, [r5, #0]
 8001336:	e7ee      	b.n	8001316 <I_backCalc_fixdt+0x36>

08001338 <Counter_i>:
 8001338:	b93a      	cbnz	r2, 800134a <Counter_i+0x12>
 800133a:	881a      	ldrh	r2, [r3, #0]
 800133c:	4410      	add	r0, r2
 800133e:	b280      	uxth	r0, r0
 8001340:	4281      	cmp	r1, r0
 8001342:	bf28      	it	cs
 8001344:	4601      	movcs	r1, r0
 8001346:	8019      	strh	r1, [r3, #0]
 8001348:	4770      	bx	lr
 800134a:	2200      	movs	r2, #0
 800134c:	e7f6      	b.n	800133c <Counter_i+0x4>

0800134e <Debounce_Filter>:
 800134e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001350:	9c06      	ldr	r4, [sp, #24]
 8001352:	4616      	mov	r6, r2
 8001354:	7822      	ldrb	r2, [r4, #0]
 8001356:	461d      	mov	r5, r3
 8001358:	1a12      	subs	r2, r2, r0
 800135a:	460f      	mov	r7, r1
 800135c:	79a3      	ldrb	r3, [r4, #6]
 800135e:	bf18      	it	ne
 8001360:	2201      	movne	r2, #1
 8001362:	7020      	strb	r0, [r4, #0]
 8001364:	b160      	cbz	r0, 8001380 <Debounce_Filter+0x32>
 8001366:	b9b3      	cbnz	r3, 8001396 <Debounce_Filter+0x48>
 8001368:	1d23      	adds	r3, r4, #4
 800136a:	2001      	movs	r0, #1
 800136c:	f7ff ffe4 	bl	8001338 <Counter_i>
 8001370:	4287      	cmp	r7, r0
 8001372:	bf2c      	ite	cs
 8001374:	2000      	movcs	r0, #0
 8001376:	2001      	movcc	r0, #1
 8001378:	7028      	strb	r0, [r5, #0]
 800137a:	782b      	ldrb	r3, [r5, #0]
 800137c:	71a3      	strb	r3, [r4, #6]
 800137e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001380:	b14b      	cbz	r3, 8001396 <Debounce_Filter+0x48>
 8001382:	1ca3      	adds	r3, r4, #2
 8001384:	4631      	mov	r1, r6
 8001386:	2001      	movs	r0, #1
 8001388:	f7ff ffd6 	bl	8001338 <Counter_i>
 800138c:	4286      	cmp	r6, r0
 800138e:	bf34      	ite	cc
 8001390:	2000      	movcc	r0, #0
 8001392:	2001      	movcs	r0, #1
 8001394:	e7f0      	b.n	8001378 <Debounce_Filter+0x2a>
 8001396:	702b      	strb	r3, [r5, #0]
 8001398:	e7ef      	b.n	800137a <Debounce_Filter+0x2c>
	...

0800139c <BLDC_controller_step>:
 800139c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013a0:	e9d0 6301 	ldrd	r6, r3, [r0, #4]
 80013a4:	7972      	ldrb	r2, [r6, #5]
 80013a6:	7937      	ldrb	r7, [r6, #4]
 80013a8:	68c4      	ldr	r4, [r0, #12]
 80013aa:	0051      	lsls	r1, r2, #1
 80013ac:	6805      	ldr	r5, [r0, #0]
 80013ae:	79b0      	ldrb	r0, [r6, #6]
 80013b0:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80013b4:	b093      	sub	sp, #76	; 0x4c
 80013b6:	4401      	add	r1, r0
 80013b8:	9304      	str	r3, [sp, #16]
 80013ba:	b2cb      	uxtb	r3, r1
 80013bc:	9308      	str	r3, [sp, #32]
 80013be:	1c13      	adds	r3, r2, #0
 80013c0:	bf18      	it	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2f00      	cmp	r7, #0
 80013c6:	bf18      	it	ne
 80013c8:	f083 0301 	eorne.w	r3, r3, #1
 80013cc:	2800      	cmp	r0, #0
 80013ce:	bf18      	it	ne
 80013d0:	f083 0301 	eorne.w	r3, r3, #1
 80013d4:	f894 2093 	ldrb.w	r2, [r4, #147]	; 0x93
 80013d8:	f894 1095 	ldrb.w	r1, [r4, #149]	; 0x95
 80013dc:	2a00      	cmp	r2, #0
 80013de:	bf18      	it	ne
 80013e0:	f083 0301 	eorne.w	r3, r3, #1
 80013e4:	f894 2094 	ldrb.w	r2, [r4, #148]	; 0x94
 80013e8:	9f08      	ldr	r7, [sp, #32]
 80013ea:	2a00      	cmp	r2, #0
 80013ec:	bf18      	it	ne
 80013ee:	f083 0301 	eorne.w	r3, r3, #1
 80013f2:	3100      	adds	r1, #0
 80013f4:	bf18      	it	ne
 80013f6:	2101      	movne	r1, #1
 80013f8:	48b4      	ldr	r0, [pc, #720]	; (80016cc <BLDC_controller_step+0x330>)
 80013fa:	4299      	cmp	r1, r3
 80013fc:	4438      	add	r0, r7
 80013fe:	ea81 0203 	eor.w	r2, r1, r3
 8001402:	f990 7788 	ldrsb.w	r7, [r0, #1928]	; 0x788
 8001406:	d050      	beq.n	80014aa <BLDC_controller_step+0x10e>
 8001408:	f894 308d 	ldrb.w	r3, [r4, #141]	; 0x8d
 800140c:	f994 e08c 	ldrsb.w	lr, [r4, #140]	; 0x8c
 8001410:	1afb      	subs	r3, r7, r3
 8001412:	b25b      	sxtb	r3, r3
 8001414:	2b01      	cmp	r3, #1
 8001416:	d002      	beq.n	800141e <BLDC_controller_step+0x82>
 8001418:	3305      	adds	r3, #5
 800141a:	f040 8111 	bne.w	8001640 <BLDC_controller_step+0x2a4>
 800141e:	2301      	movs	r3, #1
 8001420:	f9b4 007c 	ldrsh.w	r0, [r4, #124]	; 0x7c
 8001424:	f884 308c 	strb.w	r3, [r4, #140]	; 0x8c
 8001428:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
 800142c:	b281      	uxth	r1, r0
 800142e:	1acb      	subs	r3, r1, r3
 8001430:	b29b      	uxth	r3, r3
 8001432:	fa0f fc83 	sxth.w	ip, r3
 8001436:	f1bc 0f00 	cmp.w	ip, #0
 800143a:	bfb8      	it	lt
 800143c:	425b      	neglt	r3, r3
 800143e:	f884 708d 	strb.w	r7, [r4, #141]	; 0x8d
 8001442:	bfb8      	it	lt
 8001444:	fa0f fc83 	sxthlt.w	ip, r3
 8001448:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 800144c:	f8a4 005a 	strh.w	r0, [r4, #90]	; 0x5a
 8001450:	4563      	cmp	r3, ip
 8001452:	f300 80f7 	bgt.w	8001644 <BLDC_controller_step+0x2a8>
 8001456:	2301      	movs	r3, #1
 8001458:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
 800145c:	f994 c08c 	ldrsb.w	ip, [r4, #140]	; 0x8c
 8001460:	f894 a0a1 	ldrb.w	sl, [r4, #161]	; 0xa1
 8001464:	45f4      	cmp	ip, lr
 8001466:	f884 a09a 	strb.w	sl, [r4, #154]	; 0x9a
 800146a:	bf14      	ite	ne
 800146c:	f04f 0901 	movne.w	r9, #1
 8001470:	f04f 0900 	moveq.w	r9, #0
 8001474:	f9b4 8082 	ldrsh.w	r8, [r4, #130]	; 0x82
 8001478:	f9b4 e084 	ldrsh.w	lr, [r4, #132]	; 0x84
 800147c:	f000 80e9 	beq.w	8001652 <BLDC_controller_step+0x2b6>
 8001480:	f894 309f 	ldrb.w	r3, [r4, #159]	; 0x9f
 8001484:	2b00      	cmp	r3, #0
 8001486:	f040 80f9 	bne.w	800167c <BLDC_controller_step+0x2e0>
 800148a:	f9b4 3086 	ldrsh.w	r3, [r4, #134]	; 0x86
 800148e:	fb0c f303 	mul.w	r3, ip, r3
 8001492:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
 8001496:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
 800149a:	f8a4 8080 	strh.w	r8, [r4, #128]	; 0x80
 800149e:	f8a4 e082 	strh.w	lr, [r4, #130]	; 0x82
 80014a2:	f8a4 0084 	strh.w	r0, [r4, #132]	; 0x84
 80014a6:	f884 909f 	strb.w	r9, [r4, #159]	; 0x9f
 80014aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80014ae:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80014b2:	2001      	movs	r0, #1
 80014b4:	f7ff fe78 	bl	80011a8 <Counter>
 80014b8:	f9b5 3008 	ldrsh.w	r3, [r5, #8]
 80014bc:	9009      	str	r0, [sp, #36]	; 0x24
 80014be:	4283      	cmp	r3, r0
 80014c0:	f2c0 80de 	blt.w	8001680 <BLDC_controller_step+0x2e4>
 80014c4:	f9b4 307a 	ldrsh.w	r3, [r4, #122]	; 0x7a
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	9305      	str	r3, [sp, #20]
 80014cc:	f280 80dc 	bge.w	8001688 <BLDC_controller_step+0x2ec>
 80014d0:	425b      	negs	r3, r3
 80014d2:	fa0f fb83 	sxth.w	fp, r3
 80014d6:	f9b5 30d2 	ldrsh.w	r3, [r5, #210]	; 0xd2
 80014da:	455b      	cmp	r3, fp
 80014dc:	f300 80d7 	bgt.w	800168e <BLDC_controller_step+0x2f2>
 80014e0:	2301      	movs	r3, #1
 80014e2:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
 80014e6:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
 80014ea:	f994 208c 	ldrsb.w	r2, [r4, #140]	; 0x8c
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80d4 	beq.w	800169c <BLDC_controller_step+0x300>
 80014f4:	f894 309a 	ldrb.w	r3, [r4, #154]	; 0x9a
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 80cf 	bne.w	800169c <BLDC_controller_step+0x300>
 80014fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001500:	f9b4 105a 	ldrsh.w	r1, [r4, #90]	; 0x5a
 8001504:	428b      	cmp	r3, r1
 8001506:	bfa8      	it	ge
 8001508:	460b      	movge	r3, r1
 800150a:	2a01      	cmp	r2, #1
 800150c:	b21b      	sxth	r3, r3
 800150e:	f040 80cb 	bne.w	80016a8 <BLDC_controller_step+0x30c>
 8001512:	039b      	lsls	r3, r3, #14
 8001514:	fb93 f3f1 	sdiv	r3, r3, r1
 8001518:	4353      	muls	r3, r2
 800151a:	b21b      	sxth	r3, r3
 800151c:	eb03 3787 	add.w	r7, r3, r7, lsl #14
 8001520:	2301      	movs	r3, #1
 8001522:	f347 078f 	sbfx	r7, r7, #2, #16
 8001526:	ea27 77e7 	bic.w	r7, r7, r7, asr #31
 800152a:	b23f      	sxth	r7, r7
 800152c:	ebc7 1707 	rsb	r7, r7, r7, lsl #4
 8001530:	9307      	str	r3, [sp, #28]
 8001532:	113b      	asrs	r3, r7, #4
 8001534:	9306      	str	r3, [sp, #24]
 8001536:	f9b6 7002 	ldrsh.w	r7, [r6, #2]
 800153a:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 800153e:	f5b7 6f00 	cmp.w	r7, #2048	; 0x800
 8001542:	930b      	str	r3, [sp, #44]	; 0x2c
 8001544:	f280 80b6 	bge.w	80016b4 <BLDC_controller_step+0x318>
 8001548:	f517 6f00 	cmn.w	r7, #2048	; 0x800
 800154c:	f340 80b5 	ble.w	80016ba <BLDC_controller_step+0x31e>
 8001550:	013f      	lsls	r7, r7, #4
 8001552:	b23f      	sxth	r7, r7
 8001554:	f894 309b 	ldrb.w	r3, [r4, #155]	; 0x9b
 8001558:	f9b5 90da 	ldrsh.w	r9, [r5, #218]	; 0xda
 800155c:	930c      	str	r3, [sp, #48]	; 0x30
 800155e:	f895 30f7 	ldrb.w	r3, [r5, #247]	; 0xf7
 8001562:	2b00      	cmp	r3, #0
 8001564:	d03d      	beq.n	80015e2 <BLDC_controller_step+0x246>
 8001566:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001568:	2b00      	cmp	r3, #0
 800156a:	d03a      	beq.n	80015e2 <BLDC_controller_step+0x246>
 800156c:	9b04      	ldr	r3, [sp, #16]
 800156e:	799b      	ldrb	r3, [r3, #6]
 8001570:	075b      	lsls	r3, r3, #29
 8001572:	f100 80a6 	bmi.w	80016c2 <BLDC_controller_step+0x326>
 8001576:	f9b4 2088 	ldrsh.w	r2, [r4, #136]	; 0x88
 800157a:	2a00      	cmp	r2, #0
 800157c:	bfbc      	itt	lt
 800157e:	4253      	neglt	r3, r2
 8001580:	b21a      	sxthlt	r2, r3
 8001582:	7833      	ldrb	r3, [r6, #0]
 8001584:	b143      	cbz	r3, 8001598 <BLDC_controller_step+0x1fc>
 8001586:	45d9      	cmp	r9, fp
 8001588:	f340 8099 	ble.w	80016be <BLDC_controller_step+0x322>
 800158c:	f9b5 30dc 	ldrsh.w	r3, [r5, #220]	; 0xdc
 8001590:	4293      	cmp	r3, r2
 8001592:	bfac      	ite	ge
 8001594:	2300      	movge	r3, #0
 8001596:	2301      	movlt	r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	9a08      	ldr	r2, [sp, #32]
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	2a07      	cmp	r2, #7
 80015a0:	bf14      	ite	ne
 80015a2:	f04f 0800 	movne.w	r8, #0
 80015a6:	f04f 0802 	moveq.w	r8, #2
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	bf08      	it	eq
 80015ae:	3301      	addeq	r3, #1
 80015b0:	4443      	add	r3, r8
 80015b2:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
 80015b6:	f104 0302 	add.w	r3, r4, #2
 80015ba:	89aa      	ldrh	r2, [r5, #12]
 80015bc:	89e9      	ldrh	r1, [r5, #14]
 80015be:	bf18      	it	ne
 80015c0:	2001      	movne	r0, #1
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	bf08      	it	eq
 80015c6:	2000      	moveq	r0, #0
 80015c8:	f104 0399 	add.w	r3, r4, #153	; 0x99
 80015cc:	f7ff febf 	bl	800134e <Debounce_Filter>
 80015d0:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 80015d4:	7822      	ldrb	r2, [r4, #0]
 80015d6:	7023      	strb	r3, [r4, #0]
 80015d8:	4293      	cmp	r3, r2
 80015da:	bf1c      	itt	ne
 80015dc:	9b04      	ldrne	r3, [sp, #16]
 80015de:	f883 8006 	strbne.w	r8, [r3, #6]
 80015e2:	f894 209b 	ldrb.w	r2, [r4, #155]	; 0x9b
 80015e6:	f994 108e 	ldrsb.w	r1, [r4, #142]	; 0x8e
 80015ea:	fab2 f382 	clz	r3, r2
 80015ee:	095b      	lsrs	r3, r3, #5
 80015f0:	425b      	negs	r3, r3
 80015f2:	4299      	cmp	r1, r3
 80015f4:	f884 308e 	strb.w	r3, [r4, #142]	; 0x8e
 80015f8:	d003      	beq.n	8001602 <BLDC_controller_step+0x266>
 80015fa:	b911      	cbnz	r1, 8001602 <BLDC_controller_step+0x266>
 80015fc:	23ff      	movs	r3, #255	; 0xff
 80015fe:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 8001602:	2a00      	cmp	r2, #0
 8001604:	f000 80e3 	beq.w	80017ce <BLDC_controller_step+0x432>
 8001608:	7833      	ldrb	r3, [r6, #0]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d05b      	beq.n	80016c6 <BLDC_controller_step+0x32a>
 800160e:	f894 3099 	ldrb.w	r3, [r4, #153]	; 0x99
 8001612:	2b00      	cmp	r3, #0
 8001614:	d157      	bne.n	80016c6 <BLDC_controller_step+0x32a>
 8001616:	7871      	ldrb	r1, [r6, #1]
 8001618:	2900      	cmp	r1, #0
 800161a:	d054      	beq.n	80016c6 <BLDC_controller_step+0x32a>
 800161c:	f894 2092 	ldrb.w	r2, [r4, #146]	; 0x92
 8001620:	4291      	cmp	r1, r2
 8001622:	d002      	beq.n	800162a <BLDC_controller_step+0x28e>
 8001624:	1c13      	adds	r3, r2, #0
 8001626:	bf18      	it	ne
 8001628:	2301      	movne	r3, #1
 800162a:	f894 2096 	ldrb.w	r2, [r4, #150]	; 0x96
 800162e:	2a00      	cmp	r2, #0
 8001630:	d150      	bne.n	80016d4 <BLDC_controller_step+0x338>
 8001632:	f240 2301 	movw	r3, #513	; 0x201
 8001636:	f8a4 3096 	strh.w	r3, [r4, #150]	; 0x96
 800163a:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 800163e:	e059      	b.n	80016f4 <BLDC_controller_step+0x358>
 8001640:	23ff      	movs	r3, #255	; 0xff
 8001642:	e6ed      	b.n	8001420 <BLDC_controller_step+0x84>
 8001644:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8001648:	4563      	cmp	r3, ip
 800164a:	f6ff af07 	blt.w	800145c <BLDC_controller_step+0xc0>
 800164e:	2300      	movs	r3, #0
 8001650:	e702      	b.n	8001458 <BLDC_controller_step+0xbc>
 8001652:	896b      	ldrh	r3, [r5, #10]
 8001654:	f1ba 0f00 	cmp.w	sl, #0
 8001658:	d004      	beq.n	8001664 <BLDC_controller_step+0x2c8>
 800165a:	011b      	lsls	r3, r3, #4
 800165c:	fb93 f3f0 	sdiv	r3, r3, r0
 8001660:	b21b      	sxth	r3, r3
 8001662:	e714      	b.n	800148e <BLDC_controller_step+0xf2>
 8001664:	f8b4 a080 	ldrh.w	sl, [r4, #128]	; 0x80
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4451      	add	r1, sl
 800166c:	4441      	add	r1, r8
 800166e:	b29b      	uxth	r3, r3
 8001670:	4471      	add	r1, lr
 8001672:	011b      	lsls	r3, r3, #4
 8001674:	b209      	sxth	r1, r1
 8001676:	fb93 f3f1 	sdiv	r3, r3, r1
 800167a:	e7f1      	b.n	8001660 <BLDC_controller_step+0x2c4>
 800167c:	2300      	movs	r3, #0
 800167e:	e706      	b.n	800148e <BLDC_controller_step+0xf2>
 8001680:	2300      	movs	r3, #0
 8001682:	9305      	str	r3, [sp, #20]
 8001684:	469b      	mov	fp, r3
 8001686:	e726      	b.n	80014d6 <BLDC_controller_step+0x13a>
 8001688:	f8dd b014 	ldr.w	fp, [sp, #20]
 800168c:	e723      	b.n	80014d6 <BLDC_controller_step+0x13a>
 800168e:	f9b5 30d0 	ldrsh.w	r3, [r5, #208]	; 0xd0
 8001692:	455b      	cmp	r3, fp
 8001694:	f6ff af27 	blt.w	80014e6 <BLDC_controller_step+0x14a>
 8001698:	2300      	movs	r3, #0
 800169a:	e722      	b.n	80014e2 <BLDC_controller_step+0x146>
 800169c:	2a01      	cmp	r2, #1
 800169e:	d106      	bne.n	80016ae <BLDC_controller_step+0x312>
 80016a0:	033f      	lsls	r7, r7, #12
 80016a2:	b23f      	sxth	r7, r7
 80016a4:	2300      	movs	r3, #0
 80016a6:	e73e      	b.n	8001526 <BLDC_controller_step+0x18a>
 80016a8:	3701      	adds	r7, #1
 80016aa:	b27f      	sxtb	r7, r7
 80016ac:	e731      	b.n	8001512 <BLDC_controller_step+0x176>
 80016ae:	3701      	adds	r7, #1
 80016b0:	b27f      	sxtb	r7, r7
 80016b2:	e7f5      	b.n	80016a0 <BLDC_controller_step+0x304>
 80016b4:	f647 77ff 	movw	r7, #32767	; 0x7fff
 80016b8:	e74c      	b.n	8001554 <BLDC_controller_step+0x1b8>
 80016ba:	4f05      	ldr	r7, [pc, #20]	; (80016d0 <BLDC_controller_step+0x334>)
 80016bc:	e74a      	b.n	8001554 <BLDC_controller_step+0x1b8>
 80016be:	2300      	movs	r3, #0
 80016c0:	e76a      	b.n	8001598 <BLDC_controller_step+0x1fc>
 80016c2:	2301      	movs	r3, #1
 80016c4:	e769      	b.n	800159a <BLDC_controller_step+0x1fe>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e7af      	b.n	800162a <BLDC_controller_step+0x28e>
 80016ca:	bf00      	nop
 80016cc:	0800c220 	.word	0x0800c220
 80016d0:	ffff8000 	.word	0xffff8000
 80016d4:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
 80016d8:	2a01      	cmp	r2, #1
 80016da:	f040 8109 	bne.w	80018f0 <BLDC_controller_step+0x554>
 80016de:	2b00      	cmp	r3, #0
 80016e0:	f000 80fb 	beq.w	80018da <BLDC_controller_step+0x53e>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2202      	movs	r2, #2
 80016e8:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 80016ec:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 80016f0:	f884 3092 	strb.w	r3, [r4, #146]	; 0x92
 80016f4:	4bd1      	ldr	r3, [pc, #836]	; (8001a3c <BLDC_controller_step+0x6a0>)
 80016f6:	42bb      	cmp	r3, r7
 80016f8:	bfb8      	it	lt
 80016fa:	463b      	movlt	r3, r7
 80016fc:	f5b3 5f7a 	cmp.w	r3, #16000	; 0x3e80
 8001700:	bfa8      	it	ge
 8001702:	f44f 537a 	movge.w	r3, #16000	; 0x3e80
 8001706:	461a      	mov	r2, r3
 8001708:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
 800170c:	2b02      	cmp	r3, #2
 800170e:	d11b      	bne.n	8001748 <BLDC_controller_step+0x3ac>
 8001710:	2300      	movs	r3, #0
 8001712:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001716:	8a2b      	ldrh	r3, [r5, #16]
 8001718:	a912      	add	r1, sp, #72	; 0x48
 800171a:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
 800171e:	f8b5 30d8 	ldrh.w	r3, [r5, #216]	; 0xd8
 8001722:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
 8001726:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
 800172a:	f8ad 3046 	strh.w	r3, [sp, #70]	; 0x46
 800172e:	7873      	ldrb	r3, [r6, #1]
 8001730:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8001734:	217d      	movs	r1, #125	; 0x7d
 8001736:	f933 3c08 	ldrsh.w	r3, [r3, #-8]
 800173a:	015b      	lsls	r3, r3, #5
 800173c:	fb93 f3f1 	sdiv	r3, r3, r1
 8001740:	b29b      	uxth	r3, r3
 8001742:	4353      	muls	r3, r2
 8001744:	f343 320f 	sbfx	r2, r3, #12, #16
 8001748:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 800174c:	f994 1090 	ldrsb.w	r1, [r4, #144]	; 0x90
 8001750:	3300      	adds	r3, #0
 8001752:	bf18      	it	ne
 8001754:	2301      	movne	r3, #1
 8001756:	f884 3090 	strb.w	r3, [r4, #144]	; 0x90
 800175a:	2b00      	cmp	r3, #0
 800175c:	f040 80e7 	bne.w	800192e <BLDC_controller_step+0x592>
 8001760:	b121      	cbz	r1, 800176c <BLDC_controller_step+0x3d0>
 8001762:	2301      	movs	r3, #1
 8001764:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 8001768:	2300      	movs	r3, #0
 800176a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800176c:	2300      	movs	r3, #0
 800176e:	f9b4 1088 	ldrsh.w	r1, [r4, #136]	; 0x88
 8001772:	f894 009e 	ldrb.w	r0, [r4, #158]	; 0x9e
 8001776:	0309      	lsls	r1, r1, #12
 8001778:	f884 309e 	strb.w	r3, [r4, #158]	; 0x9e
 800177c:	2800      	cmp	r0, #0
 800177e:	f040 80d4 	bne.w	800192a <BLDC_controller_step+0x58e>
 8001782:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001784:	f1c2 0c00 	rsb	ip, r2, #0
 8001788:	f01c 6f00 	tst.w	ip, #134217728	; 0x8000000
 800178c:	682b      	ldr	r3, [r5, #0]
 800178e:	bf14      	ite	ne
 8001790:	f04c 4c78 	orrne.w	ip, ip, #4160749568	; 0xf8000000
 8001794:	f02c 4c78 	biceq.w	ip, ip, #4160749568	; 0xf8000000
 8001798:	4563      	cmp	r3, ip
 800179a:	db0a      	blt.n	80017b2 <BLDC_controller_step+0x416>
 800179c:	425b      	negs	r3, r3
 800179e:	f013 6f00 	tst.w	r3, #134217728	; 0x8000000
 80017a2:	bf14      	ite	ne
 80017a4:	f043 4378 	orrne.w	r3, r3, #4160749568	; 0xf8000000
 80017a8:	f023 4378 	biceq.w	r3, r3, #4160749568	; 0xf8000000
 80017ac:	4563      	cmp	r3, ip
 80017ae:	bfb8      	it	lt
 80017b0:	4663      	movlt	r3, ip
 80017b2:	4413      	add	r3, r2
 80017b4:	011a      	lsls	r2, r3, #4
 80017b6:	bf4c      	ite	mi
 80017b8:	f043 4378 	orrmi.w	r3, r3, #4160749568	; 0xf8000000
 80017bc:	f023 4378 	bicpl.w	r3, r3, #4160749568	; 0xf8000000
 80017c0:	2800      	cmp	r0, #0
 80017c2:	bf08      	it	eq
 80017c4:	4619      	moveq	r1, r3
 80017c6:	131b      	asrs	r3, r3, #12
 80017c8:	64e1      	str	r1, [r4, #76]	; 0x4c
 80017ca:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
 80017ce:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 80017d2:	f9b6 2008 	ldrsh.w	r2, [r6, #8]
 80017d6:	930d      	str	r3, [sp, #52]	; 0x34
 80017d8:	f646 233f 	movw	r3, #27199	; 0x6a3f
 80017dc:	0112      	lsls	r2, r2, #4
 80017de:	429a      	cmp	r2, r3
 80017e0:	f300 80a8 	bgt.w	8001934 <BLDC_controller_step+0x598>
 80017e4:	4b96      	ldr	r3, [pc, #600]	; (8001a40 <BLDC_controller_step+0x6a4>)
 80017e6:	429a      	cmp	r2, r3
 80017e8:	f2c0 80a7 	blt.w	800193a <BLDC_controller_step+0x59e>
 80017ec:	b212      	sxth	r2, r2
 80017ee:	f646 233f 	movw	r3, #27199	; 0x6a3f
 80017f2:	f9b6 100a 	ldrsh.w	r1, [r6, #10]
 80017f6:	0109      	lsls	r1, r1, #4
 80017f8:	4299      	cmp	r1, r3
 80017fa:	f300 80a0 	bgt.w	800193e <BLDC_controller_step+0x5a2>
 80017fe:	4b90      	ldr	r3, [pc, #576]	; (8001a40 <BLDC_controller_step+0x6a4>)
 8001800:	4299      	cmp	r1, r3
 8001802:	f2c0 809f 	blt.w	8001944 <BLDC_controller_step+0x5a8>
 8001806:	b209      	sxth	r1, r1
 8001808:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
 800180c:	f895 e0f6 	ldrb.w	lr, [r5, #246]	; 0xf6
 8001810:	2b00      	cmp	r3, #0
 8001812:	d048      	beq.n	80018a6 <BLDC_controller_step+0x50a>
 8001814:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001816:	2b00      	cmp	r3, #0
 8001818:	d045      	beq.n	80018a6 <BLDC_controller_step+0x50a>
 800181a:	f1be 0f00 	cmp.w	lr, #0
 800181e:	d042      	beq.n	80018a6 <BLDC_controller_step+0x50a>
 8001820:	2f00      	cmp	r7, #0
 8001822:	bfb8      	it	lt
 8001824:	427f      	neglt	r7, r7
 8001826:	f9b5 c0de 	ldrsh.w	ip, [r5, #222]	; 0xde
 800182a:	bfb8      	it	lt
 800182c:	b23f      	sxthlt	r7, r7
 800182e:	45bc      	cmp	ip, r7
 8001830:	f9b5 90e0 	ldrsh.w	r9, [r5, #224]	; 0xe0
 8001834:	f2c0 8088 	blt.w	8001948 <BLDC_controller_step+0x5ac>
 8001838:	454f      	cmp	r7, r9
 800183a:	bfb8      	it	lt
 800183c:	464f      	movlt	r7, r9
 800183e:	f9b5 00d4 	ldrsh.w	r0, [r5, #212]	; 0xd4
 8001842:	f1be 0f02 	cmp.w	lr, #2
 8001846:	bf0c      	ite	eq
 8001848:	f9b5 80ce 	ldrsheq.w	r8, [r5, #206]	; 0xce
 800184c:	f9b5 80ca 	ldrshne.w	r8, [r5, #202]	; 0xca
 8001850:	4558      	cmp	r0, fp
 8001852:	f9b5 a0d6 	ldrsh.w	sl, [r5, #214]	; 0xd6
 8001856:	db79      	blt.n	800194c <BLDC_controller_step+0x5b0>
 8001858:	45d3      	cmp	fp, sl
 800185a:	465b      	mov	r3, fp
 800185c:	bfb8      	it	lt
 800185e:	4653      	movlt	r3, sl
 8001860:	b21b      	sxth	r3, r3
 8001862:	fa1f f989 	uxth.w	r9, r9
 8001866:	fa1f fa8a 	uxth.w	sl, sl
 800186a:	eba7 0709 	sub.w	r7, r7, r9
 800186e:	eba3 030a 	sub.w	r3, r3, sl
 8001872:	b23f      	sxth	r7, r7
 8001874:	ebac 0909 	sub.w	r9, ip, r9
 8001878:	b21b      	sxth	r3, r3
 800187a:	eba0 0a0a 	sub.w	sl, r0, sl
 800187e:	03ff      	lsls	r7, r7, #15
 8001880:	fa0f f989 	sxth.w	r9, r9
 8001884:	03db      	lsls	r3, r3, #15
 8001886:	fa0f fa8a 	sxth.w	sl, sl
 800188a:	fb97 f7f9 	sdiv	r7, r7, r9
 800188e:	fb93 f3fa 	sdiv	r3, r3, sl
 8001892:	b2bf      	uxth	r7, r7
 8001894:	b29b      	uxth	r3, r3
 8001896:	435f      	muls	r7, r3
 8001898:	f3c7 37cf 	ubfx	r7, r7, #15, #16
 800189c:	fb08 f707 	mul.w	r7, r8, r7
 80018a0:	13ff      	asrs	r7, r7, #15
 80018a2:	f8a4 705e 	strh.w	r7, [r4, #94]	; 0x5e
 80018a6:	f1be 0002 	subs.w	r0, lr, #2
 80018aa:	bf18      	it	ne
 80018ac:	f04f 30ff 	movne.w	r0, #4294967295
 80018b0:	f994 308f 	ldrsb.w	r3, [r4, #143]	; 0x8f
 80018b4:	f884 008f 	strb.w	r0, [r4, #143]	; 0x8f
 80018b8:	4283      	cmp	r3, r0
 80018ba:	d009      	beq.n	80018d0 <BLDC_controller_step+0x534>
 80018bc:	2b00      	cmp	r3, #0
 80018be:	f040 82b0 	bne.w	8001e22 <BLDC_controller_step+0xa86>
 80018c2:	20ff      	movs	r0, #255	; 0xff
 80018c4:	e9c4 3314 	strd	r3, r3, [r4, #80]	; 0x50
 80018c8:	f884 0091 	strb.w	r0, [r4, #145]	; 0x91
 80018cc:	f8a4 3058 	strh.w	r3, [r4, #88]	; 0x58
 80018d0:	f1be 0f02 	cmp.w	lr, #2
 80018d4:	f040 82a9 	bne.w	8001e2a <BLDC_controller_step+0xa8e>
 80018d8:	e03d      	b.n	8001956 <BLDC_controller_step+0x5ba>
 80018da:	f894 3098 	ldrb.w	r3, [r4, #152]	; 0x98
 80018de:	2b01      	cmp	r3, #1
 80018e0:	d004      	beq.n	80018ec <BLDC_controller_step+0x550>
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	f47f aea9 	bne.w	800163a <BLDC_controller_step+0x29e>
 80018e8:	2303      	movs	r3, #3
 80018ea:	e701      	b.n	80016f0 <BLDC_controller_step+0x354>
 80018ec:	2302      	movs	r3, #2
 80018ee:	e6ff      	b.n	80016f0 <BLDC_controller_step+0x354>
 80018f0:	2200      	movs	r2, #0
 80018f2:	f884 2092 	strb.w	r2, [r4, #146]	; 0x92
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	f47f aefc 	bne.w	80016f4 <BLDC_controller_step+0x358>
 80018fc:	7873      	ldrb	r3, [r6, #1]
 80018fe:	1e5a      	subs	r2, r3, #1
 8001900:	2a02      	cmp	r2, #2
 8001902:	f63f aef7 	bhi.w	80016f4 <BLDC_controller_step+0x358>
 8001906:	45d9      	cmp	r9, fp
 8001908:	f77f aef4 	ble.w	80016f4 <BLDC_controller_step+0x358>
 800190c:	2201      	movs	r2, #1
 800190e:	2b03      	cmp	r3, #3
 8001910:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
 8001914:	d103      	bne.n	800191e <BLDC_controller_step+0x582>
 8001916:	2202      	movs	r2, #2
 8001918:	f884 2098 	strb.w	r2, [r4, #152]	; 0x98
 800191c:	e6e8      	b.n	80016f0 <BLDC_controller_step+0x354>
 800191e:	2b02      	cmp	r3, #2
 8001920:	d0fa      	beq.n	8001918 <BLDC_controller_step+0x57c>
 8001922:	2303      	movs	r3, #3
 8001924:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
 8001928:	e687      	b.n	800163a <BLDC_controller_step+0x29e>
 800192a:	460a      	mov	r2, r1
 800192c:	e72a      	b.n	8001784 <BLDC_controller_step+0x3e8>
 800192e:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
 8001932:	e74c      	b.n	80017ce <BLDC_controller_step+0x432>
 8001934:	f646 2240 	movw	r2, #27200	; 0x6a40
 8001938:	e759      	b.n	80017ee <BLDC_controller_step+0x452>
 800193a:	4a42      	ldr	r2, [pc, #264]	; (8001a44 <BLDC_controller_step+0x6a8>)
 800193c:	e757      	b.n	80017ee <BLDC_controller_step+0x452>
 800193e:	f646 2140 	movw	r1, #27200	; 0x6a40
 8001942:	e761      	b.n	8001808 <BLDC_controller_step+0x46c>
 8001944:	493f      	ldr	r1, [pc, #252]	; (8001a44 <BLDC_controller_step+0x6a8>)
 8001946:	e75f      	b.n	8001808 <BLDC_controller_step+0x46c>
 8001948:	4667      	mov	r7, ip
 800194a:	e778      	b.n	800183e <BLDC_controller_step+0x4a2>
 800194c:	4603      	mov	r3, r0
 800194e:	e788      	b.n	8001862 <BLDC_controller_step+0x4c6>
 8001950:	2300      	movs	r3, #0
 8001952:	f8a4 308a 	strh.w	r3, [r4, #138]	; 0x8a
 8001956:	f9b4 705c 	ldrsh.w	r7, [r4, #92]	; 0x5c
 800195a:	f895 30f9 	ldrb.w	r3, [r5, #249]	; 0xf9
 800195e:	2f00      	cmp	r7, #0
 8001960:	bfbc      	itt	lt
 8001962:	427f      	neglt	r7, r7
 8001964:	b23f      	sxthlt	r7, r7
 8001966:	f9b4 a05e 	ldrsh.w	sl, [r4, #94]	; 0x5e
 800196a:	2b00      	cmp	r3, #0
 800196c:	d03d      	beq.n	80019ea <BLDC_controller_step+0x64e>
 800196e:	f644 13e7 	movw	r3, #18919	; 0x49e7
 8001972:	4618      	mov	r0, r3
 8001974:	f647 78ff 	movw	r8, #32767	; 0x7fff
 8001978:	4350      	muls	r0, r2
 800197a:	bf54      	ite	pl
 800197c:	f04f 0e00 	movpl.w	lr, #0
 8001980:	46c6      	movmi	lr, r8
 8001982:	4359      	muls	r1, r3
 8001984:	f643 73ff 	movw	r3, #16383	; 0x3fff
 8001988:	bf58      	it	pl
 800198a:	2300      	movpl	r3, #0
 800198c:	4684      	mov	ip, r0
 800198e:	4419      	add	r1, r3
 8001990:	1389      	asrs	r1, r1, #14
 8001992:	44f4      	add	ip, lr
 8001994:	eb01 33ec 	add.w	r3, r1, ip, asr #15
 8001998:	492b      	ldr	r1, [pc, #172]	; (8001a48 <BLDC_controller_step+0x6ac>)
 800199a:	428b      	cmp	r3, r1
 800199c:	bfb8      	it	lt
 800199e:	460b      	movlt	r3, r1
 80019a0:	4543      	cmp	r3, r8
 80019a2:	bfa8      	it	ge
 80019a4:	4643      	movge	r3, r8
 80019a6:	b21b      	sxth	r3, r3
 80019a8:	9906      	ldr	r1, [sp, #24]
 80019aa:	2900      	cmp	r1, #0
 80019ac:	d040      	beq.n	8001a30 <BLDC_controller_step+0x694>
 80019ae:	f3c1 19c8 	ubfx	r9, r1, #7, #9
 80019b2:	f1b9 0fb3 	cmp.w	r9, #179	; 0xb3
 80019b6:	d83e      	bhi.n	8001a36 <BLDC_controller_step+0x69a>
 80019b8:	fa5f f989 	uxtb.w	r9, r9
 80019bc:	7830      	ldrb	r0, [r6, #0]
 80019be:	f994 c091 	ldrsb.w	ip, [r4, #145]	; 0x91
 80019c2:	fab0 f180 	clz	r1, r0
 80019c6:	0949      	lsrs	r1, r1, #5
 80019c8:	4249      	negs	r1, r1
 80019ca:	458c      	cmp	ip, r1
 80019cc:	f884 1091 	strb.w	r1, [r4, #145]	; 0x91
 80019d0:	d007      	beq.n	80019e2 <BLDC_controller_step+0x646>
 80019d2:	f1bc 0f00 	cmp.w	ip, #0
 80019d6:	f040 824f 	bne.w	8001e78 <BLDC_controller_step+0xadc>
 80019da:	f8a4 c056 	strh.w	ip, [r4, #86]	; 0x56
 80019de:	f8a4 c058 	strh.w	ip, [r4, #88]	; 0x58
 80019e2:	2800      	cmp	r0, #0
 80019e4:	f000 8284 	beq.w	8001ef0 <BLDC_controller_step+0xb54>
 80019e8:	e24a      	b.n	8001e80 <BLDC_controller_step+0xae4>
 80019ea:	f8df c05c 	ldr.w	ip, [pc, #92]	; 8001a48 <BLDC_controller_step+0x6ac>
 80019ee:	1a53      	subs	r3, r2, r1
 80019f0:	4563      	cmp	r3, ip
 80019f2:	f647 78ff 	movw	r8, #32767	; 0x7fff
 80019f6:	bfb8      	it	lt
 80019f8:	4663      	movlt	r3, ip
 80019fa:	f644 1ee7 	movw	lr, #18919	; 0x49e7
 80019fe:	4543      	cmp	r3, r8
 8001a00:	4670      	mov	r0, lr
 8001a02:	bfa8      	it	ge
 8001a04:	4643      	movge	r3, r8
 8001a06:	4358      	muls	r0, r3
 8001a08:	f1c2 0200 	rsb	r2, r2, #0
 8001a0c:	eba2 0201 	sub.w	r2, r2, r1
 8001a10:	bf54      	ite	pl
 8001a12:	f04f 0e00 	movpl.w	lr, #0
 8001a16:	46c6      	movmi	lr, r8
 8001a18:	4562      	cmp	r2, ip
 8001a1a:	bfb8      	it	lt
 8001a1c:	4662      	movlt	r2, ip
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4542      	cmp	r2, r8
 8001a22:	bfa8      	it	ge
 8001a24:	4642      	movge	r2, r8
 8001a26:	4473      	add	r3, lr
 8001a28:	f343 33cf 	sbfx	r3, r3, #15, #16
 8001a2c:	b212      	sxth	r2, r2
 8001a2e:	e7bb      	b.n	80019a8 <BLDC_controller_step+0x60c>
 8001a30:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8001a34:	e7c2      	b.n	80019bc <BLDC_controller_step+0x620>
 8001a36:	f04f 09b4 	mov.w	r9, #180	; 0xb4
 8001a3a:	e7bf      	b.n	80019bc <BLDC_controller_step+0x620>
 8001a3c:	ffffc180 	.word	0xffffc180
 8001a40:	ffff95c1 	.word	0xffff95c1
 8001a44:	ffff95c0 	.word	0xffff95c0
 8001a48:	ffff8000 	.word	0xffff8000
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	e273      	b.n	8001f38 <BLDC_controller_step+0xb9c>
 8001a50:	232d      	movs	r3, #45	; 0x2d
 8001a52:	e271      	b.n	8001f38 <BLDC_controller_step+0xb9c>
 8001a54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a58:	e28f      	b.n	8001f7a <BLDC_controller_step+0xbde>
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	e294      	b.n	8001f88 <BLDC_controller_step+0xbec>
 8001a5e:	f9b4 3056 	ldrsh.w	r3, [r4, #86]	; 0x56
 8001a62:	4298      	cmp	r0, r3
 8001a64:	db03      	blt.n	8001a6e <BLDC_controller_step+0x6d2>
 8001a66:	429a      	cmp	r2, r3
 8001a68:	bfb8      	it	lt
 8001a6a:	461a      	movlt	r2, r3
 8001a6c:	4610      	mov	r0, r2
 8001a6e:	f8b5 20f0 	ldrh.w	r2, [r5, #240]	; 0xf0
 8001a72:	1ac3      	subs	r3, r0, r3
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	4353      	muls	r3, r2
 8001a78:	64a3      	str	r3, [r4, #72]	; 0x48
 8001a7a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8001a7e:	425b      	negs	r3, r3
 8001a80:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
 8001a84:	f894 309d 	ldrb.w	r3, [r4, #157]	; 0x9d
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d053      	beq.n	8001b34 <BLDC_controller_step+0x798>
 8001a8c:	9b07      	ldr	r3, [sp, #28]
 8001a8e:	b353      	cbz	r3, 8001ae6 <BLDC_controller_step+0x74a>
 8001a90:	f1ca 0a00 	rsb	sl, sl, #0
 8001a94:	f9b4 0068 	ldrsh.w	r0, [r4, #104]	; 0x68
 8001a98:	fa0f fa8a 	sxth.w	sl, sl
 8001a9c:	4550      	cmp	r0, sl
 8001a9e:	db04      	blt.n	8001aaa <BLDC_controller_step+0x70e>
 8001aa0:	f9b4 006e 	ldrsh.w	r0, [r4, #110]	; 0x6e
 8001aa4:	4550      	cmp	r0, sl
 8001aa6:	bfb8      	it	lt
 8001aa8:	4650      	movlt	r0, sl
 8001aaa:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8001aae:	f104 0c3c 	add.w	ip, r4, #60	; 0x3c
 8001ab2:	f8b5 20ec 	ldrh.w	r2, [r5, #236]	; 0xec
 8001ab6:	f8b5 10e4 	ldrh.w	r1, [r5, #228]	; 0xe4
 8001aba:	1ac0      	subs	r0, r0, r3
 8001abc:	f9b4 3060 	ldrsh.w	r3, [r4, #96]	; 0x60
 8001ac0:	f8cd c00c 	str.w	ip, [sp, #12]
 8001ac4:	f104 0c78 	add.w	ip, r4, #120	; 0x78
 8001ac8:	f8cd c008 	str.w	ip, [sp, #8]
 8001acc:	f04f 0c00 	mov.w	ip, #0
 8001ad0:	f8cd c004 	str.w	ip, [sp, #4]
 8001ad4:	f9b4 c062 	ldrsh.w	ip, [r4, #98]	; 0x62
 8001ad8:	f300 000f 	ssat	r0, #16, r0
 8001adc:	f8cd c000 	str.w	ip, [sp]
 8001ae0:	b200      	sxth	r0, r0
 8001ae2:	f7ff fb6d 	bl	80011c0 <PI_clamp_fixdt>
 8001ae6:	f894 3092 	ldrb.w	r3, [r4, #146]	; 0x92
 8001aea:	f9b4 205c 	ldrsh.w	r2, [r4, #92]	; 0x5c
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	f000 8110 	beq.w	8001d14 <BLDC_controller_step+0x978>
 8001af4:	2b03      	cmp	r3, #3
 8001af6:	f000 8126 	beq.w	8001d46 <BLDC_controller_step+0x9aa>
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	f040 8152 	bne.w	8001da4 <BLDC_controller_step+0xa08>
 8001b00:	f9b4 3074 	ldrsh.w	r3, [r4, #116]	; 0x74
 8001b04:	f9b4 1072 	ldrsh.w	r1, [r4, #114]	; 0x72
 8001b08:	428b      	cmp	r3, r1
 8001b0a:	bfa8      	it	ge
 8001b0c:	460b      	movge	r3, r1
 8001b0e:	429f      	cmp	r7, r3
 8001b10:	bfa8      	it	ge
 8001b12:	461f      	movge	r7, r3
 8001b14:	2a00      	cmp	r2, #0
 8001b16:	f2c0 80f2 	blt.w	8001cfe <BLDC_controller_step+0x962>
 8001b1a:	bfcc      	ite	gt
 8001b1c:	2301      	movgt	r3, #1
 8001b1e:	2300      	movle	r3, #0
 8001b20:	b21b      	sxth	r3, r3
 8001b22:	435f      	muls	r7, r3
 8001b24:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8001b28:	b23f      	sxth	r7, r7
 8001b2a:	42bb      	cmp	r3, r7
 8001b2c:	f280 80ea 	bge.w	8001d04 <BLDC_controller_step+0x968>
 8001b30:	f8a4 3076 	strh.w	r3, [r4, #118]	; 0x76
 8001b34:	4bce      	ldr	r3, [pc, #824]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001b36:	f509 7235 	add.w	r2, r9, #724	; 0x2d4
 8001b3a:	f9b4 8078 	ldrsh.w	r8, [r4, #120]	; 0x78
 8001b3e:	f933 2012 	ldrsh.w	r2, [r3, r2, lsl #1]
 8001b42:	eb03 0949 	add.w	r9, r3, r9, lsl #1
 8001b46:	fb02 f308 	mul.w	r3, r2, r8
 8001b4a:	f9b9 043e 	ldrsh.w	r0, [r9, #1086]	; 0x43e
 8001b4e:	f9b4 7076 	ldrsh.w	r7, [r4, #118]	; 0x76
 8001b52:	f343 318f 	sbfx	r1, r3, #14, #16
 8001b56:	fb00 f307 	mul.w	r3, r0, r7
 8001b5a:	f8df e318 	ldr.w	lr, [pc, #792]	; 8001e74 <BLDC_controller_step+0xad8>
 8001b5e:	f343 338f 	sbfx	r3, r3, #14, #16
 8001b62:	1acb      	subs	r3, r1, r3
 8001b64:	4573      	cmp	r3, lr
 8001b66:	f647 7cff 	movw	ip, #32767	; 0x7fff
 8001b6a:	bfb8      	it	lt
 8001b6c:	4673      	movlt	r3, lr
 8001b6e:	fb00 f008 	mul.w	r0, r0, r8
 8001b72:	437a      	muls	r2, r7
 8001b74:	f340 308f 	sbfx	r0, r0, #14, #16
 8001b78:	f342 328f 	sbfx	r2, r2, #14, #16
 8001b7c:	4410      	add	r0, r2
 8001b7e:	4563      	cmp	r3, ip
 8001b80:	bfa8      	it	ge
 8001b82:	4663      	movge	r3, ip
 8001b84:	4570      	cmp	r0, lr
 8001b86:	bfb8      	it	lt
 8001b88:	4670      	movlt	r0, lr
 8001b8a:	4560      	cmp	r0, ip
 8001b8c:	f243 726d 	movw	r2, #14189	; 0x376d
 8001b90:	bfa8      	it	ge
 8001b92:	4660      	movge	r0, ip
 8001b94:	4350      	muls	r0, r2
 8001b96:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8001b9a:	bf58      	it	pl
 8001b9c:	2200      	movpl	r2, #0
 8001b9e:	b219      	sxth	r1, r3
 8001ba0:	4410      	add	r0, r2
 8001ba2:	eb03 72d1 	add.w	r2, r3, r1, lsr #31
 8001ba6:	f342 024e 	sbfx	r2, r2, #1, #15
 8001baa:	ebc2 32a0 	rsb	r2, r2, r0, asr #14
 8001bae:	4572      	cmp	r2, lr
 8001bb0:	bfb8      	it	lt
 8001bb2:	4672      	movlt	r2, lr
 8001bb4:	4562      	cmp	r2, ip
 8001bb6:	bfa8      	it	ge
 8001bb8:	4662      	movge	r2, ip
 8001bba:	4258      	negs	r0, r3
 8001bbc:	1a80      	subs	r0, r0, r2
 8001bbe:	4570      	cmp	r0, lr
 8001bc0:	bfb8      	it	lt
 8001bc2:	4670      	movlt	r0, lr
 8001bc4:	4560      	cmp	r0, ip
 8001bc6:	bfa8      	it	ge
 8001bc8:	4660      	movge	r0, ip
 8001bca:	fa0f fa82 	sxth.w	sl, r2
 8001bce:	4551      	cmp	r1, sl
 8001bd0:	900a      	str	r0, [sp, #40]	; 0x28
 8001bd2:	4608      	mov	r0, r1
 8001bd4:	bfa8      	it	ge
 8001bd6:	4650      	movge	r0, sl
 8001bd8:	4551      	cmp	r1, sl
 8001bda:	bfb8      	it	lt
 8001bdc:	4651      	movlt	r1, sl
 8001bde:	f9bd 9028 	ldrsh.w	r9, [sp, #40]	; 0x28
 8001be2:	f644 1ae7 	movw	sl, #18919	; 0x49e7
 8001be6:	4549      	cmp	r1, r9
 8001be8:	bfb8      	it	lt
 8001bea:	4649      	movlt	r1, r9
 8001bec:	4548      	cmp	r0, r9
 8001bee:	bfd4      	ite	le
 8001bf0:	1809      	addle	r1, r1, r0
 8001bf2:	4449      	addgt	r1, r9
 8001bf4:	4571      	cmp	r1, lr
 8001bf6:	bfb8      	it	lt
 8001bf8:	4671      	movlt	r1, lr
 8001bfa:	4561      	cmp	r1, ip
 8001bfc:	bfa8      	it	ge
 8001bfe:	4661      	movge	r1, ip
 8001c00:	1049      	asrs	r1, r1, #1
 8001c02:	1a5b      	subs	r3, r3, r1
 8001c04:	4573      	cmp	r3, lr
 8001c06:	bfb8      	it	lt
 8001c08:	4673      	movlt	r3, lr
 8001c0a:	4563      	cmp	r3, ip
 8001c0c:	bfa8      	it	ge
 8001c0e:	4663      	movge	r3, ip
 8001c10:	1a52      	subs	r2, r2, r1
 8001c12:	4572      	cmp	r2, lr
 8001c14:	bfb8      	it	lt
 8001c16:	4672      	movlt	r2, lr
 8001c18:	fb0a f303 	mul.w	r3, sl, r3
 8001c1c:	139b      	asrs	r3, r3, #14
 8001c1e:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
 8001c22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001c24:	4562      	cmp	r2, ip
 8001c26:	eba3 0001 	sub.w	r0, r3, r1
 8001c2a:	bfa8      	it	ge
 8001c2c:	4662      	movge	r2, ip
 8001c2e:	4570      	cmp	r0, lr
 8001c30:	bfb8      	it	lt
 8001c32:	4670      	movlt	r0, lr
 8001c34:	4560      	cmp	r0, ip
 8001c36:	bfa8      	it	ge
 8001c38:	4660      	movge	r0, ip
 8001c3a:	fb0a f202 	mul.w	r2, sl, r2
 8001c3e:	fb0a f000 	mul.w	r0, sl, r0
 8001c42:	1392      	asrs	r2, r2, #14
 8001c44:	1380      	asrs	r0, r0, #14
 8001c46:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8001c4a:	f8a4 0054 	strh.w	r0, [r4, #84]	; 0x54
 8001c4e:	f8a4 808a 	strh.w	r8, [r4, #138]	; 0x8a
 8001c52:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	f040 80e9 	bne.w	8001e2e <BLDC_controller_step+0xa92>
 8001c5c:	9b07      	ldr	r3, [sp, #28]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80ea 	beq.w	8001e38 <BLDC_controller_step+0xa9c>
 8001c64:	f9b4 1050 	ldrsh.w	r1, [r4, #80]	; 0x50
 8001c68:	f9b4 2052 	ldrsh.w	r2, [r4, #82]	; 0x52
 8001c6c:	f9b4 3054 	ldrsh.w	r3, [r4, #84]	; 0x54
 8001c70:	9804      	ldr	r0, [sp, #16]
 8001c72:	1109      	asrs	r1, r1, #4
 8001c74:	1112      	asrs	r2, r2, #4
 8001c76:	8001      	strh	r1, [r0, #0]
 8001c78:	8042      	strh	r2, [r0, #2]
 8001c7a:	7932      	ldrb	r2, [r6, #4]
 8001c7c:	111b      	asrs	r3, r3, #4
 8001c7e:	f884 2093 	strb.w	r2, [r4, #147]	; 0x93
 8001c82:	7972      	ldrb	r2, [r6, #5]
 8001c84:	f884 2094 	strb.w	r2, [r4, #148]	; 0x94
 8001c88:	79b2      	ldrb	r2, [r6, #6]
 8001c8a:	f8a4 b086 	strh.w	fp, [r4, #134]	; 0x86
 8001c8e:	f884 2095 	strb.w	r2, [r4, #149]	; 0x95
 8001c92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001c94:	f8a4 7088 	strh.w	r7, [r4, #136]	; 0x88
 8001c98:	f8a4 207c 	strh.w	r2, [r4, #124]	; 0x7c
 8001c9c:	f894 209d 	ldrb.w	r2, [r4, #157]	; 0x9d
 8001ca0:	f884 209b 	strb.w	r2, [r4, #155]	; 0x9b
 8001ca4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001ca6:	f884 209c 	strb.w	r2, [r4, #156]	; 0x9c
 8001caa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001cac:	f884 209d 	strb.w	r2, [r4, #157]	; 0x9d
 8001cb0:	8083      	strh	r3, [r0, #4]
 8001cb2:	9b05      	ldr	r3, [sp, #20]
 8001cb4:	111b      	asrs	r3, r3, #4
 8001cb6:	8103      	strh	r3, [r0, #8]
 8001cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001cba:	119b      	asrs	r3, r3, #6
 8001cbc:	8143      	strh	r3, [r0, #10]
 8001cbe:	f9b4 3056 	ldrsh.w	r3, [r4, #86]	; 0x56
 8001cc2:	111b      	asrs	r3, r3, #4
 8001cc4:	8183      	strh	r3, [r0, #12]
 8001cc6:	f9b4 3058 	ldrsh.w	r3, [r4, #88]	; 0x58
 8001cca:	111b      	asrs	r3, r3, #4
 8001ccc:	81c3      	strh	r3, [r0, #14]
 8001cce:	b013      	add	sp, #76	; 0x4c
 8001cd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001cd4:	f104 0c0c 	add.w	ip, r4, #12
 8001cd8:	f8b5 00d8 	ldrh.w	r0, [r5, #216]	; 0xd8
 8001cdc:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8001ce0:	f8b5 10f4 	ldrh.w	r1, [r5, #244]	; 0xf4
 8001ce4:	f8cd c008 	str.w	ip, [sp, #8]
 8001ce8:	f104 0c70 	add.w	ip, r4, #112	; 0x70
 8001cec:	f8cd c004 	str.w	ip, [sp, #4]
 8001cf0:	f04f 0c00 	mov.w	ip, #0
 8001cf4:	eba0 000b 	sub.w	r0, r0, fp
 8001cf8:	f8cd c000 	str.w	ip, [sp]
 8001cfc:	e18a      	b.n	8002014 <BLDC_controller_step+0xc78>
 8001cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8001d02:	e70e      	b.n	8001b22 <BLDC_controller_step+0x786>
 8001d04:	f9b4 3066 	ldrsh.w	r3, [r4, #102]	; 0x66
 8001d08:	429f      	cmp	r7, r3
 8001d0a:	bfb8      	it	lt
 8001d0c:	461f      	movlt	r7, r3
 8001d0e:	f8a4 7076 	strh.w	r7, [r4, #118]	; 0x76
 8001d12:	e70f      	b.n	8001b34 <BLDC_controller_step+0x798>
 8001d14:	9b05      	ldr	r3, [sp, #20]
 8001d16:	f104 0734 	add.w	r7, r4, #52	; 0x34
 8001d1a:	f8b5 10e8 	ldrh.w	r1, [r5, #232]	; 0xe8
 8001d1e:	1ad0      	subs	r0, r2, r3
 8001d20:	f9b4 3064 	ldrsh.w	r3, [r4, #100]	; 0x64
 8001d24:	f8b5 20f2 	ldrh.w	r2, [r5, #242]	; 0xf2
 8001d28:	9703      	str	r7, [sp, #12]
 8001d2a:	f104 0776 	add.w	r7, r4, #118	; 0x76
 8001d2e:	9702      	str	r7, [sp, #8]
 8001d30:	6ca7      	ldr	r7, [r4, #72]	; 0x48
 8001d32:	f300 000f 	ssat	r0, #16, r0
 8001d36:	9701      	str	r7, [sp, #4]
 8001d38:	f9b4 7066 	ldrsh.w	r7, [r4, #102]	; 0x66
 8001d3c:	9700      	str	r7, [sp, #0]
 8001d3e:	b200      	sxth	r0, r0
 8001d40:	f7ff fa3e 	bl	80011c0 <PI_clamp_fixdt>
 8001d44:	e6f6      	b.n	8001b34 <BLDC_controller_step+0x798>
 8001d46:	f9b4 3070 	ldrsh.w	r3, [r4, #112]	; 0x70
 8001d4a:	f9b4 006a 	ldrsh.w	r0, [r4, #106]	; 0x6a
 8001d4e:	425f      	negs	r7, r3
 8001d50:	4290      	cmp	r0, r2
 8001d52:	b23f      	sxth	r7, r7
 8001d54:	db04      	blt.n	8001d60 <BLDC_controller_step+0x9c4>
 8001d56:	f9b4 006c 	ldrsh.w	r0, [r4, #108]	; 0x6c
 8001d5a:	4290      	cmp	r0, r2
 8001d5c:	bfb8      	it	lt
 8001d5e:	4610      	movlt	r0, r2
 8001d60:	f9b4 2056 	ldrsh.w	r2, [r4, #86]	; 0x56
 8001d64:	f104 0e2c 	add.w	lr, r4, #44	; 0x2c
 8001d68:	f9b4 c064 	ldrsh.w	ip, [r4, #100]	; 0x64
 8001d6c:	f8b5 10e6 	ldrh.w	r1, [r5, #230]	; 0xe6
 8001d70:	1a80      	subs	r0, r0, r2
 8001d72:	f8b5 20ee 	ldrh.w	r2, [r5, #238]	; 0xee
 8001d76:	f8cd e00c 	str.w	lr, [sp, #12]
 8001d7a:	f104 0e76 	add.w	lr, r4, #118	; 0x76
 8001d7e:	f8cd e008 	str.w	lr, [sp, #8]
 8001d82:	f04f 0e00 	mov.w	lr, #0
 8001d86:	f8cd e004 	str.w	lr, [sp, #4]
 8001d8a:	f9b4 e066 	ldrsh.w	lr, [r4, #102]	; 0x66
 8001d8e:	f300 000f 	ssat	r0, #16, r0
 8001d92:	45be      	cmp	lr, r7
 8001d94:	bfac      	ite	ge
 8001d96:	f8cd e000 	strge.w	lr, [sp]
 8001d9a:	9700      	strlt	r7, [sp, #0]
 8001d9c:	4563      	cmp	r3, ip
 8001d9e:	bfa8      	it	ge
 8001da0:	4663      	movge	r3, ip
 8001da2:	e7cc      	b.n	8001d3e <BLDC_controller_step+0x9a2>
 8001da4:	f8a4 2076 	strh.w	r2, [r4, #118]	; 0x76
 8001da8:	e6c4      	b.n	8001b34 <BLDC_controller_step+0x798>
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d144      	bne.n	8001e38 <BLDC_controller_step+0xa9c>
 8001dae:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
 8001db2:	b383      	cbz	r3, 8001e16 <BLDC_controller_step+0xa7a>
 8001db4:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
 8001db8:	f994 208c 	ldrsb.w	r2, [r4, #140]	; 0x8c
 8001dbc:	f44f 41b4 	mov.w	r1, #23040	; 0x5a00
 8001dc0:	435a      	muls	r2, r3
 8001dc2:	9b06      	ldr	r3, [sp, #24]
 8001dc4:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8001dc8:	b292      	uxth	r2, r2
 8001dca:	b210      	sxth	r0, r2
 8001dcc:	f7ff f9dc 	bl	8001188 <div_nde_s32_floor>
 8001dd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001dd4:	ebc0 1300 	rsb	r3, r0, r0, lsl #4
 8001dd8:	eba2 2343 	sub.w	r3, r2, r3, lsl #9
 8001ddc:	b21b      	sxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	dd1b      	ble.n	8001e1a <BLDC_controller_step+0xa7e>
 8001de2:	f3c3 13c8 	ubfx	r3, r3, #7, #9
 8001de6:	2bb3      	cmp	r3, #179	; 0xb3
 8001de8:	d819      	bhi.n	8001e1e <BLDC_controller_step+0xa82>
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	4820      	ldr	r0, [pc, #128]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001dee:	f930 1013 	ldrsh.w	r1, [r0, r3, lsl #1]
 8001df2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8001df6:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8001dfa:	f9b2 216a 	ldrsh.w	r2, [r2, #362]	; 0x16a
 8001dfe:	f9b3 32d4 	ldrsh.w	r3, [r3, #724]	; 0x2d4
 8001e02:	4379      	muls	r1, r7
 8001e04:	437a      	muls	r2, r7
 8001e06:	437b      	muls	r3, r7
 8001e08:	f341 318f 	sbfx	r1, r1, #14, #16
 8001e0c:	f342 328f 	sbfx	r2, r2, #14, #16
 8001e10:	f343 338f 	sbfx	r3, r3, #14, #16
 8001e14:	e72c      	b.n	8001c70 <BLDC_controller_step+0x8d4>
 8001e16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001e18:	e7e1      	b.n	8001dde <BLDC_controller_step+0xa42>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	e7e6      	b.n	8001dec <BLDC_controller_step+0xa50>
 8001e1e:	23b4      	movs	r3, #180	; 0xb4
 8001e20:	e7e4      	b.n	8001dec <BLDC_controller_step+0xa50>
 8001e22:	f1be 0f02 	cmp.w	lr, #2
 8001e26:	f43f ad93 	beq.w	8001950 <BLDC_controller_step+0x5b4>
 8001e2a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
 8001e2e:	9a07      	ldr	r2, [sp, #28]
 8001e30:	f9b4 705c 	ldrsh.w	r7, [r4, #92]	; 0x5c
 8001e34:	2a00      	cmp	r2, #0
 8001e36:	d1b8      	bne.n	8001daa <BLDC_controller_step+0xa0e>
 8001e38:	480d      	ldr	r0, [pc, #52]	; (8001e70 <BLDC_controller_step+0xad4>)
 8001e3a:	9b08      	ldr	r3, [sp, #32]
 8001e3c:	b2bd      	uxth	r5, r7
 8001e3e:	4403      	add	r3, r0
 8001e40:	f993 3788 	ldrsb.w	r3, [r3, #1928]	; 0x788
 8001e44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001e48:	2b05      	cmp	r3, #5
 8001e4a:	bfa8      	it	ge
 8001e4c:	2305      	movge	r3, #5
 8001e4e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8001e52:	4418      	add	r0, r3
 8001e54:	f990 1776 	ldrsb.w	r1, [r0, #1910]	; 0x776
 8001e58:	f990 2777 	ldrsb.w	r2, [r0, #1911]	; 0x777
 8001e5c:	f990 3778 	ldrsb.w	r3, [r0, #1912]	; 0x778
 8001e60:	4369      	muls	r1, r5
 8001e62:	436a      	muls	r2, r5
 8001e64:	436b      	muls	r3, r5
 8001e66:	b209      	sxth	r1, r1
 8001e68:	b212      	sxth	r2, r2
 8001e6a:	b21b      	sxth	r3, r3
 8001e6c:	e700      	b.n	8001c70 <BLDC_controller_step+0x8d4>
 8001e6e:	bf00      	nop
 8001e70:	0800c220 	.word	0x0800c220
 8001e74:	ffff8000 	.word	0xffff8000
 8001e78:	b3d0      	cbz	r0, 8001ef0 <BLDC_controller_step+0xb54>
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	e9c4 1109 	strd	r1, r1, [r4, #36]	; 0x24
 8001e80:	4866      	ldr	r0, [pc, #408]	; (800201c <BLDC_controller_step+0xc80>)
 8001e82:	f509 7135 	add.w	r1, r9, #724	; 0x2d4
 8001e86:	f930 1011 	ldrsh.w	r1, [r0, r1, lsl #1]
 8001e8a:	eb00 0049 	add.w	r0, r0, r9, lsl #1
 8001e8e:	f9b0 c43e 	ldrsh.w	ip, [r0, #1086]	; 0x43e
 8001e92:	fb01 f003 	mul.w	r0, r1, r3
 8001e96:	f340 3e8f 	sbfx	lr, r0, #14, #16
 8001e9a:	fb0c f002 	mul.w	r0, ip, r2
 8001e9e:	f8df 8180 	ldr.w	r8, [pc, #384]	; 8002020 <BLDC_controller_step+0xc84>
 8001ea2:	f340 308f 	sbfx	r0, r0, #14, #16
 8001ea6:	ebae 0000 	sub.w	r0, lr, r0
 8001eaa:	4540      	cmp	r0, r8
 8001eac:	f647 7eff 	movw	lr, #32767	; 0x7fff
 8001eb0:	bfb8      	it	lt
 8001eb2:	4640      	movlt	r0, r8
 8001eb4:	434a      	muls	r2, r1
 8001eb6:	fb0c f303 	mul.w	r3, ip, r3
 8001eba:	f342 328f 	sbfx	r2, r2, #14, #16
 8001ebe:	f343 338f 	sbfx	r3, r3, #14, #16
 8001ec2:	4413      	add	r3, r2
 8001ec4:	4570      	cmp	r0, lr
 8001ec6:	bfa8      	it	ge
 8001ec8:	4670      	movge	r0, lr
 8001eca:	4543      	cmp	r3, r8
 8001ecc:	bfb8      	it	lt
 8001ece:	4643      	movlt	r3, r8
 8001ed0:	459e      	cmp	lr, r3
 8001ed2:	bfa8      	it	ge
 8001ed4:	469e      	movge	lr, r3
 8001ed6:	f8ad 003c 	strh.w	r0, [sp, #60]	; 0x3c
 8001eda:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8001ede:	f104 0256 	add.w	r2, r4, #86	; 0x56
 8001ee2:	f8b5 10ea 	ldrh.w	r1, [r5, #234]	; 0xea
 8001ee6:	a80f      	add	r0, sp, #60	; 0x3c
 8001ee8:	f8ad e03e 	strh.w	lr, [sp, #62]	; 0x3e
 8001eec:	f7ff f9d0 	bl	8001290 <Low_Pass_Filter>
 8001ef0:	f894 309c 	ldrb.w	r3, [r4, #156]	; 0x9c
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f43f adc5 	beq.w	8001a84 <BLDC_controller_step+0x6e8>
 8001efa:	f9b5 3010 	ldrsh.w	r3, [r5, #16]
 8001efe:	f9b5 106e 	ldrsh.w	r1, [r5, #110]	; 0x6e
 8001f02:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
 8001f06:	425b      	negs	r3, r3
 8001f08:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
 8001f0c:	f9b4 308a 	ldrsh.w	r3, [r4, #138]	; 0x8a
 8001f10:	f9b5 2070 	ldrsh.w	r2, [r5, #112]	; 0x70
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	bfbc      	itt	lt
 8001f18:	425b      	neglt	r3, r3
 8001f1a:	b21b      	sxthlt	r3, r3
 8001f1c:	4299      	cmp	r1, r3
 8001f1e:	f6bf ad95 	bge.w	8001a4c <BLDC_controller_step+0x6b0>
 8001f22:	b289      	uxth	r1, r1
 8001f24:	1a5b      	subs	r3, r3, r1
 8001f26:	1a52      	subs	r2, r2, r1
 8001f28:	b29b      	uxth	r3, r3
 8001f2a:	b292      	uxth	r2, r2
 8001f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001f30:	2b2c      	cmp	r3, #44	; 0x2c
 8001f32:	f63f ad8d 	bhi.w	8001a50 <BLDC_controller_step+0x6b4>
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001f3c:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001f40:	f9b5 10cc 	ldrsh.w	r1, [r5, #204]	; 0xcc
 8001f44:	425a      	negs	r2, r3
 8001f46:	f8a4 2066 	strh.w	r2, [r4, #102]	; 0x66
 8001f4a:	f9b4 205e 	ldrsh.w	r2, [r4, #94]	; 0x5e
 8001f4e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
 8001f52:	0412      	lsls	r2, r2, #16
 8001f54:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8001f58:	f8a4 1068 	strh.w	r1, [r4, #104]	; 0x68
 8001f5c:	d102      	bne.n	8001f64 <BLDC_controller_step+0xbc8>
 8001f5e:	1c48      	adds	r0, r1, #1
 8001f60:	f43f ad78 	beq.w	8001a54 <BLDC_controller_step+0x6b8>
 8001f64:	fb92 f2f1 	sdiv	r2, r2, r1
 8001f68:	2a00      	cmp	r2, #0
 8001f6a:	f77f ad76 	ble.w	8001a5a <BLDC_controller_step+0x6be>
 8001f6e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001f72:	4282      	cmp	r2, r0
 8001f74:	bfa8      	it	ge
 8001f76:	4602      	movge	r2, r0
 8001f78:	b292      	uxth	r2, r2
 8001f7a:	f240 501f 	movw	r0, #1311	; 0x51f
 8001f7e:	fbb2 f2f0 	udiv	r2, r2, r0
 8001f82:	2a31      	cmp	r2, #49	; 0x31
 8001f84:	d000      	beq.n	8001f88 <BLDC_controller_step+0xbec>
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	4824      	ldr	r0, [pc, #144]	; (800201c <BLDC_controller_step+0xc80>)
 8001f8a:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001f8e:	f8b2 0712 	ldrh.w	r0, [r2, #1810]	; 0x712
 8001f92:	4341      	muls	r1, r0
 8001f94:	1409      	asrs	r1, r1, #16
 8001f96:	b208      	sxth	r0, r1
 8001f98:	fa1f fc81 	uxth.w	ip, r1
 8001f9c:	f894 1092 	ldrb.w	r1, [r4, #146]	; 0x92
 8001fa0:	f1cc 0200 	rsb	r2, ip, #0
 8001fa4:	b212      	sxth	r2, r2
 8001fa6:	2902      	cmp	r1, #2
 8001fa8:	f8a4 006a 	strh.w	r0, [r4, #106]	; 0x6a
 8001fac:	f8a4 206c 	strh.w	r2, [r4, #108]	; 0x6c
 8001fb0:	f43f ad55 	beq.w	8001a5e <BLDC_controller_step+0x6c2>
 8001fb4:	2903      	cmp	r1, #3
 8001fb6:	f43f ae8d 	beq.w	8001cd4 <BLDC_controller_step+0x938>
 8001fba:	2901      	cmp	r1, #1
 8001fbc:	f47f ad5d 	bne.w	8001a7a <BLDC_controller_step+0x6de>
 8001fc0:	f04f 0800 	mov.w	r8, #0
 8001fc4:	f9b4 0056 	ldrsh.w	r0, [r4, #86]	; 0x56
 8001fc8:	f104 031c 	add.w	r3, r4, #28
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	bfbc      	itt	lt
 8001fd0:	4240      	neglt	r0, r0
 8001fd2:	b200      	sxthlt	r0, r0
 8001fd4:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8001fd8:	f8b5 10f0 	ldrh.w	r1, [r5, #240]	; 0xf0
 8001fdc:	ebac 0000 	sub.w	r0, ip, r0
 8001fe0:	9302      	str	r3, [sp, #8]
 8001fe2:	f104 0374 	add.w	r3, r4, #116	; 0x74
 8001fe6:	9301      	str	r3, [sp, #4]
 8001fe8:	b200      	sxth	r0, r0
 8001fea:	463b      	mov	r3, r7
 8001fec:	f8cd 8000 	str.w	r8, [sp]
 8001ff0:	f7ff f976 	bl	80012e0 <I_backCalc_fixdt>
 8001ff4:	f104 0314 	add.w	r3, r4, #20
 8001ff8:	f8b5 00d8 	ldrh.w	r0, [r5, #216]	; 0xd8
 8001ffc:	f8b5 20e2 	ldrh.w	r2, [r5, #226]	; 0xe2
 8002000:	f8b5 10f4 	ldrh.w	r1, [r5, #244]	; 0xf4
 8002004:	9302      	str	r3, [sp, #8]
 8002006:	f104 0372 	add.w	r3, r4, #114	; 0x72
 800200a:	e9cd 8300 	strd	r8, r3, [sp]
 800200e:	463b      	mov	r3, r7
 8002010:	eba0 000b 	sub.w	r0, r0, fp
 8002014:	b200      	sxth	r0, r0
 8002016:	f7ff f963 	bl	80012e0 <I_backCalc_fixdt>
 800201a:	e52e      	b.n	8001a7a <BLDC_controller_step+0x6de>
 800201c:	0800c220 	.word	0x0800c220
 8002020:	ffff8000 	.word	0xffff8000

08002024 <BLDC_controller_initialize>:
 8002024:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002028:	68c3      	ldr	r3, [r0, #12]
 800202a:	6801      	ldr	r1, [r0, #0]
 800202c:	f8a3 208e 	strh.w	r2, [r3, #142]	; 0x8e
 8002030:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
 8002034:	f9b1 2008 	ldrsh.w	r2, [r1, #8]
 8002038:	2101      	movs	r1, #1
 800203a:	f8a3 207c 	strh.w	r2, [r3, #124]	; 0x7c
 800203e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
 8002042:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8002046:	2200      	movs	r2, #0
 8002048:	80da      	strh	r2, [r3, #6]
 800204a:	809a      	strh	r2, [r3, #4]
 800204c:	621a      	str	r2, [r3, #32]
 800204e:	619a      	str	r2, [r3, #24]
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	4a06      	ldr	r2, [pc, #24]	; (800206c <BLDC_controller_initialize+0x48>)
 8002054:	f883 109b 	strb.w	r1, [r3, #155]	; 0x9b
 8002058:	f883 109e 	strb.w	r1, [r3, #158]	; 0x9e
 800205c:	e9c3 2218 	strd	r2, r2, [r3, #96]	; 0x60
 8002060:	4903      	ldr	r1, [pc, #12]	; (8002070 <BLDC_controller_initialize+0x4c>)
 8002062:	4a04      	ldr	r2, [pc, #16]	; (8002074 <BLDC_controller_initialize+0x50>)
 8002064:	e9c3 121a 	strd	r1, r2, [r3, #104]	; 0x68
 8002068:	4770      	bx	lr
 800206a:	bf00      	nop
 800206c:	c7c03840 	.word	0xc7c03840
 8002070:	2ee02ee0 	.word	0x2ee02ee0
 8002074:	d120d120 	.word	0xd120d120

08002078 <DMA1_Channel1_IRQHandler>:
 8002078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800207a:	2402      	movs	r4, #2
 800207c:	4b63      	ldr	r3, [pc, #396]	; (800220c <DMA1_Channel1_IRQHandler+0x194>)
 800207e:	4e64      	ldr	r6, [pc, #400]	; (8002210 <DMA1_Channel1_IRQHandler+0x198>)
 8002080:	605c      	str	r4, [r3, #4]
 8002082:	6831      	ldr	r1, [r6, #0]
 8002084:	f8df e1c4 	ldr.w	lr, [pc, #452]	; 800224c <DMA1_Channel1_IRQHandler+0x1d4>
 8002088:	f8df c1c4 	ldr.w	ip, [pc, #452]	; 8002250 <DMA1_Channel1_IRQHandler+0x1d8>
 800208c:	4d61      	ldr	r5, [pc, #388]	; (8002214 <DMA1_Channel1_IRQHandler+0x19c>)
 800208e:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 8002092:	f8de 3000 	ldr.w	r3, [lr]
 8002096:	f8dc 2000 	ldr.w	r2, [ip]
 800209a:	6828      	ldr	r0, [r5, #0]
 800209c:	495e      	ldr	r1, [pc, #376]	; (8002218 <DMA1_Channel1_IRQHandler+0x1a0>)
 800209e:	da29      	bge.n	80020f4 <DMA1_Channel1_IRQHandler+0x7c>
 80020a0:	6837      	ldr	r7, [r6, #0]
 80020a2:	3701      	adds	r7, #1
 80020a4:	6037      	str	r7, [r6, #0]
 80020a6:	880e      	ldrh	r6, [r1, #0]
 80020a8:	4433      	add	r3, r6
 80020aa:	fb93 f3f4 	sdiv	r3, r3, r4
 80020ae:	f8ce 3000 	str.w	r3, [lr]
 80020b2:	884b      	ldrh	r3, [r1, #2]
 80020b4:	441a      	add	r2, r3
 80020b6:	888b      	ldrh	r3, [r1, #4]
 80020b8:	fb92 f2f4 	sdiv	r2, r2, r4
 80020bc:	4418      	add	r0, r3
 80020be:	fb90 f0f4 	sdiv	r0, r0, r4
 80020c2:	f8cc 2000 	str.w	r2, [ip]
 80020c6:	4a55      	ldr	r2, [pc, #340]	; (800221c <DMA1_Channel1_IRQHandler+0x1a4>)
 80020c8:	6028      	str	r0, [r5, #0]
 80020ca:	6813      	ldr	r3, [r2, #0]
 80020cc:	88c8      	ldrh	r0, [r1, #6]
 80020ce:	4403      	add	r3, r0
 80020d0:	fb93 f3f4 	sdiv	r3, r3, r4
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4a52      	ldr	r2, [pc, #328]	; (8002220 <DMA1_Channel1_IRQHandler+0x1a8>)
 80020d8:	8908      	ldrh	r0, [r1, #8]
 80020da:	6813      	ldr	r3, [r2, #0]
 80020dc:	8949      	ldrh	r1, [r1, #10]
 80020de:	4403      	add	r3, r0
 80020e0:	fb93 f3f4 	sdiv	r3, r3, r4
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4a4f      	ldr	r2, [pc, #316]	; (8002224 <DMA1_Channel1_IRQHandler+0x1ac>)
 80020e8:	6813      	ldr	r3, [r2, #0]
 80020ea:	440b      	add	r3, r1
 80020ec:	fb93 f4f4 	sdiv	r4, r3, r4
 80020f0:	6014      	str	r4, [r2, #0]
 80020f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80020f4:	880c      	ldrh	r4, [r1, #0]
 80020f6:	4d4c      	ldr	r5, [pc, #304]	; (8002228 <DMA1_Channel1_IRQHandler+0x1b0>)
 80020f8:	1b1b      	subs	r3, r3, r4
 80020fa:	884c      	ldrh	r4, [r1, #2]
 80020fc:	8889      	ldrh	r1, [r1, #4]
 80020fe:	b21b      	sxth	r3, r3
 8002100:	1a40      	subs	r0, r0, r1
 8002102:	2132      	movs	r1, #50	; 0x32
 8002104:	1b12      	subs	r2, r2, r4
 8002106:	fb01 f403 	mul.w	r4, r1, r3
 800210a:	b212      	sxth	r2, r2
 800210c:	b200      	sxth	r0, r0
 800210e:	81ab      	strh	r3, [r5, #12]
 8002110:	4413      	add	r3, r2
 8002112:	8228      	strh	r0, [r5, #16]
 8002114:	602c      	str	r4, [r5, #0]
 8002116:	fb01 f402 	mul.w	r4, r1, r2
 800211a:	4341      	muls	r1, r0
 800211c:	4418      	add	r0, r3
 800211e:	2303      	movs	r3, #3
 8002120:	606c      	str	r4, [r5, #4]
 8002122:	4c42      	ldr	r4, [pc, #264]	; (800222c <DMA1_Channel1_IRQHandler+0x1b4>)
 8002124:	81ea      	strh	r2, [r5, #14]
 8002126:	60a9      	str	r1, [r5, #8]
 8002128:	4622      	mov	r2, r4
 800212a:	fb90 f0f3 	sdiv	r0, r0, r3
 800212e:	2114      	movs	r1, #20
 8002130:	f002 faea 	bl	8004708 <filtLowPass32>
 8002134:	f242 13ca 	movw	r3, #8650	; 0x21ca
 8002138:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 800213c:	4c3c      	ldr	r4, [pc, #240]	; (8002230 <DMA1_Channel1_IRQHandler+0x1b8>)
 800213e:	4353      	muls	r3, r2
 8002140:	2264      	movs	r2, #100	; 0x64
 8002142:	fb93 f3f2 	sdiv	r3, r3, r2
 8002146:	616b      	str	r3, [r5, #20]
 8002148:	7823      	ldrb	r3, [r4, #0]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1d1      	bne.n	80020f2 <DMA1_Channel1_IRQHandler+0x7a>
 800214e:	2301      	movs	r3, #1
 8002150:	7023      	strb	r3, [r4, #0]
 8002152:	4b38      	ldr	r3, [pc, #224]	; (8002234 <DMA1_Channel1_IRQHandler+0x1bc>)
 8002154:	4e38      	ldr	r6, [pc, #224]	; (8002238 <DMA1_Channel1_IRQHandler+0x1c0>)
 8002156:	781b      	ldrb	r3, [r3, #0]
 8002158:	b11b      	cbz	r3, 8002162 <DMA1_Channel1_IRQHandler+0xea>
 800215a:	79b3      	ldrb	r3, [r6, #6]
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	095b      	lsrs	r3, r3, #5
 8002162:	4a36      	ldr	r2, [pc, #216]	; (800223c <DMA1_Channel1_IRQHandler+0x1c4>)
 8002164:	4936      	ldr	r1, [pc, #216]	; (8002240 <DMA1_Channel1_IRQHandler+0x1c8>)
 8002166:	7013      	strb	r3, [r2, #0]
 8002168:	688b      	ldr	r3, [r1, #8]
 800216a:	f083 0310 	eor.w	r3, r3, #16
 800216e:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002172:	7113      	strb	r3, [r2, #4]
 8002174:	688b      	ldr	r3, [r1, #8]
 8002176:	f083 0320 	eor.w	r3, r3, #32
 800217a:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800217e:	7153      	strb	r3, [r2, #5]
 8002180:	688b      	ldr	r3, [r1, #8]
 8002182:	43db      	mvns	r3, r3
 8002184:	f003 0301 	and.w	r3, r3, #1
 8002188:	7193      	strb	r3, [r2, #6]
 800218a:	89ab      	ldrh	r3, [r5, #12]
 800218c:	8113      	strh	r3, [r2, #8]
 800218e:	89eb      	ldrh	r3, [r5, #14]
 8002190:	8153      	strh	r3, [r2, #10]
 8002192:	4b2c      	ldr	r3, [pc, #176]	; (8002244 <DMA1_Channel1_IRQHandler+0x1cc>)
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	f7ff f901 	bl	800139c <BLDC_controller_step>
 800219a:	f240 30de 	movw	r0, #990	; 0x3de
 800219e:	f9b6 1000 	ldrsh.w	r1, [r6]
 80021a2:	f9b6 2002 	ldrsh.w	r2, [r6, #2]
 80021a6:	4281      	cmp	r1, r0
 80021a8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80021ac:	dc24      	bgt.n	80021f8 <DMA1_Channel1_IRQHandler+0x180>
 80021ae:	f2a0 70bc 	subw	r0, r0, #1980	; 0x7bc
 80021b2:	4281      	cmp	r1, r0
 80021b4:	bfb8      	it	lt
 80021b6:	4601      	movlt	r1, r0
 80021b8:	f501 717a 	add.w	r1, r1, #1000	; 0x3e8
 80021bc:	4822      	ldr	r0, [pc, #136]	; (8002248 <DMA1_Channel1_IRQHandler+0x1d0>)
 80021be:	6800      	ldr	r0, [r0, #0]
 80021c0:	6341      	str	r1, [r0, #52]	; 0x34
 80021c2:	f240 31de 	movw	r1, #990	; 0x3de
 80021c6:	428a      	cmp	r2, r1
 80021c8:	dc19      	bgt.n	80021fe <DMA1_Channel1_IRQHandler+0x186>
 80021ca:	f2a1 71bc 	subw	r1, r1, #1980	; 0x7bc
 80021ce:	428a      	cmp	r2, r1
 80021d0:	bfb8      	it	lt
 80021d2:	460a      	movlt	r2, r1
 80021d4:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
 80021d8:	6382      	str	r2, [r0, #56]	; 0x38
 80021da:	f240 32de 	movw	r2, #990	; 0x3de
 80021de:	4293      	cmp	r3, r2
 80021e0:	dc10      	bgt.n	8002204 <DMA1_Channel1_IRQHandler+0x18c>
 80021e2:	f2a2 72bc 	subw	r2, r2, #1980	; 0x7bc
 80021e6:	4293      	cmp	r3, r2
 80021e8:	bfb8      	it	lt
 80021ea:	4613      	movlt	r3, r2
 80021ec:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80021f0:	63c3      	str	r3, [r0, #60]	; 0x3c
 80021f2:	2300      	movs	r3, #0
 80021f4:	7023      	strb	r3, [r4, #0]
 80021f6:	e77c      	b.n	80020f2 <DMA1_Channel1_IRQHandler+0x7a>
 80021f8:	f240 71c6 	movw	r1, #1990	; 0x7c6
 80021fc:	e7de      	b.n	80021bc <DMA1_Channel1_IRQHandler+0x144>
 80021fe:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8002202:	e7e9      	b.n	80021d8 <DMA1_Channel1_IRQHandler+0x160>
 8002204:	f240 73c6 	movw	r3, #1990	; 0x7c6
 8002208:	e7f2      	b.n	80021f0 <DMA1_Channel1_IRQHandler+0x178>
 800220a:	bf00      	nop
 800220c:	40020000 	.word	0x40020000
 8002210:	200005e0 	.word	0x200005e0
 8002214:	20000108 	.word	0x20000108
 8002218:	20004368 	.word	0x20004368
 800221c:	200005d4 	.word	0x200005d4
 8002220:	200005d8 	.word	0x200005d8
 8002224:	200005dc 	.word	0x200005dc
 8002228:	2000419c 	.word	0x2000419c
 800222c:	200005d0 	.word	0x200005d0
 8002230:	200005cc 	.word	0x200005cc
 8002234:	200000fc 	.word	0x200000fc
 8002238:	2000449c 	.word	0x2000449c
 800223c:	200044ac 	.word	0x200044ac
 8002240:	40010c00 	.word	0x40010c00
 8002244:	0800d23c 	.word	0x0800d23c
 8002248:	20004378 	.word	0x20004378
 800224c:	20000100 	.word	0x20000100
 8002250:	20000104 	.word	0x20000104

08002254 <EEPROM_1_ReadByte>:
 8002254:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
 8002258:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800225c:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	b082      	sub	sp, #8
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	f000 0003 	and.w	r0, r0, #3
 800226a:	ab02      	add	r3, sp, #8
 800226c:	4418      	add	r0, r3
 800226e:	f810 0c04 	ldrb.w	r0, [r0, #-4]
 8002272:	b002      	add	sp, #8
 8002274:	4770      	bx	lr

08002276 <EEPROM_1_Write>:
 8002276:	b510      	push	{r4, lr}
 8002278:	2400      	movs	r4, #0
 800227a:	0089      	lsls	r1, r1, #2
 800227c:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 8002280:	6802      	ldr	r2, [r0, #0]
 8002282:	4623      	mov	r3, r4
 8002284:	f501 417c 	add.w	r1, r1, #64512	; 0xfc00
 8002288:	2002      	movs	r0, #2
 800228a:	f004 fc2b 	bl	8006ae4 <HAL_FLASH_Program>
 800228e:	4620      	mov	r0, r4
 8002290:	bd10      	pop	{r4, pc}
	...

08002294 <n_number>:
 8002294:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <n_number+0x54>)
 8002296:	4298      	cmp	r0, r3
 8002298:	d810      	bhi.n	80022bc <n_number+0x28>
 800229a:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 800229e:	d206      	bcs.n	80022ae <n_number+0x1a>
 80022a0:	2863      	cmp	r0, #99	; 0x63
 80022a2:	d81d      	bhi.n	80022e0 <n_number+0x4c>
 80022a4:	280a      	cmp	r0, #10
 80022a6:	bf34      	ite	cc
 80022a8:	2001      	movcc	r0, #1
 80022aa:	2002      	movcs	r0, #2
 80022ac:	4770      	bx	lr
 80022ae:	f242 730f 	movw	r3, #9999	; 0x270f
 80022b2:	4298      	cmp	r0, r3
 80022b4:	bf94      	ite	ls
 80022b6:	2004      	movls	r0, #4
 80022b8:	2005      	movhi	r0, #5
 80022ba:	4770      	bx	lr
 80022bc:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <n_number+0x58>)
 80022be:	4298      	cmp	r0, r3
 80022c0:	d808      	bhi.n	80022d4 <n_number+0x40>
 80022c2:	4b0b      	ldr	r3, [pc, #44]	; (80022f0 <n_number+0x5c>)
 80022c4:	4298      	cmp	r0, r3
 80022c6:	d80d      	bhi.n	80022e4 <n_number+0x50>
 80022c8:	4b0a      	ldr	r3, [pc, #40]	; (80022f4 <n_number+0x60>)
 80022ca:	4298      	cmp	r0, r3
 80022cc:	bf94      	ite	ls
 80022ce:	2006      	movls	r0, #6
 80022d0:	2007      	movhi	r0, #7
 80022d2:	4770      	bx	lr
 80022d4:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <n_number+0x64>)
 80022d6:	4298      	cmp	r0, r3
 80022d8:	bf94      	ite	ls
 80022da:	2009      	movls	r0, #9
 80022dc:	200a      	movhi	r0, #10
 80022de:	4770      	bx	lr
 80022e0:	2003      	movs	r0, #3
 80022e2:	4770      	bx	lr
 80022e4:	2008      	movs	r0, #8
 80022e6:	4770      	bx	lr
 80022e8:	0001869f 	.word	0x0001869f
 80022ec:	05f5e0ff 	.word	0x05f5e0ff
 80022f0:	0098967f 	.word	0x0098967f
 80022f4:	000f423f 	.word	0x000f423f
 80022f8:	3b9ac9ff 	.word	0x3b9ac9ff

080022fc <print_param_buffer>:
 80022fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002300:	2424      	movs	r4, #36	; 0x24
 8002302:	fb04 1402 	mla	r4, r4, r2, r1
 8002306:	7b63      	ldrb	r3, [r4, #13]
 8002308:	b088      	sub	sp, #32
 800230a:	4605      	mov	r5, r0
 800230c:	2b04      	cmp	r3, #4
 800230e:	d830      	bhi.n	8002372 <print_param_buffer+0x76>
 8002310:	e8df f003 	tbb	[pc, r3]
 8002314:	94804403 	.word	0x94804403
 8002318:	a0          	.byte	0xa0
 8002319:	00          	.byte	0x00
 800231a:	7b27      	ldrb	r7, [r4, #12]
 800231c:	2f02      	cmp	r7, #2
 800231e:	d02b      	beq.n	8002378 <print_param_buffer+0x7c>
 8002320:	2f04      	cmp	r7, #4
 8002322:	d02c      	beq.n	800237e <print_param_buffer+0x82>
 8002324:	2f01      	cmp	r7, #1
 8002326:	d12d      	bne.n	8002384 <print_param_buffer+0x88>
 8002328:	68a3      	ldr	r3, [r4, #8]
 800232a:	781e      	ldrb	r6, [r3, #0]
 800232c:	8b21      	ldrh	r1, [r4, #24]
 800232e:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 8002332:	6862      	ldr	r2, [r4, #4]
 8002334:	b341      	cbz	r1, 8002388 <print_param_buffer+0x8c>
 8002336:	4608      	mov	r0, r1
 8002338:	fbb6 faf1 	udiv	sl, r6, r1
 800233c:	f7ff ffaa 	bl	8002294 <n_number>
 8002340:	fb99 f3f1 	sdiv	r3, r9, r1
 8002344:	fb01 9413 	mls	r4, r1, r3, r9
 8002348:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800234c:	fb98 f3f1 	sdiv	r3, r8, r1
 8002350:	fb01 8413 	mls	r4, r1, r3, r8
 8002354:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8002358:	2300      	movs	r3, #0
 800235a:	9302      	str	r3, [sp, #8]
 800235c:	4653      	mov	r3, sl
 800235e:	fb01 611a 	mls	r1, r1, sl, r6
 8002362:	3801      	subs	r0, #1
 8002364:	9101      	str	r1, [sp, #4]
 8002366:	4941      	ldr	r1, [pc, #260]	; (800246c <print_param_buffer+0x170>)
 8002368:	9703      	str	r7, [sp, #12]
 800236a:	9000      	str	r0, [sp, #0]
 800236c:	4628      	mov	r0, r5
 800236e:	f002 fe43 	bl	8004ff8 <sprintf_>
 8002372:	b008      	add	sp, #32
 8002374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002378:	68a3      	ldr	r3, [r4, #8]
 800237a:	881e      	ldrh	r6, [r3, #0]
 800237c:	e7d6      	b.n	800232c <print_param_buffer+0x30>
 800237e:	68a3      	ldr	r3, [r4, #8]
 8002380:	681e      	ldr	r6, [r3, #0]
 8002382:	e7d3      	b.n	800232c <print_param_buffer+0x30>
 8002384:	2600      	movs	r6, #0
 8002386:	e7d1      	b.n	800232c <print_param_buffer+0x30>
 8002388:	4633      	mov	r3, r6
 800238a:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800238e:	e9cd 1700 	strd	r1, r7, [sp]
 8002392:	4937      	ldr	r1, [pc, #220]	; (8002470 <print_param_buffer+0x174>)
 8002394:	4628      	mov	r0, r5
 8002396:	f002 fe2f 	bl	8004ff8 <sprintf_>
 800239a:	e7ea      	b.n	8002372 <print_param_buffer+0x76>
 800239c:	7b27      	ldrb	r7, [r4, #12]
 800239e:	2f02      	cmp	r7, #2
 80023a0:	d027      	beq.n	80023f2 <print_param_buffer+0xf6>
 80023a2:	2f04      	cmp	r7, #4
 80023a4:	d029      	beq.n	80023fa <print_param_buffer+0xfe>
 80023a6:	2f01      	cmp	r7, #1
 80023a8:	d12a      	bne.n	8002400 <print_param_buffer+0x104>
 80023aa:	68a3      	ldr	r3, [r4, #8]
 80023ac:	f993 6000 	ldrsb.w	r6, [r3]
 80023b0:	8b21      	ldrh	r1, [r4, #24]
 80023b2:	e9d4 8904 	ldrd	r8, r9, [r4, #16]
 80023b6:	6862      	ldr	r2, [r4, #4]
 80023b8:	b321      	cbz	r1, 8002404 <print_param_buffer+0x108>
 80023ba:	4608      	mov	r0, r1
 80023bc:	fb96 faf1 	sdiv	sl, r6, r1
 80023c0:	f7ff ff68 	bl	8002294 <n_number>
 80023c4:	fb99 f3f1 	sdiv	r3, r9, r1
 80023c8:	fb01 9413 	mls	r4, r1, r3, r9
 80023cc:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80023d0:	fb98 f3f1 	sdiv	r3, r8, r1
 80023d4:	fb01 8413 	mls	r4, r1, r3, r8
 80023d8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80023dc:	2301      	movs	r3, #1
 80023de:	fb01 611a 	mls	r1, r1, sl, r6
 80023e2:	3801      	subs	r0, #1
 80023e4:	9302      	str	r3, [sp, #8]
 80023e6:	9101      	str	r1, [sp, #4]
 80023e8:	9703      	str	r7, [sp, #12]
 80023ea:	9000      	str	r0, [sp, #0]
 80023ec:	4653      	mov	r3, sl
 80023ee:	4921      	ldr	r1, [pc, #132]	; (8002474 <print_param_buffer+0x178>)
 80023f0:	e7bc      	b.n	800236c <print_param_buffer+0x70>
 80023f2:	68a3      	ldr	r3, [r4, #8]
 80023f4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80023f8:	e7da      	b.n	80023b0 <print_param_buffer+0xb4>
 80023fa:	68a3      	ldr	r3, [r4, #8]
 80023fc:	681e      	ldr	r6, [r3, #0]
 80023fe:	e7d7      	b.n	80023b0 <print_param_buffer+0xb4>
 8002400:	2600      	movs	r6, #0
 8002402:	e7d5      	b.n	80023b0 <print_param_buffer+0xb4>
 8002404:	2301      	movs	r3, #1
 8002406:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	9701      	str	r7, [sp, #4]
 800240e:	4633      	mov	r3, r6
 8002410:	4919      	ldr	r1, [pc, #100]	; (8002478 <print_param_buffer+0x17c>)
 8002412:	e7bf      	b.n	8002394 <print_param_buffer+0x98>
 8002414:	6963      	ldr	r3, [r4, #20]
 8002416:	9305      	str	r3, [sp, #20]
 8002418:	6923      	ldr	r3, [r4, #16]
 800241a:	9304      	str	r3, [sp, #16]
 800241c:	7b23      	ldrb	r3, [r4, #12]
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	2302      	movs	r3, #2
 8002422:	9302      	str	r3, [sp, #8]
 8002424:	68a3      	ldr	r3, [r4, #8]
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	f7fd fffe 	bl	8000428 <__aeabi_f2d>
 800242c:	e9cd 0100 	strd	r0, r1, [sp]
 8002430:	4912      	ldr	r1, [pc, #72]	; (800247c <print_param_buffer+0x180>)
 8002432:	6862      	ldr	r2, [r4, #4]
 8002434:	4628      	mov	r0, r5
 8002436:	f002 fddf 	bl	8004ff8 <sprintf_>
 800243a:	e79a      	b.n	8002372 <print_param_buffer+0x76>
 800243c:	68a3      	ldr	r3, [r4, #8]
 800243e:	4a10      	ldr	r2, [pc, #64]	; (8002480 <print_param_buffer+0x184>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	e9cd 2202 	strd	r2, r2, [sp, #8]
 8002446:	7b22      	ldrb	r2, [r4, #12]
 8002448:	490e      	ldr	r1, [pc, #56]	; (8002484 <print_param_buffer+0x188>)
 800244a:	9201      	str	r2, [sp, #4]
 800244c:	2203      	movs	r2, #3
 800244e:	9200      	str	r2, [sp, #0]
 8002450:	6862      	ldr	r2, [r4, #4]
 8002452:	e79f      	b.n	8002394 <print_param_buffer+0x98>
 8002454:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <print_param_buffer+0x184>)
 8002456:	490c      	ldr	r1, [pc, #48]	; (8002488 <print_param_buffer+0x18c>)
 8002458:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800245c:	7b23      	ldrb	r3, [r4, #12]
 800245e:	9301      	str	r3, [sp, #4]
 8002460:	2304      	movs	r3, #4
 8002462:	9300      	str	r3, [sp, #0]
 8002464:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
 8002468:	e794      	b.n	8002394 <print_param_buffer+0x98>
 800246a:	bf00      	nop
 800246c:	0800cb3f 	.word	0x0800cb3f
 8002470:	0800cb5c 	.word	0x0800cb5c
 8002474:	0800cb6e 	.word	0x0800cb6e
 8002478:	0800cb8b 	.word	0x0800cb8b
 800247c:	0800cb9d 	.word	0x0800cb9d
 8002480:	0800cbc3 	.word	0x0800cbc3
 8002484:	0800cbb1 	.word	0x0800cbb1
 8002488:	0800cbc8 	.word	0x0800cbc8

0800248c <EEPROM_Read_Row>:
 800248c:	0082      	lsls	r2, r0, #2
 800248e:	b292      	uxth	r2, r2
 8002490:	b510      	push	{r4, lr}
 8002492:	1a52      	subs	r2, r2, r1
 8002494:	1d0c      	adds	r4, r1, #4
 8002496:	1888      	adds	r0, r1, r2
 8002498:	b2c0      	uxtb	r0, r0
 800249a:	f7ff fedb 	bl	8002254 <EEPROM_1_ReadByte>
 800249e:	f801 0b01 	strb.w	r0, [r1], #1
 80024a2:	42a1      	cmp	r1, r4
 80024a4:	d1f7      	bne.n	8002496 <EEPROM_Read_Row+0xa>
 80024a6:	2001      	movs	r0, #1
 80024a8:	bd10      	pop	{r4, pc}
	...

080024ac <EEPROM_buffer_write>:
 80024ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80024b0:	4617      	mov	r7, r2
 80024b2:	4a20      	ldr	r2, [pc, #128]	; (8002534 <EEPROM_buffer_write+0x88>)
 80024b4:	4c20      	ldr	r4, [pc, #128]	; (8002538 <EEPROM_buffer_write+0x8c>)
 80024b6:	8813      	ldrh	r3, [r2, #0]
 80024b8:	088d      	lsrs	r5, r1, #2
 80024ba:	3301      	adds	r3, #1
 80024bc:	8013      	strh	r3, [r2, #0]
 80024be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024c2:	f001 0603 	and.w	r6, r1, #3
 80024c6:	8821      	ldrh	r1, [r4, #0]
 80024c8:	4680      	mov	r8, r0
 80024ca:	4299      	cmp	r1, r3
 80024cc:	d120      	bne.n	8002510 <EEPROM_buffer_write+0x64>
 80024ce:	491b      	ldr	r1, [pc, #108]	; (800253c <EEPROM_buffer_write+0x90>)
 80024d0:	4628      	mov	r0, r5
 80024d2:	8025      	strh	r5, [r4, #0]
 80024d4:	f7ff ffda 	bl	800248c <EEPROM_Read_Row>
 80024d8:	4b18      	ldr	r3, [pc, #96]	; (800253c <EEPROM_buffer_write+0x90>)
 80024da:	8025      	strh	r5, [r4, #0]
 80024dc:	5d9a      	ldrb	r2, [r3, r6]
 80024de:	4542      	cmp	r2, r8
 80024e0:	bf1d      	ittte	ne
 80024e2:	f803 8006 	strbne.w	r8, [r3, r6]
 80024e6:	2601      	movne	r6, #1
 80024e8:	4b15      	ldrne	r3, [pc, #84]	; (8002540 <EEPROM_buffer_write+0x94>)
 80024ea:	2600      	moveq	r6, #0
 80024ec:	bf18      	it	ne
 80024ee:	701e      	strbne	r6, [r3, #0]
 80024f0:	b15f      	cbz	r7, 800250a <EEPROM_buffer_write+0x5e>
 80024f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024f6:	4f12      	ldr	r7, [pc, #72]	; (8002540 <EEPROM_buffer_write+0x94>)
 80024f8:	8023      	strh	r3, [r4, #0]
 80024fa:	783a      	ldrb	r2, [r7, #0]
 80024fc:	b12a      	cbz	r2, 800250a <EEPROM_buffer_write+0x5e>
 80024fe:	4629      	mov	r1, r5
 8002500:	480e      	ldr	r0, [pc, #56]	; (800253c <EEPROM_buffer_write+0x90>)
 8002502:	f7ff feb8 	bl	8002276 <EEPROM_1_Write>
 8002506:	2300      	movs	r3, #0
 8002508:	703b      	strb	r3, [r7, #0]
 800250a:	4630      	mov	r0, r6
 800250c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002510:	42a9      	cmp	r1, r5
 8002512:	d0e1      	beq.n	80024d8 <EEPROM_buffer_write+0x2c>
 8002514:	4b0a      	ldr	r3, [pc, #40]	; (8002540 <EEPROM_buffer_write+0x94>)
 8002516:	781a      	ldrb	r2, [r3, #0]
 8002518:	4699      	mov	r9, r3
 800251a:	b112      	cbz	r2, 8002522 <EEPROM_buffer_write+0x76>
 800251c:	4807      	ldr	r0, [pc, #28]	; (800253c <EEPROM_buffer_write+0x90>)
 800251e:	f7ff feaa 	bl	8002276 <EEPROM_1_Write>
 8002522:	4906      	ldr	r1, [pc, #24]	; (800253c <EEPROM_buffer_write+0x90>)
 8002524:	4628      	mov	r0, r5
 8002526:	f7ff ffb1 	bl	800248c <EEPROM_Read_Row>
 800252a:	2300      	movs	r3, #0
 800252c:	f889 3000 	strb.w	r3, [r9]
 8002530:	e7d2      	b.n	80024d8 <EEPROM_buffer_write+0x2c>
 8002532:	bf00      	nop
 8002534:	200041b4 	.word	0x200041b4
 8002538:	2000010c 	.word	0x2000010c
 800253c:	200005e5 	.word	0x200005e5
 8002540:	200005e4 	.word	0x200005e4

08002544 <djb_hash>:
 8002544:	1e42      	subs	r2, r0, #1
 8002546:	f241 5005 	movw	r0, #5381	; 0x1505
 800254a:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 800254e:	b903      	cbnz	r3, 8002552 <djb_hash+0xe>
 8002550:	4770      	bx	lr
 8002552:	eb00 1040 	add.w	r0, r0, r0, lsl #5
 8002556:	4058      	eors	r0, r3
 8002558:	e7f7      	b.n	800254a <djb_hash+0x6>

0800255a <getch>:
 800255a:	2300      	movs	r3, #0
 800255c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800255e:	4604      	mov	r4, r0
 8002560:	f88d 3007 	strb.w	r3, [sp, #7]
 8002564:	460d      	mov	r5, r1
 8002566:	b121      	cbz	r1, 8002572 <getch+0x18>
 8002568:	461a      	mov	r2, r3
 800256a:	4619      	mov	r1, r3
 800256c:	68c0      	ldr	r0, [r0, #12]
 800256e:	f005 ffd3 	bl	8008518 <xQueueGenericSend>
 8002572:	462b      	mov	r3, r5
 8002574:	2201      	movs	r2, #1
 8002576:	f10d 0107 	add.w	r1, sp, #7
 800257a:	68a0      	ldr	r0, [r4, #8]
 800257c:	f006 fc24 	bl	8008dc8 <xStreamBufferReceive>
 8002580:	b125      	cbz	r5, 800258c <getch+0x32>
 8002582:	f04f 31ff 	mov.w	r1, #4294967295
 8002586:	68e0      	ldr	r0, [r4, #12]
 8002588:	f006 f97a 	bl	8008880 <xQueueSemaphoreTake>
 800258c:	f89d 0007 	ldrb.w	r0, [sp, #7]
 8002590:	b003      	add	sp, #12
 8002592:	bd30      	pop	{r4, r5, pc}

08002594 <send_char>:
 8002594:	b507      	push	{r0, r1, r2, lr}
 8002596:	f88d 0007 	strb.w	r0, [sp, #7]
 800259a:	6848      	ldr	r0, [r1, #4]
 800259c:	b130      	cbz	r0, 80025ac <send_char+0x18>
 800259e:	f04f 33ff 	mov.w	r3, #4294967295
 80025a2:	2201      	movs	r2, #1
 80025a4:	f10d 0107 	add.w	r1, sp, #7
 80025a8:	f006 fb81 	bl	8008cae <xStreamBufferSend>
 80025ac:	b003      	add	sp, #12
 80025ae:	f85d fb04 	ldr.w	pc, [sp], #4

080025b2 <send_string>:
 80025b2:	b570      	push	{r4, r5, r6, lr}
 80025b4:	460e      	mov	r6, r1
 80025b6:	4605      	mov	r5, r0
 80025b8:	f002 fde7 	bl	800518a <ntlibc_strlen>
 80025bc:	6873      	ldr	r3, [r6, #4]
 80025be:	b10b      	cbz	r3, 80025c4 <send_string+0x12>
 80025c0:	b284      	uxth	r4, r0
 80025c2:	b904      	cbnz	r4, 80025c6 <send_string+0x14>
 80025c4:	bd70      	pop	{r4, r5, r6, pc}
 80025c6:	6870      	ldr	r0, [r6, #4]
 80025c8:	f006 fb5d 	bl	8008c86 <xStreamBufferSpacesAvailable>
 80025cc:	b282      	uxth	r2, r0
 80025ce:	42a2      	cmp	r2, r4
 80025d0:	f04f 0300 	mov.w	r3, #0
 80025d4:	bf28      	it	cs
 80025d6:	4622      	movcs	r2, r4
 80025d8:	4629      	mov	r1, r5
 80025da:	6870      	ldr	r0, [r6, #4]
 80025dc:	f006 fb67 	bl	8008cae <xStreamBufferSend>
 80025e0:	b283      	uxth	r3, r0
 80025e2:	1ae4      	subs	r4, r4, r3
 80025e4:	441d      	add	r5, r3
 80025e6:	b2a4      	uxth	r4, r4
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1ea      	bne.n	80025c2 <send_string+0x10>
 80025ec:	2005      	movs	r0, #5
 80025ee:	f006 ff1b 	bl	8009428 <vTaskDelay>
 80025f2:	e7e6      	b.n	80025c2 <send_string+0x10>

080025f4 <send_buffer>:
 80025f4:	6853      	ldr	r3, [r2, #4]
 80025f6:	b570      	push	{r4, r5, r6, lr}
 80025f8:	4605      	mov	r5, r0
 80025fa:	460c      	mov	r4, r1
 80025fc:	4616      	mov	r6, r2
 80025fe:	b9ab      	cbnz	r3, 800262c <send_buffer+0x38>
 8002600:	bd70      	pop	{r4, r5, r6, pc}
 8002602:	6870      	ldr	r0, [r6, #4]
 8002604:	f006 fb3f 	bl	8008c86 <xStreamBufferSpacesAvailable>
 8002608:	b282      	uxth	r2, r0
 800260a:	42a2      	cmp	r2, r4
 800260c:	f04f 0300 	mov.w	r3, #0
 8002610:	bf28      	it	cs
 8002612:	4622      	movcs	r2, r4
 8002614:	4629      	mov	r1, r5
 8002616:	6870      	ldr	r0, [r6, #4]
 8002618:	f006 fb49 	bl	8008cae <xStreamBufferSend>
 800261c:	b283      	uxth	r3, r0
 800261e:	1ae4      	subs	r4, r4, r3
 8002620:	441d      	add	r5, r3
 8002622:	b2a4      	uxth	r4, r4
 8002624:	b913      	cbnz	r3, 800262c <send_buffer+0x38>
 8002626:	2005      	movs	r0, #5
 8002628:	f006 fefe 	bl	8009428 <vTaskDelay>
 800262c:	2c00      	cmp	r4, #0
 800262e:	d1e8      	bne.n	8002602 <send_buffer+0xe>
 8002630:	e7e6      	b.n	8002600 <send_buffer+0xc>
	...

08002634 <updateDefaultFunction>:
 8002634:	b570      	push	{r4, r5, r6, lr}
 8002636:	2424      	movs	r4, #36	; 0x24
 8002638:	fb04 0402 	mla	r4, r4, r2, r0
 800263c:	461e      	mov	r6, r3
 800263e:	7b63      	ldrb	r3, [r4, #13]
 8002640:	b094      	sub	sp, #80	; 0x50
 8002642:	460d      	mov	r5, r1
 8002644:	2b04      	cmp	r3, #4
 8002646:	d863      	bhi.n	8002710 <updateDefaultFunction+0xdc>
 8002648:	e8df f003 	tbb	[pc, r3]
 800264c:	5f463310 	.word	0x5f463310
 8002650:	03          	.byte	0x03
 8002651:	00          	.byte	0x00
 8002652:	2300      	movs	r3, #0
 8002654:	1e4d      	subs	r5, r1, #1
 8002656:	7b22      	ldrb	r2, [r4, #12]
 8002658:	429a      	cmp	r2, r3
 800265a:	dd27      	ble.n	80026ac <updateDefaultFunction+0x78>
 800265c:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 8002660:	68a2      	ldr	r2, [r4, #8]
 8002662:	54d1      	strb	r1, [r2, r3]
 8002664:	782a      	ldrb	r2, [r5, #0]
 8002666:	b30a      	cbz	r2, 80026ac <updateDefaultFunction+0x78>
 8002668:	3301      	adds	r3, #1
 800266a:	e7f4      	b.n	8002656 <updateDefaultFunction+0x22>
 800266c:	8b23      	ldrh	r3, [r4, #24]
 800266e:	b16b      	cbz	r3, 800268c <updateDefaultFunction+0x58>
 8002670:	a904      	add	r1, sp, #16
 8002672:	4628      	mov	r0, r5
 8002674:	f008 fc70 	bl	800af58 <strtof>
 8002678:	4605      	mov	r5, r0
 800267a:	8b20      	ldrh	r0, [r4, #24]
 800267c:	f7fe fb2e 	bl	8000cdc <__aeabi_i2f>
 8002680:	4629      	mov	r1, r5
 8002682:	f7fe fb7f 	bl	8000d84 <__aeabi_fmul>
 8002686:	f7fe fd59 	bl	800113c <__aeabi_f2iz>
 800268a:	e004      	b.n	8002696 <updateDefaultFunction+0x62>
 800268c:	220a      	movs	r2, #10
 800268e:	a904      	add	r1, sp, #16
 8002690:	4628      	mov	r0, r5
 8002692:	f008 fdbb 	bl	800b20c <strtoul>
 8002696:	6923      	ldr	r3, [r4, #16]
 8002698:	4283      	cmp	r3, r0
 800269a:	dc3b      	bgt.n	8002714 <updateDefaultFunction+0xe0>
 800269c:	6963      	ldr	r3, [r4, #20]
 800269e:	4298      	cmp	r0, r3
 80026a0:	dc38      	bgt.n	8002714 <updateDefaultFunction+0xe0>
 80026a2:	7b23      	ldrb	r3, [r4, #12]
 80026a4:	2b01      	cmp	r3, #1
 80026a6:	d10d      	bne.n	80026c4 <updateDefaultFunction+0x90>
 80026a8:	68a2      	ldr	r2, [r4, #8]
 80026aa:	7010      	strb	r0, [r2, #0]
 80026ac:	2001      	movs	r0, #1
 80026ae:	b014      	add	sp, #80	; 0x50
 80026b0:	bd70      	pop	{r4, r5, r6, pc}
 80026b2:	8b23      	ldrh	r3, [r4, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d1db      	bne.n	8002670 <updateDefaultFunction+0x3c>
 80026b8:	220a      	movs	r2, #10
 80026ba:	a904      	add	r1, sp, #16
 80026bc:	4628      	mov	r0, r5
 80026be:	f008 fd15 	bl	800b0ec <strtol>
 80026c2:	e7e8      	b.n	8002696 <updateDefaultFunction+0x62>
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d102      	bne.n	80026ce <updateDefaultFunction+0x9a>
 80026c8:	68a3      	ldr	r3, [r4, #8]
 80026ca:	8018      	strh	r0, [r3, #0]
 80026cc:	e7ee      	b.n	80026ac <updateDefaultFunction+0x78>
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d11e      	bne.n	8002710 <updateDefaultFunction+0xdc>
 80026d2:	68a3      	ldr	r3, [r4, #8]
 80026d4:	6018      	str	r0, [r3, #0]
 80026d6:	e7e9      	b.n	80026ac <updateDefaultFunction+0x78>
 80026d8:	7b23      	ldrb	r3, [r4, #12]
 80026da:	2b04      	cmp	r3, #4
 80026dc:	d118      	bne.n	8002710 <updateDefaultFunction+0xdc>
 80026de:	a904      	add	r1, sp, #16
 80026e0:	4628      	mov	r0, r5
 80026e2:	f008 fc39 	bl	800af58 <strtof>
 80026e6:	4605      	mov	r5, r0
 80026e8:	6920      	ldr	r0, [r4, #16]
 80026ea:	f7fe faf7 	bl	8000cdc <__aeabi_i2f>
 80026ee:	4629      	mov	r1, r5
 80026f0:	f7fe fcf0 	bl	80010d4 <__aeabi_fcmple>
 80026f4:	b170      	cbz	r0, 8002714 <updateDefaultFunction+0xe0>
 80026f6:	6960      	ldr	r0, [r4, #20]
 80026f8:	f7fe faf0 	bl	8000cdc <__aeabi_i2f>
 80026fc:	4629      	mov	r1, r5
 80026fe:	f7fe fcf3 	bl	80010e8 <__aeabi_fcmpge>
 8002702:	b138      	cbz	r0, 8002714 <updateDefaultFunction+0xe0>
 8002704:	68a3      	ldr	r3, [r4, #8]
 8002706:	601d      	str	r5, [r3, #0]
 8002708:	e7d0      	b.n	80026ac <updateDefaultFunction+0x78>
 800270a:	68a3      	ldr	r3, [r4, #8]
 800270c:	780a      	ldrb	r2, [r1, #0]
 800270e:	701a      	strb	r2, [r3, #0]
 8002710:	2000      	movs	r0, #0
 8002712:	e7cc      	b.n	80026ae <updateDefaultFunction+0x7a>
 8002714:	8b22      	ldrh	r2, [r4, #24]
 8002716:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
 800271a:	b1b2      	cbz	r2, 800274a <updateDefaultFunction+0x116>
 800271c:	fb93 f0f2 	sdiv	r0, r3, r2
 8002720:	fb91 f4f2 	sdiv	r4, r1, r2
 8002724:	fb02 1114 	mls	r1, r2, r4, r1
 8002728:	fb02 3210 	mls	r2, r2, r0, r3
 800272c:	e9cd 4101 	strd	r4, r1, [sp, #4]
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	4603      	mov	r3, r0
 8002734:	4a08      	ldr	r2, [pc, #32]	; (8002758 <updateDefaultFunction+0x124>)
 8002736:	213c      	movs	r1, #60	; 0x3c
 8002738:	a805      	add	r0, sp, #20
 800273a:	f002 fc71 	bl	8005020 <snprintf_>
 800273e:	b281      	uxth	r1, r0
 8002740:	4632      	mov	r2, r6
 8002742:	a805      	add	r0, sp, #20
 8002744:	f7ff ff56 	bl	80025f4 <send_buffer>
 8002748:	e7e2      	b.n	8002710 <updateDefaultFunction+0xdc>
 800274a:	9100      	str	r1, [sp, #0]
 800274c:	4a03      	ldr	r2, [pc, #12]	; (800275c <updateDefaultFunction+0x128>)
 800274e:	213c      	movs	r1, #60	; 0x3c
 8002750:	a805      	add	r0, sp, #20
 8002752:	f002 fc65 	bl	8005020 <snprintf_>
 8002756:	e7f2      	b.n	800273e <updateDefaultFunction+0x10a>
 8002758:	0800cc8f 	.word	0x0800cc8f
 800275c:	0800cca5 	.word	0x0800cca5

08002760 <print_param>:
 8002760:	b570      	push	{r4, r5, r6, lr}
 8002762:	2424      	movs	r4, #36	; 0x24
 8002764:	fb04 0401 	mla	r4, r4, r1, r0
 8002768:	7b63      	ldrb	r3, [r4, #13]
 800276a:	b09e      	sub	sp, #120	; 0x78
 800276c:	4615      	mov	r5, r2
 800276e:	2b04      	cmp	r3, #4
 8002770:	d826      	bhi.n	80027c0 <print_param+0x60>
 8002772:	e8df f003 	tbb	[pc, r3]
 8002776:	3703      	.short	0x3703
 8002778:	7265      	.short	0x7265
 800277a:	78          	.byte	0x78
 800277b:	00          	.byte	0x00
 800277c:	7b23      	ldrb	r3, [r4, #12]
 800277e:	2b02      	cmp	r3, #2
 8002780:	d020      	beq.n	80027c4 <print_param+0x64>
 8002782:	2b04      	cmp	r3, #4
 8002784:	d021      	beq.n	80027ca <print_param+0x6a>
 8002786:	2b01      	cmp	r3, #1
 8002788:	d122      	bne.n	80027d0 <print_param+0x70>
 800278a:	68a3      	ldr	r3, [r4, #8]
 800278c:	781a      	ldrb	r2, [r3, #0]
 800278e:	8b21      	ldrh	r1, [r4, #24]
 8002790:	6864      	ldr	r4, [r4, #4]
 8002792:	b1f9      	cbz	r1, 80027d4 <print_param+0x74>
 8002794:	4608      	mov	r0, r1
 8002796:	fbb2 f6f1 	udiv	r6, r2, r1
 800279a:	f7ff fd7b 	bl	8002294 <n_number>
 800279e:	4623      	mov	r3, r4
 80027a0:	fb01 2216 	mls	r2, r1, r6, r2
 80027a4:	3801      	subs	r0, #1
 80027a6:	e9cd 6000 	strd	r6, r0, [sp]
 80027aa:	9202      	str	r2, [sp, #8]
 80027ac:	4a30      	ldr	r2, [pc, #192]	; (8002870 <print_param+0x110>)
 80027ae:	2164      	movs	r1, #100	; 0x64
 80027b0:	a805      	add	r0, sp, #20
 80027b2:	f002 fc35 	bl	8005020 <snprintf_>
 80027b6:	b281      	uxth	r1, r0
 80027b8:	462a      	mov	r2, r5
 80027ba:	a805      	add	r0, sp, #20
 80027bc:	f7ff ff1a 	bl	80025f4 <send_buffer>
 80027c0:	b01e      	add	sp, #120	; 0x78
 80027c2:	bd70      	pop	{r4, r5, r6, pc}
 80027c4:	68a3      	ldr	r3, [r4, #8]
 80027c6:	881a      	ldrh	r2, [r3, #0]
 80027c8:	e7e1      	b.n	800278e <print_param+0x2e>
 80027ca:	68a3      	ldr	r3, [r4, #8]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	e7de      	b.n	800278e <print_param+0x2e>
 80027d0:	2200      	movs	r2, #0
 80027d2:	e7dc      	b.n	800278e <print_param+0x2e>
 80027d4:	4623      	mov	r3, r4
 80027d6:	9200      	str	r2, [sp, #0]
 80027d8:	4a26      	ldr	r2, [pc, #152]	; (8002874 <print_param+0x114>)
 80027da:	2164      	movs	r1, #100	; 0x64
 80027dc:	a805      	add	r0, sp, #20
 80027de:	f002 fc1f 	bl	8005020 <snprintf_>
 80027e2:	e7e8      	b.n	80027b6 <print_param+0x56>
 80027e4:	7b23      	ldrb	r3, [r4, #12]
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d01d      	beq.n	8002826 <print_param+0xc6>
 80027ea:	2b04      	cmp	r3, #4
 80027ec:	d01f      	beq.n	800282e <print_param+0xce>
 80027ee:	2b01      	cmp	r3, #1
 80027f0:	d120      	bne.n	8002834 <print_param+0xd4>
 80027f2:	68a3      	ldr	r3, [r4, #8]
 80027f4:	f993 2000 	ldrsb.w	r2, [r3]
 80027f8:	8b20      	ldrh	r0, [r4, #24]
 80027fa:	6861      	ldr	r1, [r4, #4]
 80027fc:	b1e0      	cbz	r0, 8002838 <print_param+0xd8>
 80027fe:	2a00      	cmp	r2, #0
 8002800:	fb92 f4f0 	sdiv	r4, r2, r0
 8002804:	bfbb      	ittet	lt
 8002806:	4252      	neglt	r2, r2
 8002808:	fb92 f3f0 	sdivlt	r3, r2, r0
 800280c:	fb00 2214 	mlsge	r2, r0, r4, r2
 8002810:	fb00 2213 	mlslt	r2, r0, r3, r2
 8002814:	f7ff fd3e 	bl	8002294 <n_number>
 8002818:	3801      	subs	r0, #1
 800281a:	9202      	str	r2, [sp, #8]
 800281c:	e9cd 4000 	strd	r4, r0, [sp]
 8002820:	460b      	mov	r3, r1
 8002822:	4a15      	ldr	r2, [pc, #84]	; (8002878 <print_param+0x118>)
 8002824:	e7c3      	b.n	80027ae <print_param+0x4e>
 8002826:	68a3      	ldr	r3, [r4, #8]
 8002828:	f9b3 2000 	ldrsh.w	r2, [r3]
 800282c:	e7e4      	b.n	80027f8 <print_param+0x98>
 800282e:	68a3      	ldr	r3, [r4, #8]
 8002830:	681a      	ldr	r2, [r3, #0]
 8002832:	e7e1      	b.n	80027f8 <print_param+0x98>
 8002834:	2200      	movs	r2, #0
 8002836:	e7df      	b.n	80027f8 <print_param+0x98>
 8002838:	9200      	str	r2, [sp, #0]
 800283a:	460b      	mov	r3, r1
 800283c:	4a0f      	ldr	r2, [pc, #60]	; (800287c <print_param+0x11c>)
 800283e:	e7cc      	b.n	80027da <print_param+0x7a>
 8002840:	68a3      	ldr	r3, [r4, #8]
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f7fd fdf0 	bl	8000428 <__aeabi_f2d>
 8002848:	e9cd 0100 	strd	r0, r1, [sp]
 800284c:	4a0c      	ldr	r2, [pc, #48]	; (8002880 <print_param+0x120>)
 800284e:	6863      	ldr	r3, [r4, #4]
 8002850:	2164      	movs	r1, #100	; 0x64
 8002852:	a805      	add	r0, sp, #20
 8002854:	f002 fbe4 	bl	8005020 <snprintf_>
 8002858:	e7ad      	b.n	80027b6 <print_param+0x56>
 800285a:	68a3      	ldr	r3, [r4, #8]
 800285c:	4a09      	ldr	r2, [pc, #36]	; (8002884 <print_param+0x124>)
 800285e:	781b      	ldrb	r3, [r3, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	6863      	ldr	r3, [r4, #4]
 8002864:	e7b9      	b.n	80027da <print_param+0x7a>
 8002866:	68a3      	ldr	r3, [r4, #8]
 8002868:	4a07      	ldr	r2, [pc, #28]	; (8002888 <print_param+0x128>)
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	6863      	ldr	r3, [r4, #4]
 800286e:	e7b4      	b.n	80027da <print_param+0x7a>
 8002870:	0800caf6 	.word	0x0800caf6
 8002874:	0800cb04 	.word	0x0800cb04
 8002878:	0800cb0d 	.word	0x0800cb0d
 800287c:	0800cb1b 	.word	0x0800cb1b
 8002880:	0800cb24 	.word	0x0800cb24
 8002884:	0800cb2d 	.word	0x0800cb2d
 8002888:	0800cb36 	.word	0x0800cb36

0800288c <EEPROM_write_conf>:
 800288c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002890:	2500      	movs	r5, #0
 8002892:	4614      	mov	r4, r2
 8002894:	b099      	sub	sp, #100	; 0x64
 8002896:	9305      	str	r3, [sp, #20]
 8002898:	4b56      	ldr	r3, [pc, #344]	; (80029f4 <EEPROM_write_conf+0x168>)
 800289a:	460e      	mov	r6, r1
 800289c:	4683      	mov	fp, r0
 800289e:	4621      	mov	r1, r4
 80028a0:	462a      	mov	r2, r5
 80028a2:	4628      	mov	r0, r5
 80028a4:	801d      	strh	r5, [r3, #0]
 80028a6:	f7ff fe01 	bl	80024ac <EEPROM_buffer_write>
 80028aa:	1c61      	adds	r1, r4, #1
 80028ac:	462a      	mov	r2, r5
 80028ae:	b289      	uxth	r1, r1
 80028b0:	20c0      	movs	r0, #192	; 0xc0
 80028b2:	f7ff fdfb 	bl	80024ac <EEPROM_buffer_write>
 80028b6:	1ca1      	adds	r1, r4, #2
 80028b8:	462a      	mov	r2, r5
 80028ba:	b289      	uxth	r1, r1
 80028bc:	20ff      	movs	r0, #255	; 0xff
 80028be:	f7ff fdf5 	bl	80024ac <EEPROM_buffer_write>
 80028c2:	1ce1      	adds	r1, r4, #3
 80028c4:	462a      	mov	r2, r5
 80028c6:	b289      	uxth	r1, r1
 80028c8:	20ee      	movs	r0, #238	; 0xee
 80028ca:	f7ff fdef 	bl	80024ac <EEPROM_buffer_write>
 80028ce:	1d21      	adds	r1, r4, #4
 80028d0:	462a      	mov	r2, r5
 80028d2:	b289      	uxth	r1, r1
 80028d4:	4628      	mov	r0, r5
 80028d6:	f7ff fde9 	bl	80024ac <EEPROM_buffer_write>
 80028da:	2224      	movs	r2, #36	; 0x24
 80028dc:	fb02 b306 	mla	r3, r2, r6, fp
 80028e0:	462e      	mov	r6, r5
 80028e2:	3405      	adds	r4, #5
 80028e4:	b2a4      	uxth	r4, r4
 80028e6:	9304      	str	r3, [sp, #16]
 80028e8:	1d27      	adds	r7, r4, #4
 80028ea:	b2bb      	uxth	r3, r7
 80028ec:	9303      	str	r3, [sp, #12]
 80028ee:	9b04      	ldr	r3, [sp, #16]
 80028f0:	f104 0a01 	add.w	sl, r4, #1
 80028f4:	f104 0902 	add.w	r9, r4, #2
 80028f8:	f104 0803 	add.w	r8, r4, #3
 80028fc:	459b      	cmp	fp, r3
 80028fe:	fa1f fa8a 	uxth.w	sl, sl
 8002902:	fa1f f989 	uxth.w	r9, r9
 8002906:	fa1f f888 	uxth.w	r8, r8
 800290a:	d12a      	bne.n	8002962 <EEPROM_write_conf+0xd6>
 800290c:	4621      	mov	r1, r4
 800290e:	2200      	movs	r2, #0
 8002910:	20de      	movs	r0, #222	; 0xde
 8002912:	f7ff fdcb 	bl	80024ac <EEPROM_buffer_write>
 8002916:	4651      	mov	r1, sl
 8002918:	2200      	movs	r2, #0
 800291a:	20ad      	movs	r0, #173	; 0xad
 800291c:	f7ff fdc6 	bl	80024ac <EEPROM_buffer_write>
 8002920:	4649      	mov	r1, r9
 8002922:	2200      	movs	r2, #0
 8002924:	20be      	movs	r0, #190	; 0xbe
 8002926:	f7ff fdc1 	bl	80024ac <EEPROM_buffer_write>
 800292a:	4641      	mov	r1, r8
 800292c:	2200      	movs	r2, #0
 800292e:	20ef      	movs	r0, #239	; 0xef
 8002930:	f7ff fdbc 	bl	80024ac <EEPROM_buffer_write>
 8002934:	9903      	ldr	r1, [sp, #12]
 8002936:	2201      	movs	r2, #1
 8002938:	2000      	movs	r0, #0
 800293a:	f7ff fdb7 	bl	80024ac <EEPROM_buffer_write>
 800293e:	4b2d      	ldr	r3, [pc, #180]	; (80029f4 <EEPROM_write_conf+0x168>)
 8002940:	4a2d      	ldr	r2, [pc, #180]	; (80029f8 <EEPROM_write_conf+0x16c>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	2146      	movs	r1, #70	; 0x46
 8002946:	e9cd 5300 	strd	r5, r3, [sp]
 800294a:	a806      	add	r0, sp, #24
 800294c:	4633      	mov	r3, r6
 800294e:	f002 fb67 	bl	8005020 <snprintf_>
 8002952:	9a05      	ldr	r2, [sp, #20]
 8002954:	b281      	uxth	r1, r0
 8002956:	a806      	add	r0, sp, #24
 8002958:	f7ff fe4c 	bl	80025f4 <send_buffer>
 800295c:	b019      	add	sp, #100	; 0x64
 800295e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002962:	f89b 2000 	ldrb.w	r2, [fp]
 8002966:	2a01      	cmp	r2, #1
 8002968:	d135      	bne.n	80029d6 <EEPROM_write_conf+0x14a>
 800296a:	f8db 0004 	ldr.w	r0, [fp, #4]
 800296e:	f7ff fde9 	bl	8002544 <djb_hash>
 8002972:	4607      	mov	r7, r0
 8002974:	4621      	mov	r1, r4
 8002976:	2200      	movs	r2, #0
 8002978:	b2c0      	uxtb	r0, r0
 800297a:	f7ff fd97 	bl	80024ac <EEPROM_buffer_write>
 800297e:	2200      	movs	r2, #0
 8002980:	4651      	mov	r1, sl
 8002982:	f3c7 2007 	ubfx	r0, r7, #8, #8
 8002986:	f7ff fd91 	bl	80024ac <EEPROM_buffer_write>
 800298a:	2200      	movs	r2, #0
 800298c:	4649      	mov	r1, r9
 800298e:	f3c7 4007 	ubfx	r0, r7, #16, #8
 8002992:	f7ff fd8b 	bl	80024ac <EEPROM_buffer_write>
 8002996:	4641      	mov	r1, r8
 8002998:	2200      	movs	r2, #0
 800299a:	0e38      	lsrs	r0, r7, #24
 800299c:	f7ff fd86 	bl	80024ac <EEPROM_buffer_write>
 80029a0:	2200      	movs	r2, #0
 80029a2:	9903      	ldr	r1, [sp, #12]
 80029a4:	f89b 000c 	ldrb.w	r0, [fp, #12]
 80029a8:	f7ff fd80 	bl	80024ac <EEPROM_buffer_write>
 80029ac:	2200      	movs	r2, #0
 80029ae:	4617      	mov	r7, r2
 80029b0:	3501      	adds	r5, #1
 80029b2:	3405      	adds	r4, #5
 80029b4:	b2ad      	uxth	r5, r5
 80029b6:	fa1f f884 	uxth.w	r8, r4
 80029ba:	f89b 100c 	ldrb.w	r1, [fp, #12]
 80029be:	fa5f fc82 	uxtb.w	ip, r2
 80029c2:	eb08 0402 	add.w	r4, r8, r2
 80029c6:	4561      	cmp	r1, ip
 80029c8:	b2a4      	uxth	r4, r4
 80029ca:	f102 0901 	add.w	r9, r2, #1
 80029ce:	d805      	bhi.n	80029dc <EEPROM_write_conf+0x150>
 80029d0:	b10f      	cbz	r7, 80029d6 <EEPROM_write_conf+0x14a>
 80029d2:	3601      	adds	r6, #1
 80029d4:	b2b6      	uxth	r6, r6
 80029d6:	f10b 0b24 	add.w	fp, fp, #36	; 0x24
 80029da:	e785      	b.n	80028e8 <EEPROM_write_conf+0x5c>
 80029dc:	f8db 0008 	ldr.w	r0, [fp, #8]
 80029e0:	2200      	movs	r2, #0
 80029e2:	4621      	mov	r1, r4
 80029e4:	f810 000c 	ldrb.w	r0, [r0, ip]
 80029e8:	f7ff fd60 	bl	80024ac <EEPROM_buffer_write>
 80029ec:	4307      	orrs	r7, r0
 80029ee:	b2ff      	uxtb	r7, r7
 80029f0:	464a      	mov	r2, r9
 80029f2:	e7e2      	b.n	80029ba <EEPROM_write_conf+0x12e>
 80029f4:	200041b4 	.word	0x200041b4
 80029f8:	0800ca52 	.word	0x0800ca52

080029fc <EEPROM_read_conf>:
 80029fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a00:	4688      	mov	r8, r1
 8002a02:	4605      	mov	r5, r0
 8002a04:	461f      	mov	r7, r3
 8002a06:	2100      	movs	r1, #0
 8002a08:	b099      	sub	sp, #100	; 0x64
 8002a0a:	ac07      	add	r4, sp, #28
 8002a0c:	1888      	adds	r0, r1, r2
 8002a0e:	b2c0      	uxtb	r0, r0
 8002a10:	f7ff fc20 	bl	8002254 <EEPROM_1_ReadByte>
 8002a14:	5460      	strb	r0, [r4, r1]
 8002a16:	3101      	adds	r1, #1
 8002a18:	2905      	cmp	r1, #5
 8002a1a:	d1f7      	bne.n	8002a0c <EEPROM_read_conf+0x10>
 8002a1c:	3205      	adds	r2, #5
 8002a1e:	b293      	uxth	r3, r2
 8002a20:	9303      	str	r3, [sp, #12]
 8002a22:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002a26:	b963      	cbnz	r3, 8002a42 <EEPROM_read_conf+0x46>
 8002a28:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002a2c:	2ac0      	cmp	r2, #192	; 0xc0
 8002a2e:	d108      	bne.n	8002a42 <EEPROM_read_conf+0x46>
 8002a30:	f89d 201e 	ldrb.w	r2, [sp, #30]
 8002a34:	2aff      	cmp	r2, #255	; 0xff
 8002a36:	d104      	bne.n	8002a42 <EEPROM_read_conf+0x46>
 8002a38:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8002a3c:	2aee      	cmp	r2, #238	; 0xee
 8002a3e:	f000 808c 	beq.w	8002b5a <EEPROM_read_conf+0x15e>
 8002a42:	4873      	ldr	r0, [pc, #460]	; (8002c10 <EEPROM_read_conf+0x214>)
 8002a44:	f002 fba1 	bl	800518a <ntlibc_strlen>
 8002a48:	463a      	mov	r2, r7
 8002a4a:	b281      	uxth	r1, r0
 8002a4c:	4870      	ldr	r0, [pc, #448]	; (8002c10 <EEPROM_read_conf+0x214>)
 8002a4e:	f7ff fdd1 	bl	80025f4 <send_buffer>
 8002a52:	2000      	movs	r0, #0
 8002a54:	b019      	add	sp, #100	; 0x64
 8002a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a5a:	f1bb 0fbe 	cmp.w	fp, #190	; 0xbe
 8002a5e:	d162      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002a60:	2bef      	cmp	r3, #239	; 0xef
 8002a62:	d160      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002a64:	2324      	movs	r3, #36	; 0x24
 8002a66:	2400      	movs	r4, #0
 8002a68:	3504      	adds	r5, #4
 8002a6a:	fb03 5308 	mla	r3, r3, r8, r5
 8002a6e:	9305      	str	r3, [sp, #20]
 8002a70:	9b05      	ldr	r3, [sp, #20]
 8002a72:	42ab      	cmp	r3, r5
 8002a74:	d174      	bne.n	8002b60 <EEPROM_read_conf+0x164>
 8002a76:	464b      	mov	r3, r9
 8002a78:	4a66      	ldr	r2, [pc, #408]	; (8002c14 <EEPROM_read_conf+0x218>)
 8002a7a:	213c      	movs	r1, #60	; 0x3c
 8002a7c:	9400      	str	r4, [sp, #0]
 8002a7e:	a809      	add	r0, sp, #36	; 0x24
 8002a80:	f002 face 	bl	8005020 <snprintf_>
 8002a84:	463a      	mov	r2, r7
 8002a86:	b281      	uxth	r1, r0
 8002a88:	a809      	add	r0, sp, #36	; 0x24
 8002a8a:	f7ff fdb3 	bl	80025f4 <send_buffer>
 8002a8e:	2001      	movs	r0, #1
 8002a90:	e7e0      	b.n	8002a54 <EEPROM_read_conf+0x58>
 8002a92:	7830      	ldrb	r0, [r6, #0]
 8002a94:	2801      	cmp	r0, #1
 8002a96:	d15d      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002a98:	6870      	ldr	r0, [r6, #4]
 8002a9a:	e9cd 3204 	strd	r3, r2, [sp, #16]
 8002a9e:	f7ff fd51 	bl	8002544 <djb_hash>
 8002aa2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8002aa6:	fa5f fc80 	uxtb.w	ip, r0
 8002aaa:	45e2      	cmp	sl, ip
 8002aac:	d152      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002aae:	f3c0 2c07 	ubfx	ip, r0, #8, #8
 8002ab2:	4594      	cmp	ip, r2
 8002ab4:	d14e      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002ab6:	f3c0 4c07 	ubfx	ip, r0, #16, #8
 8002aba:	45e3      	cmp	fp, ip
 8002abc:	d14a      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002abe:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
 8002ac2:	d147      	bne.n	8002b54 <EEPROM_read_conf+0x158>
 8002ac4:	460c      	mov	r4, r1
 8002ac6:	e007      	b.n	8002ad8 <EEPROM_read_conf+0xdc>
 8002ac8:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8002acc:	f7ff fbc2 	bl	8002254 <EEPROM_1_ReadByte>
 8002ad0:	3401      	adds	r4, #1
 8002ad2:	f80a 0002 	strb.w	r0, [sl, r2]
 8002ad6:	b2a4      	uxth	r4, r4
 8002ad8:	b2e0      	uxtb	r0, r4
 8002ada:	1a42      	subs	r2, r0, r1
 8002adc:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d8f0      	bhi.n	8002ac8 <EEPROM_read_conf+0xcc>
 8002ae6:	f109 0301 	add.w	r3, r9, #1
 8002aea:	fa1f f983 	uxth.w	r9, r3
 8002aee:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8002af2:	d2b7      	bcs.n	8002a64 <EEPROM_read_conf+0x68>
 8002af4:	2200      	movs	r2, #0
 8002af6:	18a0      	adds	r0, r4, r2
 8002af8:	b2c0      	uxtb	r0, r0
 8002afa:	f7ff fbab 	bl	8002254 <EEPROM_1_ReadByte>
 8002afe:	ab07      	add	r3, sp, #28
 8002b00:	5498      	strb	r0, [r3, r2]
 8002b02:	3201      	adds	r2, #1
 8002b04:	2a05      	cmp	r2, #5
 8002b06:	d1f6      	bne.n	8002af6 <EEPROM_read_conf+0xfa>
 8002b08:	f89d a01c 	ldrb.w	sl, [sp, #28]
 8002b0c:	3405      	adds	r4, #5
 8002b0e:	f1ba 0fde 	cmp.w	sl, #222	; 0xde
 8002b12:	b2a1      	uxth	r1, r4
 8002b14:	f89d 201d 	ldrb.w	r2, [sp, #29]
 8002b18:	f89d b01e 	ldrb.w	fp, [sp, #30]
 8002b1c:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002b20:	d101      	bne.n	8002b26 <EEPROM_read_conf+0x12a>
 8002b22:	2aad      	cmp	r2, #173	; 0xad
 8002b24:	d099      	beq.n	8002a5a <EEPROM_read_conf+0x5e>
 8002b26:	462e      	mov	r6, r5
 8002b28:	2400      	movs	r4, #0
 8002b2a:	45a0      	cmp	r8, r4
 8002b2c:	b2e0      	uxtb	r0, r4
 8002b2e:	d1b0      	bne.n	8002a92 <EEPROM_read_conf+0x96>
 8002b30:	f89d 4020 	ldrb.w	r4, [sp, #32]
 8002b34:	4540      	cmp	r0, r8
 8002b36:	440c      	add	r4, r1
 8002b38:	b2a4      	uxth	r4, r4
 8002b3a:	d1d8      	bne.n	8002aee <EEPROM_read_conf+0xf2>
 8002b3c:	4653      	mov	r3, sl
 8002b3e:	4a36      	ldr	r2, [pc, #216]	; (8002c18 <EEPROM_read_conf+0x21c>)
 8002b40:	213c      	movs	r1, #60	; 0x3c
 8002b42:	a809      	add	r0, sp, #36	; 0x24
 8002b44:	f002 fa6c 	bl	8005020 <snprintf_>
 8002b48:	463a      	mov	r2, r7
 8002b4a:	b281      	uxth	r1, r0
 8002b4c:	a809      	add	r0, sp, #36	; 0x24
 8002b4e:	f7ff fd51 	bl	80025f4 <send_buffer>
 8002b52:	e7cc      	b.n	8002aee <EEPROM_read_conf+0xf2>
 8002b54:	3401      	adds	r4, #1
 8002b56:	3624      	adds	r6, #36	; 0x24
 8002b58:	e7e7      	b.n	8002b2a <EEPROM_read_conf+0x12e>
 8002b5a:	9c03      	ldr	r4, [sp, #12]
 8002b5c:	4699      	mov	r9, r3
 8002b5e:	e7c6      	b.n	8002aee <EEPROM_read_conf+0xf2>
 8002b60:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d13f      	bne.n	8002be8 <EEPROM_read_conf+0x1ec>
 8002b68:	6828      	ldr	r0, [r5, #0]
 8002b6a:	f7ff fceb 	bl	8002544 <djb_hash>
 8002b6e:	f04f 0800 	mov.w	r8, #0
 8002b72:	3401      	adds	r4, #1
 8002b74:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002b78:	9e03      	ldr	r6, [sp, #12]
 8002b7a:	b2a4      	uxth	r4, r4
 8002b7c:	9304      	str	r3, [sp, #16]
 8002b7e:	f3c0 4a07 	ubfx	sl, r0, #16, #8
 8002b82:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8002b86:	b2c2      	uxtb	r2, r0
 8002b88:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002b8c:	d21e      	bcs.n	8002bcc <EEPROM_read_conf+0x1d0>
 8002b8e:	2100      	movs	r1, #0
 8002b90:	1988      	adds	r0, r1, r6
 8002b92:	b2c0      	uxtb	r0, r0
 8002b94:	f7ff fb5e 	bl	8002254 <EEPROM_1_ReadByte>
 8002b98:	ab07      	add	r3, sp, #28
 8002b9a:	5458      	strb	r0, [r3, r1]
 8002b9c:	3101      	adds	r1, #1
 8002b9e:	2905      	cmp	r1, #5
 8002ba0:	d1f6      	bne.n	8002b90 <EEPROM_read_conf+0x194>
 8002ba2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8002ba6:	3305      	adds	r3, #5
 8002ba8:	441e      	add	r6, r3
 8002baa:	f89d 301c 	ldrb.w	r3, [sp, #28]
 8002bae:	b2b6      	uxth	r6, r6
 8002bb0:	2bde      	cmp	r3, #222	; 0xde
 8002bb2:	d11b      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bb4:	f89d 101d 	ldrb.w	r1, [sp, #29]
 8002bb8:	29ad      	cmp	r1, #173	; 0xad
 8002bba:	d117      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bbc:	f89d 101e 	ldrb.w	r1, [sp, #30]
 8002bc0:	29be      	cmp	r1, #190	; 0xbe
 8002bc2:	d113      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bc4:	f89d 101f 	ldrb.w	r1, [sp, #31]
 8002bc8:	29ef      	cmp	r1, #239	; 0xef
 8002bca:	d10f      	bne.n	8002bec <EEPROM_read_conf+0x1f0>
 8002bcc:	f1b8 0f00 	cmp.w	r8, #0
 8002bd0:	d10a      	bne.n	8002be8 <EEPROM_read_conf+0x1ec>
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <EEPROM_read_conf+0x220>)
 8002bd4:	213c      	movs	r1, #60	; 0x3c
 8002bd6:	682b      	ldr	r3, [r5, #0]
 8002bd8:	a809      	add	r0, sp, #36	; 0x24
 8002bda:	f002 fa21 	bl	8005020 <snprintf_>
 8002bde:	463a      	mov	r2, r7
 8002be0:	b281      	uxth	r1, r0
 8002be2:	a809      	add	r0, sp, #36	; 0x24
 8002be4:	f7ff fd06 	bl	80025f4 <send_buffer>
 8002be8:	3524      	adds	r5, #36	; 0x24
 8002bea:	e741      	b.n	8002a70 <EEPROM_read_conf+0x74>
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d1cb      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002bf0:	f89d 301d 	ldrb.w	r3, [sp, #29]
 8002bf4:	9904      	ldr	r1, [sp, #16]
 8002bf6:	428b      	cmp	r3, r1
 8002bf8:	d1c6      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002bfa:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8002bfe:	4553      	cmp	r3, sl
 8002c00:	d1c2      	bne.n	8002b88 <EEPROM_read_conf+0x18c>
 8002c02:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8002c06:	455b      	cmp	r3, fp
 8002c08:	bf08      	it	eq
 8002c0a:	f04f 0801 	moveq.w	r8, #1
 8002c0e:	e7bb      	b.n	8002b88 <EEPROM_read_conf+0x18c>
 8002c10:	0800c9b0 	.word	0x0800c9b0
 8002c14:	0800ca33 	.word	0x0800ca33
 8002c18:	0800c9da 	.word	0x0800c9da
 8002c1c:	0800ca09 	.word	0x0800ca09

08002c20 <Term_Erase_Screen>:
 8002c20:	b538      	push	{r3, r4, r5, lr}
 8002c22:	4c06      	ldr	r4, [pc, #24]	; (8002c3c <Term_Erase_Screen+0x1c>)
 8002c24:	4605      	mov	r5, r0
 8002c26:	4620      	mov	r0, r4
 8002c28:	f002 faaf 	bl	800518a <ntlibc_strlen>
 8002c2c:	462a      	mov	r2, r5
 8002c2e:	b281      	uxth	r1, r0
 8002c30:	4620      	mov	r0, r4
 8002c32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c36:	f7ff bcdd 	b.w	80025f4 <send_buffer>
 8002c3a:	bf00      	nop
 8002c3c:	0800cad4 	.word	0x0800cad4

08002c40 <Term_Color_Green>:
 8002c40:	b538      	push	{r3, r4, r5, lr}
 8002c42:	4c06      	ldr	r4, [pc, #24]	; (8002c5c <Term_Color_Green+0x1c>)
 8002c44:	4605      	mov	r5, r0
 8002c46:	4620      	mov	r0, r4
 8002c48:	f002 fa9f 	bl	800518a <ntlibc_strlen>
 8002c4c:	462a      	mov	r2, r5
 8002c4e:	b281      	uxth	r1, r0
 8002c50:	4620      	mov	r0, r4
 8002c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c56:	f7ff bccd 	b.w	80025f4 <send_buffer>
 8002c5a:	bf00      	nop
 8002c5c:	0800cab4 	.word	0x0800cab4

08002c60 <Term_Color_Red>:
 8002c60:	b538      	push	{r3, r4, r5, lr}
 8002c62:	4c06      	ldr	r4, [pc, #24]	; (8002c7c <Term_Color_Red+0x1c>)
 8002c64:	4605      	mov	r5, r0
 8002c66:	4620      	mov	r0, r4
 8002c68:	f002 fa8f 	bl	800518a <ntlibc_strlen>
 8002c6c:	462a      	mov	r2, r5
 8002c6e:	b281      	uxth	r1, r0
 8002c70:	4620      	mov	r0, r4
 8002c72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c76:	f7ff bcbd 	b.w	80025f4 <send_buffer>
 8002c7a:	bf00      	nop
 8002c7c:	0800caba 	.word	0x0800caba

08002c80 <Term_Color_White>:
 8002c80:	b538      	push	{r3, r4, r5, lr}
 8002c82:	4c06      	ldr	r4, [pc, #24]	; (8002c9c <Term_Color_White+0x1c>)
 8002c84:	4605      	mov	r5, r0
 8002c86:	4620      	mov	r0, r4
 8002c88:	f002 fa7f 	bl	800518a <ntlibc_strlen>
 8002c8c:	462a      	mov	r2, r5
 8002c8e:	b281      	uxth	r1, r0
 8002c90:	4620      	mov	r0, r4
 8002c92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c96:	f7ff bcad 	b.w	80025f4 <send_buffer>
 8002c9a:	bf00      	nop
 8002c9c:	0800cac0 	.word	0x0800cac0

08002ca0 <Term_Color_Cyan>:
 8002ca0:	b538      	push	{r3, r4, r5, lr}
 8002ca2:	4c06      	ldr	r4, [pc, #24]	; (8002cbc <Term_Color_Cyan+0x1c>)
 8002ca4:	4605      	mov	r5, r0
 8002ca6:	4620      	mov	r0, r4
 8002ca8:	f002 fa6f 	bl	800518a <ntlibc_strlen>
 8002cac:	462a      	mov	r2, r5
 8002cae:	b281      	uxth	r1, r0
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cb6:	f7ff bc9d 	b.w	80025f4 <send_buffer>
 8002cba:	bf00      	nop
 8002cbc:	0800caae 	.word	0x0800caae

08002cc0 <Term_BGColor_Blue>:
 8002cc0:	b538      	push	{r3, r4, r5, lr}
 8002cc2:	4c06      	ldr	r4, [pc, #24]	; (8002cdc <Term_BGColor_Blue+0x1c>)
 8002cc4:	4605      	mov	r5, r0
 8002cc6:	4620      	mov	r0, r4
 8002cc8:	f002 fa5f 	bl	800518a <ntlibc_strlen>
 8002ccc:	462a      	mov	r2, r5
 8002cce:	b281      	uxth	r1, r0
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cd6:	f7ff bc8d 	b.w	80025f4 <send_buffer>
 8002cda:	bf00      	nop
 8002cdc:	0800ca90 	.word	0x0800ca90

08002ce0 <Term_Move_cursor_right>:
 8002ce0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	4a06      	ldr	r2, [pc, #24]	; (8002d00 <Term_Move_cursor_right+0x20>)
 8002ce8:	210a      	movs	r1, #10
 8002cea:	a801      	add	r0, sp, #4
 8002cec:	f002 f998 	bl	8005020 <snprintf_>
 8002cf0:	4622      	mov	r2, r4
 8002cf2:	b281      	uxth	r1, r0
 8002cf4:	a801      	add	r0, sp, #4
 8002cf6:	f7ff fc7d 	bl	80025f4 <send_buffer>
 8002cfa:	b004      	add	sp, #16
 8002cfc:	bd10      	pop	{r4, pc}
 8002cfe:	bf00      	nop
 8002d00:	0800cae8 	.word	0x0800cae8

08002d04 <print_param_helperfunc>:
 8002d04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	b09d      	sub	sp, #116	; 0x74
 8002d0c:	4689      	mov	r9, r1
 8002d0e:	2009      	movs	r0, #9
 8002d10:	4611      	mov	r1, r2
 8002d12:	4698      	mov	r8, r3
 8002d14:	4615      	mov	r5, r2
 8002d16:	f7ff ffe3 	bl	8002ce0 <Term_Move_cursor_right>
 8002d1a:	486b      	ldr	r0, [pc, #428]	; (8002ec8 <print_param_helperfunc+0x1c4>)
 8002d1c:	f002 fa35 	bl	800518a <ntlibc_strlen>
 8002d20:	462a      	mov	r2, r5
 8002d22:	b281      	uxth	r1, r0
 8002d24:	4868      	ldr	r0, [pc, #416]	; (8002ec8 <print_param_helperfunc+0x1c4>)
 8002d26:	f7ff fc65 	bl	80025f4 <send_buffer>
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	2021      	movs	r0, #33	; 0x21
 8002d2e:	f7ff ffd7 	bl	8002ce0 <Term_Move_cursor_right>
 8002d32:	4866      	ldr	r0, [pc, #408]	; (8002ecc <print_param_helperfunc+0x1c8>)
 8002d34:	f002 fa29 	bl	800518a <ntlibc_strlen>
 8002d38:	462a      	mov	r2, r5
 8002d3a:	b281      	uxth	r1, r0
 8002d3c:	4863      	ldr	r0, [pc, #396]	; (8002ecc <print_param_helperfunc+0x1c8>)
 8002d3e:	f7ff fc59 	bl	80025f4 <send_buffer>
 8002d42:	4629      	mov	r1, r5
 8002d44:	2040      	movs	r0, #64	; 0x40
 8002d46:	f7ff ffcb 	bl	8002ce0 <Term_Move_cursor_right>
 8002d4a:	4861      	ldr	r0, [pc, #388]	; (8002ed0 <print_param_helperfunc+0x1cc>)
 8002d4c:	f002 fa1d 	bl	800518a <ntlibc_strlen>
 8002d50:	2600      	movs	r6, #0
 8002d52:	b281      	uxth	r1, r0
 8002d54:	462a      	mov	r2, r5
 8002d56:	485e      	ldr	r0, [pc, #376]	; (8002ed0 <print_param_helperfunc+0x1cc>)
 8002d58:	f7ff fc4c 	bl	80025f4 <send_buffer>
 8002d5c:	2324      	movs	r3, #36	; 0x24
 8002d5e:	4637      	mov	r7, r6
 8002d60:	fb03 4909 	mla	r9, r3, r9, r4
 8002d64:	f8df a188 	ldr.w	sl, [pc, #392]	; 8002ef0 <print_param_helperfunc+0x1ec>
 8002d68:	f8df b188 	ldr.w	fp, [pc, #392]	; 8002ef4 <print_param_helperfunc+0x1f0>
 8002d6c:	454c      	cmp	r4, r9
 8002d6e:	d102      	bne.n	8002d76 <print_param_helperfunc+0x72>
 8002d70:	b01d      	add	sp, #116	; 0x74
 8002d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d76:	7823      	ldrb	r3, [r4, #0]
 8002d78:	4543      	cmp	r3, r8
 8002d7a:	d149      	bne.n	8002e10 <print_param_helperfunc+0x10c>
 8002d7c:	4629      	mov	r1, r5
 8002d7e:	2009      	movs	r0, #9
 8002d80:	f7ff ffae 	bl	8002ce0 <Term_Move_cursor_right>
 8002d84:	6863      	ldr	r3, [r4, #4]
 8002d86:	4a53      	ldr	r2, [pc, #332]	; (8002ed4 <print_param_helperfunc+0x1d0>)
 8002d88:	2164      	movs	r1, #100	; 0x64
 8002d8a:	a803      	add	r0, sp, #12
 8002d8c:	f002 f948 	bl	8005020 <snprintf_>
 8002d90:	462a      	mov	r2, r5
 8002d92:	b281      	uxth	r1, r0
 8002d94:	a803      	add	r0, sp, #12
 8002d96:	f7ff fc2d 	bl	80025f4 <send_buffer>
 8002d9a:	7b63      	ldrb	r3, [r4, #13]
 8002d9c:	2b04      	cmp	r3, #4
 8002d9e:	d828      	bhi.n	8002df2 <print_param_helperfunc+0xee>
 8002da0:	e8df f003 	tbb	[pc, r3]
 8002da4:	83734503 	.word	0x83734503
 8002da8:	8b          	.byte	0x8b
 8002da9:	00          	.byte	0x00
 8002daa:	7b23      	ldrb	r3, [r4, #12]
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d031      	beq.n	8002e14 <print_param_helperfunc+0x110>
 8002db0:	2b04      	cmp	r3, #4
 8002db2:	d032      	beq.n	8002e1a <print_param_helperfunc+0x116>
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <print_param_helperfunc+0xb8>
 8002db8:	68a3      	ldr	r3, [r4, #8]
 8002dba:	781f      	ldrb	r7, [r3, #0]
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	2021      	movs	r0, #33	; 0x21
 8002dc0:	f7ff ff8e 	bl	8002ce0 <Term_Move_cursor_right>
 8002dc4:	8b22      	ldrh	r2, [r4, #24]
 8002dc6:	b35a      	cbz	r2, 8002e20 <print_param_helperfunc+0x11c>
 8002dc8:	4610      	mov	r0, r2
 8002dca:	fbb7 f1f2 	udiv	r1, r7, r2
 8002dce:	f7ff fa61 	bl	8002294 <n_number>
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	fb02 7211 	mls	r2, r2, r1, r7
 8002dd8:	3801      	subs	r0, #1
 8002dda:	9201      	str	r2, [sp, #4]
 8002ddc:	4a3e      	ldr	r2, [pc, #248]	; (8002ed8 <print_param_helperfunc+0x1d4>)
 8002dde:	9000      	str	r0, [sp, #0]
 8002de0:	2164      	movs	r1, #100	; 0x64
 8002de2:	a803      	add	r0, sp, #12
 8002de4:	f002 f91c 	bl	8005020 <snprintf_>
 8002de8:	b281      	uxth	r1, r0
 8002dea:	462a      	mov	r2, r5
 8002dec:	a803      	add	r0, sp, #12
 8002dee:	f7ff fc01 	bl	80025f4 <send_buffer>
 8002df2:	4629      	mov	r1, r5
 8002df4:	2040      	movs	r0, #64	; 0x40
 8002df6:	f7ff ff73 	bl	8002ce0 <Term_Move_cursor_right>
 8002dfa:	4652      	mov	r2, sl
 8002dfc:	2164      	movs	r1, #100	; 0x64
 8002dfe:	6a23      	ldr	r3, [r4, #32]
 8002e00:	a803      	add	r0, sp, #12
 8002e02:	f002 f90d 	bl	8005020 <snprintf_>
 8002e06:	462a      	mov	r2, r5
 8002e08:	b281      	uxth	r1, r0
 8002e0a:	a803      	add	r0, sp, #12
 8002e0c:	f7ff fbf2 	bl	80025f4 <send_buffer>
 8002e10:	3424      	adds	r4, #36	; 0x24
 8002e12:	e7ab      	b.n	8002d6c <print_param_helperfunc+0x68>
 8002e14:	68a3      	ldr	r3, [r4, #8]
 8002e16:	881f      	ldrh	r7, [r3, #0]
 8002e18:	e7d0      	b.n	8002dbc <print_param_helperfunc+0xb8>
 8002e1a:	68a3      	ldr	r3, [r4, #8]
 8002e1c:	681f      	ldr	r7, [r3, #0]
 8002e1e:	e7cd      	b.n	8002dbc <print_param_helperfunc+0xb8>
 8002e20:	463b      	mov	r3, r7
 8002e22:	4a2e      	ldr	r2, [pc, #184]	; (8002edc <print_param_helperfunc+0x1d8>)
 8002e24:	2164      	movs	r1, #100	; 0x64
 8002e26:	a803      	add	r0, sp, #12
 8002e28:	f002 f8fa 	bl	8005020 <snprintf_>
 8002e2c:	e7dc      	b.n	8002de8 <print_param_helperfunc+0xe4>
 8002e2e:	7b23      	ldrb	r3, [r4, #12]
 8002e30:	2b02      	cmp	r3, #2
 8002e32:	d020      	beq.n	8002e76 <print_param_helperfunc+0x172>
 8002e34:	2b04      	cmp	r3, #4
 8002e36:	d022      	beq.n	8002e7e <print_param_helperfunc+0x17a>
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <print_param_helperfunc+0x13e>
 8002e3c:	68a3      	ldr	r3, [r4, #8]
 8002e3e:	f993 6000 	ldrsb.w	r6, [r3]
 8002e42:	2021      	movs	r0, #33	; 0x21
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7ff ff4b 	bl	8002ce0 <Term_Move_cursor_right>
 8002e4a:	8b20      	ldrh	r0, [r4, #24]
 8002e4c:	b1d0      	cbz	r0, 8002e84 <print_param_helperfunc+0x180>
 8002e4e:	2e00      	cmp	r6, #0
 8002e50:	bfbc      	itt	lt
 8002e52:	4273      	neglt	r3, r6
 8002e54:	fb93 f2f0 	sdivlt	r2, r3, r0
 8002e58:	fb96 f1f0 	sdiv	r1, r6, r0
 8002e5c:	bfb4      	ite	lt
 8002e5e:	fb00 3212 	mlslt	r2, r0, r2, r3
 8002e62:	fb00 6211 	mlsge	r2, r0, r1, r6
 8002e66:	f7ff fa15 	bl	8002294 <n_number>
 8002e6a:	3801      	subs	r0, #1
 8002e6c:	9201      	str	r2, [sp, #4]
 8002e6e:	9000      	str	r0, [sp, #0]
 8002e70:	460b      	mov	r3, r1
 8002e72:	4a1b      	ldr	r2, [pc, #108]	; (8002ee0 <print_param_helperfunc+0x1dc>)
 8002e74:	e7b4      	b.n	8002de0 <print_param_helperfunc+0xdc>
 8002e76:	68a3      	ldr	r3, [r4, #8]
 8002e78:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002e7c:	e7e1      	b.n	8002e42 <print_param_helperfunc+0x13e>
 8002e7e:	68a3      	ldr	r3, [r4, #8]
 8002e80:	681e      	ldr	r6, [r3, #0]
 8002e82:	e7de      	b.n	8002e42 <print_param_helperfunc+0x13e>
 8002e84:	4633      	mov	r3, r6
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <print_param_helperfunc+0x1e0>)
 8002e88:	e7cc      	b.n	8002e24 <print_param_helperfunc+0x120>
 8002e8a:	4629      	mov	r1, r5
 8002e8c:	2021      	movs	r0, #33	; 0x21
 8002e8e:	f7ff ff27 	bl	8002ce0 <Term_Move_cursor_right>
 8002e92:	68a3      	ldr	r3, [r4, #8]
 8002e94:	6818      	ldr	r0, [r3, #0]
 8002e96:	f7fd fac7 	bl	8000428 <__aeabi_f2d>
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <print_param_helperfunc+0x1e4>)
 8002e9c:	e9cd 0100 	strd	r0, r1, [sp]
 8002ea0:	2164      	movs	r1, #100	; 0x64
 8002ea2:	a803      	add	r0, sp, #12
 8002ea4:	f002 f8bc 	bl	8005020 <snprintf_>
 8002ea8:	e79e      	b.n	8002de8 <print_param_helperfunc+0xe4>
 8002eaa:	4629      	mov	r1, r5
 8002eac:	2021      	movs	r0, #33	; 0x21
 8002eae:	f7ff ff17 	bl	8002ce0 <Term_Move_cursor_right>
 8002eb2:	68a3      	ldr	r3, [r4, #8]
 8002eb4:	4a0d      	ldr	r2, [pc, #52]	; (8002eec <print_param_helperfunc+0x1e8>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	e7b4      	b.n	8002e24 <print_param_helperfunc+0x120>
 8002eba:	4629      	mov	r1, r5
 8002ebc:	2021      	movs	r0, #33	; 0x21
 8002ebe:	f7ff ff0f 	bl	8002ce0 <Term_Move_cursor_right>
 8002ec2:	68a3      	ldr	r3, [r4, #8]
 8002ec4:	465a      	mov	r2, fp
 8002ec6:	e7ad      	b.n	8002e24 <print_param_helperfunc+0x120>
 8002ec8:	0800cbed 	.word	0x0800cbed
 8002ecc:	0800cbf7 	.word	0x0800cbf7
 8002ed0:	0800cbff 	.word	0x0800cbff
 8002ed4:	0800cc08 	.word	0x0800cc08
 8002ed8:	0800cc10 	.word	0x0800cc10
 8002edc:	0800cc24 	.word	0x0800cc24
 8002ee0:	0800cc33 	.word	0x0800cc33
 8002ee4:	0800cc47 	.word	0x0800cc47
 8002ee8:	0800cc56 	.word	0x0800cc56
 8002eec:	0800cc65 	.word	0x0800cc65
 8002ef0:	0800cc83 	.word	0x0800cc83
 8002ef4:	0800cc74 	.word	0x0800cc74

08002ef8 <print_param_help>:
 8002ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002efc:	4f11      	ldr	r7, [pc, #68]	; (8002f44 <print_param_help+0x4c>)
 8002efe:	4605      	mov	r5, r0
 8002f00:	4638      	mov	r0, r7
 8002f02:	4614      	mov	r4, r2
 8002f04:	460e      	mov	r6, r1
 8002f06:	f002 f940 	bl	800518a <ntlibc_strlen>
 8002f0a:	4622      	mov	r2, r4
 8002f0c:	b281      	uxth	r1, r0
 8002f0e:	4638      	mov	r0, r7
 8002f10:	4f0d      	ldr	r7, [pc, #52]	; (8002f48 <print_param_help+0x50>)
 8002f12:	f7ff fb6f 	bl	80025f4 <send_buffer>
 8002f16:	2300      	movs	r3, #0
 8002f18:	4622      	mov	r2, r4
 8002f1a:	4631      	mov	r1, r6
 8002f1c:	4628      	mov	r0, r5
 8002f1e:	f7ff fef1 	bl	8002d04 <print_param_helperfunc>
 8002f22:	4638      	mov	r0, r7
 8002f24:	f002 f931 	bl	800518a <ntlibc_strlen>
 8002f28:	4622      	mov	r2, r4
 8002f2a:	b281      	uxth	r1, r0
 8002f2c:	4638      	mov	r0, r7
 8002f2e:	f7ff fb61 	bl	80025f4 <send_buffer>
 8002f32:	4622      	mov	r2, r4
 8002f34:	4631      	mov	r1, r6
 8002f36:	4628      	mov	r0, r5
 8002f38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	f7ff bee1 	b.w	8002d04 <print_param_helperfunc>
 8002f42:	bf00      	nop
 8002f44:	0800ccf7 	.word	0x0800ccf7
 8002f48:	0800cbda 	.word	0x0800cbda

08002f4c <Term_Move_Cursor>:
 8002f4c:	b510      	push	{r4, lr}
 8002f4e:	b088      	sub	sp, #32
 8002f50:	4603      	mov	r3, r0
 8002f52:	4614      	mov	r4, r2
 8002f54:	9100      	str	r1, [sp, #0]
 8002f56:	4a06      	ldr	r2, [pc, #24]	; (8002f70 <Term_Move_Cursor+0x24>)
 8002f58:	2114      	movs	r1, #20
 8002f5a:	a803      	add	r0, sp, #12
 8002f5c:	f002 f860 	bl	8005020 <snprintf_>
 8002f60:	4622      	mov	r2, r4
 8002f62:	b281      	uxth	r1, r0
 8002f64:	a803      	add	r0, sp, #12
 8002f66:	f7ff fb45 	bl	80025f4 <send_buffer>
 8002f6a:	b008      	add	sp, #32
 8002f6c:	bd10      	pop	{r4, pc}
 8002f6e:	bf00      	nop
 8002f70:	0800cadf 	.word	0x0800cadf

08002f74 <Term_Box>:
 8002f74:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f78:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8002f7a:	4691      	mov	r9, r2
 8002f7c:	4622      	mov	r2, r4
 8002f7e:	460f      	mov	r7, r1
 8002f80:	469b      	mov	fp, r3
 8002f82:	4682      	mov	sl, r0
 8002f84:	f7ff ffe2 	bl	8002f4c <Term_Move_Cursor>
 8002f88:	4620      	mov	r0, r4
 8002f8a:	f7ff fe99 	bl	8002cc0 <Term_BGColor_Blue>
 8002f8e:	4839      	ldr	r0, [pc, #228]	; (8003074 <Term_Box+0x100>)
 8002f90:	f002 f8fb 	bl	800518a <ntlibc_strlen>
 8002f94:	4622      	mov	r2, r4
 8002f96:	b281      	uxth	r1, r0
 8002f98:	4836      	ldr	r0, [pc, #216]	; (8003074 <Term_Box+0x100>)
 8002f9a:	f7ff fb2b 	bl	80025f4 <send_buffer>
 8002f9e:	2501      	movs	r5, #1
 8002fa0:	4e35      	ldr	r6, [pc, #212]	; (8003078 <Term_Box+0x104>)
 8002fa2:	ebab 0807 	sub.w	r8, fp, r7
 8002fa6:	45a8      	cmp	r8, r5
 8002fa8:	dc2e      	bgt.n	8003008 <Term_Box+0x94>
 8002faa:	4834      	ldr	r0, [pc, #208]	; (800307c <Term_Box+0x108>)
 8002fac:	f002 f8ed 	bl	800518a <ntlibc_strlen>
 8002fb0:	2501      	movs	r5, #1
 8002fb2:	b281      	uxth	r1, r0
 8002fb4:	4622      	mov	r2, r4
 8002fb6:	4831      	ldr	r0, [pc, #196]	; (800307c <Term_Box+0x108>)
 8002fb8:	f7ff fb1c 	bl	80025f4 <send_buffer>
 8002fbc:	4e30      	ldr	r6, [pc, #192]	; (8003080 <Term_Box+0x10c>)
 8002fbe:	eba9 030a 	sub.w	r3, r9, sl
 8002fc2:	9300      	str	r3, [sp, #0]
 8002fc4:	9b00      	ldr	r3, [sp, #0]
 8002fc6:	42ab      	cmp	r3, r5
 8002fc8:	dc28      	bgt.n	800301c <Term_Box+0xa8>
 8002fca:	4622      	mov	r2, r4
 8002fcc:	4639      	mov	r1, r7
 8002fce:	4648      	mov	r0, r9
 8002fd0:	f7ff ffbc 	bl	8002f4c <Term_Move_Cursor>
 8002fd4:	482b      	ldr	r0, [pc, #172]	; (8003084 <Term_Box+0x110>)
 8002fd6:	f002 f8d8 	bl	800518a <ntlibc_strlen>
 8002fda:	4622      	mov	r2, r4
 8002fdc:	b281      	uxth	r1, r0
 8002fde:	4829      	ldr	r0, [pc, #164]	; (8003084 <Term_Box+0x110>)
 8002fe0:	f7ff fb08 	bl	80025f4 <send_buffer>
 8002fe4:	2501      	movs	r5, #1
 8002fe6:	4e24      	ldr	r6, [pc, #144]	; (8003078 <Term_Box+0x104>)
 8002fe8:	45a8      	cmp	r8, r5
 8002fea:	dc38      	bgt.n	800305e <Term_Box+0xea>
 8002fec:	4826      	ldr	r0, [pc, #152]	; (8003088 <Term_Box+0x114>)
 8002fee:	f002 f8cc 	bl	800518a <ntlibc_strlen>
 8002ff2:	4622      	mov	r2, r4
 8002ff4:	b281      	uxth	r1, r0
 8002ff6:	4824      	ldr	r0, [pc, #144]	; (8003088 <Term_Box+0x114>)
 8002ff8:	f7ff fafc 	bl	80025f4 <send_buffer>
 8002ffc:	4620      	mov	r0, r4
 8002ffe:	b003      	add	sp, #12
 8003000:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003004:	f7ff be3c 	b.w	8002c80 <Term_Color_White>
 8003008:	4630      	mov	r0, r6
 800300a:	f002 f8be 	bl	800518a <ntlibc_strlen>
 800300e:	4622      	mov	r2, r4
 8003010:	b281      	uxth	r1, r0
 8003012:	4630      	mov	r0, r6
 8003014:	f7ff faee 	bl	80025f4 <send_buffer>
 8003018:	3501      	adds	r5, #1
 800301a:	e7c4      	b.n	8002fa6 <Term_Box+0x32>
 800301c:	eb0a 0305 	add.w	r3, sl, r5
 8003020:	b2db      	uxtb	r3, r3
 8003022:	4618      	mov	r0, r3
 8003024:	4622      	mov	r2, r4
 8003026:	4639      	mov	r1, r7
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	f7ff ff8f 	bl	8002f4c <Term_Move_Cursor>
 800302e:	4630      	mov	r0, r6
 8003030:	f002 f8ab 	bl	800518a <ntlibc_strlen>
 8003034:	4622      	mov	r2, r4
 8003036:	b281      	uxth	r1, r0
 8003038:	4630      	mov	r0, r6
 800303a:	f7ff fadb 	bl	80025f4 <send_buffer>
 800303e:	9b01      	ldr	r3, [sp, #4]
 8003040:	4622      	mov	r2, r4
 8003042:	4618      	mov	r0, r3
 8003044:	4659      	mov	r1, fp
 8003046:	f7ff ff81 	bl	8002f4c <Term_Move_Cursor>
 800304a:	4630      	mov	r0, r6
 800304c:	f002 f89d 	bl	800518a <ntlibc_strlen>
 8003050:	4622      	mov	r2, r4
 8003052:	b281      	uxth	r1, r0
 8003054:	4630      	mov	r0, r6
 8003056:	f7ff facd 	bl	80025f4 <send_buffer>
 800305a:	3501      	adds	r5, #1
 800305c:	e7b2      	b.n	8002fc4 <Term_Box+0x50>
 800305e:	4630      	mov	r0, r6
 8003060:	f002 f893 	bl	800518a <ntlibc_strlen>
 8003064:	4622      	mov	r2, r4
 8003066:	b281      	uxth	r1, r0
 8003068:	4630      	mov	r0, r6
 800306a:	f7ff fac3 	bl	80025f4 <send_buffer>
 800306e:	3501      	adds	r5, #1
 8003070:	e7ba      	b.n	8002fe8 <Term_Box+0x74>
 8003072:	bf00      	nop
 8003074:	0800ca96 	.word	0x0800ca96
 8003078:	0800ca9a 	.word	0x0800ca9a
 800307c:	0800ca9e 	.word	0x0800ca9e
 8003080:	0800caa2 	.word	0x0800caa2
 8003084:	0800caa6 	.word	0x0800caa6
 8003088:	0800caaa 	.word	0x0800caaa

0800308c <Term_Save_Cursor>:
 800308c:	b538      	push	{r3, r4, r5, lr}
 800308e:	4c06      	ldr	r4, [pc, #24]	; (80030a8 <Term_Save_Cursor+0x1c>)
 8003090:	4605      	mov	r5, r0
 8003092:	4620      	mov	r0, r4
 8003094:	f002 f879 	bl	800518a <ntlibc_strlen>
 8003098:	462a      	mov	r2, r5
 800309a:	b281      	uxth	r1, r0
 800309c:	4620      	mov	r0, r4
 800309e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030a2:	f7ff baa7 	b.w	80025f4 <send_buffer>
 80030a6:	bf00      	nop
 80030a8:	0800caf2 	.word	0x0800caf2

080030ac <Term_Restore_Cursor>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4c06      	ldr	r4, [pc, #24]	; (80030c8 <Term_Restore_Cursor+0x1c>)
 80030b0:	4605      	mov	r5, r0
 80030b2:	4620      	mov	r0, r4
 80030b4:	f002 f869 	bl	800518a <ntlibc_strlen>
 80030b8:	462a      	mov	r2, r5
 80030ba:	b281      	uxth	r1, r0
 80030bc:	4620      	mov	r0, r4
 80030be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030c2:	f7ff ba97 	b.w	80025f4 <send_buffer>
 80030c6:	bf00      	nop
 80030c8:	0800caee 	.word	0x0800caee

080030cc <Term_Disable_Cursor>:
 80030cc:	b538      	push	{r3, r4, r5, lr}
 80030ce:	4c06      	ldr	r4, [pc, #24]	; (80030e8 <Term_Disable_Cursor+0x1c>)
 80030d0:	4605      	mov	r5, r0
 80030d2:	4620      	mov	r0, r4
 80030d4:	f002 f859 	bl	800518a <ntlibc_strlen>
 80030d8:	462a      	mov	r2, r5
 80030da:	b281      	uxth	r1, r0
 80030dc:	4620      	mov	r0, r4
 80030de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030e2:	f7ff ba87 	b.w	80025f4 <send_buffer>
 80030e6:	bf00      	nop
 80030e8:	0800cac6 	.word	0x0800cac6

080030ec <Term_Enable_Cursor>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4c06      	ldr	r4, [pc, #24]	; (8003108 <Term_Enable_Cursor+0x1c>)
 80030f0:	4605      	mov	r5, r0
 80030f2:	4620      	mov	r0, r4
 80030f4:	f002 f849 	bl	800518a <ntlibc_strlen>
 80030f8:	462a      	mov	r2, r5
 80030fa:	b281      	uxth	r1, r0
 80030fc:	4620      	mov	r0, r4
 80030fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003102:	f7ff ba77 	b.w	80025f4 <send_buffer>
 8003106:	bf00      	nop
 8003108:	0800cacd 	.word	0x0800cacd

0800310c <callback_ConfigFunction>:
/*****************************************************************************
* Callback if a configuration relevant parameter is changed
******************************************************************************/
uint8_t callback_ConfigFunction(parameter_entry * params, uint8_t index, port_str *ptr){

	rtU_Left.r_inpTgt = 0;
 800310c:	2200      	movs	r2, #0
 800310e:	4b02      	ldr	r3, [pc, #8]	; (8003118 <callback_ConfigFunction+0xc>)
	recalc_params();

	return 1;
}
 8003110:	2001      	movs	r0, #1
	rtU_Left.r_inpTgt = 0;
 8003112:	805a      	strh	r2, [r3, #2]
}
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	200044ac 	.word	0x200044ac

0800311c <command_reset>:
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800311c:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003120:	4905      	ldr	r1, [pc, #20]	; (8003138 <command_reset+0x1c>)
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <command_reset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003124:	68ca      	ldr	r2, [r1, #12]
 8003126:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800312a:	4313      	orrs	r3, r2
 800312c:	60cb      	str	r3, [r1, #12]
 800312e:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003132:	bf00      	nop
 8003134:	e7fd      	b.n	8003132 <command_reset+0x16>
 8003136:	bf00      	nop
 8003138:	e000ed00 	.word	0xe000ed00
 800313c:	05fa0004 	.word	0x05fa0004

08003140 <callback_ComFunction>:

/*****************************************************************************
* Callback if a communication relevant parameter is changed
******************************************************************************/
uint8_t callback_ComFunction(parameter_entry * params, uint8_t index, port_str *ptr){
 8003140:	b508      	push	{r3, lr}

	HAL_UART_Init(&huart3);
 8003142:	4802      	ldr	r0, [pc, #8]	; (800314c <callback_ComFunction+0xc>)
 8003144:	f004 fdc2 	bl	8007ccc <HAL_UART_Init>

	return 1;
}
 8003148:	2001      	movs	r0, #1
 800314a:	bd08      	pop	{r3, pc}
 800314c:	20004200 	.word	0x20004200

08003150 <command_config_get>:


/*****************************************************************************
* Sends the configuration to teslaterm
******************************************************************************/
uint8_t command_config_get(char *commandline, port_str *ptr){
 8003150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003152:	460d      	mov	r5, r1
 8003154:	2400      	movs	r4, #0
    char buffer[80];
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {

		print_param_buffer(buffer, confparam, current_parameter);
		send_config(buffer,confparam[current_parameter].help, ptr);
 8003156:	2724      	movs	r7, #36	; 0x24
		print_param_buffer(buffer, confparam, current_parameter);
 8003158:	4e0c      	ldr	r6, [pc, #48]	; (800318c <command_config_get+0x3c>)
uint8_t command_config_get(char *commandline, port_str *ptr){
 800315a:	b095      	sub	sp, #84	; 0x54
		print_param_buffer(buffer, confparam, current_parameter);
 800315c:	b2e2      	uxtb	r2, r4
 800315e:	490b      	ldr	r1, [pc, #44]	; (800318c <command_config_get+0x3c>)
 8003160:	4668      	mov	r0, sp
 8003162:	f7ff f8cb 	bl	80022fc <print_param_buffer>
		send_config(buffer,confparam[current_parameter].help, ptr);
 8003166:	fb07 6304 	mla	r3, r7, r4, r6
 800316a:	462a      	mov	r2, r5
 800316c:	6a19      	ldr	r1, [r3, #32]
 800316e:	4668      	mov	r0, sp
 8003170:	3401      	adds	r4, #1
 8003172:	f001 ffe3 	bl	800513c <send_config>
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 8003176:	2c0b      	cmp	r4, #11
 8003178:	d1f0      	bne.n	800315c <command_config_get+0xc>

    }
    send_config("NULL","NULL", ptr);
 800317a:	4905      	ldr	r1, [pc, #20]	; (8003190 <command_config_get+0x40>)
 800317c:	462a      	mov	r2, r5
 800317e:	4608      	mov	r0, r1
 8003180:	f001 ffdc 	bl	800513c <send_config>
    return 1; 
}
 8003184:	2001      	movs	r0, #1
 8003186:	b015      	add	sp, #84	; 0x54
 8003188:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800318a:	bf00      	nop
 800318c:	200001ac 	.word	0x200001ac
 8003190:	0800cbc3 	.word	0x0800cbc3

08003194 <command_shutdown>:


uint8_t command_shutdown(char *commandline, port_str *ptr){
 8003194:	b508      	push	{r3, lr}
	HAL_GPIO_WritePin(TPS_ENA_GPIO_Port, TPS_ENA_Pin, pdFALSE);
 8003196:	2200      	movs	r2, #0
 8003198:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800319c:	4802      	ldr	r0, [pc, #8]	; (80031a8 <command_shutdown+0x14>)
 800319e:	f003 fe47 	bl	8006e30 <HAL_GPIO_WritePin>
	return 1;
}
 80031a2:	2001      	movs	r0, #1
 80031a4:	bd08      	pop	{r3, pc}
 80031a6:	bf00      	nop
 80031a8:	40011000 	.word	0x40011000

080031ac <command_tasks>:

/*****************************************************************************
* Prints the task list needs to be enabled in FreeRTOSConfig.h
* only use it for debugging reasons
******************************************************************************/
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031ac:	b530      	push	{r4, r5, lr}
        vPortFree(buff);
        return 0;
    #endif
    
    #if !configUSE_STATS_FORMATTING_FUNCTIONS && !configUSE_TRACE_FACILITY
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031ae:	4d0c      	ldr	r5, [pc, #48]	; (80031e0 <command_tasks+0x34>)
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031b0:	b089      	sub	sp, #36	; 0x24
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031b2:	4628      	mov	r0, r5
uint8_t command_tasks(char *commandline, port_str *ptr) {
 80031b4:	460c      	mov	r4, r1
	    SEND_CONST_STRING("Taskinfo not active, activate it in FreeRTOSConfig.h\n\r", ptr);
 80031b6:	f001 ffe8 	bl	800518a <ntlibc_strlen>
 80031ba:	4622      	mov	r2, r4
 80031bc:	b281      	uxth	r1, r0
 80031be:	4628      	mov	r0, r5
 80031c0:	f7ff fa18 	bl	80025f4 <send_buffer>
	    char buff[30];
        sprintf(buff, "Free heap: %d\r\n",xPortGetFreeHeapSize());
 80031c4:	f007 f848 	bl	800a258 <xPortGetFreeHeapSize>
 80031c8:	4906      	ldr	r1, [pc, #24]	; (80031e4 <command_tasks+0x38>)
 80031ca:	4602      	mov	r2, r0
 80031cc:	4668      	mov	r0, sp
 80031ce:	f001 ff13 	bl	8004ff8 <sprintf_>
        send_string(buff,ptr);
 80031d2:	4668      	mov	r0, sp
 80031d4:	4621      	mov	r1, r4
 80031d6:	f7ff f9ec 	bl	80025b2 <send_string>
        return 0;
	#endif
    return 0;
	
}
 80031da:	2000      	movs	r0, #0
 80031dc:	b009      	add	sp, #36	; 0x24
 80031de:	bd30      	pop	{r4, r5, pc}
 80031e0:	0800ce82 	.word	0x0800ce82
 80031e4:	0800ceb9 	.word	0x0800ceb9

080031e8 <command_set>:
}

/*****************************************************************************
* Set a new value to a parameter
******************************************************************************/
uint8_t command_set(char *commandline, port_str *ptr) {
 80031e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	SKIP_SPACE(commandline);
 80031ec:	7803      	ldrb	r3, [r0, #0]
uint8_t command_set(char *commandline, port_str *ptr) {
 80031ee:	4606      	mov	r6, r0
	SKIP_SPACE(commandline);
 80031f0:	2b20      	cmp	r3, #32
uint8_t command_set(char *commandline, port_str *ptr) {
 80031f2:	460c      	mov	r4, r1
	SKIP_SPACE(commandline);
 80031f4:	d111      	bne.n	800321a <command_set+0x32>
	char *param_value;

	if (commandline == NULL) {
 80031f6:	1c46      	adds	r6, r0, #1
 80031f8:	d10f      	bne.n	800321a <command_set+0x32>
		//if (!port)
		Term_Color_Red(ptr);
 80031fa:	4608      	mov	r0, r1
 80031fc:	f7ff fd30 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no name\r\n", ptr);
 8003200:	483d      	ldr	r0, [pc, #244]	; (80032f8 <command_set+0x110>)
 8003202:	f001 ffc2 	bl	800518a <ntlibc_strlen>
 8003206:	4622      	mov	r2, r4
 8003208:	b281      	uxth	r1, r0
 800320a:	483b      	ldr	r0, [pc, #236]	; (80032f8 <command_set+0x110>)
				return 1;
			}
		}
	}
	Term_Color_Red(ptr);
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 800320c:	f7ff f9f2 	bl	80025f4 <send_buffer>
	Term_Color_White(ptr);
 8003210:	4620      	mov	r0, r4
 8003212:	f7ff fd35 	bl	8002c80 <Term_Color_White>
	return 0;
 8003216:	2000      	movs	r0, #0
 8003218:	e054      	b.n	80032c4 <command_set+0xdc>
	param_value = ntlibc_strchr(commandline, ' ');
 800321a:	2120      	movs	r1, #32
 800321c:	4630      	mov	r0, r6
 800321e:	f002 f805 	bl	800522c <ntlibc_strchr>
	if (param_value == NULL) {
 8003222:	4607      	mov	r7, r0
 8003224:	b948      	cbnz	r0, 800323a <command_set+0x52>
		Term_Color_Red(ptr);
 8003226:	4620      	mov	r0, r4
 8003228:	f7ff fd1a 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no value\r\n", ptr);
 800322c:	4833      	ldr	r0, [pc, #204]	; (80032fc <command_set+0x114>)
 800322e:	f001 ffac 	bl	800518a <ntlibc_strlen>
 8003232:	4622      	mov	r2, r4
 8003234:	b281      	uxth	r1, r0
 8003236:	4831      	ldr	r0, [pc, #196]	; (80032fc <command_set+0x114>)
 8003238:	e7e8      	b.n	800320c <command_set+0x24>
	*param_value = 0;
 800323a:	2300      	movs	r3, #0
	if (*param_value == '\0') {
 800323c:	7845      	ldrb	r5, [r0, #1]
	*param_value = 0;
 800323e:	7003      	strb	r3, [r0, #0]
	if (*param_value == '\0') {
 8003240:	b94d      	cbnz	r5, 8003256 <command_set+0x6e>
		Term_Color_Red(ptr);
 8003242:	4620      	mov	r0, r4
 8003244:	f7ff fd0c 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("E: no val\r\n", ptr);
 8003248:	482d      	ldr	r0, [pc, #180]	; (8003300 <command_set+0x118>)
 800324a:	f001 ff9e 	bl	800518a <ntlibc_strlen>
 800324e:	4622      	mov	r2, r4
 8003250:	b281      	uxth	r1, r0
 8003252:	482b      	ldr	r0, [pc, #172]	; (8003300 <command_set+0x118>)
 8003254:	e7da      	b.n	800320c <command_set+0x24>
 8003256:	461d      	mov	r5, r3
		if (ntlibc_stricmp(commandline, confparam[current_parameter].name) == 0) {
 8003258:	f04f 0b24 	mov.w	fp, #36	; 0x24
 800325c:	f8df a0a4 	ldr.w	sl, [pc, #164]	; 8003304 <command_set+0x11c>
 8003260:	fb0b a905 	mla	r9, fp, r5, sl
 8003264:	4630      	mov	r0, r6
 8003266:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800326a:	fa5f f885 	uxtb.w	r8, r5
 800326e:	f001 ffbd 	bl	80051ec <ntlibc_stricmp>
 8003272:	bb98      	cbnz	r0, 80032dc <command_set+0xf4>
			if (updateDefaultFunction(confparam, param_value,current_parameter, ptr)){
 8003274:	4623      	mov	r3, r4
 8003276:	4642      	mov	r2, r8
 8003278:	1c79      	adds	r1, r7, #1
 800327a:	4822      	ldr	r0, [pc, #136]	; (8003304 <command_set+0x11c>)
 800327c:	f7ff f9da 	bl	8002634 <updateDefaultFunction>
 8003280:	b310      	cbz	r0, 80032c8 <command_set+0xe0>
                if(confparam[current_parameter].callback_function){
 8003282:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8003286:	b123      	cbz	r3, 8003292 <command_set+0xaa>
                    if (confparam[current_parameter].callback_function(confparam, current_parameter, ptr)){
 8003288:	4622      	mov	r2, r4
 800328a:	4641      	mov	r1, r8
 800328c:	481d      	ldr	r0, [pc, #116]	; (8003304 <command_set+0x11c>)
 800328e:	4798      	blx	r3
 8003290:	b148      	cbz	r0, 80032a6 <command_set+0xbe>
                    Term_Color_Green(ptr);
 8003292:	4620      	mov	r0, r4
 8003294:	f7ff fcd4 	bl	8002c40 <Term_Color_Green>
                    SEND_CONST_STRING("OK\r\n", ptr);
 8003298:	481b      	ldr	r0, [pc, #108]	; (8003308 <command_set+0x120>)
 800329a:	f001 ff76 	bl	800518a <ntlibc_strlen>
 800329e:	4622      	mov	r2, r4
 80032a0:	b281      	uxth	r1, r0
 80032a2:	4819      	ldr	r0, [pc, #100]	; (8003308 <command_set+0x120>)
 80032a4:	e008      	b.n	80032b8 <command_set+0xd0>
                        Term_Color_Red(ptr);
 80032a6:	4620      	mov	r0, r4
 80032a8:	f7ff fcda 	bl	8002c60 <Term_Color_Red>
                        SEND_CONST_STRING("ERROR: Callback\r\n", ptr);
 80032ac:	4817      	ldr	r0, [pc, #92]	; (800330c <command_set+0x124>)
 80032ae:	f001 ff6c 	bl	800518a <ntlibc_strlen>
 80032b2:	4622      	mov	r2, r4
 80032b4:	b281      	uxth	r1, r0
 80032b6:	4815      	ldr	r0, [pc, #84]	; (800330c <command_set+0x124>)
				SEND_CONST_STRING("NOK\r\n", ptr);
 80032b8:	f7ff f99c 	bl	80025f4 <send_buffer>
				Term_Color_White(ptr);
 80032bc:	4620      	mov	r0, r4
 80032be:	f7ff fcdf 	bl	8002c80 <Term_Color_White>
				return 1;
 80032c2:	2001      	movs	r0, #1
}
 80032c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				Term_Color_Red(ptr);
 80032c8:	4620      	mov	r0, r4
 80032ca:	f7ff fcc9 	bl	8002c60 <Term_Color_Red>
				SEND_CONST_STRING("NOK\r\n", ptr);
 80032ce:	4810      	ldr	r0, [pc, #64]	; (8003310 <command_set+0x128>)
 80032d0:	f001 ff5b 	bl	800518a <ntlibc_strlen>
 80032d4:	4622      	mov	r2, r4
 80032d6:	b281      	uxth	r1, r0
 80032d8:	480d      	ldr	r0, [pc, #52]	; (8003310 <command_set+0x128>)
 80032da:	e7ed      	b.n	80032b8 <command_set+0xd0>
 80032dc:	3501      	adds	r5, #1
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 80032de:	2d0b      	cmp	r5, #11
 80032e0:	d1be      	bne.n	8003260 <command_set+0x78>
	Term_Color_Red(ptr);
 80032e2:	4620      	mov	r0, r4
 80032e4:	f7ff fcbc 	bl	8002c60 <Term_Color_Red>
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 80032e8:	480a      	ldr	r0, [pc, #40]	; (8003314 <command_set+0x12c>)
 80032ea:	f001 ff4e 	bl	800518a <ntlibc_strlen>
 80032ee:	4622      	mov	r2, r4
 80032f0:	b281      	uxth	r1, r0
 80032f2:	4808      	ldr	r0, [pc, #32]	; (8003314 <command_set+0x12c>)
 80032f4:	e78a      	b.n	800320c <command_set+0x24>
 80032f6:	bf00      	nop
 80032f8:	0800cd21 	.word	0x0800cd21
 80032fc:	0800cd2e 	.word	0x0800cd2e
 8003300:	0800cd3c 	.word	0x0800cd3c
 8003304:	200001ac 	.word	0x200001ac
 8003308:	0800cd5b 	.word	0x0800cd5b
 800330c:	0800cd48 	.word	0x0800cd48
 8003310:	0800cd5a 	.word	0x0800cd5a
 8003314:	0800cd60 	.word	0x0800cd60

08003318 <command_help>:
}

/*****************************************************************************
* Prints the help text
******************************************************************************/
uint8_t command_help(char *commandline, port_str *ptr) {
 8003318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	UNUSED_VARIABLE(commandline);
	SEND_CONST_STRING("\r\nCommands:\r\n", ptr);
 800331c:	4867      	ldr	r0, [pc, #412]	; (80034bc <command_help+0x1a4>)
uint8_t command_help(char *commandline, port_str *ptr) {
 800331e:	460c      	mov	r4, r1
	SEND_CONST_STRING("\r\nCommands:\r\n", ptr);
 8003320:	f001 ff33 	bl	800518a <ntlibc_strlen>
 8003324:	4622      	mov	r2, r4
 8003326:	b281      	uxth	r1, r0
 8003328:	4864      	ldr	r0, [pc, #400]	; (80034bc <command_help+0x1a4>)
 800332a:	f7ff f963 	bl	80025f4 <send_buffer>
 800332e:	2500      	movs	r5, #0
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 8003330:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80034dc <command_help+0x1c4>
		Term_Color_Cyan(ptr);
		send_string((char *)commands[current_command].text, ptr);
 8003334:	4e62      	ldr	r6, [pc, #392]	; (80034c0 <command_help+0x1a8>)
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
		}
		send_string((char *)commands[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 8003336:	4f63      	ldr	r7, [pc, #396]	; (80034c4 <command_help+0x1ac>)
		SEND_CONST_STRING("\t", ptr);
 8003338:	4640      	mov	r0, r8
 800333a:	f001 ff26 	bl	800518a <ntlibc_strlen>
 800333e:	4622      	mov	r2, r4
 8003340:	b281      	uxth	r1, r0
 8003342:	4640      	mov	r0, r8
 8003344:	f7ff f956 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 8003348:	4620      	mov	r0, r4
 800334a:	f7ff fca9 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)commands[current_command].text, ptr);
 800334e:	4621      	mov	r1, r4
 8003350:	59a8      	ldr	r0, [r5, r6]
 8003352:	f7ff f92e 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 8003356:	4620      	mov	r0, r4
 8003358:	f7ff fc92 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(commands[current_command].text) > 7) {
 800335c:	59a8      	ldr	r0, [r5, r6]
 800335e:	f001 ff14 	bl	800518a <ntlibc_strlen>
 8003362:	2807      	cmp	r0, #7
 8003364:	f340 8095 	ble.w	8003492 <command_help+0x17a>
			SEND_CONST_STRING("\t-> ", ptr);
 8003368:	4857      	ldr	r0, [pc, #348]	; (80034c8 <command_help+0x1b0>)
 800336a:	f001 ff0e 	bl	800518a <ntlibc_strlen>
 800336e:	4622      	mov	r2, r4
 8003370:	b281      	uxth	r1, r0
 8003372:	4855      	ldr	r0, [pc, #340]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 8003374:	f7ff f93e 	bl	80025f4 <send_buffer>
		send_string((char *)commands[current_command].help, ptr);
 8003378:	1973      	adds	r3, r6, r5
 800337a:	6898      	ldr	r0, [r3, #8]
 800337c:	4621      	mov	r1, r4
 800337e:	f7ff f918 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003382:	4638      	mov	r0, r7
 8003384:	f001 ff01 	bl	800518a <ntlibc_strlen>
 8003388:	350c      	adds	r5, #12
 800338a:	b281      	uxth	r1, r0
 800338c:	4622      	mov	r2, r4
 800338e:	4638      	mov	r0, r7
 8003390:	f7ff f930 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
 8003394:	2d9c      	cmp	r5, #156	; 0x9c
 8003396:	d1cf      	bne.n	8003338 <command_help+0x20>
	}

	SEND_CONST_STRING("\r\nParameters:\r\n", ptr);
 8003398:	484c      	ldr	r0, [pc, #304]	; (80034cc <command_help+0x1b4>)
 800339a:	f001 fef6 	bl	800518a <ntlibc_strlen>
 800339e:	4d4c      	ldr	r5, [pc, #304]	; (80034d0 <command_help+0x1b8>)
 80033a0:	b281      	uxth	r1, r0
 80033a2:	4622      	mov	r2, r4
 80033a4:	4849      	ldr	r0, [pc, #292]	; (80034cc <command_help+0x1b4>)
 80033a6:	f7ff f925 	bl	80025f4 <send_buffer>
 80033aa:	462e      	mov	r6, r5
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 80033ac:	f8df 812c 	ldr.w	r8, [pc, #300]	; 80034dc <command_help+0x1c4>
		send_string((char *)confparam[current_command].name, ptr);
		Term_Color_White(ptr);
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
 80033b0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80034d8 <command_help+0x1c0>
		}

		send_string((char *)confparam[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 80033b4:	4f43      	ldr	r7, [pc, #268]	; (80034c4 <command_help+0x1ac>)
 80033b6:	f505 7ac6 	add.w	sl, r5, #396	; 0x18c
		SEND_CONST_STRING("\t", ptr);
 80033ba:	4640      	mov	r0, r8
 80033bc:	f001 fee5 	bl	800518a <ntlibc_strlen>
 80033c0:	4622      	mov	r2, r4
 80033c2:	b281      	uxth	r1, r0
 80033c4:	4640      	mov	r0, r8
 80033c6:	f7ff f915 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 80033ca:	4620      	mov	r0, r4
 80033cc:	f7ff fc68 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)confparam[current_command].name, ptr);
 80033d0:	4621      	mov	r1, r4
 80033d2:	6870      	ldr	r0, [r6, #4]
 80033d4:	f7ff f8ed 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 80033d8:	4620      	mov	r0, r4
 80033da:	f7ff fc51 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
 80033de:	6870      	ldr	r0, [r6, #4]
 80033e0:	f001 fed3 	bl	800518a <ntlibc_strlen>
 80033e4:	2807      	cmp	r0, #7
 80033e6:	dd5b      	ble.n	80034a0 <command_help+0x188>
			SEND_CONST_STRING("\t-> ", ptr);
 80033e8:	4837      	ldr	r0, [pc, #220]	; (80034c8 <command_help+0x1b0>)
 80033ea:	f001 fece 	bl	800518a <ntlibc_strlen>
 80033ee:	4622      	mov	r2, r4
 80033f0:	b281      	uxth	r1, r0
 80033f2:	4835      	ldr	r0, [pc, #212]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 80033f4:	f7ff f8fe 	bl	80025f4 <send_buffer>
		send_string((char *)confparam[current_command].help, ptr);
 80033f8:	6a30      	ldr	r0, [r6, #32]
 80033fa:	4621      	mov	r1, r4
 80033fc:	f7ff f8d9 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003400:	4638      	mov	r0, r7
 8003402:	f001 fec2 	bl	800518a <ntlibc_strlen>
 8003406:	3624      	adds	r6, #36	; 0x24
 8003408:	b281      	uxth	r1, r0
 800340a:	4622      	mov	r2, r4
 800340c:	4638      	mov	r0, r7
 800340e:	f7ff f8f1 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
 8003412:	4556      	cmp	r6, sl
 8003414:	d1d1      	bne.n	80033ba <command_help+0xa2>
	}

	SEND_CONST_STRING("\r\nConfiguration:\r\n", ptr);
 8003416:	482f      	ldr	r0, [pc, #188]	; (80034d4 <command_help+0x1bc>)
 8003418:	f001 feb7 	bl	800518a <ntlibc_strlen>
 800341c:	4622      	mov	r2, r4
 800341e:	b281      	uxth	r1, r0
 8003420:	482c      	ldr	r0, [pc, #176]	; (80034d4 <command_help+0x1bc>)
 8003422:	f7ff f8e7 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
		SEND_CONST_STRING("\t", ptr);
 8003426:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 80034dc <command_help+0x1c4>
		send_string((char *)confparam[current_command].name, ptr);
		Term_Color_White(ptr);
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
			SEND_CONST_STRING("\t-> ", ptr);
		} else {
			SEND_CONST_STRING("\t\t-> ", ptr);
 800342a:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 80034d8 <command_help+0x1c0>
		}

		send_string((char *)confparam[current_command].help, ptr);
		SEND_CONST_STRING("\r\n", ptr);
 800342e:	4f25      	ldr	r7, [pc, #148]	; (80034c4 <command_help+0x1ac>)
		SEND_CONST_STRING("\t", ptr);
 8003430:	4640      	mov	r0, r8
 8003432:	f001 feaa 	bl	800518a <ntlibc_strlen>
 8003436:	4622      	mov	r2, r4
 8003438:	b281      	uxth	r1, r0
 800343a:	4640      	mov	r0, r8
 800343c:	f7ff f8da 	bl	80025f4 <send_buffer>
		Term_Color_Cyan(ptr);
 8003440:	4620      	mov	r0, r4
 8003442:	f7ff fc2d 	bl	8002ca0 <Term_Color_Cyan>
		send_string((char *)confparam[current_command].name, ptr);
 8003446:	4621      	mov	r1, r4
 8003448:	6868      	ldr	r0, [r5, #4]
 800344a:	f7ff f8b2 	bl	80025b2 <send_string>
		Term_Color_White(ptr);
 800344e:	4620      	mov	r0, r4
 8003450:	f7ff fc16 	bl	8002c80 <Term_Color_White>
		if (ntlibc_strlen(confparam[current_command].name) > 7) {
 8003454:	6868      	ldr	r0, [r5, #4]
 8003456:	f001 fe98 	bl	800518a <ntlibc_strlen>
 800345a:	2807      	cmp	r0, #7
 800345c:	dd27      	ble.n	80034ae <command_help+0x196>
			SEND_CONST_STRING("\t-> ", ptr);
 800345e:	481a      	ldr	r0, [pc, #104]	; (80034c8 <command_help+0x1b0>)
 8003460:	f001 fe93 	bl	800518a <ntlibc_strlen>
 8003464:	4622      	mov	r2, r4
 8003466:	b281      	uxth	r1, r0
 8003468:	4817      	ldr	r0, [pc, #92]	; (80034c8 <command_help+0x1b0>)
			SEND_CONST_STRING("\t\t-> ", ptr);
 800346a:	f7ff f8c3 	bl	80025f4 <send_buffer>
		send_string((char *)confparam[current_command].help, ptr);
 800346e:	6a28      	ldr	r0, [r5, #32]
 8003470:	4621      	mov	r1, r4
 8003472:	f7ff f89e 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003476:	4638      	mov	r0, r7
 8003478:	f001 fe87 	bl	800518a <ntlibc_strlen>
 800347c:	3524      	adds	r5, #36	; 0x24
 800347e:	b281      	uxth	r1, r0
 8003480:	4622      	mov	r2, r4
 8003482:	4638      	mov	r0, r7
 8003484:	f7ff f8b6 	bl	80025f4 <send_buffer>
	for (uint8_t current_command = 0; current_command < sizeof(confparam) / sizeof(parameter_entry); current_command++) {
 8003488:	42b5      	cmp	r5, r6
 800348a:	d1d1      	bne.n	8003430 <command_help+0x118>
	}

	return 0;
}
 800348c:	2000      	movs	r0, #0
 800348e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			SEND_CONST_STRING("\t\t-> ", ptr);
 8003492:	4811      	ldr	r0, [pc, #68]	; (80034d8 <command_help+0x1c0>)
 8003494:	f001 fe79 	bl	800518a <ntlibc_strlen>
 8003498:	4622      	mov	r2, r4
 800349a:	b281      	uxth	r1, r0
 800349c:	480e      	ldr	r0, [pc, #56]	; (80034d8 <command_help+0x1c0>)
 800349e:	e769      	b.n	8003374 <command_help+0x5c>
			SEND_CONST_STRING("\t\t-> ", ptr);
 80034a0:	4648      	mov	r0, r9
 80034a2:	f001 fe72 	bl	800518a <ntlibc_strlen>
 80034a6:	4622      	mov	r2, r4
 80034a8:	b281      	uxth	r1, r0
 80034aa:	4648      	mov	r0, r9
 80034ac:	e7a2      	b.n	80033f4 <command_help+0xdc>
			SEND_CONST_STRING("\t\t-> ", ptr);
 80034ae:	4648      	mov	r0, r9
 80034b0:	f001 fe6b 	bl	800518a <ntlibc_strlen>
 80034b4:	4622      	mov	r2, r4
 80034b6:	b281      	uxth	r1, r0
 80034b8:	4648      	mov	r0, r9
 80034ba:	e7d6      	b.n	800346a <command_help+0x152>
 80034bc:	0800ccdf 	.word	0x0800ccdf
 80034c0:	20000110 	.word	0x20000110
 80034c4:	0800ccb7 	.word	0x0800ccb7
 80034c8:	0800ccf0 	.word	0x0800ccf0
 80034cc:	0800ccf5 	.word	0x0800ccf5
 80034d0:	200001ac 	.word	0x200001ac
 80034d4:	0800cbda 	.word	0x0800cbda
 80034d8:	0800ccef 	.word	0x0800ccef
 80034dc:	0800cced 	.word	0x0800cced

080034e0 <command_cls>:
}

/*****************************************************************************
* Clears the terminal screen and displays the logo
******************************************************************************/
uint8_t command_cls(char *commandline, port_str *ptr) {
 80034e0:	b538      	push	{r3, r4, r5, lr}
    //tsk_overlay_chart_start();
	Term_Erase_Screen(ptr);

    SEND_CONST_STRING("\r\n\r\n",ptr);
 80034e2:	4c07      	ldr	r4, [pc, #28]	; (8003500 <command_cls+0x20>)
	Term_Erase_Screen(ptr);
 80034e4:	4608      	mov	r0, r1
uint8_t command_cls(char *commandline, port_str *ptr) {
 80034e6:	460d      	mov	r5, r1
	Term_Erase_Screen(ptr);
 80034e8:	f7ff fb9a 	bl	8002c20 <Term_Erase_Screen>
    SEND_CONST_STRING("\r\n\r\n",ptr);
 80034ec:	4620      	mov	r0, r4
 80034ee:	f001 fe4c 	bl	800518a <ntlibc_strlen>
 80034f2:	462a      	mov	r2, r5
 80034f4:	b281      	uxth	r1, r0
 80034f6:	4620      	mov	r0, r4
 80034f8:	f7ff f87c 	bl	80025f4 <send_buffer>
	return 1;
}
 80034fc:	2001      	movs	r0, #1
 80034fe:	bd38      	pop	{r3, r4, r5, pc}
 8003500:	0800ccb5 	.word	0x0800ccb5

08003504 <command_get>:
uint8_t command_get(char *commandline, port_str *ptr) {
 8003504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003508:	4606      	mov	r6, r0
	SKIP_SPACE(commandline);
 800350a:	7803      	ldrb	r3, [r0, #0]
uint8_t command_get(char *commandline, port_str *ptr) {
 800350c:	460c      	mov	r4, r1
	SKIP_SPACE(commandline);
 800350e:	2b20      	cmp	r3, #32
 8003510:	bf08      	it	eq
 8003512:	3601      	addeq	r6, #1
	if (*commandline == 0 || commandline == 0) //no param --> show help text
 8003514:	7833      	ldrb	r3, [r6, #0]
 8003516:	b93b      	cbnz	r3, 8003528 <command_get+0x24>
		print_param_help(confparam, PARAM_SIZE(confparam), ptr);
 8003518:	460a      	mov	r2, r1
 800351a:	4816      	ldr	r0, [pc, #88]	; (8003574 <command_get+0x70>)
 800351c:	210b      	movs	r1, #11
 800351e:	f7ff fceb 	bl	8002ef8 <print_param_help>
			return 1;
 8003522:	2001      	movs	r0, #1
}
 8003524:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003528:	2500      	movs	r5, #0
		if (ntlibc_stricmp(commandline, confparam[current_parameter].name) == 0) {
 800352a:	f04f 0824 	mov.w	r8, #36	; 0x24
 800352e:	4f11      	ldr	r7, [pc, #68]	; (8003574 <command_get+0x70>)
 8003530:	fb08 7305 	mla	r3, r8, r5, r7
 8003534:	4630      	mov	r0, r6
 8003536:	6859      	ldr	r1, [r3, #4]
 8003538:	fa5f f985 	uxtb.w	r9, r5
 800353c:	f001 fe56 	bl	80051ec <ntlibc_stricmp>
 8003540:	b928      	cbnz	r0, 800354e <command_get+0x4a>
			print_param(confparam,current_parameter,ptr);
 8003542:	4622      	mov	r2, r4
 8003544:	4649      	mov	r1, r9
 8003546:	480b      	ldr	r0, [pc, #44]	; (8003574 <command_get+0x70>)
 8003548:	f7ff f90a 	bl	8002760 <print_param>
 800354c:	e7e9      	b.n	8003522 <command_get+0x1e>
 800354e:	3501      	adds	r5, #1
	for (uint8_t current_parameter = 0; current_parameter < sizeof(confparam) / sizeof(parameter_entry); current_parameter++) {
 8003550:	2d0b      	cmp	r5, #11
 8003552:	d1ed      	bne.n	8003530 <command_get+0x2c>
	Term_Color_Red(ptr);
 8003554:	4620      	mov	r0, r4
 8003556:	f7ff fb83 	bl	8002c60 <Term_Color_Red>
	SEND_CONST_STRING("E: unknown param\r\n", ptr);
 800355a:	4807      	ldr	r0, [pc, #28]	; (8003578 <command_get+0x74>)
 800355c:	f001 fe15 	bl	800518a <ntlibc_strlen>
 8003560:	4622      	mov	r2, r4
 8003562:	b281      	uxth	r1, r0
 8003564:	4804      	ldr	r0, [pc, #16]	; (8003578 <command_get+0x74>)
 8003566:	f7ff f845 	bl	80025f4 <send_buffer>
	Term_Color_White(ptr);
 800356a:	4620      	mov	r0, r4
 800356c:	f7ff fb88 	bl	8002c80 <Term_Color_White>
	return 0;
 8003570:	2000      	movs	r0, #0
 8003572:	e7d7      	b.n	8003524 <command_get+0x20>
 8003574:	200001ac 	.word	0x200001ac
 8003578:	0800cd60 	.word	0x0800cd60

0800357c <command_eprom>:
uint8_t command_eprom(char *commandline, port_str *ptr) {
 800357c:	b570      	push	{r4, r5, r6, lr}
 800357e:	4605      	mov	r5, r0
	SKIP_SPACE(commandline);
 8003580:	7803      	ldrb	r3, [r0, #0]
uint8_t command_eprom(char *commandline, port_str *ptr) {
 8003582:	b086      	sub	sp, #24
	SKIP_SPACE(commandline);
 8003584:	2b20      	cmp	r3, #32
 8003586:	bf08      	it	eq
 8003588:	3501      	addeq	r5, #1
    CHECK_NULL(commandline);
 800358a:	782b      	ldrb	r3, [r5, #0]
uint8_t command_eprom(char *commandline, port_str *ptr) {
 800358c:	460e      	mov	r6, r1
    CHECK_NULL(commandline);
 800358e:	b36b      	cbz	r3, 80035ec <command_eprom+0x70>
	if (ntlibc_stricmp(commandline, "save") == 0) {
 8003590:	491c      	ldr	r1, [pc, #112]	; (8003604 <command_eprom+0x88>)
 8003592:	4628      	mov	r0, r5
 8003594:	f001 fe2a 	bl	80051ec <ntlibc_stricmp>
 8003598:	4604      	mov	r4, r0
 800359a:	b9d0      	cbnz	r0, 80035d2 <command_eprom+0x56>
		taskENTER_CRITICAL();
 800359c:	f006 fc62 	bl	8009e64 <vPortEnterCritical>
		HAL_FLASH_Unlock();
 80035a0:	f003 fa5a 	bl	8006a58 <HAL_FLASH_Unlock>
		s_eraseinit.NbPages     = 1;
 80035a4:	2301      	movs	r3, #1
 80035a6:	4a18      	ldr	r2, [pc, #96]	; (8003608 <command_eprom+0x8c>)
		HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80035a8:	a901      	add	r1, sp, #4
 80035aa:	a802      	add	r0, sp, #8
		s_eraseinit.NbPages     = 1;
 80035ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
		s_eraseinit.TypeErase   = FLASH_TYPEERASE_PAGES;
 80035b0:	e9cd 4401 	strd	r4, r4, [sp, #4]
		HAL_FLASHEx_Erase(&s_eraseinit, &page_error);
 80035b4:	f003 fb0a 	bl	8006bcc <HAL_FLASHEx_Erase>
	    EEPROM_write_conf(confparam, PARAM_SIZE(confparam),0, ptr);
 80035b8:	4633      	mov	r3, r6
 80035ba:	4622      	mov	r2, r4
 80035bc:	210b      	movs	r1, #11
 80035be:	4813      	ldr	r0, [pc, #76]	; (800360c <command_eprom+0x90>)
 80035c0:	f7ff f964 	bl	800288c <EEPROM_write_conf>
	    HAL_FLASH_Lock();
 80035c4:	f003 fa5a 	bl	8006a7c <HAL_FLASH_Lock>
	    taskEXIT_CRITICAL();
 80035c8:	f006 fc6e 	bl	8009ea8 <vPortExitCritical>
		return 0;
 80035cc:	4620      	mov	r0, r4
}
 80035ce:	b006      	add	sp, #24
 80035d0:	bd70      	pop	{r4, r5, r6, pc}
	if (ntlibc_stricmp(commandline, "load") == 0) {
 80035d2:	490f      	ldr	r1, [pc, #60]	; (8003610 <command_eprom+0x94>)
 80035d4:	4628      	mov	r0, r5
 80035d6:	f001 fe09 	bl	80051ec <ntlibc_stricmp>
 80035da:	4604      	mov	r4, r0
 80035dc:	b930      	cbnz	r0, 80035ec <command_eprom+0x70>
		EEPROM_read_conf(confparam, PARAM_SIZE(confparam) ,0,ptr);
 80035de:	4602      	mov	r2, r0
 80035e0:	4633      	mov	r3, r6
 80035e2:	210b      	movs	r1, #11
 80035e4:	4809      	ldr	r0, [pc, #36]	; (800360c <command_eprom+0x90>)
 80035e6:	f7ff fa09 	bl	80029fc <EEPROM_read_conf>
 80035ea:	e7ef      	b.n	80035cc <command_eprom+0x50>
	HELP_TEXT("Usage: eprom [load|save]\r\n");
 80035ec:	4630      	mov	r0, r6
 80035ee:	f7ff fb37 	bl	8002c60 <Term_Color_Red>
 80035f2:	4631      	mov	r1, r6
 80035f4:	4807      	ldr	r0, [pc, #28]	; (8003614 <command_eprom+0x98>)
 80035f6:	f7fe ffdc 	bl	80025b2 <send_string>
 80035fa:	4630      	mov	r0, r6
 80035fc:	f7ff fb40 	bl	8002c80 <Term_Color_White>
 8003600:	2001      	movs	r0, #1
 8003602:	e7e4      	b.n	80035ce <command_eprom+0x52>
 8003604:	0800ccba 	.word	0x0800ccba
 8003608:	0800fc00 	.word	0x0800fc00
 800360c:	200001ac 	.word	0x200001ac
 8003610:	0800ccbf 	.word	0x0800ccbf
 8003614:	0800ccc4 	.word	0x0800ccc4

08003618 <command_status>:
uint8_t command_status(char *commandline, port_str *ptr) {
 8003618:	b538      	push	{r3, r4, r5, lr}
 800361a:	4604      	mov	r4, r0
    SKIP_SPACE(commandline);
 800361c:	7803      	ldrb	r3, [r0, #0]
uint8_t command_status(char *commandline, port_str *ptr) {
 800361e:	460d      	mov	r5, r1
    SKIP_SPACE(commandline);
 8003620:	2b20      	cmp	r3, #32
 8003622:	bf08      	it	eq
 8003624:	3401      	addeq	r4, #1
    CHECK_NULL(commandline);
 8003626:	7823      	ldrb	r3, [r4, #0]
 8003628:	b18b      	cbz	r3, 800364e <command_status+0x36>
	if (ntlibc_stricmp(commandline, "start") == 0) {
 800362a:	490e      	ldr	r1, [pc, #56]	; (8003664 <command_status+0x4c>)
 800362c:	4620      	mov	r0, r4
 800362e:	f001 fddd 	bl	80051ec <ntlibc_stricmp>
 8003632:	b920      	cbnz	r0, 800363e <command_status+0x26>
	telemetry = 1;
 8003634:	2201      	movs	r2, #1
 8003636:	4b0c      	ldr	r3, [pc, #48]	; (8003668 <command_status+0x50>)
 8003638:	701a      	strb	r2, [r3, #0]
}
 800363a:	2001      	movs	r0, #1
 800363c:	bd38      	pop	{r3, r4, r5, pc}
	if (ntlibc_stricmp(commandline, "stop") == 0) {
 800363e:	490b      	ldr	r1, [pc, #44]	; (800366c <command_status+0x54>)
 8003640:	4620      	mov	r0, r4
 8003642:	f001 fdd3 	bl	80051ec <ntlibc_stricmp>
 8003646:	b910      	cbnz	r0, 800364e <command_status+0x36>
	telemetry = 0;
 8003648:	4b07      	ldr	r3, [pc, #28]	; (8003668 <command_status+0x50>)
 800364a:	7018      	strb	r0, [r3, #0]
        return 1;
 800364c:	e7f5      	b.n	800363a <command_status+0x22>
	HELP_TEXT("Usage: status [start|stop]\r\n");
 800364e:	4628      	mov	r0, r5
 8003650:	f7ff fb06 	bl	8002c60 <Term_Color_Red>
 8003654:	4629      	mov	r1, r5
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <command_status+0x58>)
 8003658:	f7fe ffab 	bl	80025b2 <send_string>
 800365c:	4628      	mov	r0, r5
 800365e:	f7ff fb0f 	bl	8002c80 <Term_Color_White>
 8003662:	e7ea      	b.n	800363a <command_status+0x22>
 8003664:	0800ce5a 	.word	0x0800ce5a
 8003668:	200005f0 	.word	0x200005f0
 800366c:	0800ce60 	.word	0x0800ce60
 8003670:	0800ce65 	.word	0x0800ce65

08003674 <recalc_params>:
}
 8003674:	4770      	bx	lr
	...

08003678 <init_config>:
    rtU_Left.z_ctrlModReq 		= 1;
 8003678:	2201      	movs	r2, #1
 800367a:	4b0d      	ldr	r3, [pc, #52]	; (80036b0 <init_config+0x38>)
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 800367c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
    rtU_Left.z_ctrlModReq 		= 1;
 8003680:	705a      	strb	r2, [r3, #1]
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 8003682:	4b0c      	ldr	r3, [pc, #48]	; (80036b4 <init_config+0x3c>)
    rtP_Left.b_fieldWeakEna 	= FIELD_WEAK_ENA;
 8003684:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
    rtP_Left.r_fieldWeakHi  	= FIELD_WEAK_HI<<4;
 8003688:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 800368c:	f8a3 20de 	strh.w	r2, [r3, #222]	; 0xde
    rtP_Left.r_fieldWeakLo  	= FIELD_WEAK_LO<<4;
 8003690:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8003694:	f8a3 20e0 	strh.w	r2, [r3, #224]	; 0xe0
    rtP_Left.id_fieldWeakMax 	= (FIELD_WEAK_MAX * A2BIT_CONV) << 4;
 8003698:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800369c:	f8a3 20ce 	strh.w	r2, [r3, #206]	; 0xce
    rtP_Left.a_phaAdvMax     	= PHASE_ADV_MAX << 4;                   // fixdt(1,16,4)
 80036a0:	f44f 72c8 	mov.w	r2, #400	; 0x190
    rtP_Left.i_max          	= (PHASE_CURR_MAX * A2BIT_CONV) << 4;
 80036a4:	f8a3 10cc 	strh.w	r1, [r3, #204]	; 0xcc
    rtP_Left.a_phaAdvMax     	= PHASE_ADV_MAX << 4;                   // fixdt(1,16,4)
 80036a8:	f8a3 20ca 	strh.w	r2, [r3, #202]	; 0xca
}
 80036ac:	4770      	bx	lr
 80036ae:	bf00      	nop
 80036b0:	200044ac 	.word	0x200044ac
 80036b4:	20000000 	.word	0x20000000

080036b8 <command_load_default>:
uint8_t command_load_default(char *commandline, port_str *ptr) {
 80036b8:	b538      	push	{r3, r4, r5, lr}
    SEND_CONST_STRING("Default parameters loaded\r\n", ptr);
 80036ba:	4c07      	ldr	r4, [pc, #28]	; (80036d8 <command_load_default+0x20>)
uint8_t command_load_default(char *commandline, port_str *ptr) {
 80036bc:	460d      	mov	r5, r1
    SEND_CONST_STRING("Default parameters loaded\r\n", ptr);
 80036be:	4620      	mov	r0, r4
 80036c0:	f001 fd63 	bl	800518a <ntlibc_strlen>
 80036c4:	462a      	mov	r2, r5
 80036c6:	b281      	uxth	r1, r0
 80036c8:	4620      	mov	r0, r4
 80036ca:	f7fe ff93 	bl	80025f4 <send_buffer>
    init_config();
 80036ce:	f7ff ffd3 	bl	8003678 <init_config>
}
 80036d2:	2001      	movs	r0, #1
 80036d4:	bd38      	pop	{r3, r4, r5, pc}
 80036d6:	bf00      	nop
 80036d8:	0800cd05 	.word	0x0800cd05

080036dc <eeprom_load>:
    return EEPROM_read_conf(confparam, PARAM_SIZE(confparam) ,0,ptr);
 80036dc:	4603      	mov	r3, r0
 80036de:	2200      	movs	r2, #0
 80036e0:	210b      	movs	r1, #11
 80036e2:	4801      	ldr	r0, [pc, #4]	; (80036e8 <eeprom_load+0xc>)
 80036e4:	f7ff b98a 	b.w	80029fc <EEPROM_read_conf>
 80036e8:	200001ac 	.word	0x200001ac

080036ec <init_tt>:
void init_tt(uint8_t with_chart, port_str *ptr){
 80036ec:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80036ee:	460c      	mov	r4, r1
 80036f0:	4606      	mov	r6, r0
    send_gauge_config(0, GAUGE0_MIN, GAUGE0_MAX, GAUGE0_NAME, ptr);
 80036f2:	9100      	str	r1, [sp, #0]
 80036f4:	4b34      	ldr	r3, [pc, #208]	; (80037c8 <init_tt+0xdc>)
 80036f6:	2232      	movs	r2, #50	; 0x32
 80036f8:	f06f 0131 	mvn.w	r1, #49	; 0x31
 80036fc:	2000      	movs	r0, #0
 80036fe:	f001 fcf5 	bl	80050ec <send_gauge_config>
    send_gauge_config(1, GAUGE1_MIN, GAUGE1_MAX, GAUGE1_NAME, ptr);
 8003702:	4b32      	ldr	r3, [pc, #200]	; (80037cc <init_tt+0xe0>)
 8003704:	2232      	movs	r2, #50	; 0x32
 8003706:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800370a:	2001      	movs	r0, #1
 800370c:	9400      	str	r4, [sp, #0]
 800370e:	f001 fced 	bl	80050ec <send_gauge_config>
    send_gauge_config(2, GAUGE2_MIN, GAUGE2_MAX, GAUGE2_NAME, ptr);
 8003712:	4b2f      	ldr	r3, [pc, #188]	; (80037d0 <init_tt+0xe4>)
 8003714:	2232      	movs	r2, #50	; 0x32
 8003716:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800371a:	2002      	movs	r0, #2
 800371c:	9400      	str	r4, [sp, #0]
 800371e:	f001 fce5 	bl	80050ec <send_gauge_config>
    send_gauge_config(3, GAUGE3_MIN, GAUGE3_MAX, GAUGE3_NAME, ptr);
 8003722:	4b2c      	ldr	r3, [pc, #176]	; (80037d4 <init_tt+0xe8>)
 8003724:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8003728:	492b      	ldr	r1, [pc, #172]	; (80037d8 <init_tt+0xec>)
 800372a:	2003      	movs	r0, #3
 800372c:	9400      	str	r4, [sp, #0]
 800372e:	f001 fcdd 	bl	80050ec <send_gauge_config>
    send_gauge_config(4, GAUGE4_MIN, GAUGE4_MAX, GAUGE4_NAME, ptr);
 8003732:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <init_tt+0xf0>)
 8003734:	2232      	movs	r2, #50	; 0x32
 8003736:	f06f 0131 	mvn.w	r1, #49	; 0x31
 800373a:	2004      	movs	r0, #4
 800373c:	9400      	str	r4, [sp, #0]
 800373e:	f001 fcd5 	bl	80050ec <send_gauge_config>
    send_gauge_config(5, GAUGE5_MIN, GAUGE5_MAX, GAUGE5_NAME, ptr);
 8003742:	4b27      	ldr	r3, [pc, #156]	; (80037e0 <init_tt+0xf4>)
 8003744:	2250      	movs	r2, #80	; 0x50
 8003746:	2100      	movs	r1, #0
 8003748:	2005      	movs	r0, #5
 800374a:	9400      	str	r4, [sp, #0]
 800374c:	f001 fcce 	bl	80050ec <send_gauge_config>
    send_gauge_config(6, GAUGE6_MIN, GAUGE6_MAX, GAUGE6_NAME, ptr);
 8003750:	9400      	str	r4, [sp, #0]
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <init_tt+0xf8>)
 8003754:	2264      	movs	r2, #100	; 0x64
 8003756:	f06f 0109 	mvn.w	r1, #9
 800375a:	2006      	movs	r0, #6
 800375c:	f001 fcc6 	bl	80050ec <send_gauge_config>
    if(with_chart==pdTRUE){
 8003760:	2e01      	cmp	r6, #1
 8003762:	d12c      	bne.n	80037be <init_tt+0xd2>
        send_chart_config(0, CHART0_MIN, CHART0_MAX, CHART0_OFFSET, CHART0_UNIT, CHART0_NAME, ptr);
 8003764:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <init_tt+0xfc>)
 8003766:	2502      	movs	r5, #2
 8003768:	9301      	str	r3, [sp, #4]
 800376a:	2300      	movs	r3, #0
 800376c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003770:	4618      	mov	r0, r3
 8003772:	491e      	ldr	r1, [pc, #120]	; (80037ec <init_tt+0x100>)
 8003774:	9402      	str	r4, [sp, #8]
 8003776:	9500      	str	r5, [sp, #0]
 8003778:	f001 fc86 	bl	8005088 <send_chart_config>
        send_chart_config(1, CHART1_MIN, CHART1_MAX, CHART1_OFFSET, CHART1_UNIT, CHART1_NAME, ptr);
 800377c:	4b1c      	ldr	r3, [pc, #112]	; (80037f0 <init_tt+0x104>)
 800377e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003782:	e9cd 5300 	strd	r5, r3, [sp]
 8003786:	4919      	ldr	r1, [pc, #100]	; (80037ec <init_tt+0x100>)
 8003788:	2300      	movs	r3, #0
 800378a:	4630      	mov	r0, r6
 800378c:	9402      	str	r4, [sp, #8]
 800378e:	f001 fc7b 	bl	8005088 <send_chart_config>
        send_chart_config(2, CHART2_MIN, CHART2_MAX, CHART2_OFFSET, CHART2_UNIT, CHART2_NAME, ptr);
 8003792:	4b18      	ldr	r3, [pc, #96]	; (80037f4 <init_tt+0x108>)
 8003794:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8003798:	e9cd 5300 	strd	r5, r3, [sp]
 800379c:	4913      	ldr	r1, [pc, #76]	; (80037ec <init_tt+0x100>)
 800379e:	2300      	movs	r3, #0
 80037a0:	4628      	mov	r0, r5
 80037a2:	9402      	str	r4, [sp, #8]
 80037a4:	f001 fc70 	bl	8005088 <send_chart_config>
        send_chart_config(3, CHART3_MIN, CHART3_MAX, CHART3_OFFSET, CHART3_UNIT, CHART3_NAME, ptr);
 80037a8:	2003      	movs	r0, #3
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <init_tt+0x10c>)
 80037ac:	9402      	str	r4, [sp, #8]
 80037ae:	9301      	str	r3, [sp, #4]
 80037b0:	9000      	str	r0, [sp, #0]
 80037b2:	2300      	movs	r3, #0
 80037b4:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80037b8:	4910      	ldr	r1, [pc, #64]	; (80037fc <init_tt+0x110>)
 80037ba:	f001 fc65 	bl	8005088 <send_chart_config>
	telemetry = 1;
 80037be:	2201      	movs	r2, #1
 80037c0:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <init_tt+0x114>)
 80037c2:	701a      	strb	r2, [r3, #0]
}
 80037c4:	b004      	add	sp, #16
 80037c6:	bd70      	pop	{r4, r5, r6, pc}
 80037c8:	0800cee5 	.word	0x0800cee5
 80037cc:	0800ceec 	.word	0x0800ceec
 80037d0:	0800cef3 	.word	0x0800cef3
 80037d4:	0800cefa 	.word	0x0800cefa
 80037d8:	fffff830 	.word	0xfffff830
 80037dc:	0800cf00 	.word	0x0800cf00
 80037e0:	0800cf0b 	.word	0x0800cf0b
 80037e4:	0800cf13 	.word	0x0800cf13
 80037e8:	0800cf1f 	.word	0x0800cf1f
 80037ec:	fffffe0c 	.word	0xfffffe0c
 80037f0:	0800cf27 	.word	0x0800cf27
 80037f4:	0800cf2f 	.word	0x0800cf2f
 80037f8:	0800cf37 	.word	0x0800cf37
 80037fc:	fffffe70 	.word	0xfffffe70
 8003800:	200005f0 	.word	0x200005f0

08003804 <command_tterm>:
uint8_t command_tterm(char *commandline, port_str *ptr){
 8003804:	b538      	push	{r3, r4, r5, lr}
 8003806:	4605      	mov	r5, r0
    SKIP_SPACE(commandline);
 8003808:	7803      	ldrb	r3, [r0, #0]
uint8_t command_tterm(char *commandline, port_str *ptr){
 800380a:	460c      	mov	r4, r1
    SKIP_SPACE(commandline);
 800380c:	2b20      	cmp	r3, #32
 800380e:	bf08      	it	eq
 8003810:	3501      	addeq	r5, #1
    CHECK_NULL(commandline);
 8003812:	782b      	ldrb	r3, [r5, #0]
 8003814:	b1a3      	cbz	r3, 8003840 <command_tterm+0x3c>
	if (ntlibc_stricmp(commandline, "start") == 0) {
 8003816:	4910      	ldr	r1, [pc, #64]	; (8003858 <command_tterm+0x54>)
 8003818:	4628      	mov	r0, r5
 800381a:	f001 fce7 	bl	80051ec <ntlibc_stricmp>
 800381e:	b930      	cbnz	r0, 800382e <command_tterm+0x2a>
        ptr->term_mode = PORT_TERM_TT;
 8003820:	2001      	movs	r0, #1
        init_tt(pdTRUE,ptr);
 8003822:	4621      	mov	r1, r4
        ptr->term_mode = PORT_TERM_TT;
 8003824:	70a0      	strb	r0, [r4, #2]
        init_tt(pdTRUE,ptr);
 8003826:	f7ff ff61 	bl	80036ec <init_tt>
}
 800382a:	2001      	movs	r0, #1
 800382c:	bd38      	pop	{r3, r4, r5, pc}
	if (ntlibc_stricmp(commandline, "stop") == 0) {
 800382e:	490b      	ldr	r1, [pc, #44]	; (800385c <command_tterm+0x58>)
 8003830:	4628      	mov	r0, r5
 8003832:	f001 fcdb 	bl	80051ec <ntlibc_stricmp>
 8003836:	b918      	cbnz	r0, 8003840 <command_tterm+0x3c>
	telemetry = 0;
 8003838:	4b09      	ldr	r3, [pc, #36]	; (8003860 <command_tterm+0x5c>)
        ptr->term_mode = PORT_TERM_VT100;
 800383a:	70a0      	strb	r0, [r4, #2]
	telemetry = 0;
 800383c:	7018      	strb	r0, [r3, #0]
        return 1;
 800383e:	e7f4      	b.n	800382a <command_tterm+0x26>
    HELP_TEXT("Usage: tterm [start|stop]\r\n");
 8003840:	4620      	mov	r0, r4
 8003842:	f7ff fa0d 	bl	8002c60 <Term_Color_Red>
 8003846:	4621      	mov	r1, r4
 8003848:	4806      	ldr	r0, [pc, #24]	; (8003864 <command_tterm+0x60>)
 800384a:	f7fe feb2 	bl	80025b2 <send_string>
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fa16 	bl	8002c80 <Term_Color_White>
 8003854:	e7e9      	b.n	800382a <command_tterm+0x26>
 8003856:	bf00      	nop
 8003858:	0800ce5a 	.word	0x0800ce5a
 800385c:	0800ce60 	.word	0x0800ce60
 8003860:	200005f0 	.word	0x200005f0
 8003864:	0800cec9 	.word	0x0800cec9

08003868 <send_signal_state>:

/*****************************************************************************
* Signal debugging
******************************************************************************/

void send_signal_state(uint8_t signal, uint8_t inverted, port_str *ptr){
 8003868:	b510      	push	{r4, lr}
 800386a:	4614      	mov	r4, r2
    if(inverted) signal = !signal; 
 800386c:	b111      	cbz	r1, 8003874 <send_signal_state+0xc>
 800386e:	fab0 f080 	clz	r0, r0
 8003872:	0940      	lsrs	r0, r0, #5
    if(signal){
 8003874:	b178      	cbz	r0, 8003896 <send_signal_state+0x2e>
        Term_Color_Red(ptr);
 8003876:	4620      	mov	r0, r4
 8003878:	f7ff f9f2 	bl	8002c60 <Term_Color_Red>
        SEND_CONST_STRING("true \r\n",ptr);
 800387c:	480b      	ldr	r0, [pc, #44]	; (80038ac <send_signal_state+0x44>)
 800387e:	f001 fc84 	bl	800518a <ntlibc_strlen>
 8003882:	4622      	mov	r2, r4
 8003884:	b281      	uxth	r1, r0
 8003886:	4809      	ldr	r0, [pc, #36]	; (80038ac <send_signal_state+0x44>)
        Term_Color_White(ptr);  
    }else{
        Term_Color_Green(ptr);
        SEND_CONST_STRING("false\r\n",ptr);
 8003888:	f7fe feb4 	bl	80025f4 <send_buffer>
        Term_Color_White(ptr);
 800388c:	4620      	mov	r0, r4
    }
}
 800388e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Term_Color_White(ptr);
 8003892:	f7ff b9f5 	b.w	8002c80 <Term_Color_White>
        Term_Color_Green(ptr);
 8003896:	4620      	mov	r0, r4
 8003898:	f7ff f9d2 	bl	8002c40 <Term_Color_Green>
        SEND_CONST_STRING("false\r\n",ptr);
 800389c:	4804      	ldr	r0, [pc, #16]	; (80038b0 <send_signal_state+0x48>)
 800389e:	f001 fc74 	bl	800518a <ntlibc_strlen>
 80038a2:	4622      	mov	r2, r4
 80038a4:	b281      	uxth	r1, r0
 80038a6:	4802      	ldr	r0, [pc, #8]	; (80038b0 <send_signal_state+0x48>)
 80038a8:	e7ee      	b.n	8003888 <send_signal_state+0x20>
 80038aa:	bf00      	nop
 80038ac:	0800cf4d 	.word	0x0800cf4d
 80038b0:	0800cf55 	.word	0x0800cf55

080038b4 <send_signal_state_wo>:
void send_signal_state_wo(uint8_t signal, uint8_t inverted, port_str *ptr){
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4614      	mov	r4, r2
    if(inverted) signal = !signal; 
 80038b8:	b111      	cbz	r1, 80038c0 <send_signal_state_wo+0xc>
 80038ba:	fab0 f080 	clz	r0, r0
 80038be:	0940      	lsrs	r0, r0, #5
    if(signal){
 80038c0:	b178      	cbz	r0, 80038e2 <send_signal_state_wo+0x2e>
        Term_Color_Red(ptr);
 80038c2:	4620      	mov	r0, r4
 80038c4:	f7ff f9cc 	bl	8002c60 <Term_Color_Red>
        SEND_CONST_STRING("true ",ptr);
 80038c8:	480b      	ldr	r0, [pc, #44]	; (80038f8 <send_signal_state_wo+0x44>)
 80038ca:	f001 fc5e 	bl	800518a <ntlibc_strlen>
 80038ce:	4622      	mov	r2, r4
 80038d0:	b281      	uxth	r1, r0
 80038d2:	4809      	ldr	r0, [pc, #36]	; (80038f8 <send_signal_state_wo+0x44>)
        Term_Color_White(ptr);  
    }else{
        Term_Color_Green(ptr);
        SEND_CONST_STRING("false",ptr);
 80038d4:	f7fe fe8e 	bl	80025f4 <send_buffer>
        Term_Color_White(ptr);
 80038d8:	4620      	mov	r0, r4
    }
}
 80038da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Term_Color_White(ptr);
 80038de:	f7ff b9cf 	b.w	8002c80 <Term_Color_White>
        Term_Color_Green(ptr);
 80038e2:	4620      	mov	r0, r4
 80038e4:	f7ff f9ac 	bl	8002c40 <Term_Color_Green>
        SEND_CONST_STRING("false",ptr);
 80038e8:	4804      	ldr	r0, [pc, #16]	; (80038fc <send_signal_state_wo+0x48>)
 80038ea:	f001 fc4e 	bl	800518a <ntlibc_strlen>
 80038ee:	4622      	mov	r2, r4
 80038f0:	b281      	uxth	r1, r0
 80038f2:	4802      	ldr	r0, [pc, #8]	; (80038fc <send_signal_state_wo+0x48>)
 80038f4:	e7ee      	b.n	80038d4 <send_signal_state_wo+0x20>
 80038f6:	bf00      	nop
 80038f8:	0800cf5d 	.word	0x0800cf5d
 80038fc:	0800cf63 	.word	0x0800cf63

08003900 <command_signals>:
extern ADC_HandleTypeDef hadc2;

extern volatile adc_buf_t adc_buffer;


uint8_t command_signals(char *commandline, port_str *ptr) {
 8003900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		send_buffer((uint8_t*)buf, ret, ptr);

		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
		send_buffer((uint8_t*)buf, ret, ptr);

		ret = snprintf_(buf, sizeof(buf), "VBAT: %f\r\n",DC_BUS_CNTtoV(adc_buffer.vbat));
 8003904:	f20f 2968 	addw	r9, pc, #616	; 0x268
 8003908:	e9d9 8900 	ldrd	r8, r9, [r9]
uint8_t command_signals(char *commandline, port_str *ptr) {
 800390c:	468a      	mov	sl, r1
    Term_Disable_Cursor(ptr);
 800390e:	4608      	mov	r0, r1
uint8_t command_signals(char *commandline, port_str *ptr) {
 8003910:	b093      	sub	sp, #76	; 0x4c
    Term_Disable_Cursor(ptr);
 8003912:	f7ff fbdb 	bl	80030cc <Term_Disable_Cursor>
    Term_Erase_Screen(ptr);
 8003916:	4650      	mov	r0, sl
 8003918:	f7ff f982 	bl	8002c20 <Term_Erase_Screen>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 800391c:	2400      	movs	r4, #0
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 800391e:	2600      	movs	r6, #0
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 8003920:	4d95      	ldr	r5, [pc, #596]	; (8003b78 <command_signals+0x278>)
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8003922:	4f96      	ldr	r7, [pc, #600]	; (8003b7c <command_signals+0x27c>)
    while(getch(ptr,100 /portTICK_RATE_MS) != 'q'){
 8003924:	2164      	movs	r1, #100	; 0x64
 8003926:	4650      	mov	r0, sl
 8003928:	f7fe fe17 	bl	800255a <getch>
 800392c:	2871      	cmp	r0, #113	; 0x71
 800392e:	d106      	bne.n	800393e <command_signals+0x3e>
		send_signal_state(HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin), pdFALSE, ptr);



    }
    Term_Enable_Cursor(ptr);
 8003930:	4650      	mov	r0, sl
 8003932:	f7ff fbdb 	bl	80030ec <Term_Enable_Cursor>
	return 1;
}
 8003936:	2001      	movs	r0, #1
 8003938:	b013      	add	sp, #76	; 0x4c
 800393a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		Term_Move_Cursor(1,1,ptr);
 800393e:	2101      	movs	r1, #1
 8003940:	4652      	mov	r2, sl
 8003942:	4608      	mov	r0, r1
 8003944:	f7ff fb02 	bl	8002f4c <Term_Move_Cursor>
		SEND_CONST_STRING("Signal state (q for quit):\r\n", ptr);
 8003948:	488d      	ldr	r0, [pc, #564]	; (8003b80 <command_signals+0x280>)
 800394a:	f001 fc1e 	bl	800518a <ntlibc_strlen>
 800394e:	4652      	mov	r2, sl
 8003950:	b281      	uxth	r1, r0
 8003952:	488b      	ldr	r0, [pc, #556]	; (8003b80 <command_signals+0x280>)
 8003954:	f7fe fe4e 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("**************************\r\n", ptr);
 8003958:	488a      	ldr	r0, [pc, #552]	; (8003b84 <command_signals+0x284>)
 800395a:	f001 fc16 	bl	800518a <ntlibc_strlen>
 800395e:	4652      	mov	r2, sl
 8003960:	b281      	uxth	r1, r0
 8003962:	4888      	ldr	r0, [pc, #544]	; (8003b84 <command_signals+0x284>)
 8003964:	f7fe fe46 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("HALL A:", ptr);
 8003968:	4887      	ldr	r0, [pc, #540]	; (8003b88 <command_signals+0x288>)
 800396a:	f001 fc0e 	bl	800518a <ntlibc_strlen>
 800396e:	4652      	mov	r2, sl
 8003970:	b281      	uxth	r1, r0
 8003972:	4885      	ldr	r0, [pc, #532]	; (8003b88 <command_signals+0x288>)
 8003974:	f7fe fe3e 	bl	80025f4 <send_buffer>
		send_signal_state_wo(HAL_GPIO_ReadPin(HALL_A_GPIO_Port, HALL_A_Pin), pdFALSE, ptr);
 8003978:	2110      	movs	r1, #16
 800397a:	4884      	ldr	r0, [pc, #528]	; (8003b8c <command_signals+0x28c>)
 800397c:	f003 fa52 	bl	8006e24 <HAL_GPIO_ReadPin>
 8003980:	4652      	mov	r2, sl
 8003982:	2100      	movs	r1, #0
 8003984:	f7ff ff96 	bl	80038b4 <send_signal_state_wo>
		SEND_CONST_STRING("HALL B:", ptr);
 8003988:	4881      	ldr	r0, [pc, #516]	; (8003b90 <command_signals+0x290>)
 800398a:	f001 fbfe 	bl	800518a <ntlibc_strlen>
 800398e:	4652      	mov	r2, sl
 8003990:	b281      	uxth	r1, r0
 8003992:	487f      	ldr	r0, [pc, #508]	; (8003b90 <command_signals+0x290>)
 8003994:	f7fe fe2e 	bl	80025f4 <send_buffer>
		send_signal_state_wo(HAL_GPIO_ReadPin(HALL_B_GPIO_Port, HALL_B_Pin), pdFALSE, ptr);
 8003998:	2120      	movs	r1, #32
 800399a:	487c      	ldr	r0, [pc, #496]	; (8003b8c <command_signals+0x28c>)
 800399c:	f003 fa42 	bl	8006e24 <HAL_GPIO_ReadPin>
 80039a0:	4652      	mov	r2, sl
 80039a2:	2100      	movs	r1, #0
 80039a4:	f7ff ff86 	bl	80038b4 <send_signal_state_wo>
		SEND_CONST_STRING("HALL C:", ptr);
 80039a8:	487a      	ldr	r0, [pc, #488]	; (8003b94 <command_signals+0x294>)
 80039aa:	f001 fbee 	bl	800518a <ntlibc_strlen>
 80039ae:	4652      	mov	r2, sl
 80039b0:	b281      	uxth	r1, r0
 80039b2:	4878      	ldr	r0, [pc, #480]	; (8003b94 <command_signals+0x294>)
 80039b4:	f7fe fe1e 	bl	80025f4 <send_buffer>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 80039b8:	f8df b210 	ldr.w	fp, [pc, #528]	; 8003bcc <command_signals+0x2cc>
		send_signal_state(HAL_GPIO_ReadPin(HALL_C_GPIO_Port, HALL_C_Pin), pdFALSE, ptr);
 80039bc:	2101      	movs	r1, #1
 80039be:	4873      	ldr	r0, [pc, #460]	; (8003b8c <command_signals+0x28c>)
 80039c0:	f003 fa30 	bl	8006e24 <HAL_GPIO_ReadPin>
 80039c4:	4652      	mov	r2, sl
 80039c6:	2100      	movs	r1, #0
 80039c8:	f7ff ff4e 	bl	8003868 <send_signal_state>
		uint8_t ret = snprintf_(buf, sizeof(buf), "Current A: %+f\r\n",(float)analog.curr_a/1000.0);
 80039cc:	f8db 0000 	ldr.w	r0, [fp]
 80039d0:	f7fd f984 	bl	8000cdc <__aeabi_i2f>
 80039d4:	f7fc fd28 	bl	8000428 <__aeabi_f2d>
 80039d8:	462b      	mov	r3, r5
 80039da:	4622      	mov	r2, r4
 80039dc:	f7fc fea6 	bl	800072c <__aeabi_ddiv>
 80039e0:	4a6d      	ldr	r2, [pc, #436]	; (8003b98 <command_signals+0x298>)
 80039e2:	e9cd 0100 	strd	r0, r1, [sp]
 80039e6:	213c      	movs	r1, #60	; 0x3c
 80039e8:	a803      	add	r0, sp, #12
 80039ea:	f001 fb19 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 80039ee:	4652      	mov	r2, sl
 80039f0:	b2c1      	uxtb	r1, r0
 80039f2:	a803      	add	r0, sp, #12
 80039f4:	f7fe fdfe 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current B: %+f\r\n",(float)analog.curr_b/1000.0);
 80039f8:	f8db 0004 	ldr.w	r0, [fp, #4]
 80039fc:	f7fd f96e 	bl	8000cdc <__aeabi_i2f>
 8003a00:	f7fc fd12 	bl	8000428 <__aeabi_f2d>
 8003a04:	462b      	mov	r3, r5
 8003a06:	4622      	mov	r2, r4
 8003a08:	f7fc fe90 	bl	800072c <__aeabi_ddiv>
 8003a0c:	4a63      	ldr	r2, [pc, #396]	; (8003b9c <command_signals+0x29c>)
 8003a0e:	e9cd 0100 	strd	r0, r1, [sp]
 8003a12:	213c      	movs	r1, #60	; 0x3c
 8003a14:	a803      	add	r0, sp, #12
 8003a16:	f001 fb03 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a1a:	4652      	mov	r2, sl
 8003a1c:	b2c1      	uxtb	r1, r0
 8003a1e:	a803      	add	r0, sp, #12
 8003a20:	f7fe fde8 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current C: %+f\r\n",(float)analog.curr_c/1000.0);
 8003a24:	f8db 0008 	ldr.w	r0, [fp, #8]
 8003a28:	f7fd f958 	bl	8000cdc <__aeabi_i2f>
 8003a2c:	f7fc fcfc 	bl	8000428 <__aeabi_f2d>
 8003a30:	462b      	mov	r3, r5
 8003a32:	4622      	mov	r2, r4
 8003a34:	f7fc fe7a 	bl	800072c <__aeabi_ddiv>
 8003a38:	4a59      	ldr	r2, [pc, #356]	; (8003ba0 <command_signals+0x2a0>)
 8003a3a:	e9cd 0100 	strd	r0, r1, [sp]
 8003a3e:	213c      	movs	r1, #60	; 0x3c
 8003a40:	a803      	add	r0, sp, #12
 8003a42:	f001 faed 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a46:	4652      	mov	r2, sl
 8003a48:	b2c1      	uxtb	r1, r0
 8003a4a:	a803      	add	r0, sp, #12
 8003a4c:	f7fe fdd2 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Current DC: %+f\r\n",(float)analog.curr_dc/1000.0);
 8003a50:	f8db 0014 	ldr.w	r0, [fp, #20]
 8003a54:	f7fd f942 	bl	8000cdc <__aeabi_i2f>
 8003a58:	f7fc fce6 	bl	8000428 <__aeabi_f2d>
 8003a5c:	462b      	mov	r3, r5
 8003a5e:	4622      	mov	r2, r4
 8003a60:	f7fc fe64 	bl	800072c <__aeabi_ddiv>
 8003a64:	4a4f      	ldr	r2, [pc, #316]	; (8003ba4 <command_signals+0x2a4>)
 8003a66:	e9cd 0100 	strd	r0, r1, [sp]
 8003a6a:	213c      	movs	r1, #60	; 0x3c
 8003a6c:	a803      	add	r0, sp, #12
 8003a6e:	f001 fad7 	bl	8005020 <snprintf_>
		ret = snprintf_(buf, sizeof(buf), "Volt_A %u\r\n",adc_buffer.volt_a);
 8003a72:	f8df b15c 	ldr.w	fp, [pc, #348]	; 8003bd0 <command_signals+0x2d0>
				send_buffer((uint8_t*)buf, ret, ptr);
 8003a76:	4652      	mov	r2, sl
 8003a78:	b2c1      	uxtb	r1, r0
 8003a7a:	a803      	add	r0, sp, #12
 8003a7c:	f7fe fdba 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_A %u\r\n",adc_buffer.volt_a);
 8003a80:	f8bb 3006 	ldrh.w	r3, [fp, #6]
 8003a84:	4a48      	ldr	r2, [pc, #288]	; (8003ba8 <command_signals+0x2a8>)
 8003a86:	213c      	movs	r1, #60	; 0x3c
 8003a88:	a803      	add	r0, sp, #12
 8003a8a:	f001 fac9 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003a8e:	4652      	mov	r2, sl
 8003a90:	b2c1      	uxtb	r1, r0
 8003a92:	a803      	add	r0, sp, #12
 8003a94:	f7fe fdae 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_B %u\r\n",adc_buffer.volt_b);
 8003a98:	f8bb 3008 	ldrh.w	r3, [fp, #8]
 8003a9c:	4a43      	ldr	r2, [pc, #268]	; (8003bac <command_signals+0x2ac>)
 8003a9e:	213c      	movs	r1, #60	; 0x3c
 8003aa0:	a803      	add	r0, sp, #12
 8003aa2:	f001 fabd 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003aa6:	4652      	mov	r2, sl
 8003aa8:	b2c1      	uxtb	r1, r0
 8003aaa:	a803      	add	r0, sp, #12
 8003aac:	f7fe fda2 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "Volt_C %u\r\n",adc_buffer.volt_c);
 8003ab0:	f8bb 300a 	ldrh.w	r3, [fp, #10]
 8003ab4:	4a3e      	ldr	r2, [pc, #248]	; (8003bb0 <command_signals+0x2b0>)
 8003ab6:	213c      	movs	r1, #60	; 0x3c
 8003ab8:	a803      	add	r0, sp, #12
 8003aba:	f001 fab1 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003abe:	4652      	mov	r2, sl
 8003ac0:	b2c1      	uxtb	r1, r0
 8003ac2:	a803      	add	r0, sp, #12
 8003ac4:	f7fe fd96 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "NTC %f\r\n",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8003ac8:	f8bb 000c 	ldrh.w	r0, [fp, #12]
 8003acc:	f000 fe3c 	bl	8004748 <NTC_ADC2Temperature>
 8003ad0:	f7fd f904 	bl	8000cdc <__aeabi_i2f>
 8003ad4:	f7fc fca8 	bl	8000428 <__aeabi_f2d>
 8003ad8:	463b      	mov	r3, r7
 8003ada:	4632      	mov	r2, r6
 8003adc:	f7fc fe26 	bl	800072c <__aeabi_ddiv>
 8003ae0:	4a34      	ldr	r2, [pc, #208]	; (8003bb4 <command_signals+0x2b4>)
 8003ae2:	e9cd 0100 	strd	r0, r1, [sp]
 8003ae6:	213c      	movs	r1, #60	; 0x3c
 8003ae8:	a803      	add	r0, sp, #12
 8003aea:	f001 fa99 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003aee:	4652      	mov	r2, sl
 8003af0:	b2c1      	uxtb	r1, r0
 8003af2:	a803      	add	r0, sp, #12
 8003af4:	f7fe fd7e 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "VBAT: %f\r\n",DC_BUS_CNTtoV(adc_buffer.vbat));
 8003af8:	f643 005f 	movw	r0, #14431	; 0x385f
 8003afc:	f8bb 300e 	ldrh.w	r3, [fp, #14]
 8003b00:	4358      	muls	r0, r3
 8003b02:	f7fd f8e7 	bl	8000cd4 <__aeabi_ui2f>
 8003b06:	f7fc fc8f 	bl	8000428 <__aeabi_f2d>
 8003b0a:	464b      	mov	r3, r9
 8003b0c:	4642      	mov	r2, r8
 8003b0e:	f7fc fe0d 	bl	800072c <__aeabi_ddiv>
 8003b12:	4a29      	ldr	r2, [pc, #164]	; (8003bb8 <command_signals+0x2b8>)
 8003b14:	e9cd 0100 	strd	r0, r1, [sp]
 8003b18:	213c      	movs	r1, #60	; 0x3c
 8003b1a:	a803      	add	r0, sp, #12
 8003b1c:	f001 fa80 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003b20:	4652      	mov	r2, sl
 8003b22:	b2c1      	uxtb	r1, r0
 8003b24:	a803      	add	r0, sp, #12
 8003b26:	f7fe fd65 	bl	80025f4 <send_buffer>
		ret = snprintf_(buf, sizeof(buf), "RPM: %d\r\n",rtY_Left.n_mot * 2);
 8003b2a:	4b24      	ldr	r3, [pc, #144]	; (8003bbc <command_signals+0x2bc>)
 8003b2c:	4a24      	ldr	r2, [pc, #144]	; (8003bc0 <command_signals+0x2c0>)
 8003b2e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003b32:	213c      	movs	r1, #60	; 0x3c
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	a803      	add	r0, sp, #12
 8003b38:	f001 fa72 	bl	8005020 <snprintf_>
		send_buffer((uint8_t*)buf, ret, ptr);
 8003b3c:	4652      	mov	r2, sl
 8003b3e:	b2c1      	uxtb	r1, r0
 8003b40:	a803      	add	r0, sp, #12
 8003b42:	f7fe fd57 	bl	80025f4 <send_buffer>
		SEND_CONST_STRING("Power button:", ptr);
 8003b46:	481f      	ldr	r0, [pc, #124]	; (8003bc4 <command_signals+0x2c4>)
 8003b48:	f001 fb1f 	bl	800518a <ntlibc_strlen>
 8003b4c:	4652      	mov	r2, sl
 8003b4e:	b281      	uxth	r1, r0
 8003b50:	481c      	ldr	r0, [pc, #112]	; (8003bc4 <command_signals+0x2c4>)
 8003b52:	f7fe fd4f 	bl	80025f4 <send_buffer>
		send_signal_state(HAL_GPIO_ReadPin(PWR_BTN_GPIO_Port, PWR_BTN_Pin), pdFALSE, ptr);
 8003b56:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003b5a:	481b      	ldr	r0, [pc, #108]	; (8003bc8 <command_signals+0x2c8>)
 8003b5c:	f003 f962 	bl	8006e24 <HAL_GPIO_ReadPin>
 8003b60:	4652      	mov	r2, sl
 8003b62:	2100      	movs	r1, #0
 8003b64:	f7ff fe80 	bl	8003868 <send_signal_state>
 8003b68:	e6dc      	b.n	8003924 <command_signals+0x24>
 8003b6a:	bf00      	nop
 8003b6c:	f3af 8000 	nop.w
 8003b70:	00000000 	.word	0x00000000
 8003b74:	412e8480 	.word	0x412e8480
 8003b78:	408f4000 	.word	0x408f4000
 8003b7c:	40240000 	.word	0x40240000
 8003b80:	0800cd73 	.word	0x0800cd73
 8003b84:	0800cd90 	.word	0x0800cd90
 8003b88:	0800cdad 	.word	0x0800cdad
 8003b8c:	40010c00 	.word	0x40010c00
 8003b90:	0800cdb5 	.word	0x0800cdb5
 8003b94:	0800cdbd 	.word	0x0800cdbd
 8003b98:	0800cdc5 	.word	0x0800cdc5
 8003b9c:	0800cdd6 	.word	0x0800cdd6
 8003ba0:	0800cde7 	.word	0x0800cde7
 8003ba4:	0800cdf8 	.word	0x0800cdf8
 8003ba8:	0800ce0a 	.word	0x0800ce0a
 8003bac:	0800ce16 	.word	0x0800ce16
 8003bb0:	0800ce22 	.word	0x0800ce22
 8003bb4:	0800ce2e 	.word	0x0800ce2e
 8003bb8:	0800ce37 	.word	0x0800ce37
 8003bbc:	2000449c 	.word	0x2000449c
 8003bc0:	0800ce42 	.word	0x0800ce42
 8003bc4:	0800ce4c 	.word	0x0800ce4c
 8003bc8:	40011000 	.word	0x40011000
 8003bcc:	2000419c 	.word	0x2000419c
 8003bd0:	20004368 	.word	0x20004368

08003bd4 <nt_interpret>:


/*****************************************************************************
* Interprets the Input String
******************************************************************************/
void nt_interpret(char *text, port_str *ptr) {
 8003bd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bd8:	4607      	mov	r7, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	1e46      	subs	r6, r0, #1
    int8_t max_len=-1;
    int8_t max_index=-1;
    
    char* p_text=text;
    while(*p_text){
 8003bde:	f816 0f01 	ldrb.w	r0, [r6, #1]!
 8003be2:	f010 04df 	ands.w	r4, r0, #223	; 0xdf
 8003be6:	d131      	bne.n	8003c4c <nt_interpret+0x78>
 8003be8:	f04f 36ff 	mov.w	r6, #4294967295
 8003bec:	230c      	movs	r3, #12
 8003bee:	46b1      	mov	r9, r6
        *p_text=ntlibc_tolower(*p_text);
        p_text++;
    }
    
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
        uint8_t text_len = ntlibc_strlen(commands[current_command].text);
 8003bf0:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 8003c98 <nt_interpret+0xc4>
 8003bf4:	fb03 f104 	mul.w	r1, r3, r4
 8003bf8:	f851 0008 	ldr.w	r0, [r1, r8]
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	9100      	str	r1, [sp, #0]
 8003c00:	f001 fac3 	bl	800518a <ntlibc_strlen>
		if (memcmp(text, commands[current_command].text, text_len) == 0) {
 8003c04:	9900      	ldr	r1, [sp, #0]
 8003c06:	fa5f fb80 	uxtb.w	fp, r0
        uint8_t text_len = ntlibc_strlen(commands[current_command].text);
 8003c0a:	4682      	mov	sl, r0
		if (memcmp(text, commands[current_command].text, text_len) == 0) {
 8003c0c:	465a      	mov	r2, fp
 8003c0e:	f851 1008 	ldr.w	r1, [r1, r8]
 8003c12:	4638      	mov	r0, r7
 8003c14:	f006 fb50 	bl	800a2b8 <memcmp>
 8003c18:	9b01      	ldr	r3, [sp, #4]
 8003c1a:	b920      	cbnz	r0, 8003c26 <nt_interpret+0x52>
            if(text_len > max_len){
 8003c1c:	45d9      	cmp	r9, fp
			    max_len = text_len;
 8003c1e:	bfbc      	itt	lt
 8003c20:	fa4f f98a 	sxtblt.w	r9, sl
                max_index = current_command;
 8003c24:	b266      	sxtblt	r6, r4
 8003c26:	3401      	adds	r4, #1
	for (uint8_t current_command = 0; current_command < (sizeof(commands) / sizeof(command_entry)); current_command++) {
 8003c28:	2c0d      	cmp	r4, #13
 8003c2a:	d1e3      	bne.n	8003bf4 <nt_interpret+0x20>
            }
		}
	}
    
    if(max_index != -1){
 8003c2c:	1c73      	adds	r3, r6, #1
 8003c2e:	d011      	beq.n	8003c54 <nt_interpret+0x80>
       commands[max_index].commandFunction((char *)strchr(text, ' '), ptr);
 8003c30:	2120      	movs	r1, #32
 8003c32:	4638      	mov	r0, r7
 8003c34:	f006 fb62 	bl	800a2fc <strchr>
 8003c38:	230c      	movs	r3, #12
 8003c3a:	4629      	mov	r1, r5
 8003c3c:	4a16      	ldr	r2, [pc, #88]	; (8003c98 <nt_interpret+0xc4>)
 8003c3e:	fb03 2606 	mla	r6, r3, r6, r2
 8003c42:	6873      	ldr	r3, [r6, #4]
		SEND_CONST_STRING("Unknown Command: ", ptr);
		send_string(text, ptr);
		SEND_CONST_STRING("\r\n", ptr);
		Term_Color_White(ptr);
	}
}
 8003c44:	b003      	add	sp, #12
 8003c46:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
       commands[max_index].commandFunction((char *)strchr(text, ' '), ptr);
 8003c4a:	4718      	bx	r3
        *p_text=ntlibc_tolower(*p_text);
 8003c4c:	f001 fae8 	bl	8005220 <ntlibc_tolower>
 8003c50:	7030      	strb	r0, [r6, #0]
 8003c52:	e7c4      	b.n	8003bde <nt_interpret+0xa>
	if (*text) {
 8003c54:	783b      	ldrb	r3, [r7, #0]
 8003c56:	b1e3      	cbz	r3, 8003c92 <nt_interpret+0xbe>
		Term_Color_Red(ptr);
 8003c58:	4628      	mov	r0, r5
 8003c5a:	f7ff f801 	bl	8002c60 <Term_Color_Red>
		SEND_CONST_STRING("Unknown Command: ", ptr);
 8003c5e:	480f      	ldr	r0, [pc, #60]	; (8003c9c <nt_interpret+0xc8>)
 8003c60:	f001 fa93 	bl	800518a <ntlibc_strlen>
 8003c64:	462a      	mov	r2, r5
 8003c66:	b281      	uxth	r1, r0
 8003c68:	480c      	ldr	r0, [pc, #48]	; (8003c9c <nt_interpret+0xc8>)
 8003c6a:	f7fe fcc3 	bl	80025f4 <send_buffer>
		send_string(text, ptr);
 8003c6e:	4629      	mov	r1, r5
 8003c70:	4638      	mov	r0, r7
 8003c72:	f7fe fc9e 	bl	80025b2 <send_string>
		SEND_CONST_STRING("\r\n", ptr);
 8003c76:	480a      	ldr	r0, [pc, #40]	; (8003ca0 <nt_interpret+0xcc>)
 8003c78:	f001 fa87 	bl	800518a <ntlibc_strlen>
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	b281      	uxth	r1, r0
 8003c80:	4807      	ldr	r0, [pc, #28]	; (8003ca0 <nt_interpret+0xcc>)
 8003c82:	f7fe fcb7 	bl	80025f4 <send_buffer>
		Term_Color_White(ptr);
 8003c86:	4628      	mov	r0, r5
}
 8003c88:	b003      	add	sp, #12
 8003c8a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		Term_Color_White(ptr);
 8003c8e:	f7fe bff7 	b.w	8002c80 <Term_Color_White>
}
 8003c92:	b003      	add	sp, #12
 8003c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c98:	20000110 	.word	0x20000110
 8003c9c:	0800cf3b 	.word	0x0800cf3b
 8003ca0:	0800ccb7 	.word	0x0800ccb7

08003ca4 <StartDefaultTask>:
 8003ca4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003ca8:	f04f 0802 	mov.w	r8, #2
 8003cac:	4f10      	ldr	r7, [pc, #64]	; (8003cf0 <StartDefaultTask+0x4c>)
 8003cae:	4d11      	ldr	r5, [pc, #68]	; (8003cf4 <StartDefaultTask+0x50>)
 8003cb0:	79bb      	ldrb	r3, [r7, #6]
 8003cb2:	b10b      	cbz	r3, 8003cb8 <StartDefaultTask+0x14>
 8003cb4:	f885 8000 	strb.w	r8, [r5]
 8003cb8:	2400      	movs	r4, #0
 8003cba:	4e0f      	ldr	r6, [pc, #60]	; (8003cf8 <StartDefaultTask+0x54>)
 8003cbc:	782a      	ldrb	r2, [r5, #0]
 8003cbe:	b2e3      	uxtb	r3, r4
 8003cc0:	429a      	cmp	r2, r3
 8003cc2:	f104 0401 	add.w	r4, r4, #1
 8003cc6:	d804      	bhi.n	8003cd2 <StartDefaultTask+0x2e>
 8003cc8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ccc:	f005 fbac 	bl	8009428 <vTaskDelay>
 8003cd0:	e7ee      	b.n	8003cb0 <StartDefaultTask+0xc>
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	2102      	movs	r1, #2
 8003cd6:	4630      	mov	r0, r6
 8003cd8:	f003 f8aa 	bl	8006e30 <HAL_GPIO_WritePin>
 8003cdc:	20c8      	movs	r0, #200	; 0xc8
 8003cde:	f005 fba3 	bl	8009428 <vTaskDelay>
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	2102      	movs	r1, #2
 8003ce6:	4630      	mov	r0, r6
 8003ce8:	f003 f8a2 	bl	8006e30 <HAL_GPIO_WritePin>
 8003cec:	e7e6      	b.n	8003cbc <StartDefaultTask+0x18>
 8003cee:	bf00      	nop
 8003cf0:	2000449c 	.word	0x2000449c
 8003cf4:	20000338 	.word	0x20000338
 8003cf8:	40011400 	.word	0x40011400

08003cfc <SystemClock_Config>:
 8003cfc:	b530      	push	{r4, r5, lr}
 8003cfe:	b095      	sub	sp, #84	; 0x54
 8003d00:	2220      	movs	r2, #32
 8003d02:	2100      	movs	r1, #0
 8003d04:	a80b      	add	r0, sp, #44	; 0x2c
 8003d06:	f006 faf1 	bl	800a2ec <memset>
 8003d0a:	2214      	movs	r2, #20
 8003d0c:	2510      	movs	r5, #16
 8003d0e:	eb0d 0002 	add.w	r0, sp, r2
 8003d12:	2100      	movs	r1, #0
 8003d14:	f006 faea 	bl	800a2ec <memset>
 8003d18:	462a      	mov	r2, r5
 8003d1a:	2100      	movs	r1, #0
 8003d1c:	a801      	add	r0, sp, #4
 8003d1e:	f006 fae5 	bl	800a2ec <memset>
 8003d22:	2301      	movs	r3, #1
 8003d24:	2402      	movs	r4, #2
 8003d26:	e9cd 350e 	strd	r3, r5, [sp, #56]	; 0x38
 8003d2a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8003d2e:	a80a      	add	r0, sp, #40	; 0x28
 8003d30:	9313      	str	r3, [sp, #76]	; 0x4c
 8003d32:	940a      	str	r4, [sp, #40]	; 0x28
 8003d34:	9411      	str	r4, [sp, #68]	; 0x44
 8003d36:	f003 f881 	bl	8006e3c <HAL_RCC_OscConfig>
 8003d3a:	230f      	movs	r3, #15
 8003d3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d40:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8003d44:	2300      	movs	r3, #0
 8003d46:	4621      	mov	r1, r4
 8003d48:	a805      	add	r0, sp, #20
 8003d4a:	e9cd 3207 	strd	r3, r2, [sp, #28]
 8003d4e:	9309      	str	r3, [sp, #36]	; 0x24
 8003d50:	f003 fa4c 	bl	80071ec <HAL_RCC_ClockConfig>
 8003d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d58:	a801      	add	r0, sp, #4
 8003d5a:	9401      	str	r4, [sp, #4]
 8003d5c:	9303      	str	r3, [sp, #12]
 8003d5e:	f003 fb1f 	bl	80073a0 <HAL_RCCEx_PeriphCLKConfig>
 8003d62:	b015      	add	sp, #84	; 0x54
 8003d64:	bd30      	pop	{r4, r5, pc}
	...

08003d68 <main>:
 8003d68:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 8003d6c:	f04f 0b10 	mov.w	fp, #16
 8003d70:	b09d      	sub	sp, #116	; 0x74
 8003d72:	4dcd      	ldr	r5, [pc, #820]	; (80040a8 <main+0x340>)
 8003d74:	f002 fa26 	bl	80061c4 <HAL_Init>
 8003d78:	f7ff ffc0 	bl	8003cfc <SystemClock_Config>
 8003d7c:	465a      	mov	r2, fp
 8003d7e:	2100      	movs	r1, #0
 8003d80:	a814      	add	r0, sp, #80	; 0x50
 8003d82:	f006 fab3 	bl	800a2ec <memset>
 8003d86:	69ab      	ldr	r3, [r5, #24]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	ea43 030b 	orr.w	r3, r3, fp
 8003d8e:	61ab      	str	r3, [r5, #24]
 8003d90:	69ab      	ldr	r3, [r5, #24]
 8003d92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003d96:	ea03 030b 	and.w	r3, r3, fp
 8003d9a:	9303      	str	r3, [sp, #12]
 8003d9c:	9b03      	ldr	r3, [sp, #12]
 8003d9e:	69ab      	ldr	r3, [r5, #24]
 8003da0:	48c2      	ldr	r0, [pc, #776]	; (80040ac <main+0x344>)
 8003da2:	f043 0320 	orr.w	r3, r3, #32
 8003da6:	61ab      	str	r3, [r5, #24]
 8003da8:	69ab      	ldr	r3, [r5, #24]
 8003daa:	2400      	movs	r4, #0
 8003dac:	f003 0320 	and.w	r3, r3, #32
 8003db0:	9304      	str	r3, [sp, #16]
 8003db2:	9b04      	ldr	r3, [sp, #16]
 8003db4:	69ab      	ldr	r3, [r5, #24]
 8003db6:	f04f 0a02 	mov.w	sl, #2
 8003dba:	f043 0304 	orr.w	r3, r3, #4
 8003dbe:	61ab      	str	r3, [r5, #24]
 8003dc0:	69ab      	ldr	r3, [r5, #24]
 8003dc2:	4ebb      	ldr	r6, [pc, #748]	; (80040b0 <main+0x348>)
 8003dc4:	f003 0304 	and.w	r3, r3, #4
 8003dc8:	9305      	str	r3, [sp, #20]
 8003dca:	9b05      	ldr	r3, [sp, #20]
 8003dcc:	69ab      	ldr	r3, [r5, #24]
 8003dce:	f04f 0804 	mov.w	r8, #4
 8003dd2:	f043 0308 	orr.w	r3, r3, #8
 8003dd6:	61ab      	str	r3, [r5, #24]
 8003dd8:	69ab      	ldr	r3, [r5, #24]
 8003dda:	f10d 0970 	add.w	r9, sp, #112	; 0x70
 8003dde:	f003 0308 	and.w	r3, r3, #8
 8003de2:	9306      	str	r3, [sp, #24]
 8003de4:	9b06      	ldr	r3, [sp, #24]
 8003de6:	f003 f823 	bl	8006e30 <HAL_GPIO_WritePin>
 8003dea:	2200      	movs	r2, #0
 8003dec:	2102      	movs	r1, #2
 8003dee:	48b1      	ldr	r0, [pc, #708]	; (80040b4 <main+0x34c>)
 8003df0:	f003 f81e 	bl	8006e30 <HAL_GPIO_WritePin>
 8003df4:	2200      	movs	r2, #0
 8003df6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003dfa:	48af      	ldr	r0, [pc, #700]	; (80040b8 <main+0x350>)
 8003dfc:	f003 f818 	bl	8006e30 <HAL_GPIO_WritePin>
 8003e00:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e04:	a914      	add	r1, sp, #80	; 0x50
 8003e06:	48a9      	ldr	r0, [pc, #676]	; (80040ac <main+0x344>)
 8003e08:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8003e0c:	9416      	str	r4, [sp, #88]	; 0x58
 8003e0e:	f002 ff29 	bl	8006c64 <HAL_GPIO_Init>
 8003e12:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003e16:	2301      	movs	r3, #1
 8003e18:	a914      	add	r1, sp, #80	; 0x50
 8003e1a:	48a4      	ldr	r0, [pc, #656]	; (80040ac <main+0x344>)
 8003e1c:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003e20:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8003e24:	9416      	str	r4, [sp, #88]	; 0x58
 8003e26:	f002 ff1d 	bl	8006c64 <HAL_GPIO_Init>
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	a914      	add	r1, sp, #80	; 0x50
 8003e2e:	48a1      	ldr	r0, [pc, #644]	; (80040b4 <main+0x34c>)
 8003e30:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
 8003e34:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
 8003e38:	f8cd a05c 	str.w	sl, [sp, #92]	; 0x5c
 8003e3c:	f002 ff12 	bl	8006c64 <HAL_GPIO_Init>
 8003e40:	2331      	movs	r3, #49	; 0x31
 8003e42:	a914      	add	r1, sp, #80	; 0x50
 8003e44:	489d      	ldr	r0, [pc, #628]	; (80040bc <main+0x354>)
 8003e46:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 8003e4a:	9416      	str	r4, [sp, #88]	; 0x58
 8003e4c:	f002 ff0a 	bl	8006c64 <HAL_GPIO_Init>
 8003e50:	2301      	movs	r3, #1
 8003e52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e56:	4898      	ldr	r0, [pc, #608]	; (80040b8 <main+0x350>)
 8003e58:	e9cd 1314 	strd	r1, r3, [sp, #80]	; 0x50
 8003e5c:	a914      	add	r1, sp, #80	; 0x50
 8003e5e:	e9cd 4a16 	strd	r4, sl, [sp, #88]	; 0x58
 8003e62:	f002 feff 	bl	8006c64 <HAL_GPIO_Init>
 8003e66:	2340      	movs	r3, #64	; 0x40
 8003e68:	e9cd 3a14 	strd	r3, sl, [sp, #80]	; 0x50
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	a914      	add	r1, sp, #80	; 0x50
 8003e70:	4892      	ldr	r0, [pc, #584]	; (80040bc <main+0x354>)
 8003e72:	9317      	str	r3, [sp, #92]	; 0x5c
 8003e74:	f002 fef6 	bl	8006c64 <HAL_GPIO_Init>
 8003e78:	4a91      	ldr	r2, [pc, #580]	; (80040c0 <main+0x358>)
 8003e7a:	2105      	movs	r1, #5
 8003e7c:	6853      	ldr	r3, [r2, #4]
 8003e7e:	200b      	movs	r0, #11
 8003e80:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e84:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e88:	6053      	str	r3, [r2, #4]
 8003e8a:	6853      	ldr	r3, [r2, #4]
 8003e8c:	2703      	movs	r7, #3
 8003e8e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8003e92:	f043 0304 	orr.w	r3, r3, #4
 8003e96:	6053      	str	r3, [r2, #4]
 8003e98:	696b      	ldr	r3, [r5, #20]
 8003e9a:	4622      	mov	r2, r4
 8003e9c:	f043 0301 	orr.w	r3, r3, #1
 8003ea0:	616b      	str	r3, [r5, #20]
 8003ea2:	696b      	ldr	r3, [r5, #20]
 8003ea4:	f003 0301 	and.w	r3, r3, #1
 8003ea8:	9302      	str	r3, [sp, #8]
 8003eaa:	9b02      	ldr	r3, [sp, #8]
 8003eac:	f002 fc20 	bl	80066f0 <HAL_NVIC_SetPriority>
 8003eb0:	200b      	movs	r0, #11
 8003eb2:	f002 fc51 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8003eb6:	4622      	mov	r2, r4
 8003eb8:	2105      	movs	r1, #5
 8003eba:	200c      	movs	r0, #12
 8003ebc:	f002 fc18 	bl	80066f0 <HAL_NVIC_SetPriority>
 8003ec0:	200c      	movs	r0, #12
 8003ec2:	f002 fc49 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8003ec6:	2105      	movs	r1, #5
 8003ec8:	4622      	mov	r2, r4
 8003eca:	200d      	movs	r0, #13
 8003ecc:	f002 fc10 	bl	80066f0 <HAL_NVIC_SetPriority>
 8003ed0:	200d      	movs	r0, #13
 8003ed2:	f002 fc41 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8003ed6:	4b7b      	ldr	r3, [pc, #492]	; (80040c4 <main+0x35c>)
 8003ed8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003edc:	6033      	str	r3, [r6, #0]
 8003ede:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ee2:	4630      	mov	r0, r6
 8003ee4:	60b3      	str	r3, [r6, #8]
 8003ee6:	9301      	str	r3, [sp, #4]
 8003ee8:	61f2      	str	r2, [r6, #28]
 8003eea:	940d      	str	r4, [sp, #52]	; 0x34
 8003eec:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8003ef0:	9416      	str	r4, [sp, #88]	; 0x58
 8003ef2:	7334      	strb	r4, [r6, #12]
 8003ef4:	7534      	strb	r4, [r6, #20]
 8003ef6:	6074      	str	r4, [r6, #4]
 8003ef8:	f8c6 8010 	str.w	r8, [r6, #16]
 8003efc:	f002 fb38 	bl	8006570 <HAL_ADC_Init>
 8003f00:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8003f04:	f849 2d3c 	str.w	r2, [r9, #-60]!
 8003f08:	4649      	mov	r1, r9
 8003f0a:	4630      	mov	r0, r6
 8003f0c:	f002 fbb2 	bl	8006674 <HAL_ADCEx_MultiModeConfigChannel>
 8003f10:	2301      	movs	r3, #1
 8003f12:	a914      	add	r1, sp, #80	; 0x50
 8003f14:	4630      	mov	r0, r6
 8003f16:	e9cd 7314 	strd	r7, r3, [sp, #80]	; 0x50
 8003f1a:	9416      	str	r4, [sp, #88]	; 0x58
 8003f1c:	f002 f9ee 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f20:	2305      	movs	r3, #5
 8003f22:	a914      	add	r1, sp, #80	; 0x50
 8003f24:	4630      	mov	r0, r6
 8003f26:	e9cd 3a14 	strd	r3, sl, [sp, #80]	; 0x50
 8003f2a:	f002 f9e7 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f2e:	2207      	movs	r2, #7
 8003f30:	2303      	movs	r3, #3
 8003f32:	a914      	add	r1, sp, #80	; 0x50
 8003f34:	4630      	mov	r0, r6
 8003f36:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003f3a:	f002 f9df 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f3e:	a914      	add	r1, sp, #80	; 0x50
 8003f40:	4630      	mov	r0, r6
 8003f42:	4f61      	ldr	r7, [pc, #388]	; (80040c8 <main+0x360>)
 8003f44:	e9cd 4814 	strd	r4, r8, [sp, #80]	; 0x50
 8003f48:	f002 f9d8 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f4c:	4a5f      	ldr	r2, [pc, #380]	; (80040cc <main+0x364>)
 8003f4e:	9b01      	ldr	r3, [sp, #4]
 8003f50:	603a      	str	r2, [r7, #0]
 8003f52:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8003f56:	4638      	mov	r0, r7
 8003f58:	61fa      	str	r2, [r7, #28]
 8003f5a:	60bb      	str	r3, [r7, #8]
 8003f5c:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8003f60:	9416      	str	r4, [sp, #88]	; 0x58
 8003f62:	733c      	strb	r4, [r7, #12]
 8003f64:	753c      	strb	r4, [r7, #20]
 8003f66:	607c      	str	r4, [r7, #4]
 8003f68:	f8c7 8010 	str.w	r8, [r7, #16]
 8003f6c:	f002 fb00 	bl	8006570 <HAL_ADC_Init>
 8003f70:	2301      	movs	r3, #1
 8003f72:	a914      	add	r1, sp, #80	; 0x50
 8003f74:	4638      	mov	r0, r7
 8003f76:	e9cd 3415 	strd	r3, r4, [sp, #84]	; 0x54
 8003f7a:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8003f7e:	f002 f9bd 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f82:	2206      	movs	r2, #6
 8003f84:	a914      	add	r1, sp, #80	; 0x50
 8003f86:	4638      	mov	r0, r7
 8003f88:	e9cd 2a14 	strd	r2, sl, [sp, #80]	; 0x50
 8003f8c:	f002 f9b6 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003f90:	2303      	movs	r3, #3
 8003f92:	2209      	movs	r2, #9
 8003f94:	a914      	add	r1, sp, #80	; 0x50
 8003f96:	4638      	mov	r0, r7
 8003f98:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003f9c:	f002 f9ae 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003fa0:	a914      	add	r1, sp, #80	; 0x50
 8003fa2:	4638      	mov	r0, r7
 8003fa4:	e9cd a814 	strd	sl, r8, [sp, #80]	; 0x50
 8003fa8:	f002 f9a8 	bl	80062fc <HAL_ADC_ConfigChannel>
 8003fac:	465a      	mov	r2, fp
 8003fae:	4621      	mov	r1, r4
 8003fb0:	a809      	add	r0, sp, #36	; 0x24
 8003fb2:	f006 f99b 	bl	800a2ec <memset>
 8003fb6:	221c      	movs	r2, #28
 8003fb8:	4621      	mov	r1, r4
 8003fba:	4648      	mov	r0, r9
 8003fbc:	e9cd 4407 	strd	r4, r4, [sp, #28]
 8003fc0:	f006 f994 	bl	800a2ec <memset>
 8003fc4:	4621      	mov	r1, r4
 8003fc6:	2220      	movs	r2, #32
 8003fc8:	a814      	add	r0, sp, #80	; 0x50
 8003fca:	f006 f98f 	bl	800a2ec <memset>
 8003fce:	f04f 0c20 	mov.w	ip, #32
 8003fd2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8003fd6:	f8df a104 	ldr.w	sl, [pc, #260]	; 80040dc <main+0x374>
 8003fda:	4a3d      	ldr	r2, [pc, #244]	; (80040d0 <main+0x368>)
 8003fdc:	4650      	mov	r0, sl
 8003fde:	e9ca c302 	strd	ip, r3, [sl, #8]
 8003fe2:	e9ca 2400 	strd	r2, r4, [sl]
 8003fe6:	e9ca 4404 	strd	r4, r4, [sl, #16]
 8003fea:	f8ca 4018 	str.w	r4, [sl, #24]
 8003fee:	f003 fbb3 	bl	8007758 <HAL_TIM_Base_Init>
 8003ff2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003ff6:	a909      	add	r1, sp, #36	; 0x24
 8003ff8:	4650      	mov	r0, sl
 8003ffa:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffc:	f003 fc78 	bl	80078f0 <HAL_TIM_ConfigClockSource>
 8004000:	4650      	mov	r0, sl
 8004002:	f003 fbc3 	bl	800778c <HAL_TIM_PWM_Init>
 8004006:	a907      	add	r1, sp, #28
 8004008:	4650      	mov	r0, sl
 800400a:	e9cd b407 	strd	fp, r4, [sp, #28]
 800400e:	f003 fdcf 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004012:	9b01      	ldr	r3, [sp, #4]
 8004014:	2260      	movs	r2, #96	; 0x60
 8004016:	9312      	str	r3, [sp, #72]	; 0x48
 8004018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 8004020:	4649      	mov	r1, r9
 8004022:	4622      	mov	r2, r4
 8004024:	4650      	mov	r0, sl
 8004026:	9313      	str	r3, [sp, #76]	; 0x4c
 8004028:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
 800402c:	9411      	str	r4, [sp, #68]	; 0x44
 800402e:	f003 fbf3 	bl	8007818 <HAL_TIM_PWM_ConfigChannel>
 8004032:	4642      	mov	r2, r8
 8004034:	4649      	mov	r1, r9
 8004036:	4650      	mov	r0, sl
 8004038:	f003 fbee 	bl	8007818 <HAL_TIM_PWM_ConfigChannel>
 800403c:	2208      	movs	r2, #8
 800403e:	4649      	mov	r1, r9
 8004040:	4650      	mov	r0, sl
 8004042:	f003 fbe9 	bl	8007818 <HAL_TIM_PWM_ConfigChannel>
 8004046:	f44f 6e00 	mov.w	lr, #2048	; 0x800
 800404a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800404e:	e9cd e314 	strd	lr, r3, [sp, #80]	; 0x50
 8004052:	2330      	movs	r3, #48	; 0x30
 8004054:	e9cd 3417 	strd	r3, r4, [sp, #92]	; 0x5c
 8004058:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800405c:	a914      	add	r1, sp, #80	; 0x50
 800405e:	4650      	mov	r0, sl
 8004060:	9319      	str	r3, [sp, #100]	; 0x64
 8004062:	9416      	str	r4, [sp, #88]	; 0x58
 8004064:	941b      	str	r4, [sp, #108]	; 0x6c
 8004066:	f003 fdc1 	bl	8007bec <HAL_TIMEx_ConfigBreakDeadTime>
 800406a:	4650      	mov	r0, sl
 800406c:	f000 f9d8 	bl	8004420 <HAL_TIM_MspPostInit>
 8004070:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8004074:	4b17      	ldr	r3, [pc, #92]	; (80040d4 <main+0x36c>)
 8004076:	4918      	ldr	r1, [pc, #96]	; (80040d8 <main+0x370>)
 8004078:	4618      	mov	r0, r3
 800407a:	e9c3 1200 	strd	r1, r2, [r3]
 800407e:	220c      	movs	r2, #12
 8004080:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8004084:	e9c3 2405 	strd	r2, r4, [r3, #20]
 8004088:	611c      	str	r4, [r3, #16]
 800408a:	61dc      	str	r4, [r3, #28]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	f003 fe1d 	bl	8007ccc <HAL_UART_Init>
 8004092:	465a      	mov	r2, fp
 8004094:	4621      	mov	r1, r4
 8004096:	4648      	mov	r0, r9
 8004098:	f006 f928 	bl	800a2ec <memset>
 800409c:	4621      	mov	r1, r4
 800409e:	2214      	movs	r2, #20
 80040a0:	a814      	add	r0, sp, #80	; 0x50
 80040a2:	f006 f923 	bl	800a2ec <memset>
 80040a6:	e01b      	b.n	80040e0 <main+0x378>
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40011000 	.word	0x40011000
 80040b0:	200042f4 	.word	0x200042f4
 80040b4:	40011400 	.word	0x40011400
 80040b8:	40010800 	.word	0x40010800
 80040bc:	40010c00 	.word	0x40010c00
 80040c0:	40010000 	.word	0x40010000
 80040c4:	40012400 	.word	0x40012400
 80040c8:	20004240 	.word	0x20004240
 80040cc:	40012800 	.word	0x40012800
 80040d0:	40012c00 	.word	0x40012c00
 80040d4:	20004200 	.word	0x20004200
 80040d8:	40004800 	.word	0x40004800
 80040dc:	20004378 	.word	0x20004378
 80040e0:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80040e4:	f8df b174 	ldr.w	fp, [pc, #372]	; 800425c <main+0x4f4>
 80040e8:	4a53      	ldr	r2, [pc, #332]	; (8004238 <main+0x4d0>)
 80040ea:	4658      	mov	r0, fp
 80040ec:	e9cb 2400 	strd	r2, r4, [fp]
 80040f0:	e9cb 3403 	strd	r3, r4, [fp, #12]
 80040f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	; 0x24
 80040f8:	f8cb 4008 	str.w	r4, [fp, #8]
 80040fc:	f8cb 4018 	str.w	r4, [fp, #24]
 8004100:	f003 fb2a 	bl	8007758 <HAL_TIM_Base_Init>
 8004104:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004108:	4649      	mov	r1, r9
 800410a:	4658      	mov	r0, fp
 800410c:	930d      	str	r3, [sp, #52]	; 0x34
 800410e:	f003 fbef 	bl	80078f0 <HAL_TIM_ConfigClockSource>
 8004112:	2305      	movs	r3, #5
 8004114:	a914      	add	r1, sp, #80	; 0x50
 8004116:	4658      	mov	r0, fp
 8004118:	e9cd 3414 	strd	r3, r4, [sp, #80]	; 0x50
 800411c:	f003 fcce 	bl	8007abc <HAL_TIM_SlaveConfigSynchro>
 8004120:	2320      	movs	r3, #32
 8004122:	2280      	movs	r2, #128	; 0x80
 8004124:	a909      	add	r1, sp, #36	; 0x24
 8004126:	4658      	mov	r0, fp
 8004128:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800412c:	f003 fd40 	bl	8007bb0 <HAL_TIMEx_MasterConfigSynchronization>
 8004130:	4942      	ldr	r1, [pc, #264]	; (800423c <main+0x4d4>)
 8004132:	684a      	ldr	r2, [r1, #4]
 8004134:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004138:	604a      	str	r2, [r1, #4]
 800413a:	f003 ffc3 	bl	80080c4 <osKernelInitialize>
 800413e:	2201      	movs	r2, #1
 8004140:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004144:	483e      	ldr	r0, [pc, #248]	; (8004240 <main+0x4d8>)
 8004146:	f002 fe73 	bl	8006e30 <HAL_GPIO_WritePin>
 800414a:	4a3e      	ldr	r2, [pc, #248]	; (8004244 <main+0x4dc>)
 800414c:	4621      	mov	r1, r4
 800414e:	483e      	ldr	r0, [pc, #248]	; (8004248 <main+0x4e0>)
 8004150:	f003 fff4 	bl	800813c <osThreadNew>
 8004154:	4a3d      	ldr	r2, [pc, #244]	; (800424c <main+0x4e4>)
 8004156:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800415a:	6010      	str	r0, [r2, #0]
 800415c:	2201      	movs	r2, #1
 800415e:	4838      	ldr	r0, [pc, #224]	; (8004240 <main+0x4d8>)
 8004160:	f002 fe66 	bl	8006e30 <HAL_GPIO_WritePin>
 8004164:	9b01      	ldr	r3, [sp, #4]
 8004166:	4618      	mov	r0, r3
 8004168:	f001 fdfa 	bl	8005d60 <tsk_cli_Start>
 800416c:	4630      	mov	r0, r6
 800416e:	f002 f97b 	bl	8006468 <HAL_ADC_Start>
 8004172:	4638      	mov	r0, r7
 8004174:	f002 f978 	bl	8006468 <HAL_ADC_Start>
 8004178:	4621      	mov	r1, r4
 800417a:	4650      	mov	r0, sl
 800417c:	f003 fcf0 	bl	8007b60 <HAL_TIM_PWM_Start>
 8004180:	4641      	mov	r1, r8
 8004182:	4650      	mov	r0, sl
 8004184:	f003 fcec 	bl	8007b60 <HAL_TIM_PWM_Start>
 8004188:	2108      	movs	r1, #8
 800418a:	4650      	mov	r0, sl
 800418c:	f003 fce8 	bl	8007b60 <HAL_TIM_PWM_Start>
 8004190:	4621      	mov	r1, r4
 8004192:	4650      	mov	r0, sl
 8004194:	f003 fd0a 	bl	8007bac <HAL_TIMEx_PWMN_Start>
 8004198:	4641      	mov	r1, r8
 800419a:	4650      	mov	r0, sl
 800419c:	f003 fd06 	bl	8007bac <HAL_TIMEx_PWMN_Start>
 80041a0:	2108      	movs	r1, #8
 80041a2:	4650      	mov	r0, sl
 80041a4:	f003 fd02 	bl	8007bac <HAL_TIMEx_PWMN_Start>
 80041a8:	2201      	movs	r2, #1
 80041aa:	f8da 3000 	ldr.w	r3, [sl]
 80041ae:	4621      	mov	r1, r4
 80041b0:	631a      	str	r2, [r3, #48]	; 0x30
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	200b      	movs	r0, #11
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	2201      	movs	r2, #1
 80041be:	f8db 3000 	ldr.w	r3, [fp]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	f042 0201 	orr.w	r2, r2, #1
 80041ca:	601a      	str	r2, [r3, #0]
 80041cc:	6832      	ldr	r2, [r6, #0]
 80041ce:	6893      	ldr	r3, [r2, #8]
 80041d0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041d8:	6093      	str	r3, [r2, #8]
 80041da:	6893      	ldr	r3, [r2, #8]
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	6093      	str	r3, [r2, #8]
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	689a      	ldr	r2, [r3, #8]
 80041e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041ea:	609a      	str	r2, [r3, #8]
 80041ec:	689a      	ldr	r2, [r3, #8]
 80041ee:	f042 0201 	orr.w	r2, r2, #1
 80041f2:	609a      	str	r2, [r3, #8]
 80041f4:	696b      	ldr	r3, [r5, #20]
 80041f6:	4a16      	ldr	r2, [pc, #88]	; (8004250 <main+0x4e8>)
 80041f8:	f043 0301 	orr.w	r3, r3, #1
 80041fc:	616b      	str	r3, [r5, #20]
 80041fe:	696b      	ldr	r3, [r5, #20]
 8004200:	f003 0301 	and.w	r3, r3, #1
 8004204:	9314      	str	r3, [sp, #80]	; 0x50
 8004206:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004208:	4b12      	ldr	r3, [pc, #72]	; (8004254 <main+0x4ec>)
 800420a:	601c      	str	r4, [r3, #0]
 800420c:	f8c3 8004 	str.w	r8, [r3, #4]
 8004210:	609a      	str	r2, [r3, #8]
 8004212:	4a11      	ldr	r2, [pc, #68]	; (8004258 <main+0x4f0>)
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	f640 22a2 	movw	r2, #2722	; 0xaa2
 800421a:	601a      	str	r2, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	f042 0201 	orr.w	r2, r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	4622      	mov	r2, r4
 8004226:	f002 fa63 	bl	80066f0 <HAL_NVIC_SetPriority>
 800422a:	200b      	movs	r0, #11
 800422c:	f002 fa94 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8004230:	f003 ff64 	bl	80080fc <osKernelStart>
 8004234:	e7fe      	b.n	8004234 <main+0x4cc>
 8004236:	bf00      	nop
 8004238:	40000400 	.word	0x40000400
 800423c:	e0042000 	.word	0xe0042000
 8004240:	40011000 	.word	0x40011000
 8004244:	0800d1f4 	.word	0x0800d1f4
 8004248:	08003ca5 	.word	0x08003ca5
 800424c:	200041b8 	.word	0x200041b8
 8004250:	4001244c 	.word	0x4001244c
 8004254:	40020008 	.word	0x40020008
 8004258:	20004368 	.word	0x20004368
 800425c:	200042b4 	.word	0x200042b4

08004260 <HAL_TIM_PeriodElapsedCallback>:
 8004260:	6802      	ldr	r2, [r0, #0]
 8004262:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_TIM_PeriodElapsedCallback+0x10>)
 8004264:	429a      	cmp	r2, r3
 8004266:	d101      	bne.n	800426c <HAL_TIM_PeriodElapsedCallback+0xc>
 8004268:	f001 bfbe 	b.w	80061e8 <HAL_IncTick>
 800426c:	4770      	bx	lr
 800426e:	bf00      	nop
 8004270:	40000800 	.word	0x40000800

08004274 <Error_Handler>:
 8004274:	4770      	bx	lr
	...

08004278 <HAL_MspInit>:
 8004278:	4b11      	ldr	r3, [pc, #68]	; (80042c0 <HAL_MspInit+0x48>)
 800427a:	b507      	push	{r0, r1, r2, lr}
 800427c:	699a      	ldr	r2, [r3, #24]
 800427e:	210f      	movs	r1, #15
 8004280:	f042 0201 	orr.w	r2, r2, #1
 8004284:	619a      	str	r2, [r3, #24]
 8004286:	699a      	ldr	r2, [r3, #24]
 8004288:	f06f 0001 	mvn.w	r0, #1
 800428c:	f002 0201 	and.w	r2, r2, #1
 8004290:	9200      	str	r2, [sp, #0]
 8004292:	9a00      	ldr	r2, [sp, #0]
 8004294:	69da      	ldr	r2, [r3, #28]
 8004296:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800429a:	61da      	str	r2, [r3, #28]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2200      	movs	r2, #0
 80042a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	9b01      	ldr	r3, [sp, #4]
 80042a8:	f002 fa22 	bl	80066f0 <HAL_NVIC_SetPriority>
 80042ac:	4a05      	ldr	r2, [pc, #20]	; (80042c4 <HAL_MspInit+0x4c>)
 80042ae:	6853      	ldr	r3, [r2, #4]
 80042b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80042b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80042b8:	6053      	str	r3, [r2, #4]
 80042ba:	b003      	add	sp, #12
 80042bc:	f85d fb04 	ldr.w	pc, [sp], #4
 80042c0:	40021000 	.word	0x40021000
 80042c4:	40010000 	.word	0x40010000

080042c8 <HAL_ADC_MspInit>:
 80042c8:	b530      	push	{r4, r5, lr}
 80042ca:	4605      	mov	r5, r0
 80042cc:	b08b      	sub	sp, #44	; 0x2c
 80042ce:	2210      	movs	r2, #16
 80042d0:	2100      	movs	r1, #0
 80042d2:	a806      	add	r0, sp, #24
 80042d4:	f006 f80a 	bl	800a2ec <memset>
 80042d8:	682b      	ldr	r3, [r5, #0]
 80042da:	4a37      	ldr	r2, [pc, #220]	; (80043b8 <HAL_ADC_MspInit+0xf0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d13c      	bne.n	800435a <HAL_ADC_MspInit+0x92>
 80042e0:	4b36      	ldr	r3, [pc, #216]	; (80043bc <HAL_ADC_MspInit+0xf4>)
 80042e2:	a906      	add	r1, sp, #24
 80042e4:	699a      	ldr	r2, [r3, #24]
 80042e6:	4836      	ldr	r0, [pc, #216]	; (80043c0 <HAL_ADC_MspInit+0xf8>)
 80042e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042ec:	619a      	str	r2, [r3, #24]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	4c34      	ldr	r4, [pc, #208]	; (80043c4 <HAL_ADC_MspInit+0xfc>)
 80042f2:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80042f6:	9201      	str	r2, [sp, #4]
 80042f8:	9a01      	ldr	r2, [sp, #4]
 80042fa:	699a      	ldr	r2, [r3, #24]
 80042fc:	f042 0204 	orr.w	r2, r2, #4
 8004300:	619a      	str	r2, [r3, #24]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	22bd      	movs	r2, #189	; 0xbd
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	9302      	str	r3, [sp, #8]
 800430c:	9b02      	ldr	r3, [sp, #8]
 800430e:	2303      	movs	r3, #3
 8004310:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004314:	f002 fca6 	bl	8006c64 <HAL_GPIO_Init>
 8004318:	2080      	movs	r0, #128	; 0x80
 800431a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800431e:	2300      	movs	r3, #0
 8004320:	e9c4 0203 	strd	r0, r2, [r4, #12]
 8004324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004328:	4927      	ldr	r1, [pc, #156]	; (80043c8 <HAL_ADC_MspInit+0x100>)
 800432a:	4620      	mov	r0, r4
 800432c:	e9c4 1300 	strd	r1, r3, [r4]
 8004330:	60a3      	str	r3, [r4, #8]
 8004332:	e9c4 2305 	strd	r2, r3, [r4, #20]
 8004336:	61e3      	str	r3, [r4, #28]
 8004338:	f002 fa1c 	bl	8006774 <HAL_DMA_Init>
 800433c:	b108      	cbz	r0, 8004342 <HAL_ADC_MspInit+0x7a>
 800433e:	f7ff ff99 	bl	8004274 <Error_Handler>
 8004342:	622c      	str	r4, [r5, #32]
 8004344:	6265      	str	r5, [r4, #36]	; 0x24
 8004346:	2012      	movs	r0, #18
 8004348:	2200      	movs	r2, #0
 800434a:	2105      	movs	r1, #5
 800434c:	f002 f9d0 	bl	80066f0 <HAL_NVIC_SetPriority>
 8004350:	2012      	movs	r0, #18
 8004352:	f002 fa01 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8004356:	b00b      	add	sp, #44	; 0x2c
 8004358:	bd30      	pop	{r4, r5, pc}
 800435a:	4a1c      	ldr	r2, [pc, #112]	; (80043cc <HAL_ADC_MspInit+0x104>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d1fa      	bne.n	8004356 <HAL_ADC_MspInit+0x8e>
 8004360:	4b16      	ldr	r3, [pc, #88]	; (80043bc <HAL_ADC_MspInit+0xf4>)
 8004362:	2403      	movs	r4, #3
 8004364:	699a      	ldr	r2, [r3, #24]
 8004366:	a906      	add	r1, sp, #24
 8004368:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800436c:	619a      	str	r2, [r3, #24]
 800436e:	699a      	ldr	r2, [r3, #24]
 8004370:	4813      	ldr	r0, [pc, #76]	; (80043c0 <HAL_ADC_MspInit+0xf8>)
 8004372:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8004376:	9203      	str	r2, [sp, #12]
 8004378:	9a03      	ldr	r2, [sp, #12]
 800437a:	699a      	ldr	r2, [r3, #24]
 800437c:	f042 0204 	orr.w	r2, r2, #4
 8004380:	619a      	str	r2, [r3, #24]
 8004382:	699a      	ldr	r2, [r3, #24]
 8004384:	f002 0204 	and.w	r2, r2, #4
 8004388:	9204      	str	r2, [sp, #16]
 800438a:	9a04      	ldr	r2, [sp, #16]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	f042 0208 	orr.w	r2, r2, #8
 8004392:	619a      	str	r2, [r3, #24]
 8004394:	699b      	ldr	r3, [r3, #24]
 8004396:	f003 0308 	and.w	r3, r3, #8
 800439a:	9305      	str	r3, [sp, #20]
 800439c:	9b05      	ldr	r3, [sp, #20]
 800439e:	23dc      	movs	r3, #220	; 0xdc
 80043a0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80043a4:	f002 fc5e 	bl	8006c64 <HAL_GPIO_Init>
 80043a8:	2302      	movs	r3, #2
 80043aa:	a906      	add	r1, sp, #24
 80043ac:	4808      	ldr	r0, [pc, #32]	; (80043d0 <HAL_ADC_MspInit+0x108>)
 80043ae:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80043b2:	f002 fc57 	bl	8006c64 <HAL_GPIO_Init>
 80043b6:	e7c6      	b.n	8004346 <HAL_ADC_MspInit+0x7e>
 80043b8:	40012400 	.word	0x40012400
 80043bc:	40021000 	.word	0x40021000
 80043c0:	40010800 	.word	0x40010800
 80043c4:	20004324 	.word	0x20004324
 80043c8:	40020008 	.word	0x40020008
 80043cc:	40012800 	.word	0x40012800
 80043d0:	40010c00 	.word	0x40010c00

080043d4 <HAL_TIM_Base_MspInit>:
 80043d4:	6803      	ldr	r3, [r0, #0]
 80043d6:	4a0f      	ldr	r2, [pc, #60]	; (8004414 <HAL_TIM_Base_MspInit+0x40>)
 80043d8:	b082      	sub	sp, #8
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10b      	bne.n	80043f6 <HAL_TIM_Base_MspInit+0x22>
 80043de:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <HAL_TIM_Base_MspInit+0x44>)
 80043e0:	699a      	ldr	r2, [r3, #24]
 80043e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80043e6:	619a      	str	r2, [r3, #24]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	9b00      	ldr	r3, [sp, #0]
 80043f2:	b002      	add	sp, #8
 80043f4:	4770      	bx	lr
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <HAL_TIM_Base_MspInit+0x48>)
 80043f8:	4293      	cmp	r3, r2
 80043fa:	d1fa      	bne.n	80043f2 <HAL_TIM_Base_MspInit+0x1e>
 80043fc:	4b06      	ldr	r3, [pc, #24]	; (8004418 <HAL_TIM_Base_MspInit+0x44>)
 80043fe:	69da      	ldr	r2, [r3, #28]
 8004400:	f042 0202 	orr.w	r2, r2, #2
 8004404:	61da      	str	r2, [r3, #28]
 8004406:	69db      	ldr	r3, [r3, #28]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	9301      	str	r3, [sp, #4]
 800440e:	9b01      	ldr	r3, [sp, #4]
 8004410:	e7ef      	b.n	80043f2 <HAL_TIM_Base_MspInit+0x1e>
 8004412:	bf00      	nop
 8004414:	40012c00 	.word	0x40012c00
 8004418:	40021000 	.word	0x40021000
 800441c:	40000400 	.word	0x40000400

08004420 <HAL_TIM_MspPostInit>:
 8004420:	b510      	push	{r4, lr}
 8004422:	4604      	mov	r4, r0
 8004424:	b086      	sub	sp, #24
 8004426:	2210      	movs	r2, #16
 8004428:	2100      	movs	r1, #0
 800442a:	a802      	add	r0, sp, #8
 800442c:	f005 ff5e 	bl	800a2ec <memset>
 8004430:	6822      	ldr	r2, [r4, #0]
 8004432:	4b16      	ldr	r3, [pc, #88]	; (800448c <HAL_TIM_MspPostInit+0x6c>)
 8004434:	429a      	cmp	r2, r3
 8004436:	d126      	bne.n	8004486 <HAL_TIM_MspPostInit+0x66>
 8004438:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 800443c:	699a      	ldr	r2, [r3, #24]
 800443e:	2402      	movs	r4, #2
 8004440:	f042 0208 	orr.w	r2, r2, #8
 8004444:	619a      	str	r2, [r3, #24]
 8004446:	699a      	ldr	r2, [r3, #24]
 8004448:	a902      	add	r1, sp, #8
 800444a:	f002 0208 	and.w	r2, r2, #8
 800444e:	9200      	str	r2, [sp, #0]
 8004450:	9a00      	ldr	r2, [sp, #0]
 8004452:	699a      	ldr	r2, [r3, #24]
 8004454:	480e      	ldr	r0, [pc, #56]	; (8004490 <HAL_TIM_MspPostInit+0x70>)
 8004456:	f042 0204 	orr.w	r2, r2, #4
 800445a:	619a      	str	r2, [r3, #24]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	9405      	str	r4, [sp, #20]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	9301      	str	r3, [sp, #4]
 8004466:	9b01      	ldr	r3, [sp, #4]
 8004468:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800446c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004470:	f002 fbf8 	bl	8006c64 <HAL_GPIO_Init>
 8004474:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004478:	a902      	add	r1, sp, #8
 800447a:	4806      	ldr	r0, [pc, #24]	; (8004494 <HAL_TIM_MspPostInit+0x74>)
 800447c:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004480:	9405      	str	r4, [sp, #20]
 8004482:	f002 fbef 	bl	8006c64 <HAL_GPIO_Init>
 8004486:	b006      	add	sp, #24
 8004488:	bd10      	pop	{r4, pc}
 800448a:	bf00      	nop
 800448c:	40012c00 	.word	0x40012c00
 8004490:	40010c00 	.word	0x40010c00
 8004494:	40010800 	.word	0x40010800

08004498 <HAL_UART_MspInit>:
 8004498:	b570      	push	{r4, r5, r6, lr}
 800449a:	4606      	mov	r6, r0
 800449c:	b086      	sub	sp, #24
 800449e:	2210      	movs	r2, #16
 80044a0:	2100      	movs	r1, #0
 80044a2:	a802      	add	r0, sp, #8
 80044a4:	f005 ff22 	bl	800a2ec <memset>
 80044a8:	6832      	ldr	r2, [r6, #0]
 80044aa:	4b2f      	ldr	r3, [pc, #188]	; (8004568 <HAL_UART_MspInit+0xd0>)
 80044ac:	429a      	cmp	r2, r3
 80044ae:	d159      	bne.n	8004564 <HAL_UART_MspInit+0xcc>
 80044b0:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 80044b4:	69da      	ldr	r2, [r3, #28]
 80044b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80044ba:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044be:	61da      	str	r2, [r3, #28]
 80044c0:	69da      	ldr	r2, [r3, #28]
 80044c2:	482a      	ldr	r0, [pc, #168]	; (800456c <HAL_UART_MspInit+0xd4>)
 80044c4:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80044c8:	9200      	str	r2, [sp, #0]
 80044ca:	9a00      	ldr	r2, [sp, #0]
 80044cc:	699a      	ldr	r2, [r3, #24]
 80044ce:	2500      	movs	r5, #0
 80044d0:	f042 0208 	orr.w	r2, r2, #8
 80044d4:	619a      	str	r2, [r3, #24]
 80044d6:	699b      	ldr	r3, [r3, #24]
 80044d8:	4c25      	ldr	r4, [pc, #148]	; (8004570 <HAL_UART_MspInit+0xd8>)
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	9301      	str	r3, [sp, #4]
 80044e0:	9b01      	ldr	r3, [sp, #4]
 80044e2:	2302      	movs	r3, #2
 80044e4:	e9cd 1302 	strd	r1, r3, [sp, #8]
 80044e8:	2303      	movs	r3, #3
 80044ea:	a902      	add	r1, sp, #8
 80044ec:	9305      	str	r3, [sp, #20]
 80044ee:	f002 fbb9 	bl	8006c64 <HAL_GPIO_Init>
 80044f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80044f6:	481d      	ldr	r0, [pc, #116]	; (800456c <HAL_UART_MspInit+0xd4>)
 80044f8:	a902      	add	r1, sp, #8
 80044fa:	e9cd 3502 	strd	r3, r5, [sp, #8]
 80044fe:	9504      	str	r5, [sp, #16]
 8004500:	f002 fbb0 	bl	8006c64 <HAL_GPIO_Init>
 8004504:	4b1b      	ldr	r3, [pc, #108]	; (8004574 <HAL_UART_MspInit+0xdc>)
 8004506:	4620      	mov	r0, r4
 8004508:	e9c4 3500 	strd	r3, r5, [r4]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004512:	2320      	movs	r3, #32
 8004514:	60a5      	str	r5, [r4, #8]
 8004516:	6165      	str	r5, [r4, #20]
 8004518:	e9c4 3506 	strd	r3, r5, [r4, #24]
 800451c:	f002 f92a 	bl	8006774 <HAL_DMA_Init>
 8004520:	b108      	cbz	r0, 8004526 <HAL_UART_MspInit+0x8e>
 8004522:	f7ff fea7 	bl	8004274 <Error_Handler>
 8004526:	2310      	movs	r3, #16
 8004528:	4a13      	ldr	r2, [pc, #76]	; (8004578 <HAL_UART_MspInit+0xe0>)
 800452a:	6374      	str	r4, [r6, #52]	; 0x34
 800452c:	6266      	str	r6, [r4, #36]	; 0x24
 800452e:	4c13      	ldr	r4, [pc, #76]	; (800457c <HAL_UART_MspInit+0xe4>)
 8004530:	e9c4 2300 	strd	r2, r3, [r4]
 8004534:	2300      	movs	r3, #0
 8004536:	2280      	movs	r2, #128	; 0x80
 8004538:	4620      	mov	r0, r4
 800453a:	e9c4 3202 	strd	r3, r2, [r4, #8]
 800453e:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8004542:	e9c4 3306 	strd	r3, r3, [r4, #24]
 8004546:	f002 f915 	bl	8006774 <HAL_DMA_Init>
 800454a:	b108      	cbz	r0, 8004550 <HAL_UART_MspInit+0xb8>
 800454c:	f7ff fe92 	bl	8004274 <Error_Handler>
 8004550:	2027      	movs	r0, #39	; 0x27
 8004552:	6334      	str	r4, [r6, #48]	; 0x30
 8004554:	2200      	movs	r2, #0
 8004556:	2105      	movs	r1, #5
 8004558:	6266      	str	r6, [r4, #36]	; 0x24
 800455a:	f002 f8c9 	bl	80066f0 <HAL_NVIC_SetPriority>
 800455e:	2027      	movs	r0, #39	; 0x27
 8004560:	f002 f8fa 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8004564:	b006      	add	sp, #24
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	40004800 	.word	0x40004800
 800456c:	40010c00 	.word	0x40010c00
 8004570:	200041bc 	.word	0x200041bc
 8004574:	40020030 	.word	0x40020030
 8004578:	4002001c 	.word	0x4002001c
 800457c:	20004270 	.word	0x20004270

08004580 <HAL_InitTick>:
 8004580:	b510      	push	{r4, lr}
 8004582:	4601      	mov	r1, r0
 8004584:	b088      	sub	sp, #32
 8004586:	2200      	movs	r2, #0
 8004588:	201e      	movs	r0, #30
 800458a:	f002 f8b1 	bl	80066f0 <HAL_NVIC_SetPriority>
 800458e:	201e      	movs	r0, #30
 8004590:	f002 f8e2 	bl	8006758 <HAL_NVIC_EnableIRQ>
 8004594:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <HAL_InitTick+0x68>)
 8004596:	a901      	add	r1, sp, #4
 8004598:	69da      	ldr	r2, [r3, #28]
 800459a:	a803      	add	r0, sp, #12
 800459c:	f042 0204 	orr.w	r2, r2, #4
 80045a0:	61da      	str	r2, [r3, #28]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	4c11      	ldr	r4, [pc, #68]	; (80045ec <HAL_InitTick+0x6c>)
 80045a6:	f003 0304 	and.w	r3, r3, #4
 80045aa:	9302      	str	r3, [sp, #8]
 80045ac:	9b02      	ldr	r3, [sp, #8]
 80045ae:	f002 fed9 	bl	8007364 <HAL_RCC_GetClockConfig>
 80045b2:	f002 feb7 	bl	8007324 <HAL_RCC_GetPCLK1Freq>
 80045b6:	4b0e      	ldr	r3, [pc, #56]	; (80045f0 <HAL_InitTick+0x70>)
 80045b8:	0040      	lsls	r0, r0, #1
 80045ba:	6023      	str	r3, [r4, #0]
 80045bc:	f240 33e7 	movw	r3, #999	; 0x3e7
 80045c0:	60e3      	str	r3, [r4, #12]
 80045c2:	4b0c      	ldr	r3, [pc, #48]	; (80045f4 <HAL_InitTick+0x74>)
 80045c4:	fbb0 f0f3 	udiv	r0, r0, r3
 80045c8:	2300      	movs	r3, #0
 80045ca:	3801      	subs	r0, #1
 80045cc:	6060      	str	r0, [r4, #4]
 80045ce:	4620      	mov	r0, r4
 80045d0:	6123      	str	r3, [r4, #16]
 80045d2:	60a3      	str	r3, [r4, #8]
 80045d4:	f003 f8c0 	bl	8007758 <HAL_TIM_Base_Init>
 80045d8:	b920      	cbnz	r0, 80045e4 <HAL_InitTick+0x64>
 80045da:	4620      	mov	r0, r4
 80045dc:	f002 ffcc 	bl	8007578 <HAL_TIM_Base_Start_IT>
 80045e0:	b008      	add	sp, #32
 80045e2:	bd10      	pop	{r4, pc}
 80045e4:	2001      	movs	r0, #1
 80045e6:	e7fb      	b.n	80045e0 <HAL_InitTick+0x60>
 80045e8:	40021000 	.word	0x40021000
 80045ec:	200043b8 	.word	0x200043b8
 80045f0:	40000800 	.word	0x40000800
 80045f4:	000f4240 	.word	0x000f4240

080045f8 <NMI_Handler>:
 80045f8:	4770      	bx	lr

080045fa <HardFault_Handler>:
 80045fa:	e7fe      	b.n	80045fa <HardFault_Handler>

080045fc <MemManage_Handler>:
 80045fc:	e7fe      	b.n	80045fc <MemManage_Handler>

080045fe <BusFault_Handler>:
 80045fe:	e7fe      	b.n	80045fe <BusFault_Handler>

08004600 <UsageFault_Handler>:
 8004600:	e7fe      	b.n	8004600 <UsageFault_Handler>

08004602 <DebugMon_Handler>:
 8004602:	4770      	bx	lr

08004604 <DMA1_Channel2_IRQHandler>:
 8004604:	4801      	ldr	r0, [pc, #4]	; (800460c <DMA1_Channel2_IRQHandler+0x8>)
 8004606:	f002 b96b 	b.w	80068e0 <HAL_DMA_IRQHandler>
 800460a:	bf00      	nop
 800460c:	20004270 	.word	0x20004270

08004610 <DMA1_Channel3_IRQHandler>:
 8004610:	4801      	ldr	r0, [pc, #4]	; (8004618 <DMA1_Channel3_IRQHandler+0x8>)
 8004612:	f002 b965 	b.w	80068e0 <HAL_DMA_IRQHandler>
 8004616:	bf00      	nop
 8004618:	200041bc 	.word	0x200041bc

0800461c <ADC1_2_IRQHandler>:
 800461c:	b508      	push	{r3, lr}
 800461e:	4804      	ldr	r0, [pc, #16]	; (8004630 <ADC1_2_IRQHandler+0x14>)
 8004620:	f001 fdf6 	bl	8006210 <HAL_ADC_IRQHandler>
 8004624:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004628:	4802      	ldr	r0, [pc, #8]	; (8004634 <ADC1_2_IRQHandler+0x18>)
 800462a:	f001 bdf1 	b.w	8006210 <HAL_ADC_IRQHandler>
 800462e:	bf00      	nop
 8004630:	200042f4 	.word	0x200042f4
 8004634:	20004240 	.word	0x20004240

08004638 <TIM4_IRQHandler>:
 8004638:	4801      	ldr	r0, [pc, #4]	; (8004640 <TIM4_IRQHandler+0x8>)
 800463a:	f002 bfb2 	b.w	80075a2 <HAL_TIM_IRQHandler>
 800463e:	bf00      	nop
 8004640:	200043b8 	.word	0x200043b8

08004644 <USART3_IRQHandler>:
 8004644:	4801      	ldr	r0, [pc, #4]	; (800464c <USART3_IRQHandler+0x8>)
 8004646:	f003 bc95 	b.w	8007f74 <HAL_UART_IRQHandler>
 800464a:	bf00      	nop
 800464c:	20004200 	.word	0x20004200

08004650 <_sbrk>:
 8004650:	b508      	push	{r3, lr}
 8004652:	4b0a      	ldr	r3, [pc, #40]	; (800467c <_sbrk+0x2c>)
 8004654:	4602      	mov	r2, r0
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	b909      	cbnz	r1, 800465e <_sbrk+0xe>
 800465a:	4909      	ldr	r1, [pc, #36]	; (8004680 <_sbrk+0x30>)
 800465c:	6019      	str	r1, [r3, #0]
 800465e:	4669      	mov	r1, sp
 8004660:	6818      	ldr	r0, [r3, #0]
 8004662:	4402      	add	r2, r0
 8004664:	428a      	cmp	r2, r1
 8004666:	d906      	bls.n	8004676 <_sbrk+0x26>
 8004668:	f005 fdfc 	bl	800a264 <__errno>
 800466c:	230c      	movs	r3, #12
 800466e:	6003      	str	r3, [r0, #0]
 8004670:	f04f 30ff 	mov.w	r0, #4294967295
 8004674:	bd08      	pop	{r3, pc}
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	e7fc      	b.n	8004674 <_sbrk+0x24>
 800467a:	bf00      	nop
 800467c:	200005ec 	.word	0x200005ec
 8004680:	20004548 	.word	0x20004548

08004684 <SystemInit>:
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <SystemInit+0x40>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	f042 0201 	orr.w	r2, r2, #1
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	6859      	ldr	r1, [r3, #4]
 8004690:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <SystemInit+0x44>)
 8004692:	400a      	ands	r2, r1
 8004694:	605a      	str	r2, [r3, #4]
 8004696:	681a      	ldr	r2, [r3, #0]
 8004698:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800469c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80046a0:	601a      	str	r2, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046a8:	601a      	str	r2, [r3, #0]
 80046aa:	685a      	ldr	r2, [r3, #4]
 80046ac:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80046b0:	605a      	str	r2, [r3, #4]
 80046b2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80046b6:	609a      	str	r2, [r3, #8]
 80046b8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80046bc:	4b03      	ldr	r3, [pc, #12]	; (80046cc <SystemInit+0x48>)
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000
 80046c8:	f8ff0000 	.word	0xf8ff0000
 80046cc:	e000ed00 	.word	0xe000ed00

080046d0 <BLDC_Init>:
 80046d0:	2201      	movs	r2, #1
 80046d2:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <BLDC_Init+0x24>)
 80046d4:	4808      	ldr	r0, [pc, #32]	; (80046f8 <BLDC_Init+0x28>)
 80046d6:	f883 20f9 	strb.w	r2, [r3, #249]	; 0xf9
 80046da:	f44f 7281 	mov.w	r2, #258	; 0x102
 80046de:	6003      	str	r3, [r0, #0]
 80046e0:	f8a3 20f6 	strh.w	r2, [r3, #246]	; 0xf6
 80046e4:	4b05      	ldr	r3, [pc, #20]	; (80046fc <BLDC_Init+0x2c>)
 80046e6:	60c3      	str	r3, [r0, #12]
 80046e8:	4b05      	ldr	r3, [pc, #20]	; (8004700 <BLDC_Init+0x30>)
 80046ea:	6043      	str	r3, [r0, #4]
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <BLDC_Init+0x34>)
 80046ee:	6083      	str	r3, [r0, #8]
 80046f0:	f7fd bc98 	b.w	8002024 <BLDC_controller_initialize>
 80046f4:	20000000 	.word	0x20000000
 80046f8:	200044bc 	.word	0x200044bc
 80046fc:	200043f8 	.word	0x200043f8
 8004700:	200044ac 	.word	0x200044ac
 8004704:	2000449c 	.word	0x2000449c

08004708 <filtLowPass32>:
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	6816      	ldr	r6, [r2, #0]
 800470c:	1333      	asrs	r3, r6, #12
 800470e:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 8004712:	fb80 0101 	smull	r0, r1, r0, r1
 8004716:	0904      	lsrs	r4, r0, #4
 8004718:	ea44 7401 	orr.w	r4, r4, r1, lsl #28
 800471c:	110d      	asrs	r5, r1, #4
 800471e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
 8004722:	f175 33ff 	sbcs.w	r3, r5, #4294967295
 8004726:	bfb8      	it	lt
 8004728:	f04f 4400 	movlt.w	r4, #2147483648	; 0x80000000
 800472c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8004730:	bfb8      	it	lt
 8004732:	f04f 35ff 	movlt.w	r5, #4294967295
 8004736:	2100      	movs	r1, #0
 8004738:	42a0      	cmp	r0, r4
 800473a:	eb71 0305 	sbcs.w	r3, r1, r5
 800473e:	bfb8      	it	lt
 8004740:	4604      	movlt	r4, r0
 8004742:	4434      	add	r4, r6
 8004744:	6014      	str	r4, [r2, #0]
 8004746:	bd70      	pop	{r4, r5, r6, pc}

08004748 <NTC_ADC2Temperature>:
 8004748:	4906      	ldr	r1, [pc, #24]	; (8004764 <NTC_ADC2Temperature+0x1c>)
 800474a:	09c3      	lsrs	r3, r0, #7
 800474c:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8004750:	3301      	adds	r3, #1
 8004752:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8004756:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800475a:	1ad3      	subs	r3, r2, r3
 800475c:	4358      	muls	r0, r3
 800475e:	eba2 10d0 	sub.w	r0, r2, r0, lsr #7
 8004762:	4770      	bx	lr
 8004764:	20000340 	.word	0x20000340

08004768 <_out_buffer>:
 8004768:	429a      	cmp	r2, r3
 800476a:	bf38      	it	cc
 800476c:	5488      	strbcc	r0, [r1, r2]
 800476e:	4770      	bx	lr

08004770 <_out_null>:
 8004770:	4770      	bx	lr

08004772 <_ntoa_long>:
 8004772:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004776:	b08b      	sub	sp, #44	; 0x2c
 8004778:	4688      	mov	r8, r1
 800477a:	9914      	ldr	r1, [sp, #80]	; 0x50
 800477c:	4683      	mov	fp, r0
 800477e:	4699      	mov	r9, r3
 8004780:	e9dd 5318 	ldrd	r5, r3, [sp, #96]	; 0x60
 8004784:	4617      	mov	r7, r2
 8004786:	f89d 6054 	ldrb.w	r6, [sp, #84]	; 0x54
 800478a:	9816      	ldr	r0, [sp, #88]	; 0x58
 800478c:	b909      	cbnz	r1, 8004792 <_ntoa_long+0x20>
 800478e:	f023 0310 	bic.w	r3, r3, #16
 8004792:	f413 6c80 	ands.w	ip, r3, #1024	; 0x400
 8004796:	d001      	beq.n	800479c <_ntoa_long+0x2a>
 8004798:	2900      	cmp	r1, #0
 800479a:	d06c      	beq.n	8004876 <_ntoa_long+0x104>
 800479c:	f013 0f20 	tst.w	r3, #32
 80047a0:	f04f 0400 	mov.w	r4, #0
 80047a4:	bf14      	ite	ne
 80047a6:	f04f 0e37 	movne.w	lr, #55	; 0x37
 80047aa:	f04f 0e57 	moveq.w	lr, #87	; 0x57
 80047ae:	fbb1 faf0 	udiv	sl, r1, r0
 80047b2:	fb00 1a1a 	mls	sl, r0, sl, r1
 80047b6:	fbb1 f1f0 	udiv	r1, r1, r0
 80047ba:	fa5f f28a 	uxtb.w	r2, sl
 80047be:	f1ba 0f09 	cmp.w	sl, #9
 80047c2:	bf94      	ite	ls
 80047c4:	3230      	addls	r2, #48	; 0x30
 80047c6:	4472      	addhi	r2, lr
 80047c8:	3401      	adds	r4, #1
 80047ca:	f10d 0a08 	add.w	sl, sp, #8
 80047ce:	b2d2      	uxtb	r2, r2
 80047d0:	44a2      	add	sl, r4
 80047d2:	f80a 2c01 	strb.w	r2, [sl, #-1]
 80047d6:	b109      	cbz	r1, 80047dc <_ntoa_long+0x6a>
 80047d8:	2c20      	cmp	r4, #32
 80047da:	d1e8      	bne.n	80047ae <_ntoa_long+0x3c>
 80047dc:	f013 0202 	ands.w	r2, r3, #2
 80047e0:	9200      	str	r2, [sp, #0]
 80047e2:	d10b      	bne.n	80047fc <_ntoa_long+0x8a>
 80047e4:	2230      	movs	r2, #48	; 0x30
 80047e6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80047e8:	42a1      	cmp	r1, r4
 80047ea:	d846      	bhi.n	800487a <_ntoa_long+0x108>
 80047ec:	2130      	movs	r1, #48	; 0x30
 80047ee:	f003 0201 	and.w	r2, r3, #1
 80047f2:	b11a      	cbz	r2, 80047fc <_ntoa_long+0x8a>
 80047f4:	42a5      	cmp	r5, r4
 80047f6:	d901      	bls.n	80047fc <_ntoa_long+0x8a>
 80047f8:	2c1f      	cmp	r4, #31
 80047fa:	d944      	bls.n	8004886 <_ntoa_long+0x114>
 80047fc:	06da      	lsls	r2, r3, #27
 80047fe:	d55b      	bpl.n	80048b8 <_ntoa_long+0x146>
 8004800:	f1bc 0f00 	cmp.w	ip, #0
 8004804:	d146      	bne.n	8004894 <_ntoa_long+0x122>
 8004806:	2c00      	cmp	r4, #0
 8004808:	d044      	beq.n	8004894 <_ntoa_long+0x122>
 800480a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800480c:	42a2      	cmp	r2, r4
 800480e:	d001      	beq.n	8004814 <_ntoa_long+0xa2>
 8004810:	42a5      	cmp	r5, r4
 8004812:	d13f      	bne.n	8004894 <_ntoa_long+0x122>
 8004814:	1e62      	subs	r2, r4, #1
 8004816:	d03c      	beq.n	8004892 <_ntoa_long+0x120>
 8004818:	2810      	cmp	r0, #16
 800481a:	d14b      	bne.n	80048b4 <_ntoa_long+0x142>
 800481c:	3c02      	subs	r4, #2
 800481e:	0698      	lsls	r0, r3, #26
 8004820:	d442      	bmi.n	80048a8 <_ntoa_long+0x136>
 8004822:	2c1f      	cmp	r4, #31
 8004824:	f200 8087 	bhi.w	8004936 <_ntoa_long+0x1c4>
 8004828:	2178      	movs	r1, #120	; 0x78
 800482a:	aa0a      	add	r2, sp, #40	; 0x28
 800482c:	4422      	add	r2, r4
 800482e:	f802 1c20 	strb.w	r1, [r2, #-32]
 8004832:	3401      	adds	r4, #1
 8004834:	2c1f      	cmp	r4, #31
 8004836:	d87e      	bhi.n	8004936 <_ntoa_long+0x1c4>
 8004838:	2130      	movs	r1, #48	; 0x30
 800483a:	aa0a      	add	r2, sp, #40	; 0x28
 800483c:	4422      	add	r2, r4
 800483e:	f802 1c20 	strb.w	r1, [r2, #-32]
 8004842:	3401      	adds	r4, #1
 8004844:	42a5      	cmp	r5, r4
 8004846:	d104      	bne.n	8004852 <_ntoa_long+0xe0>
 8004848:	b916      	cbnz	r6, 8004850 <_ntoa_long+0xde>
 800484a:	f013 0f0c 	tst.w	r3, #12
 800484e:	d069      	beq.n	8004924 <_ntoa_long+0x1b2>
 8004850:	1e6c      	subs	r4, r5, #1
 8004852:	2c1f      	cmp	r4, #31
 8004854:	d932      	bls.n	80048bc <_ntoa_long+0x14a>
 8004856:	079b      	lsls	r3, r3, #30
 8004858:	463e      	mov	r6, r7
 800485a:	d04a      	beq.n	80048f2 <_ntoa_long+0x180>
 800485c:	f04f 0a00 	mov.w	sl, #0
 8004860:	4554      	cmp	r4, sl
 8004862:	eb0a 0206 	add.w	r2, sl, r6
 8004866:	d147      	bne.n	80048f8 <_ntoa_long+0x186>
 8004868:	9b00      	ldr	r3, [sp, #0]
 800486a:	2b00      	cmp	r3, #0
 800486c:	d156      	bne.n	800491c <_ntoa_long+0x1aa>
 800486e:	4610      	mov	r0, r2
 8004870:	b00b      	add	sp, #44	; 0x2c
 8004872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004876:	460c      	mov	r4, r1
 8004878:	e7b0      	b.n	80047dc <_ntoa_long+0x6a>
 800487a:	2c20      	cmp	r4, #32
 800487c:	d0b6      	beq.n	80047ec <_ntoa_long+0x7a>
 800487e:	a902      	add	r1, sp, #8
 8004880:	550a      	strb	r2, [r1, r4]
 8004882:	3401      	adds	r4, #1
 8004884:	e7af      	b.n	80047e6 <_ntoa_long+0x74>
 8004886:	f10d 0e08 	add.w	lr, sp, #8
 800488a:	f80e 1004 	strb.w	r1, [lr, r4]
 800488e:	3401      	adds	r4, #1
 8004890:	e7af      	b.n	80047f2 <_ntoa_long+0x80>
 8004892:	4614      	mov	r4, r2
 8004894:	2810      	cmp	r0, #16
 8004896:	d0c2      	beq.n	800481e <_ntoa_long+0xac>
 8004898:	2802      	cmp	r0, #2
 800489a:	d1cb      	bne.n	8004834 <_ntoa_long+0xc2>
 800489c:	2c1f      	cmp	r4, #31
 800489e:	d84a      	bhi.n	8004936 <_ntoa_long+0x1c4>
 80048a0:	aa0a      	add	r2, sp, #40	; 0x28
 80048a2:	4422      	add	r2, r4
 80048a4:	2162      	movs	r1, #98	; 0x62
 80048a6:	e7c2      	b.n	800482e <_ntoa_long+0xbc>
 80048a8:	2c1f      	cmp	r4, #31
 80048aa:	d844      	bhi.n	8004936 <_ntoa_long+0x1c4>
 80048ac:	aa0a      	add	r2, sp, #40	; 0x28
 80048ae:	4422      	add	r2, r4
 80048b0:	2158      	movs	r1, #88	; 0x58
 80048b2:	e7bc      	b.n	800482e <_ntoa_long+0xbc>
 80048b4:	4614      	mov	r4, r2
 80048b6:	e7ef      	b.n	8004898 <_ntoa_long+0x126>
 80048b8:	2c00      	cmp	r4, #0
 80048ba:	d1c3      	bne.n	8004844 <_ntoa_long+0xd2>
 80048bc:	b3ae      	cbz	r6, 800492a <_ntoa_long+0x1b8>
 80048be:	212d      	movs	r1, #45	; 0x2d
 80048c0:	aa0a      	add	r2, sp, #40	; 0x28
 80048c2:	4422      	add	r2, r4
 80048c4:	f802 1c20 	strb.w	r1, [r2, #-32]
 80048c8:	3401      	adds	r4, #1
 80048ca:	e7c4      	b.n	8004856 <_ntoa_long+0xe4>
 80048cc:	071a      	lsls	r2, r3, #28
 80048ce:	d5c2      	bpl.n	8004856 <_ntoa_long+0xe4>
 80048d0:	aa0a      	add	r2, sp, #40	; 0x28
 80048d2:	4422      	add	r2, r4
 80048d4:	2120      	movs	r1, #32
 80048d6:	e7f5      	b.n	80048c4 <_ntoa_long+0x152>
 80048d8:	1c73      	adds	r3, r6, #1
 80048da:	9301      	str	r3, [sp, #4]
 80048dc:	4632      	mov	r2, r6
 80048de:	464b      	mov	r3, r9
 80048e0:	4641      	mov	r1, r8
 80048e2:	2020      	movs	r0, #32
 80048e4:	47d8      	blx	fp
 80048e6:	9e01      	ldr	r6, [sp, #4]
 80048e8:	eb0a 0306 	add.w	r3, sl, r6
 80048ec:	429d      	cmp	r5, r3
 80048ee:	d8f3      	bhi.n	80048d8 <_ntoa_long+0x166>
 80048f0:	e7b4      	b.n	800485c <_ntoa_long+0xea>
 80048f2:	eba4 0a07 	sub.w	sl, r4, r7
 80048f6:	e7f7      	b.n	80048e8 <_ntoa_long+0x176>
 80048f8:	eba4 000a 	sub.w	r0, r4, sl
 80048fc:	ab02      	add	r3, sp, #8
 80048fe:	4418      	add	r0, r3
 8004900:	4641      	mov	r1, r8
 8004902:	464b      	mov	r3, r9
 8004904:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8004908:	47d8      	blx	fp
 800490a:	f10a 0a01 	add.w	sl, sl, #1
 800490e:	e7a7      	b.n	8004860 <_ntoa_long+0xee>
 8004910:	1c54      	adds	r4, r2, #1
 8004912:	464b      	mov	r3, r9
 8004914:	4641      	mov	r1, r8
 8004916:	2020      	movs	r0, #32
 8004918:	47d8      	blx	fp
 800491a:	4622      	mov	r2, r4
 800491c:	1bd3      	subs	r3, r2, r7
 800491e:	429d      	cmp	r5, r3
 8004920:	d8f6      	bhi.n	8004910 <_ntoa_long+0x19e>
 8004922:	e7a4      	b.n	800486e <_ntoa_long+0xfc>
 8004924:	2d1f      	cmp	r5, #31
 8004926:	462c      	mov	r4, r5
 8004928:	d895      	bhi.n	8004856 <_ntoa_long+0xe4>
 800492a:	0759      	lsls	r1, r3, #29
 800492c:	d5ce      	bpl.n	80048cc <_ntoa_long+0x15a>
 800492e:	aa0a      	add	r2, sp, #40	; 0x28
 8004930:	4422      	add	r2, r4
 8004932:	212b      	movs	r1, #43	; 0x2b
 8004934:	e7c6      	b.n	80048c4 <_ntoa_long+0x152>
 8004936:	42a5      	cmp	r5, r4
 8004938:	d18d      	bne.n	8004856 <_ntoa_long+0xe4>
 800493a:	e785      	b.n	8004848 <_ntoa_long+0xd6>
 800493c:	0000      	movs	r0, r0
	...

08004940 <_vsnprintf>:
 8004940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004944:	4699      	mov	r9, r3
 8004946:	4bc2      	ldr	r3, [pc, #776]	; (8004c50 <_vsnprintf+0x310>)
 8004948:	b09b      	sub	sp, #108	; 0x6c
 800494a:	2900      	cmp	r1, #0
 800494c:	bf18      	it	ne
 800494e:	4603      	movne	r3, r0
 8004950:	9207      	str	r2, [sp, #28]
 8004952:	f04f 0a00 	mov.w	sl, #0
 8004956:	460a      	mov	r2, r1
 8004958:	f8dd 8090 	ldr.w	r8, [sp, #144]	; 0x90
 800495c:	9108      	str	r1, [sp, #32]
 800495e:	930c      	str	r3, [sp, #48]	; 0x30
 8004960:	f899 0000 	ldrb.w	r0, [r9]
 8004964:	b970      	cbnz	r0, 8004984 <_vsnprintf+0x44>
 8004966:	9b07      	ldr	r3, [sp, #28]
 8004968:	2000      	movs	r0, #0
 800496a:	459a      	cmp	sl, r3
 800496c:	bf2c      	ite	cs
 800496e:	f103 32ff 	addcs.w	r2, r3, #4294967295
 8004972:	4652      	movcc	r2, sl
 8004974:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004978:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800497a:	47a0      	blx	r4
 800497c:	4650      	mov	r0, sl
 800497e:	b01b      	add	sp, #108	; 0x6c
 8004980:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004984:	2825      	cmp	r0, #37	; 0x25
 8004986:	f109 0901 	add.w	r9, r9, #1
 800498a:	d008      	beq.n	800499e <_vsnprintf+0x5e>
 800498c:	4652      	mov	r2, sl
 800498e:	f10a 0401 	add.w	r4, sl, #1
 8004992:	9b07      	ldr	r3, [sp, #28]
 8004994:	9908      	ldr	r1, [sp, #32]
 8004996:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004998:	47a8      	blx	r5
 800499a:	46a2      	mov	sl, r4
 800499c:	e7e0      	b.n	8004960 <_vsnprintf+0x20>
 800499e:	2400      	movs	r4, #0
 80049a0:	e006      	b.n	80049b0 <_vsnprintf+0x70>
 80049a2:	2b2d      	cmp	r3, #45	; 0x2d
 80049a4:	d016      	beq.n	80049d4 <_vsnprintf+0x94>
 80049a6:	2b30      	cmp	r3, #48	; 0x30
 80049a8:	d10c      	bne.n	80049c4 <_vsnprintf+0x84>
 80049aa:	f044 0401 	orr.w	r4, r4, #1
 80049ae:	4691      	mov	r9, r2
 80049b0:	464a      	mov	r2, r9
 80049b2:	f812 3b01 	ldrb.w	r3, [r2], #1
 80049b6:	2b2b      	cmp	r3, #43	; 0x2b
 80049b8:	d00f      	beq.n	80049da <_vsnprintf+0x9a>
 80049ba:	d8f2      	bhi.n	80049a2 <_vsnprintf+0x62>
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d00f      	beq.n	80049e0 <_vsnprintf+0xa0>
 80049c0:	2b23      	cmp	r3, #35	; 0x23
 80049c2:	d010      	beq.n	80049e6 <_vsnprintf+0xa6>
 80049c4:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80049c8:	2909      	cmp	r1, #9
 80049ca:	d82e      	bhi.n	8004a2a <_vsnprintf+0xea>
 80049cc:	2300      	movs	r3, #0
 80049ce:	200a      	movs	r0, #10
 80049d0:	9309      	str	r3, [sp, #36]	; 0x24
 80049d2:	e011      	b.n	80049f8 <_vsnprintf+0xb8>
 80049d4:	f044 0402 	orr.w	r4, r4, #2
 80049d8:	e7e9      	b.n	80049ae <_vsnprintf+0x6e>
 80049da:	f044 0404 	orr.w	r4, r4, #4
 80049de:	e7e6      	b.n	80049ae <_vsnprintf+0x6e>
 80049e0:	f044 0408 	orr.w	r4, r4, #8
 80049e4:	e7e3      	b.n	80049ae <_vsnprintf+0x6e>
 80049e6:	f044 0410 	orr.w	r4, r4, #16
 80049ea:	e7e0      	b.n	80049ae <_vsnprintf+0x6e>
 80049ec:	4691      	mov	r9, r2
 80049ee:	9909      	ldr	r1, [sp, #36]	; 0x24
 80049f0:	fb00 3301 	mla	r3, r0, r1, r3
 80049f4:	3b30      	subs	r3, #48	; 0x30
 80049f6:	9309      	str	r3, [sp, #36]	; 0x24
 80049f8:	464a      	mov	r2, r9
 80049fa:	f812 3b01 	ldrb.w	r3, [r2], #1
 80049fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8004a02:	2909      	cmp	r1, #9
 8004a04:	d9f2      	bls.n	80049ec <_vsnprintf+0xac>
 8004a06:	f899 3000 	ldrb.w	r3, [r9]
 8004a0a:	2b2e      	cmp	r3, #46	; 0x2e
 8004a0c:	d143      	bne.n	8004a96 <_vsnprintf+0x156>
 8004a0e:	f899 2001 	ldrb.w	r2, [r9, #1]
 8004a12:	f109 0301 	add.w	r3, r9, #1
 8004a16:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8004a1a:	2909      	cmp	r1, #9
 8004a1c:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8004a20:	d82d      	bhi.n	8004a7e <_vsnprintf+0x13e>
 8004a22:	f04f 0b00 	mov.w	fp, #0
 8004a26:	250a      	movs	r5, #10
 8004a28:	e016      	b.n	8004a58 <_vsnprintf+0x118>
 8004a2a:	2b2a      	cmp	r3, #42	; 0x2a
 8004a2c:	d10c      	bne.n	8004a48 <_vsnprintf+0x108>
 8004a2e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a32:	f108 0104 	add.w	r1, r8, #4
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	bfbc      	itt	lt
 8004a3a:	425b      	neglt	r3, r3
 8004a3c:	f044 0402 	orrlt.w	r4, r4, #2
 8004a40:	9309      	str	r3, [sp, #36]	; 0x24
 8004a42:	4688      	mov	r8, r1
 8004a44:	4691      	mov	r9, r2
 8004a46:	e7de      	b.n	8004a06 <_vsnprintf+0xc6>
 8004a48:	2300      	movs	r3, #0
 8004a4a:	9309      	str	r3, [sp, #36]	; 0x24
 8004a4c:	e7db      	b.n	8004a06 <_vsnprintf+0xc6>
 8004a4e:	460b      	mov	r3, r1
 8004a50:	fb05 2b0b 	mla	fp, r5, fp, r2
 8004a54:	f1ab 0b30 	sub.w	fp, fp, #48	; 0x30
 8004a58:	4619      	mov	r1, r3
 8004a5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004a5e:	f1a2 0030 	sub.w	r0, r2, #48	; 0x30
 8004a62:	2809      	cmp	r0, #9
 8004a64:	d9f3      	bls.n	8004a4e <_vsnprintf+0x10e>
 8004a66:	4699      	mov	r9, r3
 8004a68:	f899 2000 	ldrb.w	r2, [r9]
 8004a6c:	f109 0301 	add.w	r3, r9, #1
 8004a70:	2a6a      	cmp	r2, #106	; 0x6a
 8004a72:	d039      	beq.n	8004ae8 <_vsnprintf+0x1a8>
 8004a74:	d812      	bhi.n	8004a9c <_vsnprintf+0x15c>
 8004a76:	2a68      	cmp	r2, #104	; 0x68
 8004a78:	d020      	beq.n	8004abc <_vsnprintf+0x17c>
 8004a7a:	464b      	mov	r3, r9
 8004a7c:	e024      	b.n	8004ac8 <_vsnprintf+0x188>
 8004a7e:	2a2a      	cmp	r2, #42	; 0x2a
 8004a80:	d108      	bne.n	8004a94 <_vsnprintf+0x154>
 8004a82:	f8d8 3000 	ldr.w	r3, [r8]
 8004a86:	f109 0902 	add.w	r9, r9, #2
 8004a8a:	ea23 7be3 	bic.w	fp, r3, r3, asr #31
 8004a8e:	f108 0804 	add.w	r8, r8, #4
 8004a92:	e7e9      	b.n	8004a68 <_vsnprintf+0x128>
 8004a94:	4699      	mov	r9, r3
 8004a96:	f04f 0b00 	mov.w	fp, #0
 8004a9a:	e7e5      	b.n	8004a68 <_vsnprintf+0x128>
 8004a9c:	2a6c      	cmp	r2, #108	; 0x6c
 8004a9e:	d004      	beq.n	8004aaa <_vsnprintf+0x16a>
 8004aa0:	2a7a      	cmp	r2, #122	; 0x7a
 8004aa2:	d1ea      	bne.n	8004a7a <_vsnprintf+0x13a>
 8004aa4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8004aa8:	e00e      	b.n	8004ac8 <_vsnprintf+0x188>
 8004aaa:	f899 2001 	ldrb.w	r2, [r9, #1]
 8004aae:	2a6c      	cmp	r2, #108	; 0x6c
 8004ab0:	d1f8      	bne.n	8004aa4 <_vsnprintf+0x164>
 8004ab2:	f444 7440 	orr.w	r4, r4, #768	; 0x300
 8004ab6:	f109 0302 	add.w	r3, r9, #2
 8004aba:	e005      	b.n	8004ac8 <_vsnprintf+0x188>
 8004abc:	f899 2001 	ldrb.w	r2, [r9, #1]
 8004ac0:	2a68      	cmp	r2, #104	; 0x68
 8004ac2:	d00e      	beq.n	8004ae2 <_vsnprintf+0x1a2>
 8004ac4:	f044 0480 	orr.w	r4, r4, #128	; 0x80
 8004ac8:	4699      	mov	r9, r3
 8004aca:	f819 0b01 	ldrb.w	r0, [r9], #1
 8004ace:	2866      	cmp	r0, #102	; 0x66
 8004ad0:	d015      	beq.n	8004afe <_vsnprintf+0x1be>
 8004ad2:	f200 80c3 	bhi.w	8004c5c <_vsnprintf+0x31c>
 8004ad6:	2858      	cmp	r0, #88	; 0x58
 8004ad8:	d109      	bne.n	8004aee <_vsnprintf+0x1ae>
 8004ada:	f044 0420 	orr.w	r4, r4, #32
 8004ade:	2210      	movs	r2, #16
 8004ae0:	e0ac      	b.n	8004c3c <_vsnprintf+0x2fc>
 8004ae2:	f044 04c0 	orr.w	r4, r4, #192	; 0xc0
 8004ae6:	e7e6      	b.n	8004ab6 <_vsnprintf+0x176>
 8004ae8:	f444 7400 	orr.w	r4, r4, #512	; 0x200
 8004aec:	e7ec      	b.n	8004ac8 <_vsnprintf+0x188>
 8004aee:	f200 809c 	bhi.w	8004c2a <_vsnprintf+0x2ea>
 8004af2:	2825      	cmp	r0, #37	; 0x25
 8004af4:	f43f af4a 	beq.w	800498c <_vsnprintf+0x4c>
 8004af8:	2846      	cmp	r0, #70	; 0x46
 8004afa:	f47f af47 	bne.w	800498c <_vsnprintf+0x4c>
 8004afe:	f108 0307 	add.w	r3, r8, #7
 8004b02:	f023 0307 	bic.w	r3, r3, #7
 8004b06:	f103 0808 	add.w	r8, r3, #8
 8004b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b0e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8004b12:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b16:	2200      	movs	r2, #0
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f7fb ff4f 	bl	80009bc <__aeabi_dcmplt>
 8004b1e:	2800      	cmp	r0, #0
 8004b20:	f000 812e 	beq.w	8004d80 <_vsnprintf+0x440>
 8004b24:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004b28:	2000      	movs	r0, #0
 8004b2a:	2100      	movs	r1, #0
 8004b2c:	f7fb fb1c 	bl	8000168 <__aeabi_dsub>
 8004b30:	2301      	movs	r3, #1
 8004b32:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004b36:	930d      	str	r3, [sp, #52]	; 0x34
 8004b38:	f414 6f80 	tst.w	r4, #1024	; 0x400
 8004b3c:	bf08      	it	eq
 8004b3e:	f04f 0b06 	moveq.w	fp, #6
 8004b42:	2500      	movs	r5, #0
 8004b44:	2230      	movs	r2, #48	; 0x30
 8004b46:	ab12      	add	r3, sp, #72	; 0x48
 8004b48:	f1bb 0f09 	cmp.w	fp, #9
 8004b4c:	d905      	bls.n	8004b5a <_vsnprintf+0x21a>
 8004b4e:	54ea      	strb	r2, [r5, r3]
 8004b50:	3501      	adds	r5, #1
 8004b52:	2d20      	cmp	r5, #32
 8004b54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004b58:	d1f6      	bne.n	8004b48 <_vsnprintf+0x208>
 8004b5a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b5e:	f7fb ff6b 	bl	8000a38 <__aeabi_d2iz>
 8004b62:	4b3c      	ldr	r3, [pc, #240]	; (8004c54 <_vsnprintf+0x314>)
 8004b64:	4606      	mov	r6, r0
 8004b66:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b6e:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8004b72:	f7fb fc47 	bl	8000404 <__aeabi_i2d>
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b7e:	f7fb faf3 	bl	8000168 <__aeabi_dsub>
 8004b82:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b86:	f7fb fca7 	bl	80004d8 <__aeabi_dmul>
 8004b8a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004b8e:	f7fb ff7b 	bl	8000a88 <__aeabi_d2uiz>
 8004b92:	4607      	mov	r7, r0
 8004b94:	f7fb fc26 	bl	80003e4 <__aeabi_ui2d>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	460b      	mov	r3, r1
 8004b9c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004ba0:	f7fb fae2 	bl	8000168 <__aeabi_dsub>
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	4b2c      	ldr	r3, [pc, #176]	; (8004c58 <_vsnprintf+0x318>)
 8004ba8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8004bac:	f7fb ff24 	bl	80009f8 <__aeabi_dcmpgt>
 8004bb0:	2800      	cmp	r0, #0
 8004bb2:	f000 80e7 	beq.w	8004d84 <_vsnprintf+0x444>
 8004bb6:	3701      	adds	r7, #1
 8004bb8:	4638      	mov	r0, r7
 8004bba:	f7fb fc13 	bl	80003e4 <__aeabi_ui2d>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8004bc6:	f7fb ff03 	bl	80009d0 <__aeabi_dcmple>
 8004bca:	b108      	cbz	r0, 8004bd0 <_vsnprintf+0x290>
 8004bcc:	2700      	movs	r7, #0
 8004bce:	3601      	adds	r6, #1
 8004bd0:	a31d      	add	r3, pc, #116	; (adr r3, 8004c48 <_vsnprintf+0x308>)
 8004bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004bd6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004bda:	f7fb ff0d 	bl	80009f8 <__aeabi_dcmpgt>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	f040 817f 	bne.w	8004ee2 <_vsnprintf+0x5a2>
 8004be4:	f1bb 0f00 	cmp.w	fp, #0
 8004be8:	f000 80db 	beq.w	8004da2 <_vsnprintf+0x462>
 8004bec:	230a      	movs	r3, #10
 8004bee:	2d20      	cmp	r5, #32
 8004bf0:	f040 80f4 	bne.w	8004ddc <_vsnprintf+0x49c>
 8004bf4:	f004 0303 	and.w	r3, r4, #3
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	f040 8127 	bne.w	8004e4c <_vsnprintf+0x50c>
 8004bfe:	2130      	movs	r1, #48	; 0x30
 8004c00:	aa12      	add	r2, sp, #72	; 0x48
 8004c02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c04:	4285      	cmp	r5, r0
 8004c06:	f080 8121 	bcs.w	8004e4c <_vsnprintf+0x50c>
 8004c0a:	2d1f      	cmp	r5, #31
 8004c0c:	f240 811b 	bls.w	8004e46 <_vsnprintf+0x506>
 8004c10:	4656      	mov	r6, sl
 8004c12:	f04f 0b00 	mov.w	fp, #0
 8004c16:	455d      	cmp	r5, fp
 8004c18:	eb0b 0206 	add.w	r2, fp, r6
 8004c1c:	f040 8147 	bne.w	8004eae <_vsnprintf+0x56e>
 8004c20:	07a3      	lsls	r3, r4, #30
 8004c22:	f100 8158 	bmi.w	8004ed6 <_vsnprintf+0x596>
 8004c26:	4692      	mov	sl, r2
 8004c28:	e69a      	b.n	8004960 <_vsnprintf+0x20>
 8004c2a:	2863      	cmp	r0, #99	; 0x63
 8004c2c:	f000 815b 	beq.w	8004ee6 <_vsnprintf+0x5a6>
 8004c30:	2864      	cmp	r0, #100	; 0x64
 8004c32:	d049      	beq.n	8004cc8 <_vsnprintf+0x388>
 8004c34:	2862      	cmp	r0, #98	; 0x62
 8004c36:	f47f aea9 	bne.w	800498c <_vsnprintf+0x4c>
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	f024 040c 	bic.w	r4, r4, #12
 8004c40:	e04a      	b.n	8004cd8 <_vsnprintf+0x398>
 8004c42:	bf00      	nop
 8004c44:	f3af 8000 	nop.w
 8004c48:	ffc00000 	.word	0xffc00000
 8004c4c:	41dfffff 	.word	0x41dfffff
 8004c50:	08004771 	.word	0x08004771
 8004c54:	0800d240 	.word	0x0800d240
 8004c58:	3fe00000 	.word	0x3fe00000
 8004c5c:	2870      	cmp	r0, #112	; 0x70
 8004c5e:	f000 81b2 	beq.w	8004fc6 <_vsnprintf+0x686>
 8004c62:	d806      	bhi.n	8004c72 <_vsnprintf+0x332>
 8004c64:	2869      	cmp	r0, #105	; 0x69
 8004c66:	d02f      	beq.n	8004cc8 <_vsnprintf+0x388>
 8004c68:	286f      	cmp	r0, #111	; 0x6f
 8004c6a:	f47f ae8f 	bne.w	800498c <_vsnprintf+0x4c>
 8004c6e:	2208      	movs	r2, #8
 8004c70:	e7e4      	b.n	8004c3c <_vsnprintf+0x2fc>
 8004c72:	2875      	cmp	r0, #117	; 0x75
 8004c74:	d028      	beq.n	8004cc8 <_vsnprintf+0x388>
 8004c76:	2878      	cmp	r0, #120	; 0x78
 8004c78:	f43f af31 	beq.w	8004ade <_vsnprintf+0x19e>
 8004c7c:	2873      	cmp	r0, #115	; 0x73
 8004c7e:	f47f ae85 	bne.w	800498c <_vsnprintf+0x4c>
 8004c82:	f108 0304 	add.w	r3, r8, #4
 8004c86:	f8d8 5000 	ldr.w	r5, [r8]
 8004c8a:	f1bb 0f00 	cmp.w	fp, #0
 8004c8e:	930d      	str	r3, [sp, #52]	; 0x34
 8004c90:	bf14      	ite	ne
 8004c92:	465b      	movne	r3, fp
 8004c94:	f04f 33ff 	moveq.w	r3, #4294967295
 8004c98:	462e      	mov	r6, r5
 8004c9a:	442b      	add	r3, r5
 8004c9c:	7832      	ldrb	r2, [r6, #0]
 8004c9e:	b112      	cbz	r2, 8004ca6 <_vsnprintf+0x366>
 8004ca0:	42b3      	cmp	r3, r6
 8004ca2:	f040 8154 	bne.w	8004f4e <_vsnprintf+0x60e>
 8004ca6:	f414 6780 	ands.w	r7, r4, #1024	; 0x400
 8004caa:	eba6 0605 	sub.w	r6, r6, r5
 8004cae:	d002      	beq.n	8004cb6 <_vsnprintf+0x376>
 8004cb0:	455e      	cmp	r6, fp
 8004cb2:	bf28      	it	cs
 8004cb4:	465e      	movcs	r6, fp
 8004cb6:	f014 0302 	ands.w	r3, r4, #2
 8004cba:	930a      	str	r3, [sp, #40]	; 0x28
 8004cbc:	f000 8157 	beq.w	8004f6e <_vsnprintf+0x62e>
 8004cc0:	4652      	mov	r2, sl
 8004cc2:	eba2 0805 	sub.w	r8, r2, r5
 8004cc6:	e15b      	b.n	8004f80 <_vsnprintf+0x640>
 8004cc8:	2869      	cmp	r0, #105	; 0x69
 8004cca:	f024 0410 	bic.w	r4, r4, #16
 8004cce:	f04f 020a 	mov.w	r2, #10
 8004cd2:	d001      	beq.n	8004cd8 <_vsnprintf+0x398>
 8004cd4:	2864      	cmp	r0, #100	; 0x64
 8004cd6:	d1b1      	bne.n	8004c3c <_vsnprintf+0x2fc>
 8004cd8:	0563      	lsls	r3, r4, #21
 8004cda:	bf48      	it	mi
 8004cdc:	f024 0401 	bicmi.w	r4, r4, #1
 8004ce0:	2869      	cmp	r0, #105	; 0x69
 8004ce2:	f404 7300 	and.w	r3, r4, #512	; 0x200
 8004ce6:	d001      	beq.n	8004cec <_vsnprintf+0x3ac>
 8004ce8:	2864      	cmp	r0, #100	; 0x64
 8004cea:	d127      	bne.n	8004d3c <_vsnprintf+0x3fc>
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f47f ae37 	bne.w	8004960 <_vsnprintf+0x20>
 8004cf2:	05e7      	lsls	r7, r4, #23
 8004cf4:	f108 0504 	add.w	r5, r8, #4
 8004cf8:	d515      	bpl.n	8004d26 <_vsnprintf+0x3e6>
 8004cfa:	f8d8 3000 	ldr.w	r3, [r8]
 8004cfe:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d00:	9202      	str	r2, [sp, #8]
 8004d02:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004d06:	0fda      	lsrs	r2, r3, #31
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	9405      	str	r4, [sp, #20]
 8004d0c:	9201      	str	r2, [sp, #4]
 8004d0e:	bfb8      	it	lt
 8004d10:	425b      	neglt	r3, r3
 8004d12:	9300      	str	r3, [sp, #0]
 8004d14:	4652      	mov	r2, sl
 8004d16:	9b07      	ldr	r3, [sp, #28]
 8004d18:	9908      	ldr	r1, [sp, #32]
 8004d1a:	980c      	ldr	r0, [sp, #48]	; 0x30
 8004d1c:	f7ff fd29 	bl	8004772 <_ntoa_long>
 8004d20:	46a8      	mov	r8, r5
 8004d22:	4682      	mov	sl, r0
 8004d24:	e61c      	b.n	8004960 <_vsnprintf+0x20>
 8004d26:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8004d2e:	d001      	beq.n	8004d34 <_vsnprintf+0x3f4>
 8004d30:	b2db      	uxtb	r3, r3
 8004d32:	e7e4      	b.n	8004cfe <_vsnprintf+0x3be>
 8004d34:	0626      	lsls	r6, r4, #24
 8004d36:	bf48      	it	mi
 8004d38:	b21b      	sxthmi	r3, r3
 8004d3a:	e7e0      	b.n	8004cfe <_vsnprintf+0x3be>
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f47f ae0f 	bne.w	8004960 <_vsnprintf+0x20>
 8004d42:	05e0      	lsls	r0, r4, #23
 8004d44:	f108 0504 	add.w	r5, r8, #4
 8004d48:	d508      	bpl.n	8004d5c <_vsnprintf+0x41c>
 8004d4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d4c:	9405      	str	r4, [sp, #20]
 8004d4e:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004d52:	9202      	str	r2, [sp, #8]
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	f8d8 3000 	ldr.w	r3, [r8]
 8004d5a:	e7da      	b.n	8004d12 <_vsnprintf+0x3d2>
 8004d5c:	f014 0f40 	tst.w	r4, #64	; 0x40
 8004d60:	f8d8 3000 	ldr.w	r3, [r8]
 8004d64:	d008      	beq.n	8004d78 <_vsnprintf+0x438>
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	9202      	str	r2, [sp, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004d6e:	9405      	str	r4, [sp, #20]
 8004d70:	e9cd b103 	strd	fp, r1, [sp, #12]
 8004d74:	9201      	str	r2, [sp, #4]
 8004d76:	e7cc      	b.n	8004d12 <_vsnprintf+0x3d2>
 8004d78:	0621      	lsls	r1, r4, #24
 8004d7a:	bf48      	it	mi
 8004d7c:	b29b      	uxthmi	r3, r3
 8004d7e:	e7f3      	b.n	8004d68 <_vsnprintf+0x428>
 8004d80:	900d      	str	r0, [sp, #52]	; 0x34
 8004d82:	e6d9      	b.n	8004b38 <_vsnprintf+0x1f8>
 8004d84:	2200      	movs	r2, #0
 8004d86:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8004d8a:	4b9a      	ldr	r3, [pc, #616]	; (8004ff4 <_vsnprintf+0x6b4>)
 8004d8c:	f7fb fe0c 	bl	80009a8 <__aeabi_dcmpeq>
 8004d90:	2800      	cmp	r0, #0
 8004d92:	f43f af1d 	beq.w	8004bd0 <_vsnprintf+0x290>
 8004d96:	b117      	cbz	r7, 8004d9e <_vsnprintf+0x45e>
 8004d98:	07fb      	lsls	r3, r7, #31
 8004d9a:	f57f af19 	bpl.w	8004bd0 <_vsnprintf+0x290>
 8004d9e:	3701      	adds	r7, #1
 8004da0:	e716      	b.n	8004bd0 <_vsnprintf+0x290>
 8004da2:	4630      	mov	r0, r6
 8004da4:	f7fb fb2e 	bl	8000404 <__aeabi_i2d>
 8004da8:	4602      	mov	r2, r0
 8004daa:	460b      	mov	r3, r1
 8004dac:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004db0:	f7fb f9da 	bl	8000168 <__aeabi_dsub>
 8004db4:	2200      	movs	r2, #0
 8004db6:	4b8f      	ldr	r3, [pc, #572]	; (8004ff4 <_vsnprintf+0x6b4>)
 8004db8:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004dbc:	f7fb fe1c 	bl	80009f8 <__aeabi_dcmpgt>
 8004dc0:	b108      	cbz	r0, 8004dc6 <_vsnprintf+0x486>
 8004dc2:	3601      	adds	r6, #1
 8004dc4:	e008      	b.n	8004dd8 <_vsnprintf+0x498>
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004dcc:	4b89      	ldr	r3, [pc, #548]	; (8004ff4 <_vsnprintf+0x6b4>)
 8004dce:	f7fb fdeb 	bl	80009a8 <__aeabi_dcmpeq>
 8004dd2:	b108      	cbz	r0, 8004dd8 <_vsnprintf+0x498>
 8004dd4:	07f0      	lsls	r0, r6, #31
 8004dd6:	d4f4      	bmi.n	8004dc2 <_vsnprintf+0x482>
 8004dd8:	230a      	movs	r3, #10
 8004dda:	e031      	b.n	8004e40 <_vsnprintf+0x500>
 8004ddc:	aa12      	add	r2, sp, #72	; 0x48
 8004dde:	3501      	adds	r5, #1
 8004de0:	1951      	adds	r1, r2, r5
 8004de2:	fbb7 f2f3 	udiv	r2, r7, r3
 8004de6:	fb03 7712 	mls	r7, r3, r2, r7
 8004dea:	3730      	adds	r7, #48	; 0x30
 8004dec:	f801 7c01 	strb.w	r7, [r1, #-1]
 8004df0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004df4:	4617      	mov	r7, r2
 8004df6:	2a00      	cmp	r2, #0
 8004df8:	f47f aef9 	bne.w	8004bee <_vsnprintf+0x2ae>
 8004dfc:	2130      	movs	r1, #48	; 0x30
 8004dfe:	44ab      	add	fp, r5
 8004e00:	aa12      	add	r2, sp, #72	; 0x48
 8004e02:	2d20      	cmp	r5, #32
 8004e04:	f43f aef6 	beq.w	8004bf4 <_vsnprintf+0x2b4>
 8004e08:	45ab      	cmp	fp, r5
 8004e0a:	f105 0301 	add.w	r3, r5, #1
 8004e0e:	d106      	bne.n	8004e1e <_vsnprintf+0x4de>
 8004e10:	aa1a      	add	r2, sp, #104	; 0x68
 8004e12:	4415      	add	r5, r2
 8004e14:	222e      	movs	r2, #46	; 0x2e
 8004e16:	f805 2c20 	strb.w	r2, [r5, #-32]
 8004e1a:	461d      	mov	r5, r3
 8004e1c:	e7dc      	b.n	8004dd8 <_vsnprintf+0x498>
 8004e1e:	54a9      	strb	r1, [r5, r2]
 8004e20:	461d      	mov	r5, r3
 8004e22:	e7ee      	b.n	8004e02 <_vsnprintf+0x4c2>
 8004e24:	aa12      	add	r2, sp, #72	; 0x48
 8004e26:	3501      	adds	r5, #1
 8004e28:	1951      	adds	r1, r2, r5
 8004e2a:	fb96 f2f3 	sdiv	r2, r6, r3
 8004e2e:	fb03 6612 	mls	r6, r3, r2, r6
 8004e32:	3630      	adds	r6, #48	; 0x30
 8004e34:	f801 6c01 	strb.w	r6, [r1, #-1]
 8004e38:	4616      	mov	r6, r2
 8004e3a:	2a00      	cmp	r2, #0
 8004e3c:	f43f aeda 	beq.w	8004bf4 <_vsnprintf+0x2b4>
 8004e40:	2d1f      	cmp	r5, #31
 8004e42:	d9ef      	bls.n	8004e24 <_vsnprintf+0x4e4>
 8004e44:	e6d6      	b.n	8004bf4 <_vsnprintf+0x2b4>
 8004e46:	54a9      	strb	r1, [r5, r2]
 8004e48:	3501      	adds	r5, #1
 8004e4a:	e6da      	b.n	8004c02 <_vsnprintf+0x2c2>
 8004e4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e4e:	42aa      	cmp	r2, r5
 8004e50:	d106      	bne.n	8004e60 <_vsnprintf+0x520>
 8004e52:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e54:	b91a      	cbnz	r2, 8004e5e <_vsnprintf+0x51e>
 8004e56:	f014 0f0c 	tst.w	r4, #12
 8004e5a:	f000 80c0 	beq.w	8004fde <_vsnprintf+0x69e>
 8004e5e:	3d01      	subs	r5, #1
 8004e60:	2d1f      	cmp	r5, #31
 8004e62:	d809      	bhi.n	8004e78 <_vsnprintf+0x538>
 8004e64:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004e66:	2a00      	cmp	r2, #0
 8004e68:	f000 80bd 	beq.w	8004fe6 <_vsnprintf+0x6a6>
 8004e6c:	212d      	movs	r1, #45	; 0x2d
 8004e6e:	aa1a      	add	r2, sp, #104	; 0x68
 8004e70:	442a      	add	r2, r5
 8004e72:	f802 1c20 	strb.w	r1, [r2, #-32]
 8004e76:	3501      	adds	r5, #1
 8004e78:	4656      	mov	r6, sl
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	f47f aec9 	bne.w	8004c12 <_vsnprintf+0x2d2>
 8004e80:	eba5 070a 	sub.w	r7, r5, sl
 8004e84:	e00e      	b.n	8004ea4 <_vsnprintf+0x564>
 8004e86:	0722      	lsls	r2, r4, #28
 8004e88:	d5f6      	bpl.n	8004e78 <_vsnprintf+0x538>
 8004e8a:	aa1a      	add	r2, sp, #104	; 0x68
 8004e8c:	442a      	add	r2, r5
 8004e8e:	2120      	movs	r1, #32
 8004e90:	e7ef      	b.n	8004e72 <_vsnprintf+0x532>
 8004e92:	f106 0b01 	add.w	fp, r6, #1
 8004e96:	4632      	mov	r2, r6
 8004e98:	9b07      	ldr	r3, [sp, #28]
 8004e9a:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004e9c:	9908      	ldr	r1, [sp, #32]
 8004e9e:	2020      	movs	r0, #32
 8004ea0:	47b0      	blx	r6
 8004ea2:	465e      	mov	r6, fp
 8004ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea6:	19bb      	adds	r3, r7, r6
 8004ea8:	4293      	cmp	r3, r2
 8004eaa:	d3f2      	bcc.n	8004e92 <_vsnprintf+0x552>
 8004eac:	e6b1      	b.n	8004c12 <_vsnprintf+0x2d2>
 8004eae:	eba5 000b 	sub.w	r0, r5, fp
 8004eb2:	ab12      	add	r3, sp, #72	; 0x48
 8004eb4:	4418      	add	r0, r3
 8004eb6:	f810 0c01 	ldrb.w	r0, [r0, #-1]
 8004eba:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004ebe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004ec0:	47b8      	blx	r7
 8004ec2:	f10b 0b01 	add.w	fp, fp, #1
 8004ec6:	e6a6      	b.n	8004c16 <_vsnprintf+0x2d6>
 8004ec8:	1c54      	adds	r4, r2, #1
 8004eca:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004ece:	2020      	movs	r0, #32
 8004ed0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004ed2:	47a8      	blx	r5
 8004ed4:	4622      	mov	r2, r4
 8004ed6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ed8:	eba2 030a 	sub.w	r3, r2, sl
 8004edc:	428b      	cmp	r3, r1
 8004ede:	d3f3      	bcc.n	8004ec8 <_vsnprintf+0x588>
 8004ee0:	e6a1      	b.n	8004c26 <_vsnprintf+0x2e6>
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	e69f      	b.n	8004c26 <_vsnprintf+0x2e6>
 8004ee6:	f014 0402 	ands.w	r4, r4, #2
 8004eea:	d024      	beq.n	8004f36 <_vsnprintf+0x5f6>
 8004eec:	4656      	mov	r6, sl
 8004eee:	2501      	movs	r5, #1
 8004ef0:	9b07      	ldr	r3, [sp, #28]
 8004ef2:	4632      	mov	r2, r6
 8004ef4:	9908      	ldr	r1, [sp, #32]
 8004ef6:	f898 0000 	ldrb.w	r0, [r8]
 8004efa:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8004efc:	f108 0b04 	add.w	fp, r8, #4
 8004f00:	f106 0a01 	add.w	sl, r6, #1
 8004f04:	47b8      	blx	r7
 8004f06:	b134      	cbz	r4, 8004f16 <_vsnprintf+0x5d6>
 8004f08:	3d01      	subs	r5, #1
 8004f0a:	1bae      	subs	r6, r5, r6
 8004f0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004f0e:	eb0a 0306 	add.w	r3, sl, r6
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d311      	bcc.n	8004f3a <_vsnprintf+0x5fa>
 8004f16:	46d8      	mov	r8, fp
 8004f18:	e522      	b.n	8004960 <_vsnprintf+0x20>
 8004f1a:	9b07      	ldr	r3, [sp, #28]
 8004f1c:	4632      	mov	r2, r6
 8004f1e:	9908      	ldr	r1, [sp, #32]
 8004f20:	2020      	movs	r0, #32
 8004f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f24:	47a8      	blx	r5
 8004f26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f28:	eb0a 0607 	add.w	r6, sl, r7
 8004f2c:	1cbd      	adds	r5, r7, #2
 8004f2e:	3701      	adds	r7, #1
 8004f30:	429f      	cmp	r7, r3
 8004f32:	d3f2      	bcc.n	8004f1a <_vsnprintf+0x5da>
 8004f34:	e7dc      	b.n	8004ef0 <_vsnprintf+0x5b0>
 8004f36:	4627      	mov	r7, r4
 8004f38:	e7f5      	b.n	8004f26 <_vsnprintf+0x5e6>
 8004f3a:	4652      	mov	r2, sl
 8004f3c:	f10a 0401 	add.w	r4, sl, #1
 8004f40:	9b07      	ldr	r3, [sp, #28]
 8004f42:	9908      	ldr	r1, [sp, #32]
 8004f44:	2020      	movs	r0, #32
 8004f46:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f48:	47a8      	blx	r5
 8004f4a:	46a2      	mov	sl, r4
 8004f4c:	e7de      	b.n	8004f0c <_vsnprintf+0x5cc>
 8004f4e:	3601      	adds	r6, #1
 8004f50:	e6a4      	b.n	8004c9c <_vsnprintf+0x35c>
 8004f52:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004f56:	2020      	movs	r0, #32
 8004f58:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f5a:	47a0      	blx	r4
 8004f5c:	4633      	mov	r3, r6
 8004f5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004f60:	eb08 0203 	add.w	r2, r8, r3
 8004f64:	4299      	cmp	r1, r3
 8004f66:	f103 0601 	add.w	r6, r3, #1
 8004f6a:	d8f2      	bhi.n	8004f52 <_vsnprintf+0x612>
 8004f6c:	e6a9      	b.n	8004cc2 <_vsnprintf+0x382>
 8004f6e:	4633      	mov	r3, r6
 8004f70:	ebaa 0806 	sub.w	r8, sl, r6
 8004f74:	e7f3      	b.n	8004f5e <_vsnprintf+0x61e>
 8004f76:	469b      	mov	fp, r3
 8004f78:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8004f7c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8004f7e:	47a0      	blx	r4
 8004f80:	eb08 0205 	add.w	r2, r8, r5
 8004f84:	f815 0b01 	ldrb.w	r0, [r5], #1
 8004f88:	b130      	cbz	r0, 8004f98 <_vsnprintf+0x658>
 8004f8a:	2f00      	cmp	r7, #0
 8004f8c:	d0f4      	beq.n	8004f78 <_vsnprintf+0x638>
 8004f8e:	f10b 33ff 	add.w	r3, fp, #4294967295
 8004f92:	f1bb 0f00 	cmp.w	fp, #0
 8004f96:	d1ee      	bne.n	8004f76 <_vsnprintf+0x636>
 8004f98:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004f9a:	4692      	mov	sl, r2
 8004f9c:	b98b      	cbnz	r3, 8004fc2 <_vsnprintf+0x682>
 8004f9e:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 8004fa2:	e4dd      	b.n	8004960 <_vsnprintf+0x20>
 8004fa4:	4652      	mov	r2, sl
 8004fa6:	f10a 0401 	add.w	r4, sl, #1
 8004faa:	9b07      	ldr	r3, [sp, #28]
 8004fac:	9908      	ldr	r1, [sp, #32]
 8004fae:	2020      	movs	r0, #32
 8004fb0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004fb2:	47a8      	blx	r5
 8004fb4:	46a2      	mov	sl, r4
 8004fb6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fb8:	eb06 030a 	add.w	r3, r6, sl
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d3f1      	bcc.n	8004fa4 <_vsnprintf+0x664>
 8004fc0:	e7ed      	b.n	8004f9e <_vsnprintf+0x65e>
 8004fc2:	1ab6      	subs	r6, r6, r2
 8004fc4:	e7f7      	b.n	8004fb6 <_vsnprintf+0x676>
 8004fc6:	2308      	movs	r3, #8
 8004fc8:	e9cd b303 	strd	fp, r3, [sp, #12]
 8004fcc:	2310      	movs	r3, #16
 8004fce:	f044 0421 	orr.w	r4, r4, #33	; 0x21
 8004fd2:	9302      	str	r3, [sp, #8]
 8004fd4:	f108 0504 	add.w	r5, r8, #4
 8004fd8:	9405      	str	r4, [sp, #20]
 8004fda:	2300      	movs	r3, #0
 8004fdc:	e6ba      	b.n	8004d54 <_vsnprintf+0x414>
 8004fde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004fe0:	2a1f      	cmp	r2, #31
 8004fe2:	f63f af49 	bhi.w	8004e78 <_vsnprintf+0x538>
 8004fe6:	0761      	lsls	r1, r4, #29
 8004fe8:	f57f af4d 	bpl.w	8004e86 <_vsnprintf+0x546>
 8004fec:	aa1a      	add	r2, sp, #104	; 0x68
 8004fee:	442a      	add	r2, r5
 8004ff0:	212b      	movs	r1, #43	; 0x2b
 8004ff2:	e73e      	b.n	8004e72 <_vsnprintf+0x532>
 8004ff4:	3fe00000 	.word	0x3fe00000

08004ff8 <sprintf_>:
 8004ff8:	b40e      	push	{r1, r2, r3}
 8004ffa:	b50f      	push	{r0, r1, r2, r3, lr}
 8004ffc:	aa05      	add	r2, sp, #20
 8004ffe:	f852 3b04 	ldr.w	r3, [r2], #4
 8005002:	4601      	mov	r1, r0
 8005004:	9203      	str	r2, [sp, #12]
 8005006:	9200      	str	r2, [sp, #0]
 8005008:	4804      	ldr	r0, [pc, #16]	; (800501c <sprintf_+0x24>)
 800500a:	f04f 32ff 	mov.w	r2, #4294967295
 800500e:	f7ff fc97 	bl	8004940 <_vsnprintf>
 8005012:	b004      	add	sp, #16
 8005014:	f85d eb04 	ldr.w	lr, [sp], #4
 8005018:	b003      	add	sp, #12
 800501a:	4770      	bx	lr
 800501c:	08004769 	.word	0x08004769

08005020 <snprintf_>:
 8005020:	b40c      	push	{r2, r3}
 8005022:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005024:	aa06      	add	r2, sp, #24
 8005026:	f852 3b04 	ldr.w	r3, [r2], #4
 800502a:	9203      	str	r2, [sp, #12]
 800502c:	9200      	str	r2, [sp, #0]
 800502e:	460a      	mov	r2, r1
 8005030:	4601      	mov	r1, r0
 8005032:	4804      	ldr	r0, [pc, #16]	; (8005044 <snprintf_+0x24>)
 8005034:	f7ff fc84 	bl	8004940 <_vsnprintf>
 8005038:	b005      	add	sp, #20
 800503a:	f85d eb04 	ldr.w	lr, [sp], #4
 800503e:	b002      	add	sp, #8
 8005040:	4770      	bx	lr
 8005042:	bf00      	nop
 8005044:	08004769 	.word	0x08004769

08005048 <send_gauge>:
 8005048:	4b04      	ldr	r3, [pc, #16]	; (800505c <send_gauge+0x14>)
 800504a:	7119      	strb	r1, [r3, #4]
 800504c:	1209      	asrs	r1, r1, #8
 800504e:	70d8      	strb	r0, [r3, #3]
 8005050:	7159      	strb	r1, [r3, #5]
 8005052:	4618      	mov	r0, r3
 8005054:	2106      	movs	r1, #6
 8005056:	f7fd bacd 	b.w	80025f4 <send_buffer>
 800505a:	bf00      	nop
 800505c:	200003ca 	.word	0x200003ca

08005060 <send_chart>:
 8005060:	4b04      	ldr	r3, [pc, #16]	; (8005074 <send_chart+0x14>)
 8005062:	7119      	strb	r1, [r3, #4]
 8005064:	1209      	asrs	r1, r1, #8
 8005066:	70d8      	strb	r0, [r3, #3]
 8005068:	7159      	strb	r1, [r3, #5]
 800506a:	4618      	mov	r0, r3
 800506c:	2106      	movs	r1, #6
 800506e:	f7fd bac1 	b.w	80025f4 <send_buffer>
 8005072:	bf00      	nop
 8005074:	200003c4 	.word	0x200003c4

08005078 <send_chart_draw>:
 8005078:	4602      	mov	r2, r0
 800507a:	2104      	movs	r1, #4
 800507c:	4801      	ldr	r0, [pc, #4]	; (8005084 <send_chart_draw+0xc>)
 800507e:	f7fd bab9 	b.w	80025f4 <send_buffer>
 8005082:	bf00      	nop
 8005084:	0800d290 	.word	0x0800d290

08005088 <send_chart_config>:
 8005088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800508a:	b085      	sub	sp, #20
 800508c:	4607      	mov	r7, r0
 800508e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8005090:	460e      	mov	r6, r1
 8005092:	4615      	mov	r5, r2
 8005094:	461c      	mov	r4, r3
 8005096:	f7fb f85b 	bl	8000150 <strlen>
 800509a:	23ff      	movs	r3, #255	; 0xff
 800509c:	f88d 3004 	strb.w	r3, [sp, #4]
 80050a0:	2305      	movs	r3, #5
 80050a2:	3009      	adds	r0, #9
 80050a4:	f88d 3006 	strb.w	r3, [sp, #6]
 80050a8:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 80050ac:	f88d 0005 	strb.w	r0, [sp, #5]
 80050b0:	f88d 6008 	strb.w	r6, [sp, #8]
 80050b4:	f88d 500a 	strb.w	r5, [sp, #10]
 80050b8:	f88d 400c 	strb.w	r4, [sp, #12]
 80050bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80050be:	a801      	add	r0, sp, #4
 80050c0:	1236      	asrs	r6, r6, #8
 80050c2:	122d      	asrs	r5, r5, #8
 80050c4:	1224      	asrs	r4, r4, #8
 80050c6:	210b      	movs	r1, #11
 80050c8:	f88d 300e 	strb.w	r3, [sp, #14]
 80050cc:	f88d 7007 	strb.w	r7, [sp, #7]
 80050d0:	f88d 6009 	strb.w	r6, [sp, #9]
 80050d4:	f88d 500b 	strb.w	r5, [sp, #11]
 80050d8:	f88d 400d 	strb.w	r4, [sp, #13]
 80050dc:	f7fd fa8a 	bl	80025f4 <send_buffer>
 80050e0:	e9dd 010b 	ldrd	r0, r1, [sp, #44]	; 0x2c
 80050e4:	f7fd fa65 	bl	80025b2 <send_string>
 80050e8:	b005      	add	sp, #20
 80050ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050ec <send_gauge_config>:
 80050ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80050ee:	4607      	mov	r7, r0
 80050f0:	4618      	mov	r0, r3
 80050f2:	460d      	mov	r5, r1
 80050f4:	4614      	mov	r4, r2
 80050f6:	461e      	mov	r6, r3
 80050f8:	f7fb f82a 	bl	8000150 <strlen>
 80050fc:	23ff      	movs	r3, #255	; 0xff
 80050fe:	f88d 3000 	strb.w	r3, [sp]
 8005102:	2302      	movs	r3, #2
 8005104:	3006      	adds	r0, #6
 8005106:	f88d 0001 	strb.w	r0, [sp, #1]
 800510a:	f88d 5004 	strb.w	r5, [sp, #4]
 800510e:	f88d 4006 	strb.w	r4, [sp, #6]
 8005112:	9a08      	ldr	r2, [sp, #32]
 8005114:	4668      	mov	r0, sp
 8005116:	122d      	asrs	r5, r5, #8
 8005118:	1224      	asrs	r4, r4, #8
 800511a:	2108      	movs	r1, #8
 800511c:	f88d 3002 	strb.w	r3, [sp, #2]
 8005120:	f88d 7003 	strb.w	r7, [sp, #3]
 8005124:	f88d 5005 	strb.w	r5, [sp, #5]
 8005128:	f88d 4007 	strb.w	r4, [sp, #7]
 800512c:	f7fd fa62 	bl	80025f4 <send_buffer>
 8005130:	9908      	ldr	r1, [sp, #32]
 8005132:	4630      	mov	r0, r6
 8005134:	f7fd fa3d 	bl	80025b2 <send_string>
 8005138:	b003      	add	sp, #12
 800513a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800513c <send_config>:
 800513c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800513e:	4615      	mov	r5, r2
 8005140:	460e      	mov	r6, r1
 8005142:	4607      	mov	r7, r0
 8005144:	f7fb f804 	bl	8000150 <strlen>
 8005148:	b2c4      	uxtb	r4, r0
 800514a:	4630      	mov	r0, r6
 800514c:	f7fb f800 	bl	8000150 <strlen>
 8005150:	23ff      	movs	r3, #255	; 0xff
 8005152:	f88d 3004 	strb.w	r3, [sp, #4]
 8005156:	230b      	movs	r3, #11
 8005158:	4420      	add	r0, r4
 800515a:	3002      	adds	r0, #2
 800515c:	462a      	mov	r2, r5
 800515e:	f88d 0005 	strb.w	r0, [sp, #5]
 8005162:	2103      	movs	r1, #3
 8005164:	a801      	add	r0, sp, #4
 8005166:	f88d 3006 	strb.w	r3, [sp, #6]
 800516a:	f7fd fa43 	bl	80025f4 <send_buffer>
 800516e:	4629      	mov	r1, r5
 8005170:	4638      	mov	r0, r7
 8005172:	f7fd fa1e 	bl	80025b2 <send_string>
 8005176:	4629      	mov	r1, r5
 8005178:	203b      	movs	r0, #59	; 0x3b
 800517a:	f7fd fa0b 	bl	8002594 <send_char>
 800517e:	4629      	mov	r1, r5
 8005180:	4630      	mov	r0, r6
 8005182:	f7fd fa16 	bl	80025b2 <send_string>
 8005186:	b003      	add	sp, #12
 8005188:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800518a <ntlibc_strlen>:
 800518a:	4602      	mov	r2, r0
 800518c:	4603      	mov	r3, r0
 800518e:	1a98      	subs	r0, r3, r2
 8005190:	f813 1b01 	ldrb.w	r1, [r3], #1
 8005194:	2900      	cmp	r1, #0
 8005196:	d1fa      	bne.n	800518e <ntlibc_strlen+0x4>
 8005198:	4770      	bx	lr

0800519a <ntlibc_strcpy>:
 800519a:	4603      	mov	r3, r0
 800519c:	3901      	subs	r1, #1
 800519e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051a2:	b90a      	cbnz	r2, 80051a8 <ntlibc_strcpy+0xe>
 80051a4:	701a      	strb	r2, [r3, #0]
 80051a6:	4770      	bx	lr
 80051a8:	f803 2b01 	strb.w	r2, [r3], #1
 80051ac:	e7f7      	b.n	800519e <ntlibc_strcpy+0x4>

080051ae <ntlibc_strncmp>:
 80051ae:	b530      	push	{r4, r5, lr}
 80051b0:	2500      	movs	r5, #0
 80051b2:	5d43      	ldrb	r3, [r0, r5]
 80051b4:	b91b      	cbnz	r3, 80051be <ntlibc_strncmp+0x10>
 80051b6:	780c      	ldrb	r4, [r1, #0]
 80051b8:	b97c      	cbnz	r4, 80051da <ntlibc_strncmp+0x2c>
 80051ba:	2000      	movs	r0, #0
 80051bc:	e00a      	b.n	80051d4 <ntlibc_strncmp+0x26>
 80051be:	4295      	cmp	r5, r2
 80051c0:	dafb      	bge.n	80051ba <ntlibc_strncmp+0xc>
 80051c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80051c6:	429c      	cmp	r4, r3
 80051c8:	d005      	beq.n	80051d6 <ntlibc_strncmp+0x28>
 80051ca:	429c      	cmp	r4, r3
 80051cc:	bf94      	ite	ls
 80051ce:	2001      	movls	r0, #1
 80051d0:	f04f 30ff 	movhi.w	r0, #4294967295
 80051d4:	bd30      	pop	{r4, r5, pc}
 80051d6:	3501      	adds	r5, #1
 80051d8:	e7eb      	b.n	80051b2 <ntlibc_strncmp+0x4>
 80051da:	4295      	cmp	r5, r2
 80051dc:	daed      	bge.n	80051ba <ntlibc_strncmp+0xc>
 80051de:	e7f4      	b.n	80051ca <ntlibc_strncmp+0x1c>

080051e0 <ntlibc_toupper>:
 80051e0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80051e4:	2b19      	cmp	r3, #25
 80051e6:	bf98      	it	ls
 80051e8:	3820      	subls	r0, #32
 80051ea:	4770      	bx	lr

080051ec <ntlibc_stricmp>:
 80051ec:	b570      	push	{r4, r5, r6, lr}
 80051ee:	3901      	subs	r1, #1
 80051f0:	1e45      	subs	r5, r0, #1
 80051f2:	f815 4f01 	ldrb.w	r4, [r5, #1]!
 80051f6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80051fa:	b914      	cbnz	r4, 8005202 <ntlibc_stricmp+0x16>
 80051fc:	b90a      	cbnz	r2, 8005202 <ntlibc_stricmp+0x16>
 80051fe:	4610      	mov	r0, r2
 8005200:	e00d      	b.n	800521e <ntlibc_stricmp+0x32>
 8005202:	4620      	mov	r0, r4
 8005204:	f7ff ffec 	bl	80051e0 <ntlibc_toupper>
 8005208:	4606      	mov	r6, r0
 800520a:	4610      	mov	r0, r2
 800520c:	f7ff ffe8 	bl	80051e0 <ntlibc_toupper>
 8005210:	4286      	cmp	r6, r0
 8005212:	d0ee      	beq.n	80051f2 <ntlibc_stricmp+0x6>
 8005214:	4294      	cmp	r4, r2
 8005216:	bf2c      	ite	cs
 8005218:	2001      	movcs	r0, #1
 800521a:	f04f 30ff 	movcc.w	r0, #4294967295
 800521e:	bd70      	pop	{r4, r5, r6, pc}

08005220 <ntlibc_tolower>:
 8005220:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005224:	2b19      	cmp	r3, #25
 8005226:	bf98      	it	ls
 8005228:	3020      	addls	r0, #32
 800522a:	4770      	bx	lr

0800522c <ntlibc_strchr>:
 800522c:	7802      	ldrb	r2, [r0, #0]
 800522e:	4603      	mov	r3, r0
 8005230:	3001      	adds	r0, #1
 8005232:	b90a      	cbnz	r2, 8005238 <ntlibc_strchr+0xc>
 8005234:	4613      	mov	r3, r2
 8005236:	e001      	b.n	800523c <ntlibc_strchr+0x10>
 8005238:	428a      	cmp	r2, r1
 800523a:	d1f7      	bne.n	800522c <ntlibc_strchr>
 800523c:	4618      	mov	r0, r3
 800523e:	4770      	bx	lr

08005240 <actfunc_history_prev>:
 8005240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005242:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
 8005246:	b091      	sub	sp, #68	; 0x44
 8005248:	4604      	mov	r4, r0
 800524a:	4628      	mov	r0, r5
 800524c:	f000 fbc9 	bl	80059e2 <text_history_read_point_prev>
 8005250:	b330      	cbz	r0, 80052a0 <actfunc_history_prev+0x60>
 8005252:	2240      	movs	r2, #64	; 0x40
 8005254:	4669      	mov	r1, sp
 8005256:	4628      	mov	r0, r5
 8005258:	f000 fb9f 	bl	800599a <text_history_read>
 800525c:	1e06      	subs	r6, r0, #0
 800525e:	dd1f      	ble.n	80052a0 <actfunc_history_prev+0x60>
 8005260:	1d25      	adds	r5, r4, #4
 8005262:	4628      	mov	r0, r5
 8005264:	f000 fce8 	bl	8005c38 <vtsend_erase_line>
 8005268:	2150      	movs	r1, #80	; 0x50
 800526a:	4628      	mov	r0, r5
 800526c:	f504 7542 	add.w	r5, r4, #776	; 0x308
 8005270:	f000 fcc6 	bl	8005c00 <vtsend_cursor_backward>
 8005274:	4628      	mov	r0, r5
 8005276:	f8d4 72fc 	ldr.w	r7, [r4, #764]	; 0x2fc
 800527a:	f7ff ff86 	bl	800518a <ntlibc_strlen>
 800527e:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005282:	4601      	mov	r1, r0
 8005284:	4628      	mov	r0, r5
 8005286:	47b8      	blx	r7
 8005288:	4631      	mov	r1, r6
 800528a:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 800528e:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005292:	4668      	mov	r0, sp
 8005294:	4798      	blx	r3
 8005296:	4669      	mov	r1, sp
 8005298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800529c:	f000 fb2e 	bl	80058fc <text_editor_set_text>
 80052a0:	b011      	add	sp, #68	; 0x44
 80052a2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052a4 <actfunc_history_next>:
 80052a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052a6:	f100 05b0 	add.w	r5, r0, #176	; 0xb0
 80052aa:	b091      	sub	sp, #68	; 0x44
 80052ac:	4604      	mov	r4, r0
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 fb84 	bl	80059bc <text_history_read_point_next>
 80052b4:	b330      	cbz	r0, 8005304 <actfunc_history_next+0x60>
 80052b6:	2240      	movs	r2, #64	; 0x40
 80052b8:	4669      	mov	r1, sp
 80052ba:	4628      	mov	r0, r5
 80052bc:	f000 fb6d 	bl	800599a <text_history_read>
 80052c0:	1e06      	subs	r6, r0, #0
 80052c2:	dd1f      	ble.n	8005304 <actfunc_history_next+0x60>
 80052c4:	1d25      	adds	r5, r4, #4
 80052c6:	4628      	mov	r0, r5
 80052c8:	f000 fcb6 	bl	8005c38 <vtsend_erase_line>
 80052cc:	2150      	movs	r1, #80	; 0x50
 80052ce:	4628      	mov	r0, r5
 80052d0:	f504 7542 	add.w	r5, r4, #776	; 0x308
 80052d4:	f000 fc94 	bl	8005c00 <vtsend_cursor_backward>
 80052d8:	4628      	mov	r0, r5
 80052da:	f8d4 72fc 	ldr.w	r7, [r4, #764]	; 0x2fc
 80052de:	f7ff ff54 	bl	800518a <ntlibc_strlen>
 80052e2:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80052e6:	4601      	mov	r1, r0
 80052e8:	4628      	mov	r0, r5
 80052ea:	47b8      	blx	r7
 80052ec:	4631      	mov	r1, r6
 80052ee:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80052f2:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80052f6:	4668      	mov	r0, sp
 80052f8:	4798      	blx	r3
 80052fa:	4669      	mov	r1, sp
 80052fc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005300:	f000 fafc 	bl	80058fc <text_editor_set_text>
 8005304:	b011      	add	sp, #68	; 0x44
 8005306:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005308 <actfunc_cancel>:
 8005308:	b570      	push	{r4, r5, r6, lr}
 800530a:	4604      	mov	r4, r0
 800530c:	4d11      	ldr	r5, [pc, #68]	; (8005354 <actfunc_cancel+0x4c>)
 800530e:	3068      	adds	r0, #104	; 0x68
 8005310:	f000 fb11 	bl	8005936 <text_editor_clear>
 8005314:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005318:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800531c:	2102      	movs	r1, #2
 800531e:	480e      	ldr	r0, [pc, #56]	; (8005358 <actfunc_cancel+0x50>)
 8005320:	4798      	blx	r3
 8005322:	4628      	mov	r0, r5
 8005324:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005328:	f7ff ff2f 	bl	800518a <ntlibc_strlen>
 800532c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005330:	4601      	mov	r1, r0
 8005332:	4628      	mov	r0, r5
 8005334:	f504 7542 	add.w	r5, r4, #776	; 0x308
 8005338:	47b0      	blx	r6
 800533a:	4628      	mov	r0, r5
 800533c:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005340:	f7ff ff23 	bl	800518a <ntlibc_strlen>
 8005344:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005348:	4601      	mov	r1, r0
 800534a:	4633      	mov	r3, r6
 800534c:	4628      	mov	r0, r5
 800534e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005352:	4718      	bx	r3
 8005354:	0800ccb7 	.word	0x0800ccb7
 8005358:	0800d294 	.word	0x0800d294

0800535c <actfunc_enter>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4604      	mov	r4, r0
 8005360:	b090      	sub	sp, #64	; 0x40
 8005362:	f100 0568 	add.w	r5, r0, #104	; 0x68
 8005366:	2240      	movs	r2, #64	; 0x40
 8005368:	4669      	mov	r1, sp
 800536a:	4628      	mov	r0, r5
 800536c:	f000 fad6 	bl	800591c <text_editor_get_text>
 8005370:	4628      	mov	r0, r5
 8005372:	4d13      	ldr	r5, [pc, #76]	; (80053c0 <actfunc_enter+0x64>)
 8005374:	f000 fadf 	bl	8005936 <text_editor_clear>
 8005378:	4669      	mov	r1, sp
 800537a:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 800537e:	f000 faec 	bl	800595a <text_history_write>
 8005382:	4628      	mov	r0, r5
 8005384:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005388:	f7ff feff 	bl	800518a <ntlibc_strlen>
 800538c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005390:	4601      	mov	r1, r0
 8005392:	4628      	mov	r0, r5
 8005394:	47b0      	blx	r6
 8005396:	f504 7542 	add.w	r5, r4, #776	; 0x308
 800539a:	f8d4 3300 	ldr.w	r3, [r4, #768]	; 0x300
 800539e:	f8d4 1304 	ldr.w	r1, [r4, #772]	; 0x304
 80053a2:	4668      	mov	r0, sp
 80053a4:	4798      	blx	r3
 80053a6:	4628      	mov	r0, r5
 80053a8:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 80053ac:	f7ff feed 	bl	800518a <ntlibc_strlen>
 80053b0:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80053b4:	4601      	mov	r1, r0
 80053b6:	4628      	mov	r0, r5
 80053b8:	47b0      	blx	r6
 80053ba:	b010      	add	sp, #64	; 0x40
 80053bc:	bd70      	pop	{r4, r5, r6, pc}
 80053be:	bf00      	nop
 80053c0:	0800ccb7 	.word	0x0800ccb7

080053c4 <actfunc_suggest>:
 80053c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80053c8:	f8d0 12b8 	ldr.w	r1, [r0, #696]	; 0x2b8
 80053cc:	b093      	sub	sp, #76	; 0x4c
 80053ce:	2900      	cmp	r1, #0
 80053d0:	4604      	mov	r4, r0
 80053d2:	f500 752f 	add.w	r5, r0, #700	; 0x2bc
 80053d6:	f100 0668 	add.w	r6, r0, #104	; 0x68
 80053da:	da39      	bge.n	8005450 <actfunc_suggest+0x8c>
 80053dc:	2240      	movs	r2, #64	; 0x40
 80053de:	4629      	mov	r1, r5
 80053e0:	4630      	mov	r0, r6
 80053e2:	f000 fa9b 	bl	800591c <text_editor_get_text>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	dd2f      	ble.n	800544a <actfunc_suggest+0x86>
 80053ea:	2340      	movs	r3, #64	; 0x40
 80053ec:	2100      	movs	r1, #0
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	f8c4 12b8 	str.w	r1, [r4, #696]	; 0x2b8
 80053f4:	ab02      	add	r3, sp, #8
 80053f6:	462a      	mov	r2, r5
 80053f8:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 80053fc:	f000 fb04 	bl	8005a08 <text_history_find>
 8005400:	2800      	cmp	r0, #0
 8005402:	d16f      	bne.n	80054e4 <actfunc_suggest+0x120>
 8005404:	a802      	add	r0, sp, #8
 8005406:	f7ff fec0 	bl	800518a <ntlibc_strlen>
 800540a:	1d25      	adds	r5, r4, #4
 800540c:	4607      	mov	r7, r0
 800540e:	4628      	mov	r0, r5
 8005410:	f000 fc12 	bl	8005c38 <vtsend_erase_line>
 8005414:	2150      	movs	r1, #80	; 0x50
 8005416:	4628      	mov	r0, r5
 8005418:	f504 7542 	add.w	r5, r4, #776	; 0x308
 800541c:	f000 fbf0 	bl	8005c00 <vtsend_cursor_backward>
 8005420:	4628      	mov	r0, r5
 8005422:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 8005426:	f7ff feb0 	bl	800518a <ntlibc_strlen>
 800542a:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800542e:	4601      	mov	r1, r0
 8005430:	4628      	mov	r0, r5
 8005432:	47c0      	blx	r8
 8005434:	4639      	mov	r1, r7
 8005436:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 800543a:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800543e:	a802      	add	r0, sp, #8
 8005440:	4798      	blx	r3
 8005442:	a902      	add	r1, sp, #8
 8005444:	4630      	mov	r0, r6
 8005446:	f000 fa59 	bl	80058fc <text_editor_set_text>
 800544a:	b013      	add	sp, #76	; 0x4c
 800544c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005450:	2340      	movs	r3, #64	; 0x40
 8005452:	3101      	adds	r1, #1
 8005454:	f8c0 12b8 	str.w	r1, [r0, #696]	; 0x2b8
 8005458:	462a      	mov	r2, r5
 800545a:	9300      	str	r3, [sp, #0]
 800545c:	30b0      	adds	r0, #176	; 0xb0
 800545e:	ab02      	add	r3, sp, #8
 8005460:	f000 fad2 	bl	8005a08 <text_history_find>
 8005464:	f104 0804 	add.w	r8, r4, #4
 8005468:	f504 7742 	add.w	r7, r4, #776	; 0x308
 800546c:	b9d0      	cbnz	r0, 80054a4 <actfunc_suggest+0xe0>
 800546e:	a802      	add	r0, sp, #8
 8005470:	f7ff fe8b 	bl	800518a <ntlibc_strlen>
 8005474:	4605      	mov	r5, r0
 8005476:	4640      	mov	r0, r8
 8005478:	f000 fbde 	bl	8005c38 <vtsend_erase_line>
 800547c:	2150      	movs	r1, #80	; 0x50
 800547e:	4640      	mov	r0, r8
 8005480:	f000 fbbe 	bl	8005c00 <vtsend_cursor_backward>
 8005484:	4638      	mov	r0, r7
 8005486:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 800548a:	f7ff fe7e 	bl	800518a <ntlibc_strlen>
 800548e:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005492:	4601      	mov	r1, r0
 8005494:	4638      	mov	r0, r7
 8005496:	47c0      	blx	r8
 8005498:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 800549c:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80054a0:	4629      	mov	r1, r5
 80054a2:	e7cc      	b.n	800543e <actfunc_suggest+0x7a>
 80054a4:	4628      	mov	r0, r5
 80054a6:	f7ff fe70 	bl	800518a <ntlibc_strlen>
 80054aa:	4681      	mov	r9, r0
 80054ac:	4640      	mov	r0, r8
 80054ae:	f000 fbc3 	bl	8005c38 <vtsend_erase_line>
 80054b2:	2150      	movs	r1, #80	; 0x50
 80054b4:	4640      	mov	r0, r8
 80054b6:	f000 fba3 	bl	8005c00 <vtsend_cursor_backward>
 80054ba:	4638      	mov	r0, r7
 80054bc:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 80054c0:	f7ff fe63 	bl	800518a <ntlibc_strlen>
 80054c4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80054c8:	4601      	mov	r1, r0
 80054ca:	4638      	mov	r0, r7
 80054cc:	47c0      	blx	r8
 80054ce:	4649      	mov	r1, r9
 80054d0:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80054d4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80054d8:	4628      	mov	r0, r5
 80054da:	4798      	blx	r3
 80054dc:	4629      	mov	r1, r5
 80054de:	4630      	mov	r0, r6
 80054e0:	f000 fa0c 	bl	80058fc <text_editor_set_text>
 80054e4:	f04f 33ff 	mov.w	r3, #4294967295
 80054e8:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 80054ec:	e7ad      	b.n	800544a <actfunc_suggest+0x86>
	...

080054f0 <actfunc_backspace>:
 80054f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054f2:	f100 0668 	add.w	r6, r0, #104	; 0x68
 80054f6:	b091      	sub	sp, #68	; 0x44
 80054f8:	4604      	mov	r4, r0
 80054fa:	4630      	mov	r0, r6
 80054fc:	f000 f9a2 	bl	8005844 <text_editor_backspace>
 8005500:	b340      	cbz	r0, 8005554 <actfunc_backspace+0x64>
 8005502:	2240      	movs	r2, #64	; 0x40
 8005504:	4669      	mov	r1, sp
 8005506:	4630      	mov	r0, r6
 8005508:	f000 fa08 	bl	800591c <text_editor_get_text>
 800550c:	4605      	mov	r5, r0
 800550e:	4630      	mov	r0, r6
 8005510:	f000 f9cf 	bl	80058b2 <text_editor_cursor_get_position>
 8005514:	1d26      	adds	r6, r4, #4
 8005516:	1a2d      	subs	r5, r5, r0
 8005518:	4607      	mov	r7, r0
 800551a:	2101      	movs	r1, #1
 800551c:	4630      	mov	r0, r6
 800551e:	f000 fb6f 	bl	8005c00 <vtsend_cursor_backward>
 8005522:	2d00      	cmp	r5, #0
 8005524:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005528:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800552c:	dd14      	ble.n	8005558 <actfunc_backspace+0x68>
 800552e:	4629      	mov	r1, r5
 8005530:	eb0d 0007 	add.w	r0, sp, r7
 8005534:	4798      	blx	r3
 8005536:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 800553a:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800553e:	2101      	movs	r1, #1
 8005540:	4809      	ldr	r0, [pc, #36]	; (8005568 <actfunc_backspace+0x78>)
 8005542:	4798      	blx	r3
 8005544:	2400      	movs	r4, #0
 8005546:	2101      	movs	r1, #1
 8005548:	4630      	mov	r0, r6
 800554a:	3401      	adds	r4, #1
 800554c:	f000 fb58 	bl	8005c00 <vtsend_cursor_backward>
 8005550:	42a5      	cmp	r5, r4
 8005552:	daf8      	bge.n	8005546 <actfunc_backspace+0x56>
 8005554:	b011      	add	sp, #68	; 0x44
 8005556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005558:	2101      	movs	r1, #1
 800555a:	4803      	ldr	r0, [pc, #12]	; (8005568 <actfunc_backspace+0x78>)
 800555c:	4798      	blx	r3
 800555e:	2101      	movs	r1, #1
 8005560:	4630      	mov	r0, r6
 8005562:	f000 fb4d 	bl	8005c00 <vtsend_cursor_backward>
 8005566:	e7f5      	b.n	8005554 <actfunc_backspace+0x64>
 8005568:	0800cf4b 	.word	0x0800cf4b

0800556c <actfunc_cursor_right>:
 800556c:	b510      	push	{r4, lr}
 800556e:	4604      	mov	r4, r0
 8005570:	3068      	adds	r0, #104	; 0x68
 8005572:	f000 f9ba 	bl	80058ea <text_editor_cursor_right>
 8005576:	b128      	cbz	r0, 8005584 <actfunc_cursor_right+0x18>
 8005578:	1d20      	adds	r0, r4, #4
 800557a:	2101      	movs	r1, #1
 800557c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005580:	f000 bb22 	b.w	8005bc8 <vtsend_cursor_forward>
 8005584:	bd10      	pop	{r4, pc}

08005586 <actfunc_cursor_tail>:
 8005586:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800558a:	f100 0568 	add.w	r5, r0, #104	; 0x68
 800558e:	b090      	sub	sp, #64	; 0x40
 8005590:	4604      	mov	r4, r0
 8005592:	2240      	movs	r2, #64	; 0x40
 8005594:	4669      	mov	r1, sp
 8005596:	4628      	mov	r0, r5
 8005598:	f000 f9c0 	bl	800591c <text_editor_get_text>
 800559c:	4668      	mov	r0, sp
 800559e:	f7ff fdf4 	bl	800518a <ntlibc_strlen>
 80055a2:	f504 7642 	add.w	r6, r4, #776	; 0x308
 80055a6:	4607      	mov	r7, r0
 80055a8:	2150      	movs	r1, #80	; 0x50
 80055aa:	1d20      	adds	r0, r4, #4
 80055ac:	f000 fb28 	bl	8005c00 <vtsend_cursor_backward>
 80055b0:	4630      	mov	r0, r6
 80055b2:	f8d4 82fc 	ldr.w	r8, [r4, #764]	; 0x2fc
 80055b6:	f7ff fde8 	bl	800518a <ntlibc_strlen>
 80055ba:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80055be:	4601      	mov	r1, r0
 80055c0:	4630      	mov	r0, r6
 80055c2:	47c0      	blx	r8
 80055c4:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80055c8:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80055cc:	4639      	mov	r1, r7
 80055ce:	4668      	mov	r0, sp
 80055d0:	4798      	blx	r3
 80055d2:	4628      	mov	r0, r5
 80055d4:	f000 f978 	bl	80058c8 <text_editor_cursor_tail>
 80055d8:	b010      	add	sp, #64	; 0x40
 80055da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080055e0 <actfunc_delete>:
 80055e0:	b570      	push	{r4, r5, r6, lr}
 80055e2:	f100 0668 	add.w	r6, r0, #104	; 0x68
 80055e6:	b090      	sub	sp, #64	; 0x40
 80055e8:	4604      	mov	r4, r0
 80055ea:	4630      	mov	r0, r6
 80055ec:	f000 f946 	bl	800587c <text_editor_delete>
 80055f0:	b318      	cbz	r0, 800563a <actfunc_delete+0x5a>
 80055f2:	2240      	movs	r2, #64	; 0x40
 80055f4:	4669      	mov	r1, sp
 80055f6:	4630      	mov	r0, r6
 80055f8:	f000 f990 	bl	800591c <text_editor_get_text>
 80055fc:	4605      	mov	r5, r0
 80055fe:	4630      	mov	r0, r6
 8005600:	f000 f957 	bl	80058b2 <text_editor_cursor_get_position>
 8005604:	1a2d      	subs	r5, r5, r0
 8005606:	2d00      	cmp	r5, #0
 8005608:	f104 0604 	add.w	r6, r4, #4
 800560c:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005610:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005614:	dd13      	ble.n	800563e <actfunc_delete+0x5e>
 8005616:	4629      	mov	r1, r5
 8005618:	4468      	add	r0, sp
 800561a:	4798      	blx	r3
 800561c:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005620:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005624:	2101      	movs	r1, #1
 8005626:	480a      	ldr	r0, [pc, #40]	; (8005650 <actfunc_delete+0x70>)
 8005628:	4798      	blx	r3
 800562a:	2400      	movs	r4, #0
 800562c:	2101      	movs	r1, #1
 800562e:	4630      	mov	r0, r6
 8005630:	3401      	adds	r4, #1
 8005632:	f000 fae5 	bl	8005c00 <vtsend_cursor_backward>
 8005636:	42a5      	cmp	r5, r4
 8005638:	daf8      	bge.n	800562c <actfunc_delete+0x4c>
 800563a:	b010      	add	sp, #64	; 0x40
 800563c:	bd70      	pop	{r4, r5, r6, pc}
 800563e:	2101      	movs	r1, #1
 8005640:	4803      	ldr	r0, [pc, #12]	; (8005650 <actfunc_delete+0x70>)
 8005642:	4798      	blx	r3
 8005644:	2101      	movs	r1, #1
 8005646:	4630      	mov	r0, r6
 8005648:	f000 fada 	bl	8005c00 <vtsend_cursor_backward>
 800564c:	e7f5      	b.n	800563a <actfunc_delete+0x5a>
 800564e:	bf00      	nop
 8005650:	0800cf4b 	.word	0x0800cf4b

08005654 <actfunc_cursor_left>:
 8005654:	b510      	push	{r4, lr}
 8005656:	4604      	mov	r4, r0
 8005658:	3068      	adds	r0, #104	; 0x68
 800565a:	f000 f93d 	bl	80058d8 <text_editor_cursor_left>
 800565e:	b128      	cbz	r0, 800566c <actfunc_cursor_left+0x18>
 8005660:	1d20      	adds	r0, r4, #4
 8005662:	2101      	movs	r1, #1
 8005664:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005668:	f000 baca 	b.w	8005c00 <vtsend_cursor_backward>
 800566c:	bd10      	pop	{r4, pc}

0800566e <actfunc_cursor_head>:
 800566e:	b570      	push	{r4, r5, r6, lr}
 8005670:	4604      	mov	r4, r0
 8005672:	2150      	movs	r1, #80	; 0x50
 8005674:	f504 7542 	add.w	r5, r4, #776	; 0x308
 8005678:	3004      	adds	r0, #4
 800567a:	f000 fac1 	bl	8005c00 <vtsend_cursor_backward>
 800567e:	4628      	mov	r0, r5
 8005680:	f8d4 62fc 	ldr.w	r6, [r4, #764]	; 0x2fc
 8005684:	f7ff fd81 	bl	800518a <ntlibc_strlen>
 8005688:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800568c:	4601      	mov	r1, r0
 800568e:	4628      	mov	r0, r5
 8005690:	47b0      	blx	r6
 8005692:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005696:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800569a:	f000 b90c 	b.w	80058b6 <text_editor_cursor_head>
	...

080056a0 <vtrecv_callback>:
 80056a0:	2300      	movs	r3, #0
 80056a2:	b570      	push	{r4, r5, r6, lr}
 80056a4:	4c24      	ldr	r4, [pc, #144]	; (8005738 <vtrecv_callback+0x98>)
 80056a6:	b092      	sub	sp, #72	; 0x48
 80056a8:	5d1e      	ldrb	r6, [r3, r4]
 80056aa:	18e5      	adds	r5, r4, r3
 80056ac:	428e      	cmp	r6, r1
 80056ae:	d107      	bne.n	80056c0 <vtrecv_callback+0x20>
 80056b0:	786e      	ldrb	r6, [r5, #1]
 80056b2:	4296      	cmp	r6, r2
 80056b4:	d104      	bne.n	80056c0 <vtrecv_callback+0x20>
 80056b6:	686b      	ldr	r3, [r5, #4]
 80056b8:	6d80      	ldr	r0, [r0, #88]	; 0x58
 80056ba:	4798      	blx	r3
 80056bc:	b012      	add	sp, #72	; 0x48
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	3308      	adds	r3, #8
 80056c2:	2b88      	cmp	r3, #136	; 0x88
 80056c4:	d1f0      	bne.n	80056a8 <vtrecv_callback+0x8>
 80056c6:	290c      	cmp	r1, #12
 80056c8:	d1f8      	bne.n	80056bc <vtrecv_callback+0x1c>
 80056ca:	f04f 33ff 	mov.w	r3, #4294967295
 80056ce:	6d84      	ldr	r4, [r0, #88]	; 0x58
 80056d0:	4611      	mov	r1, r2
 80056d2:	f104 0668 	add.w	r6, r4, #104	; 0x68
 80056d6:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 80056da:	4630      	mov	r0, r6
 80056dc:	f88d 2007 	strb.w	r2, [sp, #7]
 80056e0:	f000 f891 	bl	8005806 <text_editor_insert>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d0e9      	beq.n	80056bc <vtrecv_callback+0x1c>
 80056e8:	2240      	movs	r2, #64	; 0x40
 80056ea:	a902      	add	r1, sp, #8
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 f915 	bl	800591c <text_editor_get_text>
 80056f2:	4605      	mov	r5, r0
 80056f4:	4630      	mov	r0, r6
 80056f6:	f000 f8dc 	bl	80058b2 <text_editor_cursor_get_position>
 80056fa:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 80056fe:	1a2d      	subs	r5, r5, r0
 8005700:	4606      	mov	r6, r0
 8005702:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 8005706:	2101      	movs	r1, #1
 8005708:	f10d 0007 	add.w	r0, sp, #7
 800570c:	4798      	blx	r3
 800570e:	2d00      	cmp	r5, #0
 8005710:	ddd4      	ble.n	80056bc <vtrecv_callback+0x1c>
 8005712:	a802      	add	r0, sp, #8
 8005714:	f8d4 32fc 	ldr.w	r3, [r4, #764]	; 0x2fc
 8005718:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 800571c:	4430      	add	r0, r6
 800571e:	4629      	mov	r1, r5
 8005720:	4798      	blx	r3
 8005722:	2600      	movs	r6, #0
 8005724:	3404      	adds	r4, #4
 8005726:	2101      	movs	r1, #1
 8005728:	4620      	mov	r0, r4
 800572a:	3601      	adds	r6, #1
 800572c:	f000 fa68 	bl	8005c00 <vtsend_cursor_backward>
 8005730:	42b5      	cmp	r5, r6
 8005732:	d1f8      	bne.n	8005726 <vtrecv_callback+0x86>
 8005734:	e7c2      	b.n	80056bc <vtrecv_callback+0x1c>
 8005736:	bf00      	nop
 8005738:	0800d298 	.word	0x0800d298

0800573c <ntshell_init>:
 800573c:	b570      	push	{r4, r5, r6, lr}
 800573e:	4604      	mov	r4, r0
 8005740:	461e      	mov	r6, r3
 8005742:	460d      	mov	r5, r1
 8005744:	f8c4 12fc 	str.w	r1, [r4, #764]	; 0x2fc
 8005748:	f500 7042 	add.w	r0, r0, #776	; 0x308
 800574c:	f840 2c08 	str.w	r2, [r0, #-8]
 8005750:	490f      	ldr	r1, [pc, #60]	; (8005790 <ntshell_init+0x54>)
 8005752:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
 8005756:	f7ff fd20 	bl	800519a <ntlibc_strcpy>
 800575a:	4632      	mov	r2, r6
 800575c:	4629      	mov	r1, r5
 800575e:	6664      	str	r4, [r4, #100]	; 0x64
 8005760:	1d20      	adds	r0, r4, #4
 8005762:	f000 fa2d 	bl	8005bc0 <vtsend_init>
 8005766:	490b      	ldr	r1, [pc, #44]	; (8005794 <ntshell_init+0x58>)
 8005768:	f104 000c 	add.w	r0, r4, #12
 800576c:	f000 f9c9 	bl	8005b02 <vtrecv_init>
 8005770:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005774:	f000 f842 	bl	80057fc <text_editor_init>
 8005778:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 800577c:	f000 f8e0 	bl	8005940 <text_history_init>
 8005780:	f04f 33ff 	mov.w	r3, #4294967295
 8005784:	f8c4 32b8 	str.w	r3, [r4, #696]	; 0x2b8
 8005788:	f244 3367 	movw	r3, #17255	; 0x4367
 800578c:	6023      	str	r3, [r4, #0]
 800578e:	bd70      	pop	{r4, r5, r6, pc}
 8005790:	0800db95 	.word	0x0800db95
 8005794:	080056a1 	.word	0x080056a1

08005798 <ntshell_show_promt>:
 8005798:	f244 3367 	movw	r3, #17255	; 0x4367
 800579c:	6802      	ldr	r2, [r0, #0]
 800579e:	b570      	push	{r4, r5, r6, lr}
 80057a0:	429a      	cmp	r2, r3
 80057a2:	4604      	mov	r4, r0
 80057a4:	d10e      	bne.n	80057c4 <ntshell_show_promt+0x2c>
 80057a6:	f500 7542 	add.w	r5, r0, #776	; 0x308
 80057aa:	f8d0 62fc 	ldr.w	r6, [r0, #764]	; 0x2fc
 80057ae:	4628      	mov	r0, r5
 80057b0:	f7ff fceb 	bl	800518a <ntlibc_strlen>
 80057b4:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
 80057b8:	4601      	mov	r1, r0
 80057ba:	4633      	mov	r3, r6
 80057bc:	4628      	mov	r0, r5
 80057be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80057c2:	4718      	bx	r3
 80057c4:	bd70      	pop	{r4, r5, r6, pc}

080057c6 <ntshell_execute_nb>:
 80057c6:	f244 3367 	movw	r3, #17255	; 0x4367
 80057ca:	b507      	push	{r0, r1, r2, lr}
 80057cc:	6802      	ldr	r2, [r0, #0]
 80057ce:	f88d 1007 	strb.w	r1, [sp, #7]
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d105      	bne.n	80057e2 <ntshell_execute_nb+0x1c>
 80057d6:	2201      	movs	r2, #1
 80057d8:	f10d 0107 	add.w	r1, sp, #7
 80057dc:	300c      	adds	r0, #12
 80057de:	f000 f999 	bl	8005b14 <vtrecv_execute>
 80057e2:	b003      	add	sp, #12
 80057e4:	f85d fb04 	ldr.w	pc, [sp], #4

080057e8 <ntshell_set_prompt>:
 80057e8:	f244 3367 	movw	r3, #17255	; 0x4367
 80057ec:	6802      	ldr	r2, [r0, #0]
 80057ee:	429a      	cmp	r2, r3
 80057f0:	d103      	bne.n	80057fa <ntshell_set_prompt+0x12>
 80057f2:	f500 7042 	add.w	r0, r0, #776	; 0x308
 80057f6:	f7ff bcd0 	b.w	800519a <ntlibc_strcpy>
 80057fa:	4770      	bx	lr

080057fc <text_editor_init>:
 80057fc:	2300      	movs	r3, #0
 80057fe:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8005802:	7003      	strb	r3, [r0, #0]
 8005804:	4770      	bx	lr

08005806 <text_editor_insert>:
 8005806:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005808:	b570      	push	{r4, r5, r6, lr}
 800580a:	2b3e      	cmp	r3, #62	; 0x3e
 800580c:	dc18      	bgt.n	8005840 <text_editor_insert+0x3a>
 800580e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8005810:	1a9c      	subs	r4, r3, r2
 8005812:	3301      	adds	r3, #1
 8005814:	4403      	add	r3, r0
 8005816:	461d      	mov	r5, r3
 8005818:	2200      	movs	r2, #0
 800581a:	4294      	cmp	r4, r2
 800581c:	da0a      	bge.n	8005834 <text_editor_insert+0x2e>
 800581e:	2200      	movs	r2, #0
 8005820:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005822:	54c1      	strb	r1, [r0, r3]
 8005824:	3301      	adds	r3, #1
 8005826:	6403      	str	r3, [r0, #64]	; 0x40
 8005828:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800582a:	3301      	adds	r3, #1
 800582c:	6443      	str	r3, [r0, #68]	; 0x44
 800582e:	54c2      	strb	r2, [r0, r3]
 8005830:	2001      	movs	r0, #1
 8005832:	bd70      	pop	{r4, r5, r6, pc}
 8005834:	f815 6d01 	ldrb.w	r6, [r5, #-1]!
 8005838:	3201      	adds	r2, #1
 800583a:	f803 6901 	strb.w	r6, [r3], #-1
 800583e:	e7ec      	b.n	800581a <text_editor_insert+0x14>
 8005840:	2000      	movs	r0, #0
 8005842:	e7f6      	b.n	8005832 <text_editor_insert+0x2c>

08005844 <text_editor_backspace>:
 8005844:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8005846:	b530      	push	{r4, r5, lr}
 8005848:	2b00      	cmp	r3, #0
 800584a:	dd15      	ble.n	8005878 <text_editor_backspace+0x34>
 800584c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800584e:	1ad5      	subs	r5, r2, r3
 8005850:	3b01      	subs	r3, #1
 8005852:	18c1      	adds	r1, r0, r3
 8005854:	3a01      	subs	r2, #1
 8005856:	6403      	str	r3, [r0, #64]	; 0x40
 8005858:	6442      	str	r2, [r0, #68]	; 0x44
 800585a:	460b      	mov	r3, r1
 800585c:	460a      	mov	r2, r1
 800585e:	1a5c      	subs	r4, r3, r1
 8005860:	42a5      	cmp	r5, r4
 8005862:	dc04      	bgt.n	800586e <text_editor_backspace+0x2a>
 8005864:	2200      	movs	r2, #0
 8005866:	6c43      	ldr	r3, [r0, #68]	; 0x44
 8005868:	54c2      	strb	r2, [r0, r3]
 800586a:	2001      	movs	r0, #1
 800586c:	bd30      	pop	{r4, r5, pc}
 800586e:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8005872:	f803 4b01 	strb.w	r4, [r3], #1
 8005876:	e7f2      	b.n	800585e <text_editor_backspace+0x1a>
 8005878:	2000      	movs	r0, #0
 800587a:	e7f7      	b.n	800586c <text_editor_backspace+0x28>

0800587c <text_editor_delete>:
 800587c:	e9d0 3210 	ldrd	r3, r2, [r0, #64]	; 0x40
 8005880:	4293      	cmp	r3, r2
 8005882:	b530      	push	{r4, r5, lr}
 8005884:	da13      	bge.n	80058ae <text_editor_delete+0x32>
 8005886:	1ad1      	subs	r1, r2, r3
 8005888:	4403      	add	r3, r0
 800588a:	3a01      	subs	r2, #1
 800588c:	6442      	str	r2, [r0, #68]	; 0x44
 800588e:	461c      	mov	r4, r3
 8005890:	461a      	mov	r2, r3
 8005892:	3901      	subs	r1, #1
 8005894:	1ad5      	subs	r5, r2, r3
 8005896:	42a9      	cmp	r1, r5
 8005898:	dc04      	bgt.n	80058a4 <text_editor_delete+0x28>
 800589a:	2200      	movs	r2, #0
 800589c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800589e:	54c2      	strb	r2, [r0, r3]
 80058a0:	2001      	movs	r0, #1
 80058a2:	bd30      	pop	{r4, r5, pc}
 80058a4:	f814 5f01 	ldrb.w	r5, [r4, #1]!
 80058a8:	f802 5b01 	strb.w	r5, [r2], #1
 80058ac:	e7f2      	b.n	8005894 <text_editor_delete+0x18>
 80058ae:	2000      	movs	r0, #0
 80058b0:	e7f7      	b.n	80058a2 <text_editor_delete+0x26>

080058b2 <text_editor_cursor_get_position>:
 80058b2:	6c00      	ldr	r0, [r0, #64]	; 0x40
 80058b4:	4770      	bx	lr

080058b6 <text_editor_cursor_head>:
 80058b6:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f04f 0300 	mov.w	r3, #0
 80058be:	bfc6      	itte	gt
 80058c0:	6403      	strgt	r3, [r0, #64]	; 0x40
 80058c2:	2001      	movgt	r0, #1
 80058c4:	4618      	movle	r0, r3
 80058c6:	4770      	bx	lr

080058c8 <text_editor_cursor_tail>:
 80058c8:	e9d0 2310 	ldrd	r2, r3, [r0, #64]	; 0x40
 80058cc:	429a      	cmp	r2, r3
 80058ce:	bfba      	itte	lt
 80058d0:	6403      	strlt	r3, [r0, #64]	; 0x40
 80058d2:	2001      	movlt	r0, #1
 80058d4:	2000      	movge	r0, #0
 80058d6:	4770      	bx	lr

080058d8 <text_editor_cursor_left>:
 80058d8:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80058da:	2b00      	cmp	r3, #0
 80058dc:	bfc3      	ittte	gt
 80058de:	f103 33ff 	addgt.w	r3, r3, #4294967295
 80058e2:	6403      	strgt	r3, [r0, #64]	; 0x40
 80058e4:	2001      	movgt	r0, #1
 80058e6:	2000      	movle	r0, #0
 80058e8:	4770      	bx	lr

080058ea <text_editor_cursor_right>:
 80058ea:	e9d0 3210 	ldrd	r3, r2, [r0, #64]	; 0x40
 80058ee:	4293      	cmp	r3, r2
 80058f0:	bfbd      	ittte	lt
 80058f2:	3301      	addlt	r3, #1
 80058f4:	6403      	strlt	r3, [r0, #64]	; 0x40
 80058f6:	2001      	movlt	r0, #1
 80058f8:	2000      	movge	r0, #0
 80058fa:	4770      	bx	lr

080058fc <text_editor_set_text>:
 80058fc:	4602      	mov	r2, r0
 80058fe:	2300      	movs	r3, #0
 8005900:	b510      	push	{r4, lr}
 8005902:	5ccc      	ldrb	r4, [r1, r3]
 8005904:	b124      	cbz	r4, 8005910 <text_editor_set_text+0x14>
 8005906:	3301      	adds	r3, #1
 8005908:	2b41      	cmp	r3, #65	; 0x41
 800590a:	f802 4b01 	strb.w	r4, [r2], #1
 800590e:	d1f8      	bne.n	8005902 <text_editor_set_text+0x6>
 8005910:	2100      	movs	r1, #0
 8005912:	7011      	strb	r1, [r2, #0]
 8005914:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 8005918:	4618      	mov	r0, r3
 800591a:	bd10      	pop	{r4, pc}

0800591c <text_editor_get_text>:
 800591c:	2300      	movs	r3, #0
 800591e:	b510      	push	{r4, lr}
 8005920:	5cc4      	ldrb	r4, [r0, r3]
 8005922:	b124      	cbz	r4, 800592e <text_editor_get_text+0x12>
 8005924:	3301      	adds	r3, #1
 8005926:	4293      	cmp	r3, r2
 8005928:	f801 4b01 	strb.w	r4, [r1], #1
 800592c:	dbf8      	blt.n	8005920 <text_editor_get_text+0x4>
 800592e:	2200      	movs	r2, #0
 8005930:	4618      	mov	r0, r3
 8005932:	700a      	strb	r2, [r1, #0]
 8005934:	bd10      	pop	{r4, pc}

08005936 <text_editor_clear>:
 8005936:	2300      	movs	r3, #0
 8005938:	e9c0 3310 	strd	r3, r3, [r0, #64]	; 0x40
 800593c:	7003      	strb	r3, [r0, #0]
 800593e:	4770      	bx	lr

08005940 <text_history_init>:
 8005940:	2300      	movs	r3, #0
 8005942:	1e42      	subs	r2, r0, #1
 8005944:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
 8005948:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 800594c:	f200 10ff 	addw	r0, r0, #511	; 0x1ff
 8005950:	f802 3f01 	strb.w	r3, [r2, #1]!
 8005954:	4282      	cmp	r2, r0
 8005956:	d1fb      	bne.n	8005950 <text_history_init+0x10>
 8005958:	4770      	bx	lr

0800595a <text_history_write>:
 800595a:	780b      	ldrb	r3, [r1, #0]
 800595c:	b1db      	cbz	r3, 8005996 <text_history_write+0x3c>
 800595e:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005962:	3901      	subs	r1, #1
 8005964:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 8005968:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800596c:	b982      	cbnz	r2, 8005990 <text_history_write+0x36>
 800596e:	701a      	strb	r2, [r3, #0]
 8005970:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 8005974:	3301      	adds	r3, #1
 8005976:	425a      	negs	r2, r3
 8005978:	f002 0207 	and.w	r2, r2, #7
 800597c:	f003 0307 	and.w	r3, r3, #7
 8005980:	bf58      	it	pl
 8005982:	4253      	negpl	r3, r2
 8005984:	f8c0 3204 	str.w	r3, [r0, #516]	; 0x204
 8005988:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
 800598c:	2001      	movs	r0, #1
 800598e:	4770      	bx	lr
 8005990:	f803 2b01 	strb.w	r2, [r3], #1
 8005994:	e7e8      	b.n	8005968 <text_history_write+0xe>
 8005996:	4618      	mov	r0, r3
 8005998:	4770      	bx	lr

0800599a <text_history_read>:
 800599a:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 800599e:	b510      	push	{r4, lr}
 80059a0:	eb00 1383 	add.w	r3, r0, r3, lsl #6
 80059a4:	2000      	movs	r0, #0
 80059a6:	3a01      	subs	r2, #1
 80059a8:	5c1c      	ldrb	r4, [r3, r0]
 80059aa:	b124      	cbz	r4, 80059b6 <text_history_read+0x1c>
 80059ac:	3001      	adds	r0, #1
 80059ae:	4282      	cmp	r2, r0
 80059b0:	f801 4b01 	strb.w	r4, [r1], #1
 80059b4:	dcf8      	bgt.n	80059a8 <text_history_read+0xe>
 80059b6:	2300      	movs	r3, #0
 80059b8:	700b      	strb	r3, [r1, #0]
 80059ba:	bd10      	pop	{r4, pc}

080059bc <text_history_read_point_next>:
 80059bc:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80059c0:	3301      	adds	r3, #1
 80059c2:	425a      	negs	r2, r3
 80059c4:	f002 0207 	and.w	r2, r2, #7
 80059c8:	f003 0307 	and.w	r3, r3, #7
 80059cc:	bf58      	it	pl
 80059ce:	4253      	negpl	r3, r2
 80059d0:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 80059d4:	429a      	cmp	r2, r3
 80059d6:	bf1a      	itte	ne
 80059d8:	f8c0 3200 	strne.w	r3, [r0, #512]	; 0x200
 80059dc:	2001      	movne	r0, #1
 80059de:	2000      	moveq	r0, #0
 80059e0:	4770      	bx	lr

080059e2 <text_history_read_point_prev>:
 80059e2:	f8d0 3200 	ldr.w	r3, [r0, #512]	; 0x200
 80059e6:	b15b      	cbz	r3, 8005a00 <text_history_read_point_prev+0x1e>
 80059e8:	3b01      	subs	r3, #1
 80059ea:	f8d0 2204 	ldr.w	r2, [r0, #516]	; 0x204
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d008      	beq.n	8005a04 <text_history_read_point_prev+0x22>
 80059f2:	019a      	lsls	r2, r3, #6
 80059f4:	5c82      	ldrb	r2, [r0, r2]
 80059f6:	b12a      	cbz	r2, 8005a04 <text_history_read_point_prev+0x22>
 80059f8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
 80059fc:	2001      	movs	r0, #1
 80059fe:	4770      	bx	lr
 8005a00:	2307      	movs	r3, #7
 8005a02:	e7f2      	b.n	80059ea <text_history_read_point_prev+0x8>
 8005a04:	2000      	movs	r0, #0
 8005a06:	4770      	bx	lr

08005a08 <text_history_find>:
 8005a08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	2500      	movs	r5, #0
 8005a0e:	4606      	mov	r6, r0
 8005a10:	4610      	mov	r0, r2
 8005a12:	4689      	mov	r9, r1
 8005a14:	4617      	mov	r7, r2
 8005a16:	469a      	mov	sl, r3
 8005a18:	f7ff fbb7 	bl	800518a <ntlibc_strlen>
 8005a1c:	46ab      	mov	fp, r5
 8005a1e:	9000      	str	r0, [sp, #0]
 8005a20:	f8d6 4200 	ldr.w	r4, [r6, #512]	; 0x200
 8005a24:	442c      	add	r4, r5
 8005a26:	4263      	negs	r3, r4
 8005a28:	f003 0307 	and.w	r3, r3, #7
 8005a2c:	f004 0407 	and.w	r4, r4, #7
 8005a30:	bf58      	it	pl
 8005a32:	425c      	negpl	r4, r3
 8005a34:	eb06 1484 	add.w	r4, r6, r4, lsl #6
 8005a38:	4620      	mov	r0, r4
 8005a3a:	f7ff fba6 	bl	800518a <ntlibc_strlen>
 8005a3e:	9b00      	ldr	r3, [sp, #0]
 8005a40:	4639      	mov	r1, r7
 8005a42:	4283      	cmp	r3, r0
 8005a44:	bfa8      	it	ge
 8005a46:	4603      	movge	r3, r0
 8005a48:	4620      	mov	r0, r4
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	9301      	str	r3, [sp, #4]
 8005a4e:	f7ff fbae 	bl	80051ae <ntlibc_strncmp>
 8005a52:	4680      	mov	r8, r0
 8005a54:	b9a0      	cbnz	r0, 8005a80 <text_history_find+0x78>
 8005a56:	9b01      	ldr	r3, [sp, #4]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	dd11      	ble.n	8005a80 <text_history_find+0x78>
 8005a5c:	45d9      	cmp	r9, fp
 8005a5e:	d10d      	bne.n	8005a7c <text_history_find+0x74>
 8005a60:	4620      	mov	r0, r4
 8005a62:	f7ff fb92 	bl	800518a <ntlibc_strlen>
 8005a66:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a68:	4298      	cmp	r0, r3
 8005a6a:	da0c      	bge.n	8005a86 <text_history_find+0x7e>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f7ff fb93 	bl	800519a <ntlibc_strcpy>
 8005a74:	4640      	mov	r0, r8
 8005a76:	b003      	add	sp, #12
 8005a78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a7c:	f10b 0b01 	add.w	fp, fp, #1
 8005a80:	3501      	adds	r5, #1
 8005a82:	2d08      	cmp	r5, #8
 8005a84:	d1cc      	bne.n	8005a20 <text_history_find+0x18>
 8005a86:	f04f 38ff 	mov.w	r8, #4294967295
 8005a8a:	e7f3      	b.n	8005a74 <text_history_find+0x6c>

08005a8c <do_action>:
 8005a8c:	1e4b      	subs	r3, r1, #1
 8005a8e:	2b0d      	cmp	r3, #13
 8005a90:	d832      	bhi.n	8005af8 <do_action+0x6c>
 8005a92:	e8df f003 	tbb	[pc, r3]
 8005a96:	092d      	.short	0x092d
 8005a98:	07070707 	.word	0x07070707
 8005a9c:	07070735 	.word	0x07070735
 8005aa0:	07070714 	.word	0x07070714
 8005aa4:	6843      	ldr	r3, [r0, #4]
 8005aa6:	4718      	bx	r3
 8005aa8:	68c3      	ldr	r3, [r0, #12]
 8005aaa:	2b01      	cmp	r3, #1
 8005aac:	dd02      	ble.n	8005ab4 <do_action+0x28>
 8005aae:	2301      	movs	r3, #1
 8005ab0:	7403      	strb	r3, [r0, #16]
 8005ab2:	4770      	bx	lr
 8005ab4:	1c59      	adds	r1, r3, #1
 8005ab6:	60c1      	str	r1, [r0, #12]
 8005ab8:	4418      	add	r0, r3
 8005aba:	7202      	strb	r2, [r0, #8]
 8005abc:	4770      	bx	lr
 8005abe:	2a3b      	cmp	r2, #59	; 0x3b
 8005ac0:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ac2:	d107      	bne.n	8005ad4 <do_action+0x48>
 8005ac4:	1c5a      	adds	r2, r3, #1
 8005ac6:	3304      	adds	r3, #4
 8005ac8:	6542      	str	r2, [r0, #84]	; 0x54
 8005aca:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ace:	2300      	movs	r3, #0
 8005ad0:	6043      	str	r3, [r0, #4]
 8005ad2:	4770      	bx	lr
 8005ad4:	b913      	cbnz	r3, 8005adc <do_action+0x50>
 8005ad6:	2101      	movs	r1, #1
 8005ad8:	6143      	str	r3, [r0, #20]
 8005ada:	6541      	str	r1, [r0, #84]	; 0x54
 8005adc:	210a      	movs	r1, #10
 8005ade:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8005ae0:	3a30      	subs	r2, #48	; 0x30
 8005ae2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8005ae6:	6903      	ldr	r3, [r0, #16]
 8005ae8:	fb01 2203 	mla	r2, r1, r3, r2
 8005aec:	6102      	str	r2, [r0, #16]
 8005aee:	4770      	bx	lr
 8005af0:	2300      	movs	r3, #0
 8005af2:	60c3      	str	r3, [r0, #12]
 8005af4:	6543      	str	r3, [r0, #84]	; 0x54
 8005af6:	e7db      	b.n	8005ab0 <do_action+0x24>
 8005af8:	6843      	ldr	r3, [r0, #4]
 8005afa:	2200      	movs	r2, #0
 8005afc:	210f      	movs	r1, #15
 8005afe:	e7d2      	b.n	8005aa6 <do_action+0x1a>
 8005b00:	4770      	bx	lr

08005b02 <vtrecv_init>:
 8005b02:	230c      	movs	r3, #12
 8005b04:	7003      	strb	r3, [r0, #0]
 8005b06:	2300      	movs	r3, #0
 8005b08:	6041      	str	r1, [r0, #4]
 8005b0a:	60c3      	str	r3, [r0, #12]
 8005b0c:	6543      	str	r3, [r0, #84]	; 0x54
 8005b0e:	7403      	strb	r3, [r0, #16]
 8005b10:	4770      	bx	lr
	...

08005b14 <vtrecv_execute>:
 8005b14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b18:	4605      	mov	r5, r0
 8005b1a:	4688      	mov	r8, r1
 8005b1c:	4693      	mov	fp, r2
 8005b1e:	460f      	mov	r7, r1
 8005b20:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8005bbc <vtrecv_execute+0xa8>
 8005b24:	eba7 0308 	sub.w	r3, r7, r8
 8005b28:	459b      	cmp	fp, r3
 8005b2a:	dc02      	bgt.n	8005b32 <vtrecv_execute+0x1e>
 8005b2c:	b003      	add	sp, #12
 8005b2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b32:	2300      	movs	r3, #0
 8005b34:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005b38:	7829      	ldrb	r1, [r5, #0]
 8005b3a:	f853 2009 	ldr.w	r2, [r3, r9]
 8005b3e:	eb09 0003 	add.w	r0, r9, r3
 8005b42:	4291      	cmp	r1, r2
 8005b44:	d129      	bne.n	8005b9a <vtrecv_execute+0x86>
 8005b46:	7902      	ldrb	r2, [r0, #4]
 8005b48:	4296      	cmp	r6, r2
 8005b4a:	db26      	blt.n	8005b9a <vtrecv_execute+0x86>
 8005b4c:	7942      	ldrb	r2, [r0, #5]
 8005b4e:	4296      	cmp	r6, r2
 8005b50:	dc23      	bgt.n	8005b9a <vtrecv_execute+0x86>
 8005b52:	7984      	ldrb	r4, [r0, #6]
 8005b54:	f004 030f 	and.w	r3, r4, #15
 8005b58:	0924      	lsrs	r4, r4, #4
 8005b5a:	d025      	beq.n	8005ba8 <vtrecv_execute+0x94>
 8005b5c:	4a15      	ldr	r2, [pc, #84]	; (8005bb4 <vtrecv_execute+0xa0>)
 8005b5e:	440a      	add	r2, r1
 8005b60:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8005b64:	4a14      	ldr	r2, [pc, #80]	; (8005bb8 <vtrecv_execute+0xa4>)
 8005b66:	4422      	add	r2, r4
 8005b68:	f812 ac01 	ldrb.w	sl, [r2, #-1]
 8005b6c:	b129      	cbz	r1, 8005b7a <vtrecv_execute+0x66>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4628      	mov	r0, r5
 8005b72:	9301      	str	r3, [sp, #4]
 8005b74:	f7ff ff8a 	bl	8005a8c <do_action>
 8005b78:	9b01      	ldr	r3, [sp, #4]
 8005b7a:	b123      	cbz	r3, 8005b86 <vtrecv_execute+0x72>
 8005b7c:	4632      	mov	r2, r6
 8005b7e:	4619      	mov	r1, r3
 8005b80:	4628      	mov	r0, r5
 8005b82:	f7ff ff83 	bl	8005a8c <do_action>
 8005b86:	f1ba 0f00 	cmp.w	sl, #0
 8005b8a:	d004      	beq.n	8005b96 <vtrecv_execute+0x82>
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	4651      	mov	r1, sl
 8005b90:	4628      	mov	r0, r5
 8005b92:	f7ff ff7b 	bl	8005a8c <do_action>
 8005b96:	702c      	strb	r4, [r5, #0]
 8005b98:	e7c4      	b.n	8005b24 <vtrecv_execute+0x10>
 8005b9a:	f640 0258 	movw	r2, #2136	; 0x858
 8005b9e:	3308      	adds	r3, #8
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d1ca      	bne.n	8005b3a <vtrecv_execute+0x26>
 8005ba4:	2400      	movs	r4, #0
 8005ba6:	e7d5      	b.n	8005b54 <vtrecv_execute+0x40>
 8005ba8:	4632      	mov	r2, r6
 8005baa:	4619      	mov	r1, r3
 8005bac:	4628      	mov	r0, r5
 8005bae:	f7ff ff6d 	bl	8005a8c <do_action>
 8005bb2:	e7b7      	b.n	8005b24 <vtrecv_execute+0x10>
 8005bb4:	0800d32e 	.word	0x0800d32e
 8005bb8:	0800d320 	.word	0x0800d320
 8005bbc:	0800d33c 	.word	0x0800d33c

08005bc0 <vtsend_init>:
 8005bc0:	e9c0 1200 	strd	r1, r2, [r0]
 8005bc4:	2000      	movs	r0, #0
 8005bc6:	4770      	bx	lr

08005bc8 <vtsend_cursor_forward>:
 8005bc8:	220a      	movs	r2, #10
 8005bca:	f645 331b 	movw	r3, #23323	; 0x5b1b
 8005bce:	b513      	push	{r0, r1, r4, lr}
 8005bd0:	f8ad 3000 	strh.w	r3, [sp]
 8005bd4:	fb91 f3f2 	sdiv	r3, r1, r2
 8005bd8:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005bdc:	fb02 1313 	mls	r3, r2, r3, r1
 8005be0:	3330      	adds	r3, #48	; 0x30
 8005be2:	f88d 3003 	strb.w	r3, [sp, #3]
 8005be6:	2343      	movs	r3, #67	; 0x43
 8005be8:	f88d 4002 	strb.w	r4, [sp, #2]
 8005bec:	f88d 3004 	strb.w	r3, [sp, #4]
 8005bf0:	2105      	movs	r1, #5
 8005bf2:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005bf6:	4668      	mov	r0, sp
 8005bf8:	4798      	blx	r3
 8005bfa:	2000      	movs	r0, #0
 8005bfc:	b002      	add	sp, #8
 8005bfe:	bd10      	pop	{r4, pc}

08005c00 <vtsend_cursor_backward>:
 8005c00:	220a      	movs	r2, #10
 8005c02:	f645 331b 	movw	r3, #23323	; 0x5b1b
 8005c06:	b513      	push	{r0, r1, r4, lr}
 8005c08:	f8ad 3000 	strh.w	r3, [sp]
 8005c0c:	fb91 f3f2 	sdiv	r3, r1, r2
 8005c10:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005c14:	fb02 1313 	mls	r3, r2, r3, r1
 8005c18:	3330      	adds	r3, #48	; 0x30
 8005c1a:	f88d 3003 	strb.w	r3, [sp, #3]
 8005c1e:	2344      	movs	r3, #68	; 0x44
 8005c20:	f88d 4002 	strb.w	r4, [sp, #2]
 8005c24:	f88d 3004 	strb.w	r3, [sp, #4]
 8005c28:	2105      	movs	r1, #5
 8005c2a:	e9d0 3200 	ldrd	r3, r2, [r0]
 8005c2e:	4668      	mov	r0, sp
 8005c30:	4798      	blx	r3
 8005c32:	2000      	movs	r0, #0
 8005c34:	b002      	add	sp, #8
 8005c36:	bd10      	pop	{r4, pc}

08005c38 <vtsend_erase_line>:
 8005c38:	b513      	push	{r0, r1, r4, lr}
 8005c3a:	4a06      	ldr	r2, [pc, #24]	; (8005c54 <vtsend_erase_line+0x1c>)
 8005c3c:	ab02      	add	r3, sp, #8
 8005c3e:	f843 2d04 	str.w	r2, [r3, #-4]!
 8005c42:	2104      	movs	r1, #4
 8005c44:	e9d0 4200 	ldrd	r4, r2, [r0]
 8005c48:	4618      	mov	r0, r3
 8005c4a:	47a0      	blx	r4
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	b002      	add	sp, #8
 8005c50:	bd10      	pop	{r4, pc}
 8005c52:	bf00      	nop
 8005c54:	4b325b1b 	.word	0x4b325b1b

08005c58 <nt_callback>:
 8005c58:	b508      	push	{r3, lr}
 8005c5a:	f7fd ffbb 	bl	8003bd4 <nt_interpret>
 8005c5e:	2000      	movs	r0, #0
 8005c60:	bd08      	pop	{r3, pc}

08005c62 <write>:
 8005c62:	b538      	push	{r3, r4, r5, lr}
 8005c64:	4615      	mov	r5, r2
 8005c66:	460c      	mov	r4, r1
 8005c68:	460a      	mov	r2, r1
 8005c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8005c6e:	4601      	mov	r1, r0
 8005c70:	6868      	ldr	r0, [r5, #4]
 8005c72:	f003 f81c 	bl	8008cae <xStreamBufferSend>
 8005c76:	4620      	mov	r0, r4
 8005c78:	bd38      	pop	{r3, r4, r5, pc}
	...

08005c7c <initialize_cli>:
 8005c7c:	b510      	push	{r4, lr}
 8005c7e:	4604      	mov	r4, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4a06      	ldr	r2, [pc, #24]	; (8005c9c <initialize_cli+0x20>)
 8005c84:	4906      	ldr	r1, [pc, #24]	; (8005ca0 <initialize_cli+0x24>)
 8005c86:	f7ff fd59 	bl	800573c <ntshell_init>
 8005c8a:	4620      	mov	r0, r4
 8005c8c:	4905      	ldr	r1, [pc, #20]	; (8005ca4 <initialize_cli+0x28>)
 8005c8e:	f7ff fdab 	bl	80057e8 <ntshell_set_prompt>
 8005c92:	4620      	mov	r0, r4
 8005c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c98:	f7ff bd7e 	b.w	8005798 <ntshell_show_promt>
 8005c9c:	08005c59 	.word	0x08005c59
 8005ca0:	08005c63 	.word	0x08005c63
 8005ca4:	0800db94 	.word	0x0800db94

08005ca8 <handle_terminal>:
 8005ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005caa:	460c      	mov	r4, r1
 8005cac:	4605      	mov	r5, r0
 8005cae:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f10d 0107 	add.w	r1, sp, #7
 8005cb8:	68a0      	ldr	r0, [r4, #8]
 8005cba:	f003 f885 	bl	8008dc8 <xStreamBufferReceive>
 8005cbe:	b180      	cbz	r0, 8005ce2 <handle_terminal+0x3a>
 8005cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8005cc4:	68e0      	ldr	r0, [r4, #12]
 8005cc6:	f002 fddb 	bl	8008880 <xQueueSemaphoreTake>
 8005cca:	b150      	cbz	r0, 8005ce2 <handle_terminal+0x3a>
 8005ccc:	f89d 1007 	ldrb.w	r1, [sp, #7]
 8005cd0:	4628      	mov	r0, r5
 8005cd2:	f7ff fd78 	bl	80057c6 <ntshell_execute_nb>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	68e0      	ldr	r0, [r4, #12]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	4619      	mov	r1, r3
 8005cde:	f002 fc1b 	bl	8008518 <xQueueGenericSend>
 8005ce2:	2000      	movs	r0, #0
 8005ce4:	b003      	add	sp, #12
 8005ce6:	bd30      	pop	{r4, r5, pc}

08005ce8 <tsk_cli_TaskProc>:
 8005ce8:	2400      	movs	r4, #0
 8005cea:	2501      	movs	r5, #1
 8005cec:	b500      	push	{lr}
 8005cee:	4606      	mov	r6, r0
 8005cf0:	f5ad 7d4b 	sub.w	sp, sp, #812	; 0x32c
 8005cf4:	2203      	movs	r2, #3
 8005cf6:	4621      	mov	r1, r4
 8005cf8:	4628      	mov	r0, r5
 8005cfa:	f88d 5004 	strb.w	r5, [sp, #4]
 8005cfe:	f88d 4006 	strb.w	r4, [sp, #6]
 8005d02:	f002 fbe4 	bl	80084ce <xQueueGenericCreate>
 8005d06:	4622      	mov	r2, r4
 8005d08:	9004      	str	r0, [sp, #16]
 8005d0a:	4629      	mov	r1, r5
 8005d0c:	2080      	movs	r0, #128	; 0x80
 8005d0e:	f002 ff8b 	bl	8008c28 <xStreamBufferGenericCreate>
 8005d12:	4622      	mov	r2, r4
 8005d14:	9003      	str	r0, [sp, #12]
 8005d16:	4629      	mov	r1, r5
 8005d18:	f44f 7000 	mov.w	r0, #512	; 0x200
 8005d1c:	f002 ff84 	bl	8008c28 <xStreamBufferGenericCreate>
 8005d20:	4621      	mov	r1, r4
 8005d22:	4623      	mov	r3, r4
 8005d24:	4622      	mov	r2, r4
 8005d26:	9002      	str	r0, [sp, #8]
 8005d28:	9804      	ldr	r0, [sp, #16]
 8005d2a:	9605      	str	r6, [sp, #20]
 8005d2c:	f002 fbf4 	bl	8008518 <xQueueGenericSend>
 8005d30:	a801      	add	r0, sp, #4
 8005d32:	f000 fa05 	bl	8006140 <tsk_uart_Start>
 8005d36:	a801      	add	r0, sp, #4
 8005d38:	f000 f9a6 	bl	8006088 <tsk_overlay_Start>
 8005d3c:	f7fd fc9c 	bl	8003678 <init_config>
 8005d40:	a801      	add	r0, sp, #4
 8005d42:	f7fd fccb 	bl	80036dc <eeprom_load>
 8005d46:	f7fd fc95 	bl	8003674 <recalc_params>
 8005d4a:	f7fe fcc1 	bl	80046d0 <BLDC_Init>
 8005d4e:	a901      	add	r1, sp, #4
 8005d50:	a806      	add	r0, sp, #24
 8005d52:	f7ff ff93 	bl	8005c7c <initialize_cli>
 8005d56:	a901      	add	r1, sp, #4
 8005d58:	a806      	add	r0, sp, #24
 8005d5a:	f7ff ffa5 	bl	8005ca8 <handle_terminal>
 8005d5e:	e7fa      	b.n	8005d56 <tsk_cli_TaskProc+0x6e>

08005d60 <tsk_cli_Start>:
 8005d60:	b507      	push	{r0, r1, r2, lr}
 8005d62:	4b07      	ldr	r3, [pc, #28]	; (8005d80 <tsk_cli_Start+0x20>)
 8005d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d68:	9301      	str	r3, [sp, #4]
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	4905      	ldr	r1, [pc, #20]	; (8005d84 <tsk_cli_Start+0x24>)
 8005d6e:	9300      	str	r3, [sp, #0]
 8005d70:	4603      	mov	r3, r0
 8005d72:	4805      	ldr	r0, [pc, #20]	; (8005d88 <tsk_cli_Start+0x28>)
 8005d74:	f003 f9d5 	bl	8009122 <xTaskCreate>
 8005d78:	b003      	add	sp, #12
 8005d7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d7e:	bf00      	nop
 8005d80:	200044cc 	.word	0x200044cc
 8005d84:	0800db97 	.word	0x0800db97
 8005d88:	08005ce9 	.word	0x08005ce9
 8005d8c:	00000000 	.word	0x00000000

08005d90 <show_overlay_100ms>:
 * operations, and/or generrally do stuff to make the taks do something
 * meaningful.
 */
/* `#START USER_TASK_LOCAL_CODE` */

void show_overlay_100ms(port_str *ptr){
 8005d90:	b5f0      	push	{r4, r5, r6, r7, lr}

    if(ptr->term_mode == PORT_TERM_VT100){
 8005d92:	7883      	ldrb	r3, [r0, #2]
void show_overlay_100ms(port_str *ptr){
 8005d94:	b091      	sub	sp, #68	; 0x44
 8005d96:	4604      	mov	r4, r0
 8005d98:	4d7f      	ldr	r5, [pc, #508]	; (8005f98 <show_overlay_100ms+0x208>)
 8005d9a:	4f80      	ldr	r7, [pc, #512]	; (8005f9c <show_overlay_100ms+0x20c>)
    if(ptr->term_mode == PORT_TERM_VT100){
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	f040 80af 	bne.w	8005f00 <show_overlay_100ms+0x170>
        char buffer[50];
        int ret=0;
    	Term_Save_Cursor(ptr);
 8005da2:	f7fd f973 	bl	800308c <Term_Save_Cursor>
    	Term_Disable_Cursor(ptr);
 8005da6:	4620      	mov	r0, r4
 8005da8:	f7fd f990 	bl	80030cc <Term_Disable_Cursor>

    	uint8_t row_pos = 1;
    	uint8_t col_pos = 90;
    	//Term_Erase_Screen(ptr);
    	Term_Box(row_pos, col_pos, row_pos + 7, col_pos + 25, ptr);
 8005dac:	2373      	movs	r3, #115	; 0x73
 8005dae:	2208      	movs	r2, #8
 8005db0:	215a      	movs	r1, #90	; 0x5a
 8005db2:	2001      	movs	r0, #1
 8005db4:	9400      	str	r4, [sp, #0]
 8005db6:	f7fd f8dd 	bl	8002f74 <Term_Box>
    	Term_Move_Cursor(row_pos + 1, col_pos + 1, ptr);
 8005dba:	4622      	mov	r2, r4
 8005dbc:	215b      	movs	r1, #91	; 0x5b
 8005dbe:	2002      	movs	r0, #2
 8005dc0:	f7fd f8c4 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr A     :      %+.2fA", (float)analog.curr_a/1000.0);
 8005dc4:	6828      	ldr	r0, [r5, #0]
 8005dc6:	f7fa ff89 	bl	8000cdc <__aeabi_i2f>
 8005dca:	f7fa fb2d 	bl	8000428 <__aeabi_f2d>
 8005dce:	4b74      	ldr	r3, [pc, #464]	; (8005fa0 <show_overlay_100ms+0x210>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	f7fa fcab 	bl	800072c <__aeabi_ddiv>
 8005dd6:	4a73      	ldr	r2, [pc, #460]	; (8005fa4 <show_overlay_100ms+0x214>)
 8005dd8:	e9cd 0100 	strd	r0, r1, [sp]
 8005ddc:	2132      	movs	r1, #50	; 0x32
 8005dde:	a803      	add	r0, sp, #12
 8005de0:	f7ff f91e 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005de4:	4622      	mov	r2, r4
 8005de6:	b281      	uxth	r1, r0
 8005de8:	a803      	add	r0, sp, #12
 8005dea:	f7fc fc03 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 2, col_pos + 1, ptr);
 8005dee:	4622      	mov	r2, r4
 8005df0:	215b      	movs	r1, #91	; 0x5b
 8005df2:	2003      	movs	r0, #3
 8005df4:	f7fd f8aa 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr B     :      %+.2fA", (float)analog.curr_b/1000.0);
 8005df8:	6868      	ldr	r0, [r5, #4]
 8005dfa:	f7fa ff6f 	bl	8000cdc <__aeabi_i2f>
 8005dfe:	f7fa fb13 	bl	8000428 <__aeabi_f2d>
 8005e02:	4b67      	ldr	r3, [pc, #412]	; (8005fa0 <show_overlay_100ms+0x210>)
 8005e04:	2200      	movs	r2, #0
 8005e06:	f7fa fc91 	bl	800072c <__aeabi_ddiv>
 8005e0a:	4a67      	ldr	r2, [pc, #412]	; (8005fa8 <show_overlay_100ms+0x218>)
 8005e0c:	e9cd 0100 	strd	r0, r1, [sp]
 8005e10:	2132      	movs	r1, #50	; 0x32
 8005e12:	a803      	add	r0, sp, #12
 8005e14:	f7ff f904 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e18:	4622      	mov	r2, r4
 8005e1a:	b281      	uxth	r1, r0
 8005e1c:	a803      	add	r0, sp, #12
 8005e1e:	f7fc fbe9 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 3, col_pos + 1, ptr);
 8005e22:	4622      	mov	r2, r4
 8005e24:	215b      	movs	r1, #91	; 0x5b
 8005e26:	2004      	movs	r0, #4
 8005e28:	f7fd f890 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Curr C     :      %+.2fA", (float)analog.curr_c/1000.0);
 8005e2c:	68a8      	ldr	r0, [r5, #8]
 8005e2e:	f7fa ff55 	bl	8000cdc <__aeabi_i2f>
 8005e32:	f7fa faf9 	bl	8000428 <__aeabi_f2d>
 8005e36:	4b5a      	ldr	r3, [pc, #360]	; (8005fa0 <show_overlay_100ms+0x210>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f7fa fc77 	bl	800072c <__aeabi_ddiv>
 8005e3e:	4a5b      	ldr	r2, [pc, #364]	; (8005fac <show_overlay_100ms+0x21c>)
 8005e40:	e9cd 0100 	strd	r0, r1, [sp]
 8005e44:	2132      	movs	r1, #50	; 0x32
 8005e46:	a803      	add	r0, sp, #12
 8005e48:	f7ff f8ea 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	b281      	uxth	r1, r0
 8005e50:	a803      	add	r0, sp, #12
 8005e52:	f7fc fbcf 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 4, col_pos + 1, ptr);
 8005e56:	4622      	mov	r2, r4
 8005e58:	215b      	movs	r1, #91	; 0x5b
 8005e5a:	2005      	movs	r0, #5
 8005e5c:	f7fd f876 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Bus Voltage:      %.2fV", DC_BUS_CNTtoV(adc_buffer.vbat));
 8005e60:	f643 005f 	movw	r0, #14431	; 0x385f
 8005e64:	4d52      	ldr	r5, [pc, #328]	; (8005fb0 <show_overlay_100ms+0x220>)
 8005e66:	89eb      	ldrh	r3, [r5, #14]
 8005e68:	4358      	muls	r0, r3
 8005e6a:	f7fa ff33 	bl	8000cd4 <__aeabi_ui2f>
 8005e6e:	f7fa fadb 	bl	8000428 <__aeabi_f2d>
 8005e72:	a347      	add	r3, pc, #284	; (adr r3, 8005f90 <show_overlay_100ms+0x200>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa fc58 	bl	800072c <__aeabi_ddiv>
 8005e7c:	4a4d      	ldr	r2, [pc, #308]	; (8005fb4 <show_overlay_100ms+0x224>)
 8005e7e:	e9cd 0100 	strd	r0, r1, [sp]
 8005e82:	2132      	movs	r1, #50	; 0x32
 8005e84:	a803      	add	r0, sp, #12
 8005e86:	f7ff f8cb 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005e8a:	4622      	mov	r2, r4
 8005e8c:	b281      	uxth	r1, r0
 8005e8e:	a803      	add	r0, sp, #12
 8005e90:	f7fc fbb0 	bl	80025f4 <send_buffer>


    	Term_Move_Cursor(row_pos + 5, col_pos + 1, ptr);
 8005e94:	4622      	mov	r2, r4
 8005e96:	215b      	movs	r1, #91	; 0x5b
 8005e98:	2006      	movs	r0, #6
 8005e9a:	f7fd f857 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "Temp       :     %.1f *C",(float)NTC_ADC2Temperature(adc_buffer.ntc)/10.0);
 8005e9e:	89a8      	ldrh	r0, [r5, #12]
 8005ea0:	f7fe fc52 	bl	8004748 <NTC_ADC2Temperature>
 8005ea4:	f7fa ff1a 	bl	8000cdc <__aeabi_i2f>
 8005ea8:	f7fa fabe 	bl	8000428 <__aeabi_f2d>
 8005eac:	4b42      	ldr	r3, [pc, #264]	; (8005fb8 <show_overlay_100ms+0x228>)
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f7fa fc3c 	bl	800072c <__aeabi_ddiv>
 8005eb4:	4a41      	ldr	r2, [pc, #260]	; (8005fbc <show_overlay_100ms+0x22c>)
 8005eb6:	e9cd 0100 	strd	r0, r1, [sp]
 8005eba:	2132      	movs	r1, #50	; 0x32
 8005ebc:	a803      	add	r0, sp, #12
 8005ebe:	f7ff f8af 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005ec2:	4622      	mov	r2, r4
 8005ec4:	b281      	uxth	r1, r0
 8005ec6:	a803      	add	r0, sp, #12
 8005ec8:	f7fc fb94 	bl	80025f4 <send_buffer>

    	Term_Move_Cursor(row_pos + 6, col_pos + 1, ptr);
 8005ecc:	4622      	mov	r2, r4
 8005ece:	215b      	movs	r1, #91	; 0x5b
 8005ed0:	2007      	movs	r0, #7
 8005ed2:	f7fd f83b 	bl	8002f4c <Term_Move_Cursor>
    	ret = snprintf(buffer, sizeof(buffer), "RPM        :       %dRPM", rtY_Left.n_mot * 2);
 8005ed6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8005eda:	4a39      	ldr	r2, [pc, #228]	; (8005fc0 <show_overlay_100ms+0x230>)
 8005edc:	005b      	lsls	r3, r3, #1
 8005ede:	2132      	movs	r1, #50	; 0x32
 8005ee0:	a803      	add	r0, sp, #12
 8005ee2:	f7ff f89d 	bl	8005020 <snprintf_>
        send_buffer((uint8_t*)buffer,ret,ptr);
 8005ee6:	4622      	mov	r2, r4
 8005ee8:	b281      	uxth	r1, r0
 8005eea:	a803      	add	r0, sp, #12
 8005eec:	f7fc fb82 	bl	80025f4 <send_buffer>

    	Term_Restore_Cursor(ptr);
 8005ef0:	4620      	mov	r0, r4
 8005ef2:	f7fd f8db 	bl	80030ac <Term_Restore_Cursor>
    	Term_Enable_Cursor(ptr);
 8005ef6:	4620      	mov	r0, r4
 8005ef8:	f7fd f8f8 	bl	80030ec <Term_Enable_Cursor>
		send_chart_draw(ptr);


    }
	
}
 8005efc:	b011      	add	sp, #68	; 0x44
 8005efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
        send_gauge(0, GAUGE0_VAR, ptr);
 8005f00:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005f04:	6829      	ldr	r1, [r5, #0]
 8005f06:	4602      	mov	r2, r0
 8005f08:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	b209      	sxth	r1, r1
 8005f10:	f7ff f89a 	bl	8005048 <send_gauge>
        send_gauge(1, GAUGE1_VAR, ptr);
 8005f14:	6869      	ldr	r1, [r5, #4]
 8005f16:	4622      	mov	r2, r4
 8005f18:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	b209      	sxth	r1, r1
 8005f20:	f7ff f892 	bl	8005048 <send_gauge>
        send_gauge(2, GAUGE2_VAR, ptr);
 8005f24:	6869      	ldr	r1, [r5, #4]
 8005f26:	4622      	mov	r2, r4
 8005f28:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f2c:	2002      	movs	r0, #2
 8005f2e:	b209      	sxth	r1, r1
 8005f30:	f7ff f88a 	bl	8005048 <send_gauge>
        send_gauge(4, GAUGE4_VAR, ptr);
 8005f34:	6969      	ldr	r1, [r5, #20]
 8005f36:	4622      	mov	r2, r4
 8005f38:	fb91 f1f6 	sdiv	r1, r1, r6
		send_chart(0, CHART0_VAR, ptr);
 8005f3c:	2664      	movs	r6, #100	; 0x64
        send_gauge(4, GAUGE4_VAR, ptr);
 8005f3e:	b209      	sxth	r1, r1
 8005f40:	2004      	movs	r0, #4
 8005f42:	f7ff f881 	bl	8005048 <send_gauge>
		send_chart(0, CHART0_VAR, ptr);
 8005f46:	6829      	ldr	r1, [r5, #0]
 8005f48:	4622      	mov	r2, r4
 8005f4a:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f4e:	2000      	movs	r0, #0
 8005f50:	b209      	sxth	r1, r1
 8005f52:	f7ff f885 	bl	8005060 <send_chart>
		send_chart(1, CHART1_VAR, ptr);
 8005f56:	6869      	ldr	r1, [r5, #4]
 8005f58:	4622      	mov	r2, r4
 8005f5a:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f5e:	2001      	movs	r0, #1
 8005f60:	b209      	sxth	r1, r1
 8005f62:	f7ff f87d 	bl	8005060 <send_chart>
		send_chart(2, CHART2_VAR, ptr);
 8005f66:	68a9      	ldr	r1, [r5, #8]
 8005f68:	4622      	mov	r2, r4
 8005f6a:	fb91 f1f6 	sdiv	r1, r1, r6
 8005f6e:	2002      	movs	r0, #2
 8005f70:	b209      	sxth	r1, r1
 8005f72:	f7ff f875 	bl	8005060 <send_chart>
		send_chart(3, CHART3_VAR, ptr);
 8005f76:	4622      	mov	r2, r4
 8005f78:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8005f7c:	2003      	movs	r0, #3
 8005f7e:	f7ff f86f 	bl	8005060 <send_chart>
		send_chart_draw(ptr);
 8005f82:	4620      	mov	r0, r4
 8005f84:	f7ff f878 	bl	8005078 <send_chart_draw>
}
 8005f88:	e7b8      	b.n	8005efc <show_overlay_100ms+0x16c>
 8005f8a:	bf00      	nop
 8005f8c:	f3af 8000 	nop.w
 8005f90:	00000000 	.word	0x00000000
 8005f94:	412e8480 	.word	0x412e8480
 8005f98:	2000419c 	.word	0x2000419c
 8005f9c:	2000449c 	.word	0x2000449c
 8005fa0:	408f4000 	.word	0x408f4000
 8005fa4:	0800dba0 	.word	0x0800dba0
 8005fa8:	0800dbb9 	.word	0x0800dbb9
 8005fac:	0800dbd2 	.word	0x0800dbd2
 8005fb0:	20004368 	.word	0x20004368
 8005fb4:	0800dbeb 	.word	0x0800dbeb
 8005fb8:	40240000 	.word	0x40240000
 8005fbc:	0800dc03 	.word	0x0800dc03
 8005fc0:	0800dc1c 	.word	0x0800dc1c
 8005fc4:	00000000 	.word	0x00000000

08005fc8 <show_overlay_400ms>:

void show_overlay_400ms(port_str *ptr) {
 8005fc8:	b538      	push	{r3, r4, r5, lr}
    if(ptr->term_mode == PORT_TERM_TT){
 8005fca:	7883      	ldrb	r3, [r0, #2]
void show_overlay_400ms(port_str *ptr) {
 8005fcc:	4604      	mov	r4, r0
    if(ptr->term_mode == PORT_TERM_TT){
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d126      	bne.n	8006020 <show_overlay_400ms+0x58>
        #endif
        #if GAUGE2_SLOW==1
        send_gauge(2, GAUGE2_VAR, ptr);
        #endif
        #if GAUGE3_SLOW==1
        send_gauge(3, GAUGE3_VAR, ptr);
 8005fd2:	4b17      	ldr	r3, [pc, #92]	; (8006030 <show_overlay_400ms+0x68>)
 8005fd4:	4602      	mov	r2, r0
 8005fd6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8005fda:	2003      	movs	r0, #3
 8005fdc:	f7ff f834 	bl	8005048 <send_gauge>
        #endif
        #if GAUGE4_SLOW==1
        send_gauge(4, GAUGE4_VAR, ptr);
        #endif
        #if GAUGE5_SLOW==1
        send_gauge(5, GAUGE5_VAR, ptr);
 8005fe0:	f643 005f 	movw	r0, #14431	; 0x385f
 8005fe4:	4d13      	ldr	r5, [pc, #76]	; (8006034 <show_overlay_400ms+0x6c>)
 8005fe6:	89eb      	ldrh	r3, [r5, #14]
 8005fe8:	4358      	muls	r0, r3
 8005fea:	f7fa f9fb 	bl	80003e4 <__aeabi_ui2d>
 8005fee:	a30e      	add	r3, pc, #56	; (adr r3, 8006028 <show_overlay_400ms+0x60>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fb9a 	bl	800072c <__aeabi_ddiv>
 8005ff8:	f7fa fd1e 	bl	8000a38 <__aeabi_d2iz>
 8005ffc:	4622      	mov	r2, r4
 8005ffe:	b201      	sxth	r1, r0
 8006000:	2005      	movs	r0, #5
 8006002:	f7ff f821 	bl	8005048 <send_gauge>
        #endif
        #if GAUGE6_SLOW==1
        send_gauge(6, GAUGE6_VAR, ptr);
 8006006:	89a8      	ldrh	r0, [r5, #12]
 8006008:	f7fe fb9e 	bl	8004748 <NTC_ADC2Temperature>
 800600c:	210a      	movs	r1, #10
 800600e:	fb90 f1f1 	sdiv	r1, r0, r1
 8006012:	4622      	mov	r2, r4
        #endif
        
    }
}
 8006014:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        send_gauge(6, GAUGE6_VAR, ptr);
 8006018:	b209      	sxth	r1, r1
 800601a:	2006      	movs	r0, #6
 800601c:	f7ff b814 	b.w	8005048 <send_gauge>
}
 8006020:	bd38      	pop	{r3, r4, r5, pc}
 8006022:	bf00      	nop
 8006024:	f3af 8000 	nop.w
 8006028:	00000000 	.word	0x00000000
 800602c:	412e8480 	.word	0x412e8480
 8006030:	2000449c 	.word	0x2000449c
 8006034:	20004368 	.word	0x20004368

08006038 <tsk_overlay_TaskProc>:
/*
 * This is the main procedure that comprises the task.  Place the code required
 * to preform the desired function within the merge regions of the task procedure
 * to add functionality to the task.
 */
void tsk_overlay_TaskProc(void *pvParameters) {
 8006038:	b570      	push	{r4, r5, r6, lr}
 800603a:	4605      	mov	r5, r0
	 * Add and initialize local variables that are allocated on the Task stack
	 * the the section below.
	 */
	/* `#START TASK_VARIABLES` */
    
    uint8_t cnt=0;
 800603c:	2400      	movs	r4, #0
	/* `#END` */

	    
    for (;;) {
		/* `#START TASK_LOOP_CODE` */
    	if(telemetry){
 800603e:	4e11      	ldr	r6, [pc, #68]	; (8006084 <tsk_overlay_TaskProc+0x4c>)
 8006040:	7833      	ldrb	r3, [r6, #0]
 8006042:	b19b      	cbz	r3, 800606c <tsk_overlay_TaskProc+0x34>
			xSemaphoreTake(port->term_block, portMAX_DELAY);
 8006044:	f04f 31ff 	mov.w	r1, #4294967295
 8006048:	68e8      	ldr	r0, [r5, #12]
 800604a:	f002 fc19 	bl	8008880 <xQueueSemaphoreTake>
			show_overlay_100ms(pvParameters);
 800604e:	4628      	mov	r0, r5
 8006050:	f7ff fe9e 	bl	8005d90 <show_overlay_100ms>
			if(cnt<3){
 8006054:	2c02      	cmp	r4, #2
 8006056:	d80c      	bhi.n	8006072 <tsk_overlay_TaskProc+0x3a>
				cnt++;
 8006058:	3401      	adds	r4, #1
 800605a:	b2e4      	uxtb	r4, r4
				show_overlay_400ms(pvParameters);
			}



			xSemaphoreGive(port->term_block);
 800605c:	2300      	movs	r3, #0
 800605e:	68e8      	ldr	r0, [r5, #12]
 8006060:	461a      	mov	r2, r3
 8006062:	4619      	mov	r1, r3
 8006064:	f002 fa58 	bl	8008518 <xQueueGenericSend>

			/* `#END` */
			if(port->term_mode==PORT_TERM_VT100){
 8006068:	78ab      	ldrb	r3, [r5, #2]
 800606a:	b93b      	cbnz	r3, 800607c <tsk_overlay_TaskProc+0x44>
			}else{
				vTaskDelay(100 / portTICK_PERIOD_MS);
			}
    	}else{

    		vTaskDelay(500 / portTICK_PERIOD_MS);
 800606c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006070:	e005      	b.n	800607e <tsk_overlay_TaskProc+0x46>
				show_overlay_400ms(pvParameters);
 8006072:	4628      	mov	r0, r5
 8006074:	f7ff ffa8 	bl	8005fc8 <show_overlay_400ms>
				cnt=0;
 8006078:	2400      	movs	r4, #0
 800607a:	e7ef      	b.n	800605c <tsk_overlay_TaskProc+0x24>
				vTaskDelay(100 / portTICK_PERIOD_MS);
 800607c:	2064      	movs	r0, #100	; 0x64
    		vTaskDelay(500 / portTICK_PERIOD_MS);
 800607e:	f003 f9d3 	bl	8009428 <vTaskDelay>
 8006082:	e7dd      	b.n	8006040 <tsk_overlay_TaskProc+0x8>
 8006084:	200005f0 	.word	0x200005f0

08006088 <tsk_overlay_Start>:
    	}
	}
}


void tsk_overlay_Start(port_str *port) {
 8006088:	b537      	push	{r0, r1, r2, r4, r5, lr}

	/* `#END` */
    //UART_2_Start();


	if (tsk_overlay_initVar != 1) {
 800608a:	4c09      	ldr	r4, [pc, #36]	; (80060b0 <tsk_overlay_Start+0x28>)
void tsk_overlay_Start(port_str *port) {
 800608c:	4603      	mov	r3, r0
	if (tsk_overlay_initVar != 1) {
 800608e:	7822      	ldrb	r2, [r4, #0]
 8006090:	2a01      	cmp	r2, #1
 8006092:	d00a      	beq.n	80060aa <tsk_overlay_Start+0x22>

		/*
	 	* Create the task and then leave. When FreeRTOS starts up the scheduler
	 	* will call the task procedure and start execution of the task.
	 	*/
		xTaskCreate(tsk_overlay_TaskProc, "Overlay", STACK_OVERLAY, port, PRIO_OVERLAY, &Overlay_TaskHandle);
 8006094:	2501      	movs	r5, #1
 8006096:	4a07      	ldr	r2, [pc, #28]	; (80060b4 <tsk_overlay_Start+0x2c>)
 8006098:	9500      	str	r5, [sp, #0]
 800609a:	9201      	str	r2, [sp, #4]
 800609c:	4906      	ldr	r1, [pc, #24]	; (80060b8 <tsk_overlay_Start+0x30>)
 800609e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060a2:	4806      	ldr	r0, [pc, #24]	; (80060bc <tsk_overlay_Start+0x34>)
 80060a4:	f003 f83d 	bl	8009122 <xTaskCreate>
		tsk_overlay_initVar = 1;
 80060a8:	7025      	strb	r5, [r4, #0]


	}

}
 80060aa:	b003      	add	sp, #12
 80060ac:	bd30      	pop	{r4, r5, pc}
 80060ae:	bf00      	nop
 80060b0:	200005f1 	.word	0x200005f1
 80060b4:	200044d0 	.word	0x200044d0
 80060b8:	0800dc35 	.word	0x0800dc35
 80060bc:	08006039 	.word	0x08006039

080060c0 <tsk_uart_TaskProc>:
 80060c0:	b530      	push	{r4, r5, lr}
 80060c2:	4604      	mov	r4, r0
 80060c4:	2500      	movs	r5, #0
 80060c6:	b0a3      	sub	sp, #140	; 0x8c
 80060c8:	2240      	movs	r2, #64	; 0x40
 80060ca:	a902      	add	r1, sp, #8
 80060cc:	6900      	ldr	r0, [r0, #16]
 80060ce:	f001 fe65 	bl	8007d9c <HAL_UART_Receive_DMA>
 80060d2:	6923      	ldr	r3, [r4, #16]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	6953      	ldr	r3, [r2, #20]
 80060d8:	f023 0301 	bic.w	r3, r3, #1
 80060dc:	6153      	str	r3, [r2, #20]
 80060de:	6923      	ldr	r3, [r4, #16]
 80060e0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80060e4:	2b20      	cmp	r3, #32
 80060e6:	d10b      	bne.n	8006100 <tsk_uart_TaskProc+0x40>
 80060e8:	2240      	movs	r2, #64	; 0x40
 80060ea:	2300      	movs	r3, #0
 80060ec:	a912      	add	r1, sp, #72	; 0x48
 80060ee:	6860      	ldr	r0, [r4, #4]
 80060f0:	f002 fe6a 	bl	8008dc8 <xStreamBufferReceive>
 80060f4:	b2c2      	uxtb	r2, r0
 80060f6:	b11a      	cbz	r2, 8006100 <tsk_uart_TaskProc+0x40>
 80060f8:	a912      	add	r1, sp, #72	; 0x48
 80060fa:	6920      	ldr	r0, [r4, #16]
 80060fc:	f001 fe14 	bl	8007d28 <HAL_UART_Transmit_DMA>
 8006100:	6923      	ldr	r3, [r4, #16]
 8006102:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	425b      	negs	r3, r3
 800610a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800610e:	42ab      	cmp	r3, r5
 8006110:	d103      	bne.n	800611a <tsk_uart_TaskProc+0x5a>
 8006112:	2005      	movs	r0, #5
 8006114:	f003 f988 	bl	8009428 <vTaskDelay>
 8006118:	e7e1      	b.n	80060de <tsk_uart_TaskProc+0x1e>
 800611a:	ab22      	add	r3, sp, #136	; 0x88
 800611c:	442b      	add	r3, r5
 800611e:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8006122:	2201      	movs	r2, #1
 8006124:	f88d 3007 	strb.w	r3, [sp, #7]
 8006128:	f10d 0107 	add.w	r1, sp, #7
 800612c:	2300      	movs	r3, #0
 800612e:	68a0      	ldr	r0, [r4, #8]
 8006130:	f002 fdbd 	bl	8008cae <xStreamBufferSend>
 8006134:	2800      	cmp	r0, #0
 8006136:	d0e3      	beq.n	8006100 <tsk_uart_TaskProc+0x40>
 8006138:	3501      	adds	r5, #1
 800613a:	f005 053f 	and.w	r5, r5, #63	; 0x3f
 800613e:	e7df      	b.n	8006100 <tsk_uart_TaskProc+0x40>

08006140 <tsk_uart_Start>:
 8006140:	b513      	push	{r0, r1, r4, lr}
 8006142:	4c09      	ldr	r4, [pc, #36]	; (8006168 <tsk_uart_Start+0x28>)
 8006144:	4603      	mov	r3, r0
 8006146:	7822      	ldrb	r2, [r4, #0]
 8006148:	2a01      	cmp	r2, #1
 800614a:	d00b      	beq.n	8006164 <tsk_uart_Start+0x24>
 800614c:	4a07      	ldr	r2, [pc, #28]	; (800616c <tsk_uart_Start+0x2c>)
 800614e:	4908      	ldr	r1, [pc, #32]	; (8006170 <tsk_uart_Start+0x30>)
 8006150:	9201      	str	r2, [sp, #4]
 8006152:	2203      	movs	r2, #3
 8006154:	4807      	ldr	r0, [pc, #28]	; (8006174 <tsk_uart_Start+0x34>)
 8006156:	9200      	str	r2, [sp, #0]
 8006158:	f44f 7200 	mov.w	r2, #512	; 0x200
 800615c:	f002 ffe1 	bl	8009122 <xTaskCreate>
 8006160:	2301      	movs	r3, #1
 8006162:	7023      	strb	r3, [r4, #0]
 8006164:	b002      	add	sp, #8
 8006166:	bd10      	pop	{r4, pc}
 8006168:	200005f2 	.word	0x200005f2
 800616c:	200044d8 	.word	0x200044d8
 8006170:	0800dc3d 	.word	0x0800dc3d
 8006174:	080060c1 	.word	0x080060c1

08006178 <Reset_Handler>:
 8006178:	2100      	movs	r1, #0
 800617a:	e003      	b.n	8006184 <LoopCopyDataInit>

0800617c <CopyDataInit>:
 800617c:	4b0b      	ldr	r3, [pc, #44]	; (80061ac <LoopFillZerobss+0x14>)
 800617e:	585b      	ldr	r3, [r3, r1]
 8006180:	5043      	str	r3, [r0, r1]
 8006182:	3104      	adds	r1, #4

08006184 <LoopCopyDataInit>:
 8006184:	480a      	ldr	r0, [pc, #40]	; (80061b0 <LoopFillZerobss+0x18>)
 8006186:	4b0b      	ldr	r3, [pc, #44]	; (80061b4 <LoopFillZerobss+0x1c>)
 8006188:	1842      	adds	r2, r0, r1
 800618a:	429a      	cmp	r2, r3
 800618c:	d3f6      	bcc.n	800617c <CopyDataInit>
 800618e:	4a0a      	ldr	r2, [pc, #40]	; (80061b8 <LoopFillZerobss+0x20>)
 8006190:	e002      	b.n	8006198 <LoopFillZerobss>

08006192 <FillZerobss>:
 8006192:	2300      	movs	r3, #0
 8006194:	f842 3b04 	str.w	r3, [r2], #4

08006198 <LoopFillZerobss>:
 8006198:	4b08      	ldr	r3, [pc, #32]	; (80061bc <LoopFillZerobss+0x24>)
 800619a:	429a      	cmp	r2, r3
 800619c:	d3f9      	bcc.n	8006192 <FillZerobss>
 800619e:	f7fe fa71 	bl	8004684 <SystemInit>
 80061a2:	f004 f865 	bl	800a270 <__libc_init_array>
 80061a6:	f7fd fddf 	bl	8003d68 <main>
 80061aa:	4770      	bx	lr
 80061ac:	0800dec8 	.word	0x0800dec8
 80061b0:	20000000 	.word	0x20000000
 80061b4:	200005ac 	.word	0x200005ac
 80061b8:	200005b0 	.word	0x200005b0
 80061bc:	20004544 	.word	0x20004544

080061c0 <CAN1_RX1_IRQHandler>:
 80061c0:	e7fe      	b.n	80061c0 <CAN1_RX1_IRQHandler>
	...

080061c4 <HAL_Init>:
 80061c4:	4a07      	ldr	r2, [pc, #28]	; (80061e4 <HAL_Init+0x20>)
 80061c6:	b508      	push	{r3, lr}
 80061c8:	6813      	ldr	r3, [r2, #0]
 80061ca:	2003      	movs	r0, #3
 80061cc:	f043 0310 	orr.w	r3, r3, #16
 80061d0:	6013      	str	r3, [r2, #0]
 80061d2:	f000 fa7b 	bl	80066cc <HAL_NVIC_SetPriorityGrouping>
 80061d6:	2000      	movs	r0, #0
 80061d8:	f7fe f9d2 	bl	8004580 <HAL_InitTick>
 80061dc:	f7fe f84c 	bl	8004278 <HAL_MspInit>
 80061e0:	2000      	movs	r0, #0
 80061e2:	bd08      	pop	{r3, pc}
 80061e4:	40022000 	.word	0x40022000

080061e8 <HAL_IncTick>:
 80061e8:	4a03      	ldr	r2, [pc, #12]	; (80061f8 <HAL_IncTick+0x10>)
 80061ea:	4b04      	ldr	r3, [pc, #16]	; (80061fc <HAL_IncTick+0x14>)
 80061ec:	6811      	ldr	r1, [r2, #0]
 80061ee:	781b      	ldrb	r3, [r3, #0]
 80061f0:	440b      	add	r3, r1
 80061f2:	6013      	str	r3, [r2, #0]
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	200044dc 	.word	0x200044dc
 80061fc:	200003d0 	.word	0x200003d0

08006200 <HAL_GetTick>:
 8006200:	4b01      	ldr	r3, [pc, #4]	; (8006208 <HAL_GetTick+0x8>)
 8006202:	6818      	ldr	r0, [r3, #0]
 8006204:	4770      	bx	lr
 8006206:	bf00      	nop
 8006208:	200044dc 	.word	0x200044dc

0800620c <HAL_ADC_ConvCpltCallback>:
 800620c:	4770      	bx	lr

0800620e <HAL_ADC_LevelOutOfWindowCallback>:
 800620e:	4770      	bx	lr

08006210 <HAL_ADC_IRQHandler>:
 8006210:	6803      	ldr	r3, [r0, #0]
 8006212:	b510      	push	{r4, lr}
 8006214:	685a      	ldr	r2, [r3, #4]
 8006216:	4604      	mov	r4, r0
 8006218:	0690      	lsls	r0, r2, #26
 800621a:	d527      	bpl.n	800626c <HAL_ADC_IRQHandler+0x5c>
 800621c:	681a      	ldr	r2, [r3, #0]
 800621e:	0791      	lsls	r1, r2, #30
 8006220:	d524      	bpl.n	800626c <HAL_ADC_IRQHandler+0x5c>
 8006222:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006224:	06d2      	lsls	r2, r2, #27
 8006226:	bf5e      	ittt	pl
 8006228:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 800622a:	f442 7200 	orrpl.w	r2, r2, #512	; 0x200
 800622e:	62a2      	strpl	r2, [r4, #40]	; 0x28
 8006230:	689a      	ldr	r2, [r3, #8]
 8006232:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8006236:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 800623a:	d110      	bne.n	800625e <HAL_ADC_IRQHandler+0x4e>
 800623c:	7b22      	ldrb	r2, [r4, #12]
 800623e:	b972      	cbnz	r2, 800625e <HAL_ADC_IRQHandler+0x4e>
 8006240:	685a      	ldr	r2, [r3, #4]
 8006242:	f022 0220 	bic.w	r2, r2, #32
 8006246:	605a      	str	r2, [r3, #4]
 8006248:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800624a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800624e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006250:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006252:	04db      	lsls	r3, r3, #19
 8006254:	bf5e      	ittt	pl
 8006256:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 8006258:	f043 0301 	orrpl.w	r3, r3, #1
 800625c:	62a3      	strpl	r3, [r4, #40]	; 0x28
 800625e:	4620      	mov	r0, r4
 8006260:	f7ff ffd4 	bl	800620c <HAL_ADC_ConvCpltCallback>
 8006264:	f06f 0212 	mvn.w	r2, #18
 8006268:	6823      	ldr	r3, [r4, #0]
 800626a:	601a      	str	r2, [r3, #0]
 800626c:	6823      	ldr	r3, [r4, #0]
 800626e:	685a      	ldr	r2, [r3, #4]
 8006270:	0610      	lsls	r0, r2, #24
 8006272:	d530      	bpl.n	80062d6 <HAL_ADC_IRQHandler+0xc6>
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	0751      	lsls	r1, r2, #29
 8006278:	d52d      	bpl.n	80062d6 <HAL_ADC_IRQHandler+0xc6>
 800627a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800627c:	06d2      	lsls	r2, r2, #27
 800627e:	bf5e      	ittt	pl
 8006280:	6aa2      	ldrpl	r2, [r4, #40]	; 0x28
 8006282:	f442 5200 	orrpl.w	r2, r2, #8192	; 0x2000
 8006286:	62a2      	strpl	r2, [r4, #40]	; 0x28
 8006288:	689a      	ldr	r2, [r3, #8]
 800628a:	f402 42e0 	and.w	r2, r2, #28672	; 0x7000
 800628e:	f5b2 4fe0 	cmp.w	r2, #28672	; 0x7000
 8006292:	d00a      	beq.n	80062aa <HAL_ADC_IRQHandler+0x9a>
 8006294:	685a      	ldr	r2, [r3, #4]
 8006296:	0550      	lsls	r0, r2, #21
 8006298:	d416      	bmi.n	80062c8 <HAL_ADC_IRQHandler+0xb8>
 800629a:	689a      	ldr	r2, [r3, #8]
 800629c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80062a0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80062a4:	d110      	bne.n	80062c8 <HAL_ADC_IRQHandler+0xb8>
 80062a6:	7b22      	ldrb	r2, [r4, #12]
 80062a8:	b972      	cbnz	r2, 80062c8 <HAL_ADC_IRQHandler+0xb8>
 80062aa:	685a      	ldr	r2, [r3, #4]
 80062ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062b0:	605a      	str	r2, [r3, #4]
 80062b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80062b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80062ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062bc:	05d9      	lsls	r1, r3, #23
 80062be:	bf5e      	ittt	pl
 80062c0:	6aa3      	ldrpl	r3, [r4, #40]	; 0x28
 80062c2:	f043 0301 	orrpl.w	r3, r3, #1
 80062c6:	62a3      	strpl	r3, [r4, #40]	; 0x28
 80062c8:	4620      	mov	r0, r4
 80062ca:	f000 f9d1 	bl	8006670 <HAL_ADCEx_InjectedConvCpltCallback>
 80062ce:	f06f 020c 	mvn.w	r2, #12
 80062d2:	6823      	ldr	r3, [r4, #0]
 80062d4:	601a      	str	r2, [r3, #0]
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	685a      	ldr	r2, [r3, #4]
 80062da:	0652      	lsls	r2, r2, #25
 80062dc:	d50d      	bpl.n	80062fa <HAL_ADC_IRQHandler+0xea>
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	07db      	lsls	r3, r3, #31
 80062e2:	d50a      	bpl.n	80062fa <HAL_ADC_IRQHandler+0xea>
 80062e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80062e6:	4620      	mov	r0, r4
 80062e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80062ee:	f7ff ff8e 	bl	800620e <HAL_ADC_LevelOutOfWindowCallback>
 80062f2:	f06f 0201 	mvn.w	r2, #1
 80062f6:	6823      	ldr	r3, [r4, #0]
 80062f8:	601a      	str	r2, [r3, #0]
 80062fa:	bd10      	pop	{r4, pc}

080062fc <HAL_ADC_ConfigChannel>:
 80062fc:	2300      	movs	r3, #0
 80062fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006300:	9301      	str	r3, [sp, #4]
 8006302:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006306:	2b01      	cmp	r3, #1
 8006308:	d06d      	beq.n	80063e6 <HAL_ADC_ConfigChannel+0xea>
 800630a:	2301      	movs	r3, #1
 800630c:	684d      	ldr	r5, [r1, #4]
 800630e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8006312:	2d06      	cmp	r5, #6
 8006314:	6802      	ldr	r2, [r0, #0]
 8006316:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 800631a:	680c      	ldr	r4, [r1, #0]
 800631c:	d823      	bhi.n	8006366 <HAL_ADC_ConfigChannel+0x6a>
 800631e:	261f      	movs	r6, #31
 8006320:	6b55      	ldr	r5, [r2, #52]	; 0x34
 8006322:	3b05      	subs	r3, #5
 8006324:	409e      	lsls	r6, r3
 8006326:	ea25 0506 	bic.w	r5, r5, r6
 800632a:	fa04 f303 	lsl.w	r3, r4, r3
 800632e:	432b      	orrs	r3, r5
 8006330:	6353      	str	r3, [r2, #52]	; 0x34
 8006332:	2c09      	cmp	r4, #9
 8006334:	688b      	ldr	r3, [r1, #8]
 8006336:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800633a:	f04f 0107 	mov.w	r1, #7
 800633e:	d92a      	bls.n	8006396 <HAL_ADC_ConfigChannel+0x9a>
 8006340:	68d6      	ldr	r6, [r2, #12]
 8006342:	3d1e      	subs	r5, #30
 8006344:	40a9      	lsls	r1, r5
 8006346:	ea26 0101 	bic.w	r1, r6, r1
 800634a:	40ab      	lsls	r3, r5
 800634c:	430b      	orrs	r3, r1
 800634e:	60d3      	str	r3, [r2, #12]
 8006350:	f1a4 0310 	sub.w	r3, r4, #16
 8006354:	2b01      	cmp	r3, #1
 8006356:	d926      	bls.n	80063a6 <HAL_ADC_ConfigChannel+0xaa>
 8006358:	2300      	movs	r3, #0
 800635a:	2200      	movs	r2, #0
 800635c:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
 8006360:	4618      	mov	r0, r3
 8006362:	b002      	add	sp, #8
 8006364:	bd70      	pop	{r4, r5, r6, pc}
 8006366:	2d0c      	cmp	r5, #12
 8006368:	f04f 051f 	mov.w	r5, #31
 800636c:	d809      	bhi.n	8006382 <HAL_ADC_ConfigChannel+0x86>
 800636e:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8006370:	3b23      	subs	r3, #35	; 0x23
 8006372:	409d      	lsls	r5, r3
 8006374:	ea26 0505 	bic.w	r5, r6, r5
 8006378:	fa04 f303 	lsl.w	r3, r4, r3
 800637c:	432b      	orrs	r3, r5
 800637e:	6313      	str	r3, [r2, #48]	; 0x30
 8006380:	e7d7      	b.n	8006332 <HAL_ADC_ConfigChannel+0x36>
 8006382:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 8006384:	3b41      	subs	r3, #65	; 0x41
 8006386:	409d      	lsls	r5, r3
 8006388:	ea26 0505 	bic.w	r5, r6, r5
 800638c:	fa04 f303 	lsl.w	r3, r4, r3
 8006390:	432b      	orrs	r3, r5
 8006392:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006394:	e7cd      	b.n	8006332 <HAL_ADC_ConfigChannel+0x36>
 8006396:	6916      	ldr	r6, [r2, #16]
 8006398:	40a9      	lsls	r1, r5
 800639a:	ea26 0101 	bic.w	r1, r6, r1
 800639e:	40ab      	lsls	r3, r5
 80063a0:	430b      	orrs	r3, r1
 80063a2:	6113      	str	r3, [r2, #16]
 80063a4:	e7d4      	b.n	8006350 <HAL_ADC_ConfigChannel+0x54>
 80063a6:	4b11      	ldr	r3, [pc, #68]	; (80063ec <HAL_ADC_ConfigChannel+0xf0>)
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d116      	bne.n	80063da <HAL_ADC_ConfigChannel+0xde>
 80063ac:	6893      	ldr	r3, [r2, #8]
 80063ae:	021b      	lsls	r3, r3, #8
 80063b0:	d4d2      	bmi.n	8006358 <HAL_ADC_ConfigChannel+0x5c>
 80063b2:	6893      	ldr	r3, [r2, #8]
 80063b4:	2c10      	cmp	r4, #16
 80063b6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80063ba:	6093      	str	r3, [r2, #8]
 80063bc:	d1cc      	bne.n	8006358 <HAL_ADC_ConfigChannel+0x5c>
 80063be:	4b0c      	ldr	r3, [pc, #48]	; (80063f0 <HAL_ADC_ConfigChannel+0xf4>)
 80063c0:	4a0c      	ldr	r2, [pc, #48]	; (80063f4 <HAL_ADC_ConfigChannel+0xf8>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	fbb3 f2f2 	udiv	r2, r3, r2
 80063c8:	230a      	movs	r3, #10
 80063ca:	4353      	muls	r3, r2
 80063cc:	9301      	str	r3, [sp, #4]
 80063ce:	9b01      	ldr	r3, [sp, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d0c1      	beq.n	8006358 <HAL_ADC_ConfigChannel+0x5c>
 80063d4:	9b01      	ldr	r3, [sp, #4]
 80063d6:	3b01      	subs	r3, #1
 80063d8:	e7f8      	b.n	80063cc <HAL_ADC_ConfigChannel+0xd0>
 80063da:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80063dc:	f043 0320 	orr.w	r3, r3, #32
 80063e0:	6283      	str	r3, [r0, #40]	; 0x28
 80063e2:	2301      	movs	r3, #1
 80063e4:	e7b9      	b.n	800635a <HAL_ADC_ConfigChannel+0x5e>
 80063e6:	2302      	movs	r3, #2
 80063e8:	e7ba      	b.n	8006360 <HAL_ADC_ConfigChannel+0x64>
 80063ea:	bf00      	nop
 80063ec:	40012400 	.word	0x40012400
 80063f0:	2000033c 	.word	0x2000033c
 80063f4:	000f4240 	.word	0x000f4240

080063f8 <ADC_Enable>:
 80063f8:	2300      	movs	r3, #0
 80063fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80063fc:	9301      	str	r3, [sp, #4]
 80063fe:	6803      	ldr	r3, [r0, #0]
 8006400:	4604      	mov	r4, r0
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	07d2      	lsls	r2, r2, #31
 8006406:	d502      	bpl.n	800640e <ADC_Enable+0x16>
 8006408:	2000      	movs	r0, #0
 800640a:	b002      	add	sp, #8
 800640c:	bd70      	pop	{r4, r5, r6, pc}
 800640e:	689a      	ldr	r2, [r3, #8]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	609a      	str	r2, [r3, #8]
 8006416:	4b12      	ldr	r3, [pc, #72]	; (8006460 <ADC_Enable+0x68>)
 8006418:	4a12      	ldr	r2, [pc, #72]	; (8006464 <ADC_Enable+0x6c>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006420:	9301      	str	r3, [sp, #4]
 8006422:	9b01      	ldr	r3, [sp, #4]
 8006424:	b9c3      	cbnz	r3, 8006458 <ADC_Enable+0x60>
 8006426:	f7ff feeb 	bl	8006200 <HAL_GetTick>
 800642a:	4606      	mov	r6, r0
 800642c:	6823      	ldr	r3, [r4, #0]
 800642e:	689d      	ldr	r5, [r3, #8]
 8006430:	f015 0501 	ands.w	r5, r5, #1
 8006434:	d1e8      	bne.n	8006408 <ADC_Enable+0x10>
 8006436:	f7ff fee3 	bl	8006200 <HAL_GetTick>
 800643a:	1b80      	subs	r0, r0, r6
 800643c:	2802      	cmp	r0, #2
 800643e:	d9f5      	bls.n	800642c <ADC_Enable+0x34>
 8006440:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006442:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
 8006446:	f043 0310 	orr.w	r3, r3, #16
 800644a:	62a3      	str	r3, [r4, #40]	; 0x28
 800644c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800644e:	2001      	movs	r0, #1
 8006450:	f043 0301 	orr.w	r3, r3, #1
 8006454:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006456:	e7d8      	b.n	800640a <ADC_Enable+0x12>
 8006458:	9b01      	ldr	r3, [sp, #4]
 800645a:	3b01      	subs	r3, #1
 800645c:	e7e0      	b.n	8006420 <ADC_Enable+0x28>
 800645e:	bf00      	nop
 8006460:	2000033c 	.word	0x2000033c
 8006464:	000f4240 	.word	0x000f4240

08006468 <HAL_ADC_Start>:
 8006468:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800646c:	b510      	push	{r4, lr}
 800646e:	2b01      	cmp	r3, #1
 8006470:	4604      	mov	r4, r0
 8006472:	d054      	beq.n	800651e <HAL_ADC_Start+0xb6>
 8006474:	2301      	movs	r3, #1
 8006476:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 800647a:	f7ff ffbd 	bl	80063f8 <ADC_Enable>
 800647e:	2800      	cmp	r0, #0
 8006480:	d149      	bne.n	8006516 <HAL_ADC_Start+0xae>
 8006482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006484:	4a27      	ldr	r2, [pc, #156]	; (8006524 <HAL_ADC_Start+0xbc>)
 8006486:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800648a:	f023 0301 	bic.w	r3, r3, #1
 800648e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006492:	62a3      	str	r3, [r4, #40]	; 0x28
 8006494:	6823      	ldr	r3, [r4, #0]
 8006496:	4293      	cmp	r3, r2
 8006498:	d104      	bne.n	80064a4 <HAL_ADC_Start+0x3c>
 800649a:	4923      	ldr	r1, [pc, #140]	; (8006528 <HAL_ADC_Start+0xc0>)
 800649c:	684a      	ldr	r2, [r1, #4]
 800649e:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80064a2:	d12e      	bne.n	8006502 <HAL_ADC_Start+0x9a>
 80064a4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80064a6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80064aa:	62a2      	str	r2, [r4, #40]	; 0x28
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	0552      	lsls	r2, r2, #21
 80064b0:	bf41      	itttt	mi
 80064b2:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80064b4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80064b8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80064bc:	62a2      	strmi	r2, [r4, #40]	; 0x28
 80064be:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80064c0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80064c4:	bf1c      	itt	ne
 80064c6:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80064c8:	f022 0206 	bicne.w	r2, r2, #6
 80064cc:	62e2      	str	r2, [r4, #44]	; 0x2c
 80064ce:	2200      	movs	r2, #0
 80064d0:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 80064d4:	f06f 0202 	mvn.w	r2, #2
 80064d8:	601a      	str	r2, [r3, #0]
 80064da:	689a      	ldr	r2, [r3, #8]
 80064dc:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 80064e0:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 80064e4:	d113      	bne.n	800650e <HAL_ADC_Start+0xa6>
 80064e6:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <HAL_ADC_Start+0xbc>)
 80064e8:	4293      	cmp	r3, r2
 80064ea:	d105      	bne.n	80064f8 <HAL_ADC_Start+0x90>
 80064ec:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 80064f0:	6852      	ldr	r2, [r2, #4]
 80064f2:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80064f6:	d10a      	bne.n	800650e <HAL_ADC_Start+0xa6>
 80064f8:	689a      	ldr	r2, [r3, #8]
 80064fa:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80064fe:	609a      	str	r2, [r3, #8]
 8006500:	bd10      	pop	{r4, pc}
 8006502:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006504:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006508:	62a2      	str	r2, [r4, #40]	; 0x28
 800650a:	684a      	ldr	r2, [r1, #4]
 800650c:	e7cf      	b.n	80064ae <HAL_ADC_Start+0x46>
 800650e:	689a      	ldr	r2, [r3, #8]
 8006510:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8006514:	e7f3      	b.n	80064fe <HAL_ADC_Start+0x96>
 8006516:	2300      	movs	r3, #0
 8006518:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800651c:	e7f0      	b.n	8006500 <HAL_ADC_Start+0x98>
 800651e:	2002      	movs	r0, #2
 8006520:	e7ee      	b.n	8006500 <HAL_ADC_Start+0x98>
 8006522:	bf00      	nop
 8006524:	40012800 	.word	0x40012800
 8006528:	40012400 	.word	0x40012400

0800652c <ADC_ConversionStop_Disable>:
 800652c:	b538      	push	{r3, r4, r5, lr}
 800652e:	6803      	ldr	r3, [r0, #0]
 8006530:	4604      	mov	r4, r0
 8006532:	689a      	ldr	r2, [r3, #8]
 8006534:	07d2      	lsls	r2, r2, #31
 8006536:	d401      	bmi.n	800653c <ADC_ConversionStop_Disable+0x10>
 8006538:	2000      	movs	r0, #0
 800653a:	bd38      	pop	{r3, r4, r5, pc}
 800653c:	689a      	ldr	r2, [r3, #8]
 800653e:	f022 0201 	bic.w	r2, r2, #1
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	f7ff fe5c 	bl	8006200 <HAL_GetTick>
 8006548:	4605      	mov	r5, r0
 800654a:	6823      	ldr	r3, [r4, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	07db      	lsls	r3, r3, #31
 8006550:	d5f2      	bpl.n	8006538 <ADC_ConversionStop_Disable+0xc>
 8006552:	f7ff fe55 	bl	8006200 <HAL_GetTick>
 8006556:	1b40      	subs	r0, r0, r5
 8006558:	2802      	cmp	r0, #2
 800655a:	d9f6      	bls.n	800654a <ADC_ConversionStop_Disable+0x1e>
 800655c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800655e:	2001      	movs	r0, #1
 8006560:	f043 0310 	orr.w	r3, r3, #16
 8006564:	62a3      	str	r3, [r4, #40]	; 0x28
 8006566:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006568:	f043 0301 	orr.w	r3, r3, #1
 800656c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800656e:	e7e4      	b.n	800653a <ADC_ConversionStop_Disable+0xe>

08006570 <HAL_ADC_Init>:
 8006570:	b570      	push	{r4, r5, r6, lr}
 8006572:	4604      	mov	r4, r0
 8006574:	2800      	cmp	r0, #0
 8006576:	d070      	beq.n	800665a <HAL_ADC_Init+0xea>
 8006578:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800657a:	b923      	cbnz	r3, 8006586 <HAL_ADC_Init+0x16>
 800657c:	62c3      	str	r3, [r0, #44]	; 0x2c
 800657e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8006582:	f7fd fea1 	bl	80042c8 <HAL_ADC_MspInit>
 8006586:	4620      	mov	r0, r4
 8006588:	f7ff ffd0 	bl	800652c <ADC_ConversionStop_Disable>
 800658c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800658e:	f013 0f10 	tst.w	r3, #16
 8006592:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006594:	d163      	bne.n	800665e <HAL_ADC_Init+0xee>
 8006596:	2800      	cmp	r0, #0
 8006598:	d161      	bne.n	800665e <HAL_ADC_Init+0xee>
 800659a:	69e1      	ldr	r1, [r4, #28]
 800659c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80065a0:	6862      	ldr	r2, [r4, #4]
 80065a2:	f023 0302 	bic.w	r3, r3, #2
 80065a6:	f043 0302 	orr.w	r3, r3, #2
 80065aa:	430a      	orrs	r2, r1
 80065ac:	68a1      	ldr	r1, [r4, #8]
 80065ae:	62a3      	str	r3, [r4, #40]	; 0x28
 80065b0:	7b23      	ldrb	r3, [r4, #12]
 80065b2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80065b6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
 80065ba:	d037      	beq.n	800662c <HAL_ADC_Init+0xbc>
 80065bc:	2901      	cmp	r1, #1
 80065be:	bf14      	ite	ne
 80065c0:	4606      	movne	r6, r0
 80065c2:	f44f 7680 	moveq.w	r6, #256	; 0x100
 80065c6:	7d25      	ldrb	r5, [r4, #20]
 80065c8:	2d01      	cmp	r5, #1
 80065ca:	d106      	bne.n	80065da <HAL_ADC_Init+0x6a>
 80065cc:	bb83      	cbnz	r3, 8006630 <HAL_ADC_Init+0xc0>
 80065ce:	69a3      	ldr	r3, [r4, #24]
 80065d0:	3b01      	subs	r3, #1
 80065d2:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 80065d6:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
 80065da:	6823      	ldr	r3, [r4, #0]
 80065dc:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80065e0:	685d      	ldr	r5, [r3, #4]
 80065e2:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 80065e6:	ea45 0506 	orr.w	r5, r5, r6
 80065ea:	605d      	str	r5, [r3, #4]
 80065ec:	689e      	ldr	r6, [r3, #8]
 80065ee:	4d1e      	ldr	r5, [pc, #120]	; (8006668 <HAL_ADC_Init+0xf8>)
 80065f0:	ea05 0506 	and.w	r5, r5, r6
 80065f4:	ea45 0502 	orr.w	r5, r5, r2
 80065f8:	609d      	str	r5, [r3, #8]
 80065fa:	d001      	beq.n	8006600 <HAL_ADC_Init+0x90>
 80065fc:	2901      	cmp	r1, #1
 80065fe:	d120      	bne.n	8006642 <HAL_ADC_Init+0xd2>
 8006600:	6921      	ldr	r1, [r4, #16]
 8006602:	3901      	subs	r1, #1
 8006604:	0509      	lsls	r1, r1, #20
 8006606:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8006608:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800660c:	4329      	orrs	r1, r5
 800660e:	62d9      	str	r1, [r3, #44]	; 0x2c
 8006610:	6899      	ldr	r1, [r3, #8]
 8006612:	4b16      	ldr	r3, [pc, #88]	; (800666c <HAL_ADC_Init+0xfc>)
 8006614:	400b      	ands	r3, r1
 8006616:	429a      	cmp	r2, r3
 8006618:	d115      	bne.n	8006646 <HAL_ADC_Init+0xd6>
 800661a:	2300      	movs	r3, #0
 800661c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800661e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006620:	f023 0303 	bic.w	r3, r3, #3
 8006624:	f043 0301 	orr.w	r3, r3, #1
 8006628:	62a3      	str	r3, [r4, #40]	; 0x28
 800662a:	bd70      	pop	{r4, r5, r6, pc}
 800662c:	460e      	mov	r6, r1
 800662e:	e7ca      	b.n	80065c6 <HAL_ADC_Init+0x56>
 8006630:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006632:	f043 0320 	orr.w	r3, r3, #32
 8006636:	62a3      	str	r3, [r4, #40]	; 0x28
 8006638:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800663a:	f043 0301 	orr.w	r3, r3, #1
 800663e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006640:	e7cb      	b.n	80065da <HAL_ADC_Init+0x6a>
 8006642:	2100      	movs	r1, #0
 8006644:	e7df      	b.n	8006606 <HAL_ADC_Init+0x96>
 8006646:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006648:	f023 0312 	bic.w	r3, r3, #18
 800664c:	f043 0310 	orr.w	r3, r3, #16
 8006650:	62a3      	str	r3, [r4, #40]	; 0x28
 8006652:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8006654:	f043 0301 	orr.w	r3, r3, #1
 8006658:	62e3      	str	r3, [r4, #44]	; 0x2c
 800665a:	2001      	movs	r0, #1
 800665c:	e7e5      	b.n	800662a <HAL_ADC_Init+0xba>
 800665e:	f043 0310 	orr.w	r3, r3, #16
 8006662:	62a3      	str	r3, [r4, #40]	; 0x28
 8006664:	e7f9      	b.n	800665a <HAL_ADC_Init+0xea>
 8006666:	bf00      	nop
 8006668:	ffe1f7fd 	.word	0xffe1f7fd
 800666c:	ff1f0efe 	.word	0xff1f0efe

08006670 <HAL_ADCEx_InjectedConvCpltCallback>:
 8006670:	4770      	bx	lr
	...

08006674 <HAL_ADCEx_MultiModeConfigChannel>:
 8006674:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8006678:	b510      	push	{r4, lr}
 800667a:	2b01      	cmp	r3, #1
 800667c:	4602      	mov	r2, r0
 800667e:	d01f      	beq.n	80066c0 <HAL_ADCEx_MultiModeConfigChannel+0x4c>
 8006680:	2301      	movs	r3, #1
 8006682:	6804      	ldr	r4, [r0, #0]
 8006684:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8006688:	68a3      	ldr	r3, [r4, #8]
 800668a:	07db      	lsls	r3, r3, #31
 800668c:	d412      	bmi.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 800668e:	4b0d      	ldr	r3, [pc, #52]	; (80066c4 <HAL_ADCEx_MultiModeConfigChannel+0x50>)
 8006690:	689b      	ldr	r3, [r3, #8]
 8006692:	f013 0301 	ands.w	r3, r3, #1
 8006696:	d10d      	bne.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 8006698:	480b      	ldr	r0, [pc, #44]	; (80066c8 <HAL_ADCEx_MultiModeConfigChannel+0x54>)
 800669a:	4284      	cmp	r4, r0
 800669c:	d10a      	bne.n	80066b4 <HAL_ADCEx_MultiModeConfigChannel+0x40>
 800669e:	6860      	ldr	r0, [r4, #4]
 80066a0:	6809      	ldr	r1, [r1, #0]
 80066a2:	f420 2070 	bic.w	r0, r0, #983040	; 0xf0000
 80066a6:	4301      	orrs	r1, r0
 80066a8:	4618      	mov	r0, r3
 80066aa:	6061      	str	r1, [r4, #4]
 80066ac:	2300      	movs	r3, #0
 80066ae:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
 80066b2:	bd10      	pop	{r4, pc}
 80066b4:	6a93      	ldr	r3, [r2, #40]	; 0x28
 80066b6:	2001      	movs	r0, #1
 80066b8:	f043 0320 	orr.w	r3, r3, #32
 80066bc:	6293      	str	r3, [r2, #40]	; 0x28
 80066be:	e7f5      	b.n	80066ac <HAL_ADCEx_MultiModeConfigChannel+0x38>
 80066c0:	2002      	movs	r0, #2
 80066c2:	e7f6      	b.n	80066b2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80066c4:	40012800 	.word	0x40012800
 80066c8:	40012400 	.word	0x40012400

080066cc <HAL_NVIC_SetPriorityGrouping>:
 80066cc:	4a07      	ldr	r2, [pc, #28]	; (80066ec <HAL_NVIC_SetPriorityGrouping+0x20>)
 80066ce:	0200      	lsls	r0, r0, #8
 80066d0:	68d3      	ldr	r3, [r2, #12]
 80066d2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 80066d6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80066da:	041b      	lsls	r3, r3, #16
 80066dc:	0c1b      	lsrs	r3, r3, #16
 80066de:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80066e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80066e6:	4303      	orrs	r3, r0
 80066e8:	60d3      	str	r3, [r2, #12]
 80066ea:	4770      	bx	lr
 80066ec:	e000ed00 	.word	0xe000ed00

080066f0 <HAL_NVIC_SetPriority>:
 80066f0:	4b17      	ldr	r3, [pc, #92]	; (8006750 <HAL_NVIC_SetPriority+0x60>)
 80066f2:	b570      	push	{r4, r5, r6, lr}
 80066f4:	68dc      	ldr	r4, [r3, #12]
 80066f6:	f04f 36ff 	mov.w	r6, #4294967295
 80066fa:	f3c4 2402 	ubfx	r4, r4, #8, #3
 80066fe:	f1c4 0507 	rsb	r5, r4, #7
 8006702:	2d04      	cmp	r5, #4
 8006704:	f104 0304 	add.w	r3, r4, #4
 8006708:	bf28      	it	cs
 800670a:	2504      	movcs	r5, #4
 800670c:	2b06      	cmp	r3, #6
 800670e:	bf98      	it	ls
 8006710:	2400      	movls	r4, #0
 8006712:	fa06 f305 	lsl.w	r3, r6, r5
 8006716:	bf88      	it	hi
 8006718:	3c03      	subhi	r4, #3
 800671a:	ea21 0303 	bic.w	r3, r1, r3
 800671e:	40a3      	lsls	r3, r4
 8006720:	fa06 f404 	lsl.w	r4, r6, r4
 8006724:	ea22 0404 	bic.w	r4, r2, r4
 8006728:	2800      	cmp	r0, #0
 800672a:	ea43 0304 	orr.w	r3, r3, r4
 800672e:	bfa8      	it	ge
 8006730:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
 8006734:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006738:	bfb8      	it	lt
 800673a:	4a06      	ldrlt	r2, [pc, #24]	; (8006754 <HAL_NVIC_SetPriority+0x64>)
 800673c:	b2db      	uxtb	r3, r3
 800673e:	bfab      	itete	ge
 8006740:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8006744:	f000 000f 	andlt.w	r0, r0, #15
 8006748:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
 800674c:	5413      	strblt	r3, [r2, r0]
 800674e:	bd70      	pop	{r4, r5, r6, pc}
 8006750:	e000ed00 	.word	0xe000ed00
 8006754:	e000ed14 	.word	0xe000ed14

08006758 <HAL_NVIC_EnableIRQ>:
 8006758:	2800      	cmp	r0, #0
 800675a:	db08      	blt.n	800676e <HAL_NVIC_EnableIRQ+0x16>
 800675c:	2301      	movs	r3, #1
 800675e:	0942      	lsrs	r2, r0, #5
 8006760:	f000 001f 	and.w	r0, r0, #31
 8006764:	fa03 f000 	lsl.w	r0, r3, r0
 8006768:	4b01      	ldr	r3, [pc, #4]	; (8006770 <HAL_NVIC_EnableIRQ+0x18>)
 800676a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800676e:	4770      	bx	lr
 8006770:	e000e100 	.word	0xe000e100

08006774 <HAL_DMA_Init>:
 8006774:	b510      	push	{r4, lr}
 8006776:	b330      	cbz	r0, 80067c6 <HAL_DMA_Init+0x52>
 8006778:	2214      	movs	r2, #20
 800677a:	6801      	ldr	r1, [r0, #0]
 800677c:	4b13      	ldr	r3, [pc, #76]	; (80067cc <HAL_DMA_Init+0x58>)
 800677e:	440b      	add	r3, r1
 8006780:	fbb3 f3f2 	udiv	r3, r3, r2
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	6403      	str	r3, [r0, #64]	; 0x40
 8006788:	4b11      	ldr	r3, [pc, #68]	; (80067d0 <HAL_DMA_Init+0x5c>)
 800678a:	680a      	ldr	r2, [r1, #0]
 800678c:	63c3      	str	r3, [r0, #60]	; 0x3c
 800678e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8006792:	4323      	orrs	r3, r4
 8006794:	68c4      	ldr	r4, [r0, #12]
 8006796:	f422 527f 	bic.w	r2, r2, #16320	; 0x3fc0
 800679a:	4323      	orrs	r3, r4
 800679c:	6904      	ldr	r4, [r0, #16]
 800679e:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 80067a2:	4323      	orrs	r3, r4
 80067a4:	6944      	ldr	r4, [r0, #20]
 80067a6:	4323      	orrs	r3, r4
 80067a8:	6984      	ldr	r4, [r0, #24]
 80067aa:	4323      	orrs	r3, r4
 80067ac:	69c4      	ldr	r4, [r0, #28]
 80067ae:	4323      	orrs	r3, r4
 80067b0:	4313      	orrs	r3, r2
 80067b2:	600b      	str	r3, [r1, #0]
 80067b4:	2201      	movs	r2, #1
 80067b6:	2300      	movs	r3, #0
 80067b8:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 80067bc:	6383      	str	r3, [r0, #56]	; 0x38
 80067be:	f880 3020 	strb.w	r3, [r0, #32]
 80067c2:	4618      	mov	r0, r3
 80067c4:	bd10      	pop	{r4, pc}
 80067c6:	2001      	movs	r0, #1
 80067c8:	e7fc      	b.n	80067c4 <HAL_DMA_Init+0x50>
 80067ca:	bf00      	nop
 80067cc:	bffdfff8 	.word	0xbffdfff8
 80067d0:	40020000 	.word	0x40020000

080067d4 <HAL_DMA_Start_IT>:
 80067d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067d6:	f890 4020 	ldrb.w	r4, [r0, #32]
 80067da:	2c01      	cmp	r4, #1
 80067dc:	d035      	beq.n	800684a <HAL_DMA_Start_IT+0x76>
 80067de:	2401      	movs	r4, #1
 80067e0:	f890 5021 	ldrb.w	r5, [r0, #33]	; 0x21
 80067e4:	f880 4020 	strb.w	r4, [r0, #32]
 80067e8:	42a5      	cmp	r5, r4
 80067ea:	f04f 0600 	mov.w	r6, #0
 80067ee:	f04f 0402 	mov.w	r4, #2
 80067f2:	d128      	bne.n	8006846 <HAL_DMA_Start_IT+0x72>
 80067f4:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
 80067f8:	6804      	ldr	r4, [r0, #0]
 80067fa:	6386      	str	r6, [r0, #56]	; 0x38
 80067fc:	6826      	ldr	r6, [r4, #0]
 80067fe:	f026 0601 	bic.w	r6, r6, #1
 8006802:	6026      	str	r6, [r4, #0]
 8006804:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8006808:	40bd      	lsls	r5, r7
 800680a:	6075      	str	r5, [r6, #4]
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	6843      	ldr	r3, [r0, #4]
 8006810:	6805      	ldr	r5, [r0, #0]
 8006812:	2b10      	cmp	r3, #16
 8006814:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006816:	bf0b      	itete	eq
 8006818:	60a2      	streq	r2, [r4, #8]
 800681a:	60a1      	strne	r1, [r4, #8]
 800681c:	60e1      	streq	r1, [r4, #12]
 800681e:	60e2      	strne	r2, [r4, #12]
 8006820:	b14b      	cbz	r3, 8006836 <HAL_DMA_Start_IT+0x62>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	f043 030e 	orr.w	r3, r3, #14
 8006828:	2000      	movs	r0, #0
 800682a:	6023      	str	r3, [r4, #0]
 800682c:	682b      	ldr	r3, [r5, #0]
 800682e:	f043 0301 	orr.w	r3, r3, #1
 8006832:	602b      	str	r3, [r5, #0]
 8006834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	f023 0304 	bic.w	r3, r3, #4
 800683c:	6023      	str	r3, [r4, #0]
 800683e:	6823      	ldr	r3, [r4, #0]
 8006840:	f043 030a 	orr.w	r3, r3, #10
 8006844:	e7f0      	b.n	8006828 <HAL_DMA_Start_IT+0x54>
 8006846:	f880 6020 	strb.w	r6, [r0, #32]
 800684a:	2002      	movs	r0, #2
 800684c:	e7f2      	b.n	8006834 <HAL_DMA_Start_IT+0x60>
	...

08006850 <HAL_DMA_Abort_IT>:
 8006850:	f890 3021 	ldrb.w	r3, [r0, #33]	; 0x21
 8006854:	b510      	push	{r4, lr}
 8006856:	2b02      	cmp	r3, #2
 8006858:	d003      	beq.n	8006862 <HAL_DMA_Abort_IT+0x12>
 800685a:	2304      	movs	r3, #4
 800685c:	6383      	str	r3, [r0, #56]	; 0x38
 800685e:	2001      	movs	r0, #1
 8006860:	bd10      	pop	{r4, pc}
 8006862:	6803      	ldr	r3, [r0, #0]
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f022 020e 	bic.w	r2, r2, #14
 800686a:	601a      	str	r2, [r3, #0]
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f022 0201 	bic.w	r2, r2, #1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	4a18      	ldr	r2, [pc, #96]	; (80068d8 <HAL_DMA_Abort_IT+0x88>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d01f      	beq.n	80068ba <HAL_DMA_Abort_IT+0x6a>
 800687a:	3214      	adds	r2, #20
 800687c:	4293      	cmp	r3, r2
 800687e:	d01e      	beq.n	80068be <HAL_DMA_Abort_IT+0x6e>
 8006880:	3214      	adds	r2, #20
 8006882:	4293      	cmp	r3, r2
 8006884:	d01d      	beq.n	80068c2 <HAL_DMA_Abort_IT+0x72>
 8006886:	3214      	adds	r2, #20
 8006888:	4293      	cmp	r3, r2
 800688a:	d01d      	beq.n	80068c8 <HAL_DMA_Abort_IT+0x78>
 800688c:	3214      	adds	r2, #20
 800688e:	4293      	cmp	r3, r2
 8006890:	d01d      	beq.n	80068ce <HAL_DMA_Abort_IT+0x7e>
 8006892:	3214      	adds	r2, #20
 8006894:	4293      	cmp	r3, r2
 8006896:	bf0c      	ite	eq
 8006898:	f44f 1380 	moveq.w	r3, #1048576	; 0x100000
 800689c:	f04f 7380 	movne.w	r3, #16777216	; 0x1000000
 80068a0:	4a0e      	ldr	r2, [pc, #56]	; (80068dc <HAL_DMA_Abort_IT+0x8c>)
 80068a2:	2400      	movs	r4, #0
 80068a4:	6053      	str	r3, [r2, #4]
 80068a6:	2301      	movs	r3, #1
 80068a8:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80068ac:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80068ae:	f880 4020 	strb.w	r4, [r0, #32]
 80068b2:	b17b      	cbz	r3, 80068d4 <HAL_DMA_Abort_IT+0x84>
 80068b4:	4798      	blx	r3
 80068b6:	4620      	mov	r0, r4
 80068b8:	e7d2      	b.n	8006860 <HAL_DMA_Abort_IT+0x10>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7f0      	b.n	80068a0 <HAL_DMA_Abort_IT+0x50>
 80068be:	2310      	movs	r3, #16
 80068c0:	e7ee      	b.n	80068a0 <HAL_DMA_Abort_IT+0x50>
 80068c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80068c6:	e7eb      	b.n	80068a0 <HAL_DMA_Abort_IT+0x50>
 80068c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068cc:	e7e8      	b.n	80068a0 <HAL_DMA_Abort_IT+0x50>
 80068ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80068d2:	e7e5      	b.n	80068a0 <HAL_DMA_Abort_IT+0x50>
 80068d4:	4618      	mov	r0, r3
 80068d6:	e7c3      	b.n	8006860 <HAL_DMA_Abort_IT+0x10>
 80068d8:	40020008 	.word	0x40020008
 80068dc:	40020000 	.word	0x40020000

080068e0 <HAL_DMA_IRQHandler>:
 80068e0:	b470      	push	{r4, r5, r6}
 80068e2:	2504      	movs	r5, #4
 80068e4:	6bc6      	ldr	r6, [r0, #60]	; 0x3c
 80068e6:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80068e8:	6834      	ldr	r4, [r6, #0]
 80068ea:	6803      	ldr	r3, [r0, #0]
 80068ec:	4095      	lsls	r5, r2
 80068ee:	4225      	tst	r5, r4
 80068f0:	6819      	ldr	r1, [r3, #0]
 80068f2:	d032      	beq.n	800695a <HAL_DMA_IRQHandler+0x7a>
 80068f4:	074d      	lsls	r5, r1, #29
 80068f6:	d530      	bpl.n	800695a <HAL_DMA_IRQHandler+0x7a>
 80068f8:	681a      	ldr	r2, [r3, #0]
 80068fa:	0696      	lsls	r6, r2, #26
 80068fc:	bf5e      	ittt	pl
 80068fe:	681a      	ldrpl	r2, [r3, #0]
 8006900:	f022 0204 	bicpl.w	r2, r2, #4
 8006904:	601a      	strpl	r2, [r3, #0]
 8006906:	4a3e      	ldr	r2, [pc, #248]	; (8006a00 <HAL_DMA_IRQHandler+0x120>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d019      	beq.n	8006940 <HAL_DMA_IRQHandler+0x60>
 800690c:	3214      	adds	r2, #20
 800690e:	4293      	cmp	r3, r2
 8006910:	d018      	beq.n	8006944 <HAL_DMA_IRQHandler+0x64>
 8006912:	3214      	adds	r2, #20
 8006914:	4293      	cmp	r3, r2
 8006916:	d017      	beq.n	8006948 <HAL_DMA_IRQHandler+0x68>
 8006918:	3214      	adds	r2, #20
 800691a:	4293      	cmp	r3, r2
 800691c:	d017      	beq.n	800694e <HAL_DMA_IRQHandler+0x6e>
 800691e:	3214      	adds	r2, #20
 8006920:	4293      	cmp	r3, r2
 8006922:	d017      	beq.n	8006954 <HAL_DMA_IRQHandler+0x74>
 8006924:	3214      	adds	r2, #20
 8006926:	4293      	cmp	r3, r2
 8006928:	bf0c      	ite	eq
 800692a:	f44f 0380 	moveq.w	r3, #4194304	; 0x400000
 800692e:	f04f 6380 	movne.w	r3, #67108864	; 0x4000000
 8006932:	4a34      	ldr	r2, [pc, #208]	; (8006a04 <HAL_DMA_IRQHandler+0x124>)
 8006934:	6053      	str	r3, [r2, #4]
 8006936:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8006938:	2b00      	cmp	r3, #0
 800693a:	d05e      	beq.n	80069fa <HAL_DMA_IRQHandler+0x11a>
 800693c:	bc70      	pop	{r4, r5, r6}
 800693e:	4718      	bx	r3
 8006940:	2304      	movs	r3, #4
 8006942:	e7f6      	b.n	8006932 <HAL_DMA_IRQHandler+0x52>
 8006944:	2340      	movs	r3, #64	; 0x40
 8006946:	e7f4      	b.n	8006932 <HAL_DMA_IRQHandler+0x52>
 8006948:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800694c:	e7f1      	b.n	8006932 <HAL_DMA_IRQHandler+0x52>
 800694e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006952:	e7ee      	b.n	8006932 <HAL_DMA_IRQHandler+0x52>
 8006954:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006958:	e7eb      	b.n	8006932 <HAL_DMA_IRQHandler+0x52>
 800695a:	2502      	movs	r5, #2
 800695c:	4095      	lsls	r5, r2
 800695e:	4225      	tst	r5, r4
 8006960:	d035      	beq.n	80069ce <HAL_DMA_IRQHandler+0xee>
 8006962:	078d      	lsls	r5, r1, #30
 8006964:	d533      	bpl.n	80069ce <HAL_DMA_IRQHandler+0xee>
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	0694      	lsls	r4, r2, #26
 800696a:	d406      	bmi.n	800697a <HAL_DMA_IRQHandler+0x9a>
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	f022 020a 	bic.w	r2, r2, #10
 8006972:	601a      	str	r2, [r3, #0]
 8006974:	2201      	movs	r2, #1
 8006976:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21
 800697a:	4a21      	ldr	r2, [pc, #132]	; (8006a00 <HAL_DMA_IRQHandler+0x120>)
 800697c:	4293      	cmp	r3, r2
 800697e:	d019      	beq.n	80069b4 <HAL_DMA_IRQHandler+0xd4>
 8006980:	3214      	adds	r2, #20
 8006982:	4293      	cmp	r3, r2
 8006984:	d018      	beq.n	80069b8 <HAL_DMA_IRQHandler+0xd8>
 8006986:	3214      	adds	r2, #20
 8006988:	4293      	cmp	r3, r2
 800698a:	d017      	beq.n	80069bc <HAL_DMA_IRQHandler+0xdc>
 800698c:	3214      	adds	r2, #20
 800698e:	4293      	cmp	r3, r2
 8006990:	d017      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xe2>
 8006992:	3214      	adds	r2, #20
 8006994:	4293      	cmp	r3, r2
 8006996:	d017      	beq.n	80069c8 <HAL_DMA_IRQHandler+0xe8>
 8006998:	3214      	adds	r2, #20
 800699a:	4293      	cmp	r3, r2
 800699c:	bf0c      	ite	eq
 800699e:	f44f 1300 	moveq.w	r3, #2097152	; 0x200000
 80069a2:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <HAL_DMA_IRQHandler+0x124>)
 80069a8:	6053      	str	r3, [r2, #4]
 80069aa:	2300      	movs	r3, #0
 80069ac:	f880 3020 	strb.w	r3, [r0, #32]
 80069b0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80069b2:	e7c1      	b.n	8006938 <HAL_DMA_IRQHandler+0x58>
 80069b4:	2302      	movs	r3, #2
 80069b6:	e7f6      	b.n	80069a6 <HAL_DMA_IRQHandler+0xc6>
 80069b8:	2320      	movs	r3, #32
 80069ba:	e7f4      	b.n	80069a6 <HAL_DMA_IRQHandler+0xc6>
 80069bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80069c0:	e7f1      	b.n	80069a6 <HAL_DMA_IRQHandler+0xc6>
 80069c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069c6:	e7ee      	b.n	80069a6 <HAL_DMA_IRQHandler+0xc6>
 80069c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80069cc:	e7eb      	b.n	80069a6 <HAL_DMA_IRQHandler+0xc6>
 80069ce:	2508      	movs	r5, #8
 80069d0:	4095      	lsls	r5, r2
 80069d2:	4225      	tst	r5, r4
 80069d4:	d011      	beq.n	80069fa <HAL_DMA_IRQHandler+0x11a>
 80069d6:	0709      	lsls	r1, r1, #28
 80069d8:	d50f      	bpl.n	80069fa <HAL_DMA_IRQHandler+0x11a>
 80069da:	6819      	ldr	r1, [r3, #0]
 80069dc:	f021 010e 	bic.w	r1, r1, #14
 80069e0:	6019      	str	r1, [r3, #0]
 80069e2:	2301      	movs	r3, #1
 80069e4:	fa03 f202 	lsl.w	r2, r3, r2
 80069e8:	6072      	str	r2, [r6, #4]
 80069ea:	6383      	str	r3, [r0, #56]	; 0x38
 80069ec:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
 80069f0:	2300      	movs	r3, #0
 80069f2:	f880 3020 	strb.w	r3, [r0, #32]
 80069f6:	6b03      	ldr	r3, [r0, #48]	; 0x30
 80069f8:	e79e      	b.n	8006938 <HAL_DMA_IRQHandler+0x58>
 80069fa:	bc70      	pop	{r4, r5, r6}
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40020008 	.word	0x40020008
 8006a04:	40020000 	.word	0x40020000

08006a08 <FLASH_SetErrorCode>:
 8006a08:	4a11      	ldr	r2, [pc, #68]	; (8006a50 <FLASH_SetErrorCode+0x48>)
 8006a0a:	68d3      	ldr	r3, [r2, #12]
 8006a0c:	f013 0310 	ands.w	r3, r3, #16
 8006a10:	d005      	beq.n	8006a1e <FLASH_SetErrorCode+0x16>
 8006a12:	4910      	ldr	r1, [pc, #64]	; (8006a54 <FLASH_SetErrorCode+0x4c>)
 8006a14:	69cb      	ldr	r3, [r1, #28]
 8006a16:	f043 0302 	orr.w	r3, r3, #2
 8006a1a:	61cb      	str	r3, [r1, #28]
 8006a1c:	2310      	movs	r3, #16
 8006a1e:	68d2      	ldr	r2, [r2, #12]
 8006a20:	0750      	lsls	r0, r2, #29
 8006a22:	d506      	bpl.n	8006a32 <FLASH_SetErrorCode+0x2a>
 8006a24:	490b      	ldr	r1, [pc, #44]	; (8006a54 <FLASH_SetErrorCode+0x4c>)
 8006a26:	f043 0304 	orr.w	r3, r3, #4
 8006a2a:	69ca      	ldr	r2, [r1, #28]
 8006a2c:	f042 0201 	orr.w	r2, r2, #1
 8006a30:	61ca      	str	r2, [r1, #28]
 8006a32:	4a07      	ldr	r2, [pc, #28]	; (8006a50 <FLASH_SetErrorCode+0x48>)
 8006a34:	69d1      	ldr	r1, [r2, #28]
 8006a36:	07c9      	lsls	r1, r1, #31
 8006a38:	d508      	bpl.n	8006a4c <FLASH_SetErrorCode+0x44>
 8006a3a:	4806      	ldr	r0, [pc, #24]	; (8006a54 <FLASH_SetErrorCode+0x4c>)
 8006a3c:	69c1      	ldr	r1, [r0, #28]
 8006a3e:	f041 0104 	orr.w	r1, r1, #4
 8006a42:	61c1      	str	r1, [r0, #28]
 8006a44:	69d1      	ldr	r1, [r2, #28]
 8006a46:	f021 0101 	bic.w	r1, r1, #1
 8006a4a:	61d1      	str	r1, [r2, #28]
 8006a4c:	60d3      	str	r3, [r2, #12]
 8006a4e:	4770      	bx	lr
 8006a50:	40022000 	.word	0x40022000
 8006a54:	200044e0 	.word	0x200044e0

08006a58 <HAL_FLASH_Unlock>:
 8006a58:	4b06      	ldr	r3, [pc, #24]	; (8006a74 <HAL_FLASH_Unlock+0x1c>)
 8006a5a:	6918      	ldr	r0, [r3, #16]
 8006a5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a60:	d007      	beq.n	8006a72 <HAL_FLASH_Unlock+0x1a>
 8006a62:	4a05      	ldr	r2, [pc, #20]	; (8006a78 <HAL_FLASH_Unlock+0x20>)
 8006a64:	605a      	str	r2, [r3, #4]
 8006a66:	f102 3288 	add.w	r2, r2, #2290649224	; 0x88888888
 8006a6a:	605a      	str	r2, [r3, #4]
 8006a6c:	6918      	ldr	r0, [r3, #16]
 8006a6e:	f3c0 10c0 	ubfx	r0, r0, #7, #1
 8006a72:	4770      	bx	lr
 8006a74:	40022000 	.word	0x40022000
 8006a78:	45670123 	.word	0x45670123

08006a7c <HAL_FLASH_Lock>:
 8006a7c:	4a03      	ldr	r2, [pc, #12]	; (8006a8c <HAL_FLASH_Lock+0x10>)
 8006a7e:	2000      	movs	r0, #0
 8006a80:	6913      	ldr	r3, [r2, #16]
 8006a82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a86:	6113      	str	r3, [r2, #16]
 8006a88:	4770      	bx	lr
 8006a8a:	bf00      	nop
 8006a8c:	40022000 	.word	0x40022000

08006a90 <FLASH_WaitForLastOperation>:
 8006a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a92:	4606      	mov	r6, r0
 8006a94:	f7ff fbb4 	bl	8006200 <HAL_GetTick>
 8006a98:	4c11      	ldr	r4, [pc, #68]	; (8006ae0 <FLASH_WaitForLastOperation+0x50>)
 8006a9a:	4607      	mov	r7, r0
 8006a9c:	4625      	mov	r5, r4
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	07d8      	lsls	r0, r3, #31
 8006aa2:	d412      	bmi.n	8006aca <FLASH_WaitForLastOperation+0x3a>
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	0699      	lsls	r1, r3, #26
 8006aa8:	bf44      	itt	mi
 8006aaa:	2320      	movmi	r3, #32
 8006aac:	60e3      	strmi	r3, [r4, #12]
 8006aae:	68eb      	ldr	r3, [r5, #12]
 8006ab0:	06da      	lsls	r2, r3, #27
 8006ab2:	d406      	bmi.n	8006ac2 <FLASH_WaitForLastOperation+0x32>
 8006ab4:	69eb      	ldr	r3, [r5, #28]
 8006ab6:	07db      	lsls	r3, r3, #31
 8006ab8:	d403      	bmi.n	8006ac2 <FLASH_WaitForLastOperation+0x32>
 8006aba:	68e8      	ldr	r0, [r5, #12]
 8006abc:	f010 0004 	ands.w	r0, r0, #4
 8006ac0:	d007      	beq.n	8006ad2 <FLASH_WaitForLastOperation+0x42>
 8006ac2:	f7ff ffa1 	bl	8006a08 <FLASH_SetErrorCode>
 8006ac6:	2001      	movs	r0, #1
 8006ac8:	e003      	b.n	8006ad2 <FLASH_WaitForLastOperation+0x42>
 8006aca:	1c73      	adds	r3, r6, #1
 8006acc:	d0e7      	beq.n	8006a9e <FLASH_WaitForLastOperation+0xe>
 8006ace:	b90e      	cbnz	r6, 8006ad4 <FLASH_WaitForLastOperation+0x44>
 8006ad0:	2003      	movs	r0, #3
 8006ad2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ad4:	f7ff fb94 	bl	8006200 <HAL_GetTick>
 8006ad8:	1bc0      	subs	r0, r0, r7
 8006ada:	42b0      	cmp	r0, r6
 8006adc:	d9df      	bls.n	8006a9e <FLASH_WaitForLastOperation+0xe>
 8006ade:	e7f7      	b.n	8006ad0 <FLASH_WaitForLastOperation+0x40>
 8006ae0:	40022000 	.word	0x40022000

08006ae4 <HAL_FLASH_Program>:
 8006ae4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ae8:	4c24      	ldr	r4, [pc, #144]	; (8006b7c <HAL_FLASH_Program+0x98>)
 8006aea:	461e      	mov	r6, r3
 8006aec:	7e23      	ldrb	r3, [r4, #24]
 8006aee:	4605      	mov	r5, r0
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	460f      	mov	r7, r1
 8006af4:	4690      	mov	r8, r2
 8006af6:	d03f      	beq.n	8006b78 <HAL_FLASH_Program+0x94>
 8006af8:	2301      	movs	r3, #1
 8006afa:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006afe:	7623      	strb	r3, [r4, #24]
 8006b00:	f7ff ffc6 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006b04:	bba0      	cbnz	r0, 8006b70 <HAL_FLASH_Program+0x8c>
 8006b06:	2d01      	cmp	r5, #1
 8006b08:	d003      	beq.n	8006b12 <HAL_FLASH_Program+0x2e>
 8006b0a:	2d02      	cmp	r5, #2
 8006b0c:	bf0c      	ite	eq
 8006b0e:	2502      	moveq	r5, #2
 8006b10:	2504      	movne	r5, #4
 8006b12:	f04f 0900 	mov.w	r9, #0
 8006b16:	46cb      	mov	fp, r9
 8006b18:	f8df a064 	ldr.w	sl, [pc, #100]	; 8006b80 <HAL_FLASH_Program+0x9c>
 8006b1c:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8006b20:	f1c3 0120 	rsb	r1, r3, #32
 8006b24:	f1a3 0220 	sub.w	r2, r3, #32
 8006b28:	fa06 f101 	lsl.w	r1, r6, r1
 8006b2c:	fa28 f303 	lsr.w	r3, r8, r3
 8006b30:	f8c4 b01c 	str.w	fp, [r4, #28]
 8006b34:	430b      	orrs	r3, r1
 8006b36:	fa26 f202 	lsr.w	r2, r6, r2
 8006b3a:	4313      	orrs	r3, r2
 8006b3c:	f8da 2010 	ldr.w	r2, [sl, #16]
 8006b40:	b29b      	uxth	r3, r3
 8006b42:	f042 0201 	orr.w	r2, r2, #1
 8006b46:	f8ca 2010 	str.w	r2, [sl, #16]
 8006b4a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b4e:	f827 3019 	strh.w	r3, [r7, r9, lsl #1]
 8006b52:	f7ff ff9d 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006b56:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006b5a:	f023 0301 	bic.w	r3, r3, #1
 8006b5e:	f8ca 3010 	str.w	r3, [sl, #16]
 8006b62:	b928      	cbnz	r0, 8006b70 <HAL_FLASH_Program+0x8c>
 8006b64:	f109 0901 	add.w	r9, r9, #1
 8006b68:	fa5f f389 	uxtb.w	r3, r9
 8006b6c:	429d      	cmp	r5, r3
 8006b6e:	d8d5      	bhi.n	8006b1c <HAL_FLASH_Program+0x38>
 8006b70:	2300      	movs	r3, #0
 8006b72:	7623      	strb	r3, [r4, #24]
 8006b74:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b78:	2002      	movs	r0, #2
 8006b7a:	e7fb      	b.n	8006b74 <HAL_FLASH_Program+0x90>
 8006b7c:	200044e0 	.word	0x200044e0
 8006b80:	40022000 	.word	0x40022000

08006b84 <FLASH_MassErase.isra.0>:
 8006b84:	2200      	movs	r2, #0
 8006b86:	4b06      	ldr	r3, [pc, #24]	; (8006ba0 <FLASH_MassErase.isra.0+0x1c>)
 8006b88:	61da      	str	r2, [r3, #28]
 8006b8a:	4b06      	ldr	r3, [pc, #24]	; (8006ba4 <FLASH_MassErase.isra.0+0x20>)
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	f042 0204 	orr.w	r2, r2, #4
 8006b92:	611a      	str	r2, [r3, #16]
 8006b94:	691a      	ldr	r2, [r3, #16]
 8006b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b9a:	611a      	str	r2, [r3, #16]
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	200044e0 	.word	0x200044e0
 8006ba4:	40022000 	.word	0x40022000

08006ba8 <FLASH_PageErase>:
 8006ba8:	2200      	movs	r2, #0
 8006baa:	4b06      	ldr	r3, [pc, #24]	; (8006bc4 <FLASH_PageErase+0x1c>)
 8006bac:	61da      	str	r2, [r3, #28]
 8006bae:	4b06      	ldr	r3, [pc, #24]	; (8006bc8 <FLASH_PageErase+0x20>)
 8006bb0:	691a      	ldr	r2, [r3, #16]
 8006bb2:	f042 0202 	orr.w	r2, r2, #2
 8006bb6:	611a      	str	r2, [r3, #16]
 8006bb8:	6158      	str	r0, [r3, #20]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bc0:	611a      	str	r2, [r3, #16]
 8006bc2:	4770      	bx	lr
 8006bc4:	200044e0 	.word	0x200044e0
 8006bc8:	40022000 	.word	0x40022000

08006bcc <HAL_FLASHEx_Erase>:
 8006bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bd0:	4d22      	ldr	r5, [pc, #136]	; (8006c5c <HAL_FLASHEx_Erase+0x90>)
 8006bd2:	4607      	mov	r7, r0
 8006bd4:	7e2b      	ldrb	r3, [r5, #24]
 8006bd6:	4688      	mov	r8, r1
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d03d      	beq.n	8006c58 <HAL_FLASHEx_Erase+0x8c>
 8006bdc:	2401      	movs	r4, #1
 8006bde:	6803      	ldr	r3, [r0, #0]
 8006be0:	762c      	strb	r4, [r5, #24]
 8006be2:	2b02      	cmp	r3, #2
 8006be4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006be8:	d113      	bne.n	8006c12 <HAL_FLASHEx_Erase+0x46>
 8006bea:	f7ff ff51 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006bee:	b120      	cbz	r0, 8006bfa <HAL_FLASHEx_Erase+0x2e>
 8006bf0:	2001      	movs	r0, #1
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	762b      	strb	r3, [r5, #24]
 8006bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bfa:	f7ff ffc3 	bl	8006b84 <FLASH_MassErase.isra.0>
 8006bfe:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c02:	f7ff ff45 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006c06:	4a16      	ldr	r2, [pc, #88]	; (8006c60 <HAL_FLASHEx_Erase+0x94>)
 8006c08:	6913      	ldr	r3, [r2, #16]
 8006c0a:	f023 0304 	bic.w	r3, r3, #4
 8006c0e:	6113      	str	r3, [r2, #16]
 8006c10:	e7ef      	b.n	8006bf2 <HAL_FLASHEx_Erase+0x26>
 8006c12:	f7ff ff3d 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006c16:	2800      	cmp	r0, #0
 8006c18:	d1ea      	bne.n	8006bf0 <HAL_FLASHEx_Erase+0x24>
 8006c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006c1e:	f8c8 3000 	str.w	r3, [r8]
 8006c22:	4620      	mov	r0, r4
 8006c24:	68be      	ldr	r6, [r7, #8]
 8006c26:	4c0e      	ldr	r4, [pc, #56]	; (8006c60 <HAL_FLASHEx_Erase+0x94>)
 8006c28:	e9d7 3202 	ldrd	r3, r2, [r7, #8]
 8006c2c:	eb03 2382 	add.w	r3, r3, r2, lsl #10
 8006c30:	42b3      	cmp	r3, r6
 8006c32:	d9de      	bls.n	8006bf2 <HAL_FLASHEx_Erase+0x26>
 8006c34:	4630      	mov	r0, r6
 8006c36:	f7ff ffb7 	bl	8006ba8 <FLASH_PageErase>
 8006c3a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006c3e:	f7ff ff27 	bl	8006a90 <FLASH_WaitForLastOperation>
 8006c42:	6923      	ldr	r3, [r4, #16]
 8006c44:	f023 0302 	bic.w	r3, r3, #2
 8006c48:	6123      	str	r3, [r4, #16]
 8006c4a:	b110      	cbz	r0, 8006c52 <HAL_FLASHEx_Erase+0x86>
 8006c4c:	f8c8 6000 	str.w	r6, [r8]
 8006c50:	e7cf      	b.n	8006bf2 <HAL_FLASHEx_Erase+0x26>
 8006c52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8006c56:	e7e7      	b.n	8006c28 <HAL_FLASHEx_Erase+0x5c>
 8006c58:	2002      	movs	r0, #2
 8006c5a:	e7cc      	b.n	8006bf6 <HAL_FLASHEx_Erase+0x2a>
 8006c5c:	200044e0 	.word	0x200044e0
 8006c60:	40022000 	.word	0x40022000

08006c64 <HAL_GPIO_Init>:
 8006c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c68:	2400      	movs	r4, #0
 8006c6a:	4626      	mov	r6, r4
 8006c6c:	4b65      	ldr	r3, [pc, #404]	; (8006e04 <HAL_GPIO_Init+0x1a0>)
 8006c6e:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8006e14 <HAL_GPIO_Init+0x1b0>
 8006c72:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8006e18 <HAL_GPIO_Init+0x1b4>
 8006c76:	680a      	ldr	r2, [r1, #0]
 8006c78:	fa32 f506 	lsrs.w	r5, r2, r6
 8006c7c:	d102      	bne.n	8006c84 <HAL_GPIO_Init+0x20>
 8006c7e:	b003      	add	sp, #12
 8006c80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c84:	f04f 0801 	mov.w	r8, #1
 8006c88:	fa08 f806 	lsl.w	r8, r8, r6
 8006c8c:	ea02 0208 	and.w	r2, r2, r8
 8006c90:	4590      	cmp	r8, r2
 8006c92:	d17e      	bne.n	8006d92 <HAL_GPIO_Init+0x12e>
 8006c94:	684d      	ldr	r5, [r1, #4]
 8006c96:	2d12      	cmp	r5, #18
 8006c98:	f000 80a9 	beq.w	8006dee <HAL_GPIO_Init+0x18a>
 8006c9c:	f200 8082 	bhi.w	8006da4 <HAL_GPIO_Init+0x140>
 8006ca0:	2d02      	cmp	r5, #2
 8006ca2:	f000 80a1 	beq.w	8006de8 <HAL_GPIO_Init+0x184>
 8006ca6:	d876      	bhi.n	8006d96 <HAL_GPIO_Init+0x132>
 8006ca8:	2d00      	cmp	r5, #0
 8006caa:	f000 8088 	beq.w	8006dbe <HAL_GPIO_Init+0x15a>
 8006cae:	2d01      	cmp	r5, #1
 8006cb0:	f000 8098 	beq.w	8006de4 <HAL_GPIO_Init+0x180>
 8006cb4:	f04f 090f 	mov.w	r9, #15
 8006cb8:	2aff      	cmp	r2, #255	; 0xff
 8006cba:	bf93      	iteet	ls
 8006cbc:	4682      	movls	sl, r0
 8006cbe:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 8006cc2:	3d08      	subhi	r5, #8
 8006cc4:	f8d0 b000 	ldrls.w	fp, [r0]
 8006cc8:	bf92      	itee	ls
 8006cca:	00b5      	lslls	r5, r6, #2
 8006ccc:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8006cd0:	00ad      	lslhi	r5, r5, #2
 8006cd2:	fa09 f805 	lsl.w	r8, r9, r5
 8006cd6:	ea2b 0808 	bic.w	r8, fp, r8
 8006cda:	fa04 f505 	lsl.w	r5, r4, r5
 8006cde:	bf88      	it	hi
 8006ce0:	f100 0a04 	addhi.w	sl, r0, #4
 8006ce4:	ea48 0505 	orr.w	r5, r8, r5
 8006ce8:	f8ca 5000 	str.w	r5, [sl]
 8006cec:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8006cf0:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8006cf4:	d04d      	beq.n	8006d92 <HAL_GPIO_Init+0x12e>
 8006cf6:	4f44      	ldr	r7, [pc, #272]	; (8006e08 <HAL_GPIO_Init+0x1a4>)
 8006cf8:	f026 0803 	bic.w	r8, r6, #3
 8006cfc:	69bd      	ldr	r5, [r7, #24]
 8006cfe:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8006d02:	f045 0501 	orr.w	r5, r5, #1
 8006d06:	61bd      	str	r5, [r7, #24]
 8006d08:	69bd      	ldr	r5, [r7, #24]
 8006d0a:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
 8006d0e:	f005 0501 	and.w	r5, r5, #1
 8006d12:	9501      	str	r5, [sp, #4]
 8006d14:	f006 0b03 	and.w	fp, r6, #3
 8006d18:	9d01      	ldr	r5, [sp, #4]
 8006d1a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8006d1e:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8006d22:	fa09 f90b 	lsl.w	r9, r9, fp
 8006d26:	ea25 0909 	bic.w	r9, r5, r9
 8006d2a:	4d38      	ldr	r5, [pc, #224]	; (8006e0c <HAL_GPIO_Init+0x1a8>)
 8006d2c:	42a8      	cmp	r0, r5
 8006d2e:	d063      	beq.n	8006df8 <HAL_GPIO_Init+0x194>
 8006d30:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d34:	42a8      	cmp	r0, r5
 8006d36:	d061      	beq.n	8006dfc <HAL_GPIO_Init+0x198>
 8006d38:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d3c:	42a8      	cmp	r0, r5
 8006d3e:	d05f      	beq.n	8006e00 <HAL_GPIO_Init+0x19c>
 8006d40:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8006d44:	42a8      	cmp	r0, r5
 8006d46:	bf0c      	ite	eq
 8006d48:	2503      	moveq	r5, #3
 8006d4a:	2504      	movne	r5, #4
 8006d4c:	fa05 f50b 	lsl.w	r5, r5, fp
 8006d50:	ea45 0509 	orr.w	r5, r5, r9
 8006d54:	f8c8 5008 	str.w	r5, [r8, #8]
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
 8006d5e:	bf14      	ite	ne
 8006d60:	4315      	orrne	r5, r2
 8006d62:	4395      	biceq	r5, r2
 8006d64:	601d      	str	r5, [r3, #0]
 8006d66:	685d      	ldr	r5, [r3, #4]
 8006d68:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
 8006d6c:	bf14      	ite	ne
 8006d6e:	4315      	orrne	r5, r2
 8006d70:	4395      	biceq	r5, r2
 8006d72:	605d      	str	r5, [r3, #4]
 8006d74:	689d      	ldr	r5, [r3, #8]
 8006d76:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
 8006d7a:	bf14      	ite	ne
 8006d7c:	4315      	orrne	r5, r2
 8006d7e:	4395      	biceq	r5, r2
 8006d80:	609d      	str	r5, [r3, #8]
 8006d82:	68dd      	ldr	r5, [r3, #12]
 8006d84:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
 8006d88:	bf14      	ite	ne
 8006d8a:	432a      	orrne	r2, r5
 8006d8c:	ea25 0202 	biceq.w	r2, r5, r2
 8006d90:	60da      	str	r2, [r3, #12]
 8006d92:	3601      	adds	r6, #1
 8006d94:	e76f      	b.n	8006c76 <HAL_GPIO_Init+0x12>
 8006d96:	2d03      	cmp	r5, #3
 8006d98:	d022      	beq.n	8006de0 <HAL_GPIO_Init+0x17c>
 8006d9a:	2d11      	cmp	r5, #17
 8006d9c:	d18a      	bne.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006d9e:	68cc      	ldr	r4, [r1, #12]
 8006da0:	3404      	adds	r4, #4
 8006da2:	e787      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006da4:	4f1a      	ldr	r7, [pc, #104]	; (8006e10 <HAL_GPIO_Init+0x1ac>)
 8006da6:	42bd      	cmp	r5, r7
 8006da8:	d009      	beq.n	8006dbe <HAL_GPIO_Init+0x15a>
 8006daa:	d812      	bhi.n	8006dd2 <HAL_GPIO_Init+0x16e>
 8006dac:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8006e1c <HAL_GPIO_Init+0x1b8>
 8006db0:	454d      	cmp	r5, r9
 8006db2:	d004      	beq.n	8006dbe <HAL_GPIO_Init+0x15a>
 8006db4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8006db8:	454d      	cmp	r5, r9
 8006dba:	f47f af7b 	bne.w	8006cb4 <HAL_GPIO_Init+0x50>
 8006dbe:	688c      	ldr	r4, [r1, #8]
 8006dc0:	b1c4      	cbz	r4, 8006df4 <HAL_GPIO_Init+0x190>
 8006dc2:	2c01      	cmp	r4, #1
 8006dc4:	bf0c      	ite	eq
 8006dc6:	f8c0 8010 	streq.w	r8, [r0, #16]
 8006dca:	f8c0 8014 	strne.w	r8, [r0, #20]
 8006dce:	2408      	movs	r4, #8
 8006dd0:	e770      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006dd2:	4565      	cmp	r5, ip
 8006dd4:	d0f3      	beq.n	8006dbe <HAL_GPIO_Init+0x15a>
 8006dd6:	4575      	cmp	r5, lr
 8006dd8:	d0f1      	beq.n	8006dbe <HAL_GPIO_Init+0x15a>
 8006dda:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8006e20 <HAL_GPIO_Init+0x1bc>
 8006dde:	e7eb      	b.n	8006db8 <HAL_GPIO_Init+0x154>
 8006de0:	2400      	movs	r4, #0
 8006de2:	e767      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006de4:	68cc      	ldr	r4, [r1, #12]
 8006de6:	e765      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006de8:	68cc      	ldr	r4, [r1, #12]
 8006dea:	3408      	adds	r4, #8
 8006dec:	e762      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006dee:	68cc      	ldr	r4, [r1, #12]
 8006df0:	340c      	adds	r4, #12
 8006df2:	e75f      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006df4:	2404      	movs	r4, #4
 8006df6:	e75d      	b.n	8006cb4 <HAL_GPIO_Init+0x50>
 8006df8:	2500      	movs	r5, #0
 8006dfa:	e7a7      	b.n	8006d4c <HAL_GPIO_Init+0xe8>
 8006dfc:	2501      	movs	r5, #1
 8006dfe:	e7a5      	b.n	8006d4c <HAL_GPIO_Init+0xe8>
 8006e00:	2502      	movs	r5, #2
 8006e02:	e7a3      	b.n	8006d4c <HAL_GPIO_Init+0xe8>
 8006e04:	40010400 	.word	0x40010400
 8006e08:	40021000 	.word	0x40021000
 8006e0c:	40010800 	.word	0x40010800
 8006e10:	10210000 	.word	0x10210000
 8006e14:	10310000 	.word	0x10310000
 8006e18:	10320000 	.word	0x10320000
 8006e1c:	10110000 	.word	0x10110000
 8006e20:	10220000 	.word	0x10220000

08006e24 <HAL_GPIO_ReadPin>:
 8006e24:	6883      	ldr	r3, [r0, #8]
 8006e26:	4219      	tst	r1, r3
 8006e28:	bf14      	ite	ne
 8006e2a:	2001      	movne	r0, #1
 8006e2c:	2000      	moveq	r0, #0
 8006e2e:	4770      	bx	lr

08006e30 <HAL_GPIO_WritePin>:
 8006e30:	b10a      	cbz	r2, 8006e36 <HAL_GPIO_WritePin+0x6>
 8006e32:	6101      	str	r1, [r0, #16]
 8006e34:	4770      	bx	lr
 8006e36:	0409      	lsls	r1, r1, #16
 8006e38:	e7fb      	b.n	8006e32 <HAL_GPIO_WritePin+0x2>
	...

08006e3c <HAL_RCC_OscConfig>:
 8006e3c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006e40:	4605      	mov	r5, r0
 8006e42:	b908      	cbnz	r0, 8006e48 <HAL_RCC_OscConfig+0xc>
 8006e44:	2001      	movs	r0, #1
 8006e46:	e03c      	b.n	8006ec2 <HAL_RCC_OscConfig+0x86>
 8006e48:	6803      	ldr	r3, [r0, #0]
 8006e4a:	07db      	lsls	r3, r3, #31
 8006e4c:	d410      	bmi.n	8006e70 <HAL_RCC_OscConfig+0x34>
 8006e4e:	682b      	ldr	r3, [r5, #0]
 8006e50:	079f      	lsls	r7, r3, #30
 8006e52:	d45d      	bmi.n	8006f10 <HAL_RCC_OscConfig+0xd4>
 8006e54:	682b      	ldr	r3, [r5, #0]
 8006e56:	0719      	lsls	r1, r3, #28
 8006e58:	f100 8094 	bmi.w	8006f84 <HAL_RCC_OscConfig+0x148>
 8006e5c:	682b      	ldr	r3, [r5, #0]
 8006e5e:	075a      	lsls	r2, r3, #29
 8006e60:	f100 80be 	bmi.w	8006fe0 <HAL_RCC_OscConfig+0x1a4>
 8006e64:	69e8      	ldr	r0, [r5, #28]
 8006e66:	2800      	cmp	r0, #0
 8006e68:	f040 812c 	bne.w	80070c4 <HAL_RCC_OscConfig+0x288>
 8006e6c:	2000      	movs	r0, #0
 8006e6e:	e028      	b.n	8006ec2 <HAL_RCC_OscConfig+0x86>
 8006e70:	4c8f      	ldr	r4, [pc, #572]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8006e72:	6863      	ldr	r3, [r4, #4]
 8006e74:	f003 030c 	and.w	r3, r3, #12
 8006e78:	2b04      	cmp	r3, #4
 8006e7a:	d007      	beq.n	8006e8c <HAL_RCC_OscConfig+0x50>
 8006e7c:	6863      	ldr	r3, [r4, #4]
 8006e7e:	f003 030c 	and.w	r3, r3, #12
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d109      	bne.n	8006e9a <HAL_RCC_OscConfig+0x5e>
 8006e86:	6863      	ldr	r3, [r4, #4]
 8006e88:	03de      	lsls	r6, r3, #15
 8006e8a:	d506      	bpl.n	8006e9a <HAL_RCC_OscConfig+0x5e>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	039c      	lsls	r4, r3, #14
 8006e90:	d5dd      	bpl.n	8006e4e <HAL_RCC_OscConfig+0x12>
 8006e92:	686b      	ldr	r3, [r5, #4]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d1da      	bne.n	8006e4e <HAL_RCC_OscConfig+0x12>
 8006e98:	e7d4      	b.n	8006e44 <HAL_RCC_OscConfig+0x8>
 8006e9a:	686b      	ldr	r3, [r5, #4]
 8006e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ea0:	d112      	bne.n	8006ec8 <HAL_RCC_OscConfig+0x8c>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ea8:	6023      	str	r3, [r4, #0]
 8006eaa:	f7ff f9a9 	bl	8006200 <HAL_GetTick>
 8006eae:	4606      	mov	r6, r0
 8006eb0:	6823      	ldr	r3, [r4, #0]
 8006eb2:	0398      	lsls	r0, r3, #14
 8006eb4:	d4cb      	bmi.n	8006e4e <HAL_RCC_OscConfig+0x12>
 8006eb6:	f7ff f9a3 	bl	8006200 <HAL_GetTick>
 8006eba:	1b80      	subs	r0, r0, r6
 8006ebc:	2864      	cmp	r0, #100	; 0x64
 8006ebe:	d9f7      	bls.n	8006eb0 <HAL_RCC_OscConfig+0x74>
 8006ec0:	2003      	movs	r0, #3
 8006ec2:	b002      	add	sp, #8
 8006ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ec8:	b99b      	cbnz	r3, 8006ef2 <HAL_RCC_OscConfig+0xb6>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	f7ff f991 	bl	8006200 <HAL_GetTick>
 8006ede:	4606      	mov	r6, r0
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	0399      	lsls	r1, r3, #14
 8006ee4:	d5b3      	bpl.n	8006e4e <HAL_RCC_OscConfig+0x12>
 8006ee6:	f7ff f98b 	bl	8006200 <HAL_GetTick>
 8006eea:	1b80      	subs	r0, r0, r6
 8006eec:	2864      	cmp	r0, #100	; 0x64
 8006eee:	d9f7      	bls.n	8006ee0 <HAL_RCC_OscConfig+0xa4>
 8006ef0:	e7e6      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8006ef2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ef6:	6823      	ldr	r3, [r4, #0]
 8006ef8:	d103      	bne.n	8006f02 <HAL_RCC_OscConfig+0xc6>
 8006efa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006efe:	6023      	str	r3, [r4, #0]
 8006f00:	e7cf      	b.n	8006ea2 <HAL_RCC_OscConfig+0x66>
 8006f02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f06:	6023      	str	r3, [r4, #0]
 8006f08:	6823      	ldr	r3, [r4, #0]
 8006f0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f0e:	e7cb      	b.n	8006ea8 <HAL_RCC_OscConfig+0x6c>
 8006f10:	4c67      	ldr	r4, [pc, #412]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8006f12:	6863      	ldr	r3, [r4, #4]
 8006f14:	f013 0f0c 	tst.w	r3, #12
 8006f18:	d007      	beq.n	8006f2a <HAL_RCC_OscConfig+0xee>
 8006f1a:	6863      	ldr	r3, [r4, #4]
 8006f1c:	f003 030c 	and.w	r3, r3, #12
 8006f20:	2b08      	cmp	r3, #8
 8006f22:	d110      	bne.n	8006f46 <HAL_RCC_OscConfig+0x10a>
 8006f24:	6863      	ldr	r3, [r4, #4]
 8006f26:	03da      	lsls	r2, r3, #15
 8006f28:	d40d      	bmi.n	8006f46 <HAL_RCC_OscConfig+0x10a>
 8006f2a:	6823      	ldr	r3, [r4, #0]
 8006f2c:	079b      	lsls	r3, r3, #30
 8006f2e:	d502      	bpl.n	8006f36 <HAL_RCC_OscConfig+0xfa>
 8006f30:	692b      	ldr	r3, [r5, #16]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d186      	bne.n	8006e44 <HAL_RCC_OscConfig+0x8>
 8006f36:	6823      	ldr	r3, [r4, #0]
 8006f38:	696a      	ldr	r2, [r5, #20]
 8006f3a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006f3e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006f42:	6023      	str	r3, [r4, #0]
 8006f44:	e786      	b.n	8006e54 <HAL_RCC_OscConfig+0x18>
 8006f46:	692a      	ldr	r2, [r5, #16]
 8006f48:	4b5a      	ldr	r3, [pc, #360]	; (80070b4 <HAL_RCC_OscConfig+0x278>)
 8006f4a:	b16a      	cbz	r2, 8006f68 <HAL_RCC_OscConfig+0x12c>
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
 8006f50:	f7ff f956 	bl	8006200 <HAL_GetTick>
 8006f54:	4606      	mov	r6, r0
 8006f56:	6823      	ldr	r3, [r4, #0]
 8006f58:	079f      	lsls	r7, r3, #30
 8006f5a:	d4ec      	bmi.n	8006f36 <HAL_RCC_OscConfig+0xfa>
 8006f5c:	f7ff f950 	bl	8006200 <HAL_GetTick>
 8006f60:	1b80      	subs	r0, r0, r6
 8006f62:	2802      	cmp	r0, #2
 8006f64:	d9f7      	bls.n	8006f56 <HAL_RCC_OscConfig+0x11a>
 8006f66:	e7ab      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	f7ff f949 	bl	8006200 <HAL_GetTick>
 8006f6e:	4606      	mov	r6, r0
 8006f70:	6823      	ldr	r3, [r4, #0]
 8006f72:	0798      	lsls	r0, r3, #30
 8006f74:	f57f af6e 	bpl.w	8006e54 <HAL_RCC_OscConfig+0x18>
 8006f78:	f7ff f942 	bl	8006200 <HAL_GetTick>
 8006f7c:	1b80      	subs	r0, r0, r6
 8006f7e:	2802      	cmp	r0, #2
 8006f80:	d9f6      	bls.n	8006f70 <HAL_RCC_OscConfig+0x134>
 8006f82:	e79d      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8006f84:	69aa      	ldr	r2, [r5, #24]
 8006f86:	4c4a      	ldr	r4, [pc, #296]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8006f88:	4b4b      	ldr	r3, [pc, #300]	; (80070b8 <HAL_RCC_OscConfig+0x27c>)
 8006f8a:	b1da      	cbz	r2, 8006fc4 <HAL_RCC_OscConfig+0x188>
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	f7ff f936 	bl	8006200 <HAL_GetTick>
 8006f94:	4606      	mov	r6, r0
 8006f96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f98:	079b      	lsls	r3, r3, #30
 8006f9a:	d50d      	bpl.n	8006fb8 <HAL_RCC_OscConfig+0x17c>
 8006f9c:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8006fa0:	4b46      	ldr	r3, [pc, #280]	; (80070bc <HAL_RCC_OscConfig+0x280>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fa8:	9301      	str	r3, [sp, #4]
 8006faa:	bf00      	nop
 8006fac:	9b01      	ldr	r3, [sp, #4]
 8006fae:	1e5a      	subs	r2, r3, #1
 8006fb0:	9201      	str	r2, [sp, #4]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d1f9      	bne.n	8006faa <HAL_RCC_OscConfig+0x16e>
 8006fb6:	e751      	b.n	8006e5c <HAL_RCC_OscConfig+0x20>
 8006fb8:	f7ff f922 	bl	8006200 <HAL_GetTick>
 8006fbc:	1b80      	subs	r0, r0, r6
 8006fbe:	2802      	cmp	r0, #2
 8006fc0:	d9e9      	bls.n	8006f96 <HAL_RCC_OscConfig+0x15a>
 8006fc2:	e77d      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8006fc4:	601a      	str	r2, [r3, #0]
 8006fc6:	f7ff f91b 	bl	8006200 <HAL_GetTick>
 8006fca:	4606      	mov	r6, r0
 8006fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006fce:	079f      	lsls	r7, r3, #30
 8006fd0:	f57f af44 	bpl.w	8006e5c <HAL_RCC_OscConfig+0x20>
 8006fd4:	f7ff f914 	bl	8006200 <HAL_GetTick>
 8006fd8:	1b80      	subs	r0, r0, r6
 8006fda:	2802      	cmp	r0, #2
 8006fdc:	d9f6      	bls.n	8006fcc <HAL_RCC_OscConfig+0x190>
 8006fde:	e76f      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8006fe0:	4c33      	ldr	r4, [pc, #204]	; (80070b0 <HAL_RCC_OscConfig+0x274>)
 8006fe2:	69e3      	ldr	r3, [r4, #28]
 8006fe4:	00d8      	lsls	r0, r3, #3
 8006fe6:	d424      	bmi.n	8007032 <HAL_RCC_OscConfig+0x1f6>
 8006fe8:	2701      	movs	r7, #1
 8006fea:	69e3      	ldr	r3, [r4, #28]
 8006fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ff0:	61e3      	str	r3, [r4, #28]
 8006ff2:	69e3      	ldr	r3, [r4, #28]
 8006ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ff8:	9300      	str	r3, [sp, #0]
 8006ffa:	9b00      	ldr	r3, [sp, #0]
 8006ffc:	4e30      	ldr	r6, [pc, #192]	; (80070c0 <HAL_RCC_OscConfig+0x284>)
 8006ffe:	6833      	ldr	r3, [r6, #0]
 8007000:	05d9      	lsls	r1, r3, #23
 8007002:	d518      	bpl.n	8007036 <HAL_RCC_OscConfig+0x1fa>
 8007004:	68eb      	ldr	r3, [r5, #12]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d126      	bne.n	8007058 <HAL_RCC_OscConfig+0x21c>
 800700a:	6a23      	ldr	r3, [r4, #32]
 800700c:	f043 0301 	orr.w	r3, r3, #1
 8007010:	6223      	str	r3, [r4, #32]
 8007012:	f7ff f8f5 	bl	8006200 <HAL_GetTick>
 8007016:	f241 3688 	movw	r6, #5000	; 0x1388
 800701a:	4680      	mov	r8, r0
 800701c:	6a23      	ldr	r3, [r4, #32]
 800701e:	079b      	lsls	r3, r3, #30
 8007020:	d53f      	bpl.n	80070a2 <HAL_RCC_OscConfig+0x266>
 8007022:	2f00      	cmp	r7, #0
 8007024:	f43f af1e 	beq.w	8006e64 <HAL_RCC_OscConfig+0x28>
 8007028:	69e3      	ldr	r3, [r4, #28]
 800702a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800702e:	61e3      	str	r3, [r4, #28]
 8007030:	e718      	b.n	8006e64 <HAL_RCC_OscConfig+0x28>
 8007032:	2700      	movs	r7, #0
 8007034:	e7e2      	b.n	8006ffc <HAL_RCC_OscConfig+0x1c0>
 8007036:	6833      	ldr	r3, [r6, #0]
 8007038:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800703c:	6033      	str	r3, [r6, #0]
 800703e:	f7ff f8df 	bl	8006200 <HAL_GetTick>
 8007042:	4680      	mov	r8, r0
 8007044:	6833      	ldr	r3, [r6, #0]
 8007046:	05da      	lsls	r2, r3, #23
 8007048:	d4dc      	bmi.n	8007004 <HAL_RCC_OscConfig+0x1c8>
 800704a:	f7ff f8d9 	bl	8006200 <HAL_GetTick>
 800704e:	eba0 0008 	sub.w	r0, r0, r8
 8007052:	2864      	cmp	r0, #100	; 0x64
 8007054:	d9f6      	bls.n	8007044 <HAL_RCC_OscConfig+0x208>
 8007056:	e733      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8007058:	b9ab      	cbnz	r3, 8007086 <HAL_RCC_OscConfig+0x24a>
 800705a:	6a23      	ldr	r3, [r4, #32]
 800705c:	f241 3888 	movw	r8, #5000	; 0x1388
 8007060:	f023 0301 	bic.w	r3, r3, #1
 8007064:	6223      	str	r3, [r4, #32]
 8007066:	6a23      	ldr	r3, [r4, #32]
 8007068:	f023 0304 	bic.w	r3, r3, #4
 800706c:	6223      	str	r3, [r4, #32]
 800706e:	f7ff f8c7 	bl	8006200 <HAL_GetTick>
 8007072:	4606      	mov	r6, r0
 8007074:	6a23      	ldr	r3, [r4, #32]
 8007076:	0798      	lsls	r0, r3, #30
 8007078:	d5d3      	bpl.n	8007022 <HAL_RCC_OscConfig+0x1e6>
 800707a:	f7ff f8c1 	bl	8006200 <HAL_GetTick>
 800707e:	1b80      	subs	r0, r0, r6
 8007080:	4540      	cmp	r0, r8
 8007082:	d9f7      	bls.n	8007074 <HAL_RCC_OscConfig+0x238>
 8007084:	e71c      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8007086:	2b05      	cmp	r3, #5
 8007088:	6a23      	ldr	r3, [r4, #32]
 800708a:	d103      	bne.n	8007094 <HAL_RCC_OscConfig+0x258>
 800708c:	f043 0304 	orr.w	r3, r3, #4
 8007090:	6223      	str	r3, [r4, #32]
 8007092:	e7ba      	b.n	800700a <HAL_RCC_OscConfig+0x1ce>
 8007094:	f023 0301 	bic.w	r3, r3, #1
 8007098:	6223      	str	r3, [r4, #32]
 800709a:	6a23      	ldr	r3, [r4, #32]
 800709c:	f023 0304 	bic.w	r3, r3, #4
 80070a0:	e7b6      	b.n	8007010 <HAL_RCC_OscConfig+0x1d4>
 80070a2:	f7ff f8ad 	bl	8006200 <HAL_GetTick>
 80070a6:	eba0 0008 	sub.w	r0, r0, r8
 80070aa:	42b0      	cmp	r0, r6
 80070ac:	d9b6      	bls.n	800701c <HAL_RCC_OscConfig+0x1e0>
 80070ae:	e707      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 80070b0:	40021000 	.word	0x40021000
 80070b4:	42420000 	.word	0x42420000
 80070b8:	42420480 	.word	0x42420480
 80070bc:	2000033c 	.word	0x2000033c
 80070c0:	40007000 	.word	0x40007000
 80070c4:	4b2a      	ldr	r3, [pc, #168]	; (8007170 <HAL_RCC_OscConfig+0x334>)
 80070c6:	685a      	ldr	r2, [r3, #4]
 80070c8:	461c      	mov	r4, r3
 80070ca:	f002 020c 	and.w	r2, r2, #12
 80070ce:	2a08      	cmp	r2, #8
 80070d0:	d03d      	beq.n	800714e <HAL_RCC_OscConfig+0x312>
 80070d2:	2300      	movs	r3, #0
 80070d4:	4e27      	ldr	r6, [pc, #156]	; (8007174 <HAL_RCC_OscConfig+0x338>)
 80070d6:	2802      	cmp	r0, #2
 80070d8:	6033      	str	r3, [r6, #0]
 80070da:	d12b      	bne.n	8007134 <HAL_RCC_OscConfig+0x2f8>
 80070dc:	f7ff f890 	bl	8006200 <HAL_GetTick>
 80070e0:	4607      	mov	r7, r0
 80070e2:	6823      	ldr	r3, [r4, #0]
 80070e4:	0199      	lsls	r1, r3, #6
 80070e6:	d41f      	bmi.n	8007128 <HAL_RCC_OscConfig+0x2ec>
 80070e8:	6a2b      	ldr	r3, [r5, #32]
 80070ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070ee:	d105      	bne.n	80070fc <HAL_RCC_OscConfig+0x2c0>
 80070f0:	6862      	ldr	r2, [r4, #4]
 80070f2:	68a9      	ldr	r1, [r5, #8]
 80070f4:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80070f8:	430a      	orrs	r2, r1
 80070fa:	6062      	str	r2, [r4, #4]
 80070fc:	6a69      	ldr	r1, [r5, #36]	; 0x24
 80070fe:	6862      	ldr	r2, [r4, #4]
 8007100:	430b      	orrs	r3, r1
 8007102:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8007106:	4313      	orrs	r3, r2
 8007108:	6063      	str	r3, [r4, #4]
 800710a:	2301      	movs	r3, #1
 800710c:	6033      	str	r3, [r6, #0]
 800710e:	f7ff f877 	bl	8006200 <HAL_GetTick>
 8007112:	4605      	mov	r5, r0
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	019a      	lsls	r2, r3, #6
 8007118:	f53f aea8 	bmi.w	8006e6c <HAL_RCC_OscConfig+0x30>
 800711c:	f7ff f870 	bl	8006200 <HAL_GetTick>
 8007120:	1b40      	subs	r0, r0, r5
 8007122:	2802      	cmp	r0, #2
 8007124:	d9f6      	bls.n	8007114 <HAL_RCC_OscConfig+0x2d8>
 8007126:	e6cb      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8007128:	f7ff f86a 	bl	8006200 <HAL_GetTick>
 800712c:	1bc0      	subs	r0, r0, r7
 800712e:	2802      	cmp	r0, #2
 8007130:	d9d7      	bls.n	80070e2 <HAL_RCC_OscConfig+0x2a6>
 8007132:	e6c5      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 8007134:	f7ff f864 	bl	8006200 <HAL_GetTick>
 8007138:	4605      	mov	r5, r0
 800713a:	6823      	ldr	r3, [r4, #0]
 800713c:	019b      	lsls	r3, r3, #6
 800713e:	f57f ae95 	bpl.w	8006e6c <HAL_RCC_OscConfig+0x30>
 8007142:	f7ff f85d 	bl	8006200 <HAL_GetTick>
 8007146:	1b40      	subs	r0, r0, r5
 8007148:	2802      	cmp	r0, #2
 800714a:	d9f6      	bls.n	800713a <HAL_RCC_OscConfig+0x2fe>
 800714c:	e6b8      	b.n	8006ec0 <HAL_RCC_OscConfig+0x84>
 800714e:	2801      	cmp	r0, #1
 8007150:	f43f aeb7 	beq.w	8006ec2 <HAL_RCC_OscConfig+0x86>
 8007154:	6858      	ldr	r0, [r3, #4]
 8007156:	6a2b      	ldr	r3, [r5, #32]
 8007158:	f400 3280 	and.w	r2, r0, #65536	; 0x10000
 800715c:	429a      	cmp	r2, r3
 800715e:	f47f ae71 	bne.w	8006e44 <HAL_RCC_OscConfig+0x8>
 8007162:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007164:	f400 1070 	and.w	r0, r0, #3932160	; 0x3c0000
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	bf18      	it	ne
 800716c:	2001      	movne	r0, #1
 800716e:	e6a8      	b.n	8006ec2 <HAL_RCC_OscConfig+0x86>
 8007170:	40021000 	.word	0x40021000
 8007174:	42420060 	.word	0x42420060

08007178 <HAL_RCC_GetSysClockFreq>:
 8007178:	b530      	push	{r4, r5, lr}
 800717a:	4b18      	ldr	r3, [pc, #96]	; (80071dc <HAL_RCC_GetSysClockFreq+0x64>)
 800717c:	b087      	sub	sp, #28
 800717e:	ac02      	add	r4, sp, #8
 8007180:	f103 0510 	add.w	r5, r3, #16
 8007184:	4622      	mov	r2, r4
 8007186:	6818      	ldr	r0, [r3, #0]
 8007188:	6859      	ldr	r1, [r3, #4]
 800718a:	3308      	adds	r3, #8
 800718c:	c203      	stmia	r2!, {r0, r1}
 800718e:	42ab      	cmp	r3, r5
 8007190:	4614      	mov	r4, r2
 8007192:	d1f7      	bne.n	8007184 <HAL_RCC_GetSysClockFreq+0xc>
 8007194:	f240 2301 	movw	r3, #513	; 0x201
 8007198:	4911      	ldr	r1, [pc, #68]	; (80071e0 <HAL_RCC_GetSysClockFreq+0x68>)
 800719a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800719e:	684b      	ldr	r3, [r1, #4]
 80071a0:	f003 020c 	and.w	r2, r3, #12
 80071a4:	2a08      	cmp	r2, #8
 80071a6:	d117      	bne.n	80071d8 <HAL_RCC_GetSysClockFreq+0x60>
 80071a8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 80071ac:	a806      	add	r0, sp, #24
 80071ae:	4402      	add	r2, r0
 80071b0:	03db      	lsls	r3, r3, #15
 80071b2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
 80071b6:	d50c      	bpl.n	80071d2 <HAL_RCC_GetSysClockFreq+0x5a>
 80071b8:	684b      	ldr	r3, [r1, #4]
 80071ba:	480a      	ldr	r0, [pc, #40]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80071bc:	f3c3 4340 	ubfx	r3, r3, #17, #1
 80071c0:	4350      	muls	r0, r2
 80071c2:	aa06      	add	r2, sp, #24
 80071c4:	4413      	add	r3, r2
 80071c6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80071ca:	fbb0 f0f3 	udiv	r0, r0, r3
 80071ce:	b007      	add	sp, #28
 80071d0:	bd30      	pop	{r4, r5, pc}
 80071d2:	4805      	ldr	r0, [pc, #20]	; (80071e8 <HAL_RCC_GetSysClockFreq+0x70>)
 80071d4:	4350      	muls	r0, r2
 80071d6:	e7fa      	b.n	80071ce <HAL_RCC_GetSysClockFreq+0x56>
 80071d8:	4802      	ldr	r0, [pc, #8]	; (80071e4 <HAL_RCC_GetSysClockFreq+0x6c>)
 80071da:	e7f8      	b.n	80071ce <HAL_RCC_GetSysClockFreq+0x56>
 80071dc:	0800c210 	.word	0x0800c210
 80071e0:	40021000 	.word	0x40021000
 80071e4:	007a1200 	.word	0x007a1200
 80071e8:	003d0900 	.word	0x003d0900

080071ec <HAL_RCC_ClockConfig>:
 80071ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071f0:	460d      	mov	r5, r1
 80071f2:	4604      	mov	r4, r0
 80071f4:	b910      	cbnz	r0, 80071fc <HAL_RCC_ClockConfig+0x10>
 80071f6:	2001      	movs	r0, #1
 80071f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071fc:	4a44      	ldr	r2, [pc, #272]	; (8007310 <HAL_RCC_ClockConfig+0x124>)
 80071fe:	6813      	ldr	r3, [r2, #0]
 8007200:	f003 0307 	and.w	r3, r3, #7
 8007204:	428b      	cmp	r3, r1
 8007206:	d328      	bcc.n	800725a <HAL_RCC_ClockConfig+0x6e>
 8007208:	6821      	ldr	r1, [r4, #0]
 800720a:	078e      	lsls	r6, r1, #30
 800720c:	d430      	bmi.n	8007270 <HAL_RCC_ClockConfig+0x84>
 800720e:	07ca      	lsls	r2, r1, #31
 8007210:	d443      	bmi.n	800729a <HAL_RCC_ClockConfig+0xae>
 8007212:	4a3f      	ldr	r2, [pc, #252]	; (8007310 <HAL_RCC_ClockConfig+0x124>)
 8007214:	6813      	ldr	r3, [r2, #0]
 8007216:	f003 0307 	and.w	r3, r3, #7
 800721a:	42ab      	cmp	r3, r5
 800721c:	d865      	bhi.n	80072ea <HAL_RCC_ClockConfig+0xfe>
 800721e:	6822      	ldr	r2, [r4, #0]
 8007220:	4d3c      	ldr	r5, [pc, #240]	; (8007314 <HAL_RCC_ClockConfig+0x128>)
 8007222:	f012 0f04 	tst.w	r2, #4
 8007226:	d16c      	bne.n	8007302 <HAL_RCC_ClockConfig+0x116>
 8007228:	0713      	lsls	r3, r2, #28
 800722a:	d506      	bpl.n	800723a <HAL_RCC_ClockConfig+0x4e>
 800722c:	686b      	ldr	r3, [r5, #4]
 800722e:	6922      	ldr	r2, [r4, #16]
 8007230:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8007234:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8007238:	606b      	str	r3, [r5, #4]
 800723a:	f7ff ff9d 	bl	8007178 <HAL_RCC_GetSysClockFreq>
 800723e:	686b      	ldr	r3, [r5, #4]
 8007240:	4a35      	ldr	r2, [pc, #212]	; (8007318 <HAL_RCC_ClockConfig+0x12c>)
 8007242:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8007246:	5cd3      	ldrb	r3, [r2, r3]
 8007248:	40d8      	lsrs	r0, r3
 800724a:	4b34      	ldr	r3, [pc, #208]	; (800731c <HAL_RCC_ClockConfig+0x130>)
 800724c:	6018      	str	r0, [r3, #0]
 800724e:	4b34      	ldr	r3, [pc, #208]	; (8007320 <HAL_RCC_ClockConfig+0x134>)
 8007250:	6818      	ldr	r0, [r3, #0]
 8007252:	f7fd f995 	bl	8004580 <HAL_InitTick>
 8007256:	2000      	movs	r0, #0
 8007258:	e7ce      	b.n	80071f8 <HAL_RCC_ClockConfig+0xc>
 800725a:	6813      	ldr	r3, [r2, #0]
 800725c:	f023 0307 	bic.w	r3, r3, #7
 8007260:	430b      	orrs	r3, r1
 8007262:	6013      	str	r3, [r2, #0]
 8007264:	6813      	ldr	r3, [r2, #0]
 8007266:	f003 0307 	and.w	r3, r3, #7
 800726a:	428b      	cmp	r3, r1
 800726c:	d1c3      	bne.n	80071f6 <HAL_RCC_ClockConfig+0xa>
 800726e:	e7cb      	b.n	8007208 <HAL_RCC_ClockConfig+0x1c>
 8007270:	4b28      	ldr	r3, [pc, #160]	; (8007314 <HAL_RCC_ClockConfig+0x128>)
 8007272:	f011 0f04 	tst.w	r1, #4
 8007276:	bf1e      	ittt	ne
 8007278:	685a      	ldrne	r2, [r3, #4]
 800727a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800727e:	605a      	strne	r2, [r3, #4]
 8007280:	0708      	lsls	r0, r1, #28
 8007282:	bf42      	ittt	mi
 8007284:	685a      	ldrmi	r2, [r3, #4]
 8007286:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800728a:	605a      	strmi	r2, [r3, #4]
 800728c:	685a      	ldr	r2, [r3, #4]
 800728e:	68a0      	ldr	r0, [r4, #8]
 8007290:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007294:	4302      	orrs	r2, r0
 8007296:	605a      	str	r2, [r3, #4]
 8007298:	e7b9      	b.n	800720e <HAL_RCC_ClockConfig+0x22>
 800729a:	6862      	ldr	r2, [r4, #4]
 800729c:	4e1d      	ldr	r6, [pc, #116]	; (8007314 <HAL_RCC_ClockConfig+0x128>)
 800729e:	2a01      	cmp	r2, #1
 80072a0:	6833      	ldr	r3, [r6, #0]
 80072a2:	d11a      	bne.n	80072da <HAL_RCC_ClockConfig+0xee>
 80072a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80072a8:	d0a5      	beq.n	80071f6 <HAL_RCC_ClockConfig+0xa>
 80072aa:	6873      	ldr	r3, [r6, #4]
 80072ac:	f241 3888 	movw	r8, #5000	; 0x1388
 80072b0:	f023 0303 	bic.w	r3, r3, #3
 80072b4:	4313      	orrs	r3, r2
 80072b6:	6073      	str	r3, [r6, #4]
 80072b8:	f7fe ffa2 	bl	8006200 <HAL_GetTick>
 80072bc:	4607      	mov	r7, r0
 80072be:	6873      	ldr	r3, [r6, #4]
 80072c0:	6862      	ldr	r2, [r4, #4]
 80072c2:	f003 030c 	and.w	r3, r3, #12
 80072c6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80072ca:	d0a2      	beq.n	8007212 <HAL_RCC_ClockConfig+0x26>
 80072cc:	f7fe ff98 	bl	8006200 <HAL_GetTick>
 80072d0:	1bc0      	subs	r0, r0, r7
 80072d2:	4540      	cmp	r0, r8
 80072d4:	d9f3      	bls.n	80072be <HAL_RCC_ClockConfig+0xd2>
 80072d6:	2003      	movs	r0, #3
 80072d8:	e78e      	b.n	80071f8 <HAL_RCC_ClockConfig+0xc>
 80072da:	2a02      	cmp	r2, #2
 80072dc:	d102      	bne.n	80072e4 <HAL_RCC_ClockConfig+0xf8>
 80072de:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80072e2:	e7e1      	b.n	80072a8 <HAL_RCC_ClockConfig+0xbc>
 80072e4:	f013 0f02 	tst.w	r3, #2
 80072e8:	e7de      	b.n	80072a8 <HAL_RCC_ClockConfig+0xbc>
 80072ea:	6813      	ldr	r3, [r2, #0]
 80072ec:	f023 0307 	bic.w	r3, r3, #7
 80072f0:	432b      	orrs	r3, r5
 80072f2:	6013      	str	r3, [r2, #0]
 80072f4:	6813      	ldr	r3, [r2, #0]
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	42ab      	cmp	r3, r5
 80072fc:	f47f af7b 	bne.w	80071f6 <HAL_RCC_ClockConfig+0xa>
 8007300:	e78d      	b.n	800721e <HAL_RCC_ClockConfig+0x32>
 8007302:	686b      	ldr	r3, [r5, #4]
 8007304:	68e1      	ldr	r1, [r4, #12]
 8007306:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800730a:	430b      	orrs	r3, r1
 800730c:	606b      	str	r3, [r5, #4]
 800730e:	e78b      	b.n	8007228 <HAL_RCC_ClockConfig+0x3c>
 8007310:	40022000 	.word	0x40022000
 8007314:	40021000 	.word	0x40021000
 8007318:	0800d224 	.word	0x0800d224
 800731c:	2000033c 	.word	0x2000033c
 8007320:	200003d4 	.word	0x200003d4

08007324 <HAL_RCC_GetPCLK1Freq>:
 8007324:	4b04      	ldr	r3, [pc, #16]	; (8007338 <HAL_RCC_GetPCLK1Freq+0x14>)
 8007326:	4a05      	ldr	r2, [pc, #20]	; (800733c <HAL_RCC_GetPCLK1Freq+0x18>)
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800732e:	5cd3      	ldrb	r3, [r2, r3]
 8007330:	4a03      	ldr	r2, [pc, #12]	; (8007340 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8007332:	6810      	ldr	r0, [r2, #0]
 8007334:	40d8      	lsrs	r0, r3
 8007336:	4770      	bx	lr
 8007338:	40021000 	.word	0x40021000
 800733c:	0800d234 	.word	0x0800d234
 8007340:	2000033c 	.word	0x2000033c

08007344 <HAL_RCC_GetPCLK2Freq>:
 8007344:	4b04      	ldr	r3, [pc, #16]	; (8007358 <HAL_RCC_GetPCLK2Freq+0x14>)
 8007346:	4a05      	ldr	r2, [pc, #20]	; (800735c <HAL_RCC_GetPCLK2Freq+0x18>)
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800734e:	5cd3      	ldrb	r3, [r2, r3]
 8007350:	4a03      	ldr	r2, [pc, #12]	; (8007360 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8007352:	6810      	ldr	r0, [r2, #0]
 8007354:	40d8      	lsrs	r0, r3
 8007356:	4770      	bx	lr
 8007358:	40021000 	.word	0x40021000
 800735c:	0800d234 	.word	0x0800d234
 8007360:	2000033c 	.word	0x2000033c

08007364 <HAL_RCC_GetClockConfig>:
 8007364:	230f      	movs	r3, #15
 8007366:	6003      	str	r3, [r0, #0]
 8007368:	4b0b      	ldr	r3, [pc, #44]	; (8007398 <HAL_RCC_GetClockConfig+0x34>)
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	f002 0203 	and.w	r2, r2, #3
 8007370:	6042      	str	r2, [r0, #4]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8007378:	6082      	str	r2, [r0, #8]
 800737a:	685a      	ldr	r2, [r3, #4]
 800737c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8007380:	60c2      	str	r2, [r0, #12]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	08db      	lsrs	r3, r3, #3
 8007386:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800738a:	6103      	str	r3, [r0, #16]
 800738c:	4b03      	ldr	r3, [pc, #12]	; (800739c <HAL_RCC_GetClockConfig+0x38>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f003 0307 	and.w	r3, r3, #7
 8007394:	600b      	str	r3, [r1, #0]
 8007396:	4770      	bx	lr
 8007398:	40021000 	.word	0x40021000
 800739c:	40022000 	.word	0x40022000

080073a0 <HAL_RCCEx_PeriphCLKConfig>:
 80073a0:	6803      	ldr	r3, [r0, #0]
 80073a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80073a6:	07d9      	lsls	r1, r3, #31
 80073a8:	4605      	mov	r5, r0
 80073aa:	d520      	bpl.n	80073ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80073ac:	4c35      	ldr	r4, [pc, #212]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80073ae:	69e3      	ldr	r3, [r4, #28]
 80073b0:	00da      	lsls	r2, r3, #3
 80073b2:	d432      	bmi.n	800741a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80073b4:	2701      	movs	r7, #1
 80073b6:	69e3      	ldr	r3, [r4, #28]
 80073b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80073bc:	61e3      	str	r3, [r4, #28]
 80073be:	69e3      	ldr	r3, [r4, #28]
 80073c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	9b01      	ldr	r3, [sp, #4]
 80073c8:	4e2f      	ldr	r6, [pc, #188]	; (8007488 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80073ca:	6833      	ldr	r3, [r6, #0]
 80073cc:	05db      	lsls	r3, r3, #23
 80073ce:	d526      	bpl.n	800741e <HAL_RCCEx_PeriphCLKConfig+0x7e>
 80073d0:	6a23      	ldr	r3, [r4, #32]
 80073d2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 80073d6:	d136      	bne.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xa6>
 80073d8:	6a23      	ldr	r3, [r4, #32]
 80073da:	686a      	ldr	r2, [r5, #4]
 80073dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073e0:	4313      	orrs	r3, r2
 80073e2:	6223      	str	r3, [r4, #32]
 80073e4:	b11f      	cbz	r7, 80073ee <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80073e6:	69e3      	ldr	r3, [r4, #28]
 80073e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80073ec:	61e3      	str	r3, [r4, #28]
 80073ee:	6828      	ldr	r0, [r5, #0]
 80073f0:	0783      	lsls	r3, r0, #30
 80073f2:	d506      	bpl.n	8007402 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80073f4:	4a23      	ldr	r2, [pc, #140]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80073f6:	68a9      	ldr	r1, [r5, #8]
 80073f8:	6853      	ldr	r3, [r2, #4]
 80073fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80073fe:	430b      	orrs	r3, r1
 8007400:	6053      	str	r3, [r2, #4]
 8007402:	f010 0010 	ands.w	r0, r0, #16
 8007406:	d01b      	beq.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 8007408:	4a1e      	ldr	r2, [pc, #120]	; (8007484 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800740a:	68e9      	ldr	r1, [r5, #12]
 800740c:	6853      	ldr	r3, [r2, #4]
 800740e:	2000      	movs	r0, #0
 8007410:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8007414:	430b      	orrs	r3, r1
 8007416:	6053      	str	r3, [r2, #4]
 8007418:	e012      	b.n	8007440 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800741a:	2700      	movs	r7, #0
 800741c:	e7d4      	b.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x28>
 800741e:	6833      	ldr	r3, [r6, #0]
 8007420:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007424:	6033      	str	r3, [r6, #0]
 8007426:	f7fe feeb 	bl	8006200 <HAL_GetTick>
 800742a:	4680      	mov	r8, r0
 800742c:	6833      	ldr	r3, [r6, #0]
 800742e:	05d8      	lsls	r0, r3, #23
 8007430:	d4ce      	bmi.n	80073d0 <HAL_RCCEx_PeriphCLKConfig+0x30>
 8007432:	f7fe fee5 	bl	8006200 <HAL_GetTick>
 8007436:	eba0 0008 	sub.w	r0, r0, r8
 800743a:	2864      	cmp	r0, #100	; 0x64
 800743c:	d9f6      	bls.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x8c>
 800743e:	2003      	movs	r0, #3
 8007440:	b002      	add	sp, #8
 8007442:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007446:	686a      	ldr	r2, [r5, #4]
 8007448:	f402 7240 	and.w	r2, r2, #768	; 0x300
 800744c:	429a      	cmp	r2, r3
 800744e:	d0c3      	beq.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8007450:	2001      	movs	r0, #1
 8007452:	4a0e      	ldr	r2, [pc, #56]	; (800748c <HAL_RCCEx_PeriphCLKConfig+0xec>)
 8007454:	6a23      	ldr	r3, [r4, #32]
 8007456:	6010      	str	r0, [r2, #0]
 8007458:	2000      	movs	r0, #0
 800745a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800745e:	6010      	str	r0, [r2, #0]
 8007460:	6221      	str	r1, [r4, #32]
 8007462:	07d9      	lsls	r1, r3, #31
 8007464:	d5b8      	bpl.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8007466:	f7fe fecb 	bl	8006200 <HAL_GetTick>
 800746a:	f241 3888 	movw	r8, #5000	; 0x1388
 800746e:	4606      	mov	r6, r0
 8007470:	6a23      	ldr	r3, [r4, #32]
 8007472:	079a      	lsls	r2, r3, #30
 8007474:	d4b0      	bmi.n	80073d8 <HAL_RCCEx_PeriphCLKConfig+0x38>
 8007476:	f7fe fec3 	bl	8006200 <HAL_GetTick>
 800747a:	1b80      	subs	r0, r0, r6
 800747c:	4540      	cmp	r0, r8
 800747e:	d9f7      	bls.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8007480:	e7dd      	b.n	800743e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8007482:	bf00      	nop
 8007484:	40021000 	.word	0x40021000
 8007488:	40007000 	.word	0x40007000
 800748c:	42420440 	.word	0x42420440

08007490 <TIM_OC1_SetConfig>:
 8007490:	6a03      	ldr	r3, [r0, #32]
 8007492:	b570      	push	{r4, r5, r6, lr}
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	6203      	str	r3, [r0, #32]
 800749a:	6a03      	ldr	r3, [r0, #32]
 800749c:	6844      	ldr	r4, [r0, #4]
 800749e:	6982      	ldr	r2, [r0, #24]
 80074a0:	680d      	ldr	r5, [r1, #0]
 80074a2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80074a6:	432a      	orrs	r2, r5
 80074a8:	688d      	ldr	r5, [r1, #8]
 80074aa:	f023 0302 	bic.w	r3, r3, #2
 80074ae:	432b      	orrs	r3, r5
 80074b0:	4d0a      	ldr	r5, [pc, #40]	; (80074dc <TIM_OC1_SetConfig+0x4c>)
 80074b2:	42a8      	cmp	r0, r5
 80074b4:	d10b      	bne.n	80074ce <TIM_OC1_SetConfig+0x3e>
 80074b6:	68cd      	ldr	r5, [r1, #12]
 80074b8:	f023 0308 	bic.w	r3, r3, #8
 80074bc:	432b      	orrs	r3, r5
 80074be:	f424 7440 	bic.w	r4, r4, #768	; 0x300
 80074c2:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80074c6:	4335      	orrs	r5, r6
 80074c8:	f023 0304 	bic.w	r3, r3, #4
 80074cc:	432c      	orrs	r4, r5
 80074ce:	6044      	str	r4, [r0, #4]
 80074d0:	6182      	str	r2, [r0, #24]
 80074d2:	684a      	ldr	r2, [r1, #4]
 80074d4:	6342      	str	r2, [r0, #52]	; 0x34
 80074d6:	6203      	str	r3, [r0, #32]
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
 80074da:	bf00      	nop
 80074dc:	40012c00 	.word	0x40012c00

080074e0 <TIM_OC3_SetConfig>:
 80074e0:	6a03      	ldr	r3, [r0, #32]
 80074e2:	b570      	push	{r4, r5, r6, lr}
 80074e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074e8:	6203      	str	r3, [r0, #32]
 80074ea:	6a03      	ldr	r3, [r0, #32]
 80074ec:	6844      	ldr	r4, [r0, #4]
 80074ee:	69c2      	ldr	r2, [r0, #28]
 80074f0:	680d      	ldr	r5, [r1, #0]
 80074f2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80074f6:	432a      	orrs	r2, r5
 80074f8:	688d      	ldr	r5, [r1, #8]
 80074fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80074fe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007502:	4d0b      	ldr	r5, [pc, #44]	; (8007530 <TIM_OC3_SetConfig+0x50>)
 8007504:	42a8      	cmp	r0, r5
 8007506:	d10d      	bne.n	8007524 <TIM_OC3_SetConfig+0x44>
 8007508:	68cd      	ldr	r5, [r1, #12]
 800750a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800750e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8007512:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
 8007516:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 800751a:	4335      	orrs	r5, r6
 800751c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007520:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
 8007524:	6044      	str	r4, [r0, #4]
 8007526:	61c2      	str	r2, [r0, #28]
 8007528:	684a      	ldr	r2, [r1, #4]
 800752a:	63c2      	str	r2, [r0, #60]	; 0x3c
 800752c:	6203      	str	r3, [r0, #32]
 800752e:	bd70      	pop	{r4, r5, r6, pc}
 8007530:	40012c00 	.word	0x40012c00

08007534 <TIM_OC4_SetConfig>:
 8007534:	6a03      	ldr	r3, [r0, #32]
 8007536:	b530      	push	{r4, r5, lr}
 8007538:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800753c:	6203      	str	r3, [r0, #32]
 800753e:	6a03      	ldr	r3, [r0, #32]
 8007540:	6844      	ldr	r4, [r0, #4]
 8007542:	69c2      	ldr	r2, [r0, #28]
 8007544:	680d      	ldr	r5, [r1, #0]
 8007546:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 800754a:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 800754e:	688d      	ldr	r5, [r1, #8]
 8007550:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007554:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
 8007558:	4d06      	ldr	r5, [pc, #24]	; (8007574 <TIM_OC4_SetConfig+0x40>)
 800755a:	42a8      	cmp	r0, r5
 800755c:	bf02      	ittt	eq
 800755e:	694d      	ldreq	r5, [r1, #20]
 8007560:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
 8007564:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
 8007568:	6044      	str	r4, [r0, #4]
 800756a:	61c2      	str	r2, [r0, #28]
 800756c:	684a      	ldr	r2, [r1, #4]
 800756e:	6402      	str	r2, [r0, #64]	; 0x40
 8007570:	6203      	str	r3, [r0, #32]
 8007572:	bd30      	pop	{r4, r5, pc}
 8007574:	40012c00 	.word	0x40012c00

08007578 <HAL_TIM_Base_Start_IT>:
 8007578:	6803      	ldr	r3, [r0, #0]
 800757a:	2000      	movs	r0, #0
 800757c:	68da      	ldr	r2, [r3, #12]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	60da      	str	r2, [r3, #12]
 8007584:	689a      	ldr	r2, [r3, #8]
 8007586:	f002 0207 	and.w	r2, r2, #7
 800758a:	2a06      	cmp	r2, #6
 800758c:	bf1e      	ittt	ne
 800758e:	681a      	ldrne	r2, [r3, #0]
 8007590:	f042 0201 	orrne.w	r2, r2, #1
 8007594:	601a      	strne	r2, [r3, #0]
 8007596:	4770      	bx	lr

08007598 <HAL_TIM_PWM_MspInit>:
 8007598:	4770      	bx	lr

0800759a <HAL_TIM_OC_DelayElapsedCallback>:
 800759a:	4770      	bx	lr

0800759c <HAL_TIM_IC_CaptureCallback>:
 800759c:	4770      	bx	lr

0800759e <HAL_TIM_PWM_PulseFinishedCallback>:
 800759e:	4770      	bx	lr

080075a0 <HAL_TIM_TriggerCallback>:
 80075a0:	4770      	bx	lr

080075a2 <HAL_TIM_IRQHandler>:
 80075a2:	6803      	ldr	r3, [r0, #0]
 80075a4:	b510      	push	{r4, lr}
 80075a6:	691a      	ldr	r2, [r3, #16]
 80075a8:	4604      	mov	r4, r0
 80075aa:	0791      	lsls	r1, r2, #30
 80075ac:	d50e      	bpl.n	80075cc <HAL_TIM_IRQHandler+0x2a>
 80075ae:	68da      	ldr	r2, [r3, #12]
 80075b0:	0792      	lsls	r2, r2, #30
 80075b2:	d50b      	bpl.n	80075cc <HAL_TIM_IRQHandler+0x2a>
 80075b4:	f06f 0202 	mvn.w	r2, #2
 80075b8:	611a      	str	r2, [r3, #16]
 80075ba:	2201      	movs	r2, #1
 80075bc:	699b      	ldr	r3, [r3, #24]
 80075be:	7702      	strb	r2, [r0, #28]
 80075c0:	079b      	lsls	r3, r3, #30
 80075c2:	d077      	beq.n	80076b4 <HAL_TIM_IRQHandler+0x112>
 80075c4:	f7ff ffea 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 80075c8:	2300      	movs	r3, #0
 80075ca:	7723      	strb	r3, [r4, #28]
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	0750      	lsls	r0, r2, #29
 80075d2:	d510      	bpl.n	80075f6 <HAL_TIM_IRQHandler+0x54>
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	0751      	lsls	r1, r2, #29
 80075d8:	d50d      	bpl.n	80075f6 <HAL_TIM_IRQHandler+0x54>
 80075da:	f06f 0204 	mvn.w	r2, #4
 80075de:	611a      	str	r2, [r3, #16]
 80075e0:	2202      	movs	r2, #2
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	7722      	strb	r2, [r4, #28]
 80075e6:	f413 7f40 	tst.w	r3, #768	; 0x300
 80075ea:	4620      	mov	r0, r4
 80075ec:	d068      	beq.n	80076c0 <HAL_TIM_IRQHandler+0x11e>
 80075ee:	f7ff ffd5 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 80075f2:	2300      	movs	r3, #0
 80075f4:	7723      	strb	r3, [r4, #28]
 80075f6:	6823      	ldr	r3, [r4, #0]
 80075f8:	691a      	ldr	r2, [r3, #16]
 80075fa:	0712      	lsls	r2, r2, #28
 80075fc:	d50f      	bpl.n	800761e <HAL_TIM_IRQHandler+0x7c>
 80075fe:	68da      	ldr	r2, [r3, #12]
 8007600:	0710      	lsls	r0, r2, #28
 8007602:	d50c      	bpl.n	800761e <HAL_TIM_IRQHandler+0x7c>
 8007604:	f06f 0208 	mvn.w	r2, #8
 8007608:	611a      	str	r2, [r3, #16]
 800760a:	2204      	movs	r2, #4
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	7722      	strb	r2, [r4, #28]
 8007610:	0799      	lsls	r1, r3, #30
 8007612:	4620      	mov	r0, r4
 8007614:	d05a      	beq.n	80076cc <HAL_TIM_IRQHandler+0x12a>
 8007616:	f7ff ffc1 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 800761a:	2300      	movs	r3, #0
 800761c:	7723      	strb	r3, [r4, #28]
 800761e:	6823      	ldr	r3, [r4, #0]
 8007620:	691a      	ldr	r2, [r3, #16]
 8007622:	06d2      	lsls	r2, r2, #27
 8007624:	d510      	bpl.n	8007648 <HAL_TIM_IRQHandler+0xa6>
 8007626:	68da      	ldr	r2, [r3, #12]
 8007628:	06d0      	lsls	r0, r2, #27
 800762a:	d50d      	bpl.n	8007648 <HAL_TIM_IRQHandler+0xa6>
 800762c:	f06f 0210 	mvn.w	r2, #16
 8007630:	611a      	str	r2, [r3, #16]
 8007632:	2208      	movs	r2, #8
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	7722      	strb	r2, [r4, #28]
 8007638:	f413 7f40 	tst.w	r3, #768	; 0x300
 800763c:	4620      	mov	r0, r4
 800763e:	d04b      	beq.n	80076d8 <HAL_TIM_IRQHandler+0x136>
 8007640:	f7ff ffac 	bl	800759c <HAL_TIM_IC_CaptureCallback>
 8007644:	2300      	movs	r3, #0
 8007646:	7723      	strb	r3, [r4, #28]
 8007648:	6823      	ldr	r3, [r4, #0]
 800764a:	691a      	ldr	r2, [r3, #16]
 800764c:	07d1      	lsls	r1, r2, #31
 800764e:	d508      	bpl.n	8007662 <HAL_TIM_IRQHandler+0xc0>
 8007650:	68da      	ldr	r2, [r3, #12]
 8007652:	07d2      	lsls	r2, r2, #31
 8007654:	d505      	bpl.n	8007662 <HAL_TIM_IRQHandler+0xc0>
 8007656:	f06f 0201 	mvn.w	r2, #1
 800765a:	4620      	mov	r0, r4
 800765c:	611a      	str	r2, [r3, #16]
 800765e:	f7fc fdff 	bl	8004260 <HAL_TIM_PeriodElapsedCallback>
 8007662:	6823      	ldr	r3, [r4, #0]
 8007664:	691a      	ldr	r2, [r3, #16]
 8007666:	0610      	lsls	r0, r2, #24
 8007668:	d508      	bpl.n	800767c <HAL_TIM_IRQHandler+0xda>
 800766a:	68da      	ldr	r2, [r3, #12]
 800766c:	0611      	lsls	r1, r2, #24
 800766e:	d505      	bpl.n	800767c <HAL_TIM_IRQHandler+0xda>
 8007670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007674:	4620      	mov	r0, r4
 8007676:	611a      	str	r2, [r3, #16]
 8007678:	f000 fadf 	bl	8007c3a <HAL_TIMEx_BreakCallback>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	691a      	ldr	r2, [r3, #16]
 8007680:	0652      	lsls	r2, r2, #25
 8007682:	d508      	bpl.n	8007696 <HAL_TIM_IRQHandler+0xf4>
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	0650      	lsls	r0, r2, #25
 8007688:	d505      	bpl.n	8007696 <HAL_TIM_IRQHandler+0xf4>
 800768a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800768e:	4620      	mov	r0, r4
 8007690:	611a      	str	r2, [r3, #16]
 8007692:	f7ff ff85 	bl	80075a0 <HAL_TIM_TriggerCallback>
 8007696:	6823      	ldr	r3, [r4, #0]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	0691      	lsls	r1, r2, #26
 800769c:	d522      	bpl.n	80076e4 <HAL_TIM_IRQHandler+0x142>
 800769e:	68da      	ldr	r2, [r3, #12]
 80076a0:	0692      	lsls	r2, r2, #26
 80076a2:	d51f      	bpl.n	80076e4 <HAL_TIM_IRQHandler+0x142>
 80076a4:	f06f 0220 	mvn.w	r2, #32
 80076a8:	4620      	mov	r0, r4
 80076aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ae:	611a      	str	r2, [r3, #16]
 80076b0:	f000 bac2 	b.w	8007c38 <HAL_TIMEx_CommutCallback>
 80076b4:	f7ff ff71 	bl	800759a <HAL_TIM_OC_DelayElapsedCallback>
 80076b8:	4620      	mov	r0, r4
 80076ba:	f7ff ff70 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
 80076be:	e783      	b.n	80075c8 <HAL_TIM_IRQHandler+0x26>
 80076c0:	f7ff ff6b 	bl	800759a <HAL_TIM_OC_DelayElapsedCallback>
 80076c4:	4620      	mov	r0, r4
 80076c6:	f7ff ff6a 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
 80076ca:	e792      	b.n	80075f2 <HAL_TIM_IRQHandler+0x50>
 80076cc:	f7ff ff65 	bl	800759a <HAL_TIM_OC_DelayElapsedCallback>
 80076d0:	4620      	mov	r0, r4
 80076d2:	f7ff ff64 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
 80076d6:	e7a0      	b.n	800761a <HAL_TIM_IRQHandler+0x78>
 80076d8:	f7ff ff5f 	bl	800759a <HAL_TIM_OC_DelayElapsedCallback>
 80076dc:	4620      	mov	r0, r4
 80076de:	f7ff ff5e 	bl	800759e <HAL_TIM_PWM_PulseFinishedCallback>
 80076e2:	e7af      	b.n	8007644 <HAL_TIM_IRQHandler+0xa2>
 80076e4:	bd10      	pop	{r4, pc}
	...

080076e8 <TIM_Base_SetConfig>:
 80076e8:	4a1a      	ldr	r2, [pc, #104]	; (8007754 <TIM_Base_SetConfig+0x6c>)
 80076ea:	6803      	ldr	r3, [r0, #0]
 80076ec:	4290      	cmp	r0, r2
 80076ee:	d00a      	beq.n	8007706 <TIM_Base_SetConfig+0x1e>
 80076f0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80076f4:	d007      	beq.n	8007706 <TIM_Base_SetConfig+0x1e>
 80076f6:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 80076fa:	4290      	cmp	r0, r2
 80076fc:	d003      	beq.n	8007706 <TIM_Base_SetConfig+0x1e>
 80076fe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007702:	4290      	cmp	r0, r2
 8007704:	d115      	bne.n	8007732 <TIM_Base_SetConfig+0x4a>
 8007706:	684a      	ldr	r2, [r1, #4]
 8007708:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800770c:	4313      	orrs	r3, r2
 800770e:	4a11      	ldr	r2, [pc, #68]	; (8007754 <TIM_Base_SetConfig+0x6c>)
 8007710:	4290      	cmp	r0, r2
 8007712:	d00a      	beq.n	800772a <TIM_Base_SetConfig+0x42>
 8007714:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8007718:	d007      	beq.n	800772a <TIM_Base_SetConfig+0x42>
 800771a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800771e:	4290      	cmp	r0, r2
 8007720:	d003      	beq.n	800772a <TIM_Base_SetConfig+0x42>
 8007722:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007726:	4290      	cmp	r0, r2
 8007728:	d103      	bne.n	8007732 <TIM_Base_SetConfig+0x4a>
 800772a:	68ca      	ldr	r2, [r1, #12]
 800772c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007730:	4313      	orrs	r3, r2
 8007732:	694a      	ldr	r2, [r1, #20]
 8007734:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007738:	4313      	orrs	r3, r2
 800773a:	6003      	str	r3, [r0, #0]
 800773c:	688b      	ldr	r3, [r1, #8]
 800773e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8007740:	680b      	ldr	r3, [r1, #0]
 8007742:	6283      	str	r3, [r0, #40]	; 0x28
 8007744:	4b03      	ldr	r3, [pc, #12]	; (8007754 <TIM_Base_SetConfig+0x6c>)
 8007746:	4298      	cmp	r0, r3
 8007748:	bf04      	itt	eq
 800774a:	690b      	ldreq	r3, [r1, #16]
 800774c:	6303      	streq	r3, [r0, #48]	; 0x30
 800774e:	2301      	movs	r3, #1
 8007750:	6143      	str	r3, [r0, #20]
 8007752:	4770      	bx	lr
 8007754:	40012c00 	.word	0x40012c00

08007758 <HAL_TIM_Base_Init>:
 8007758:	b510      	push	{r4, lr}
 800775a:	4604      	mov	r4, r0
 800775c:	b1a0      	cbz	r0, 8007788 <HAL_TIM_Base_Init+0x30>
 800775e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007762:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007766:	b91b      	cbnz	r3, 8007770 <HAL_TIM_Base_Init+0x18>
 8007768:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 800776c:	f7fc fe32 	bl	80043d4 <HAL_TIM_Base_MspInit>
 8007770:	2302      	movs	r3, #2
 8007772:	6820      	ldr	r0, [r4, #0]
 8007774:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007778:	1d21      	adds	r1, r4, #4
 800777a:	f7ff ffb5 	bl	80076e8 <TIM_Base_SetConfig>
 800777e:	2301      	movs	r3, #1
 8007780:	2000      	movs	r0, #0
 8007782:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007786:	bd10      	pop	{r4, pc}
 8007788:	2001      	movs	r0, #1
 800778a:	e7fc      	b.n	8007786 <HAL_TIM_Base_Init+0x2e>

0800778c <HAL_TIM_PWM_Init>:
 800778c:	b510      	push	{r4, lr}
 800778e:	4604      	mov	r4, r0
 8007790:	b1a0      	cbz	r0, 80077bc <HAL_TIM_PWM_Init+0x30>
 8007792:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8007796:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800779a:	b91b      	cbnz	r3, 80077a4 <HAL_TIM_PWM_Init+0x18>
 800779c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
 80077a0:	f7ff fefa 	bl	8007598 <HAL_TIM_PWM_MspInit>
 80077a4:	2302      	movs	r3, #2
 80077a6:	6820      	ldr	r0, [r4, #0]
 80077a8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80077ac:	1d21      	adds	r1, r4, #4
 80077ae:	f7ff ff9b 	bl	80076e8 <TIM_Base_SetConfig>
 80077b2:	2301      	movs	r3, #1
 80077b4:	2000      	movs	r0, #0
 80077b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 80077ba:	bd10      	pop	{r4, pc}
 80077bc:	2001      	movs	r0, #1
 80077be:	e7fc      	b.n	80077ba <HAL_TIM_PWM_Init+0x2e>

080077c0 <TIM_OC2_SetConfig>:
 80077c0:	6a03      	ldr	r3, [r0, #32]
 80077c2:	b570      	push	{r4, r5, r6, lr}
 80077c4:	f023 0310 	bic.w	r3, r3, #16
 80077c8:	6203      	str	r3, [r0, #32]
 80077ca:	6a03      	ldr	r3, [r0, #32]
 80077cc:	6844      	ldr	r4, [r0, #4]
 80077ce:	6982      	ldr	r2, [r0, #24]
 80077d0:	680d      	ldr	r5, [r1, #0]
 80077d2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80077d6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80077da:	688d      	ldr	r5, [r1, #8]
 80077dc:	f023 0320 	bic.w	r3, r3, #32
 80077e0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80077e4:	4d0b      	ldr	r5, [pc, #44]	; (8007814 <TIM_OC2_SetConfig+0x54>)
 80077e6:	42a8      	cmp	r0, r5
 80077e8:	d10d      	bne.n	8007806 <TIM_OC2_SetConfig+0x46>
 80077ea:	68cd      	ldr	r5, [r1, #12]
 80077ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077f0:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80077f4:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
 80077f8:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
 80077fc:	4335      	orrs	r5, r6
 80077fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007802:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
 8007806:	6044      	str	r4, [r0, #4]
 8007808:	6182      	str	r2, [r0, #24]
 800780a:	684a      	ldr	r2, [r1, #4]
 800780c:	6382      	str	r2, [r0, #56]	; 0x38
 800780e:	6203      	str	r3, [r0, #32]
 8007810:	bd70      	pop	{r4, r5, r6, pc}
 8007812:	bf00      	nop
 8007814:	40012c00 	.word	0x40012c00

08007818 <HAL_TIM_PWM_ConfigChannel>:
 8007818:	b538      	push	{r3, r4, r5, lr}
 800781a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800781e:	4604      	mov	r4, r0
 8007820:	2b01      	cmp	r3, #1
 8007822:	f04f 0002 	mov.w	r0, #2
 8007826:	d025      	beq.n	8007874 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8007828:	2301      	movs	r3, #1
 800782a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 800782e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007832:	2a0c      	cmp	r2, #12
 8007834:	d818      	bhi.n	8007868 <HAL_TIM_PWM_ConfigChannel+0x50>
 8007836:	e8df f002 	tbb	[pc, r2]
 800783a:	1707      	.short	0x1707
 800783c:	171e1717 	.word	0x171e1717
 8007840:	172f1717 	.word	0x172f1717
 8007844:	1717      	.short	0x1717
 8007846:	40          	.byte	0x40
 8007847:	00          	.byte	0x00
 8007848:	6820      	ldr	r0, [r4, #0]
 800784a:	f7ff fe21 	bl	8007490 <TIM_OC1_SetConfig>
 800784e:	6823      	ldr	r3, [r4, #0]
 8007850:	6909      	ldr	r1, [r1, #16]
 8007852:	699a      	ldr	r2, [r3, #24]
 8007854:	f042 0208 	orr.w	r2, r2, #8
 8007858:	619a      	str	r2, [r3, #24]
 800785a:	699a      	ldr	r2, [r3, #24]
 800785c:	f022 0204 	bic.w	r2, r2, #4
 8007860:	619a      	str	r2, [r3, #24]
 8007862:	699a      	ldr	r2, [r3, #24]
 8007864:	430a      	orrs	r2, r1
 8007866:	619a      	str	r2, [r3, #24]
 8007868:	2301      	movs	r3, #1
 800786a:	2000      	movs	r0, #0
 800786c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007870:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8007874:	bd38      	pop	{r3, r4, r5, pc}
 8007876:	6820      	ldr	r0, [r4, #0]
 8007878:	f7ff ffa2 	bl	80077c0 <TIM_OC2_SetConfig>
 800787c:	6823      	ldr	r3, [r4, #0]
 800787e:	6909      	ldr	r1, [r1, #16]
 8007880:	699a      	ldr	r2, [r3, #24]
 8007882:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007886:	619a      	str	r2, [r3, #24]
 8007888:	699a      	ldr	r2, [r3, #24]
 800788a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788e:	619a      	str	r2, [r3, #24]
 8007890:	699a      	ldr	r2, [r3, #24]
 8007892:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007896:	e7e6      	b.n	8007866 <HAL_TIM_PWM_ConfigChannel+0x4e>
 8007898:	6820      	ldr	r0, [r4, #0]
 800789a:	f7ff fe21 	bl	80074e0 <TIM_OC3_SetConfig>
 800789e:	6823      	ldr	r3, [r4, #0]
 80078a0:	6909      	ldr	r1, [r1, #16]
 80078a2:	69da      	ldr	r2, [r3, #28]
 80078a4:	f042 0208 	orr.w	r2, r2, #8
 80078a8:	61da      	str	r2, [r3, #28]
 80078aa:	69da      	ldr	r2, [r3, #28]
 80078ac:	f022 0204 	bic.w	r2, r2, #4
 80078b0:	61da      	str	r2, [r3, #28]
 80078b2:	69da      	ldr	r2, [r3, #28]
 80078b4:	430a      	orrs	r2, r1
 80078b6:	61da      	str	r2, [r3, #28]
 80078b8:	e7d6      	b.n	8007868 <HAL_TIM_PWM_ConfigChannel+0x50>
 80078ba:	6820      	ldr	r0, [r4, #0]
 80078bc:	f7ff fe3a 	bl	8007534 <TIM_OC4_SetConfig>
 80078c0:	6823      	ldr	r3, [r4, #0]
 80078c2:	6909      	ldr	r1, [r1, #16]
 80078c4:	69da      	ldr	r2, [r3, #28]
 80078c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078ca:	61da      	str	r2, [r3, #28]
 80078cc:	69da      	ldr	r2, [r3, #28]
 80078ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078d2:	61da      	str	r2, [r3, #28]
 80078d4:	69da      	ldr	r2, [r3, #28]
 80078d6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80078da:	e7ec      	b.n	80078b6 <HAL_TIM_PWM_ConfigChannel+0x9e>

080078dc <TIM_ETR_SetConfig>:
 80078dc:	b510      	push	{r4, lr}
 80078de:	6884      	ldr	r4, [r0, #8]
 80078e0:	430a      	orrs	r2, r1
 80078e2:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80078e6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80078ea:	4323      	orrs	r3, r4
 80078ec:	6083      	str	r3, [r0, #8]
 80078ee:	bd10      	pop	{r4, pc}

080078f0 <HAL_TIM_ConfigClockSource>:
 80078f0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80078f4:	b570      	push	{r4, r5, r6, lr}
 80078f6:	2b01      	cmp	r3, #1
 80078f8:	4604      	mov	r4, r0
 80078fa:	f04f 0002 	mov.w	r0, #2
 80078fe:	d019      	beq.n	8007934 <HAL_TIM_ConfigClockSource+0x44>
 8007900:	2301      	movs	r3, #1
 8007902:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
 8007906:	6820      	ldr	r0, [r4, #0]
 8007908:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800790c:	6883      	ldr	r3, [r0, #8]
 800790e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007912:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007916:	6083      	str	r3, [r0, #8]
 8007918:	680b      	ldr	r3, [r1, #0]
 800791a:	2b40      	cmp	r3, #64	; 0x40
 800791c:	d065      	beq.n	80079ea <HAL_TIM_ConfigClockSource+0xfa>
 800791e:	d815      	bhi.n	800794c <HAL_TIM_ConfigClockSource+0x5c>
 8007920:	2b10      	cmp	r3, #16
 8007922:	d00c      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x4e>
 8007924:	d807      	bhi.n	8007936 <HAL_TIM_ConfigClockSource+0x46>
 8007926:	b153      	cbz	r3, 800793e <HAL_TIM_ConfigClockSource+0x4e>
 8007928:	2301      	movs	r3, #1
 800792a:	2000      	movs	r0, #0
 800792c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
 8007930:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8007934:	bd70      	pop	{r4, r5, r6, pc}
 8007936:	2b20      	cmp	r3, #32
 8007938:	d001      	beq.n	800793e <HAL_TIM_ConfigClockSource+0x4e>
 800793a:	2b30      	cmp	r3, #48	; 0x30
 800793c:	d1f4      	bne.n	8007928 <HAL_TIM_ConfigClockSource+0x38>
 800793e:	6882      	ldr	r2, [r0, #8]
 8007940:	f043 0307 	orr.w	r3, r3, #7
 8007944:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007948:	4313      	orrs	r3, r2
 800794a:	e01a      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x92>
 800794c:	2b60      	cmp	r3, #96	; 0x60
 800794e:	d034      	beq.n	80079ba <HAL_TIM_ConfigClockSource+0xca>
 8007950:	d819      	bhi.n	8007986 <HAL_TIM_ConfigClockSource+0x96>
 8007952:	2b50      	cmp	r3, #80	; 0x50
 8007954:	d1e8      	bne.n	8007928 <HAL_TIM_ConfigClockSource+0x38>
 8007956:	684a      	ldr	r2, [r1, #4]
 8007958:	68ce      	ldr	r6, [r1, #12]
 800795a:	6a01      	ldr	r1, [r0, #32]
 800795c:	6a05      	ldr	r5, [r0, #32]
 800795e:	f021 010a 	bic.w	r1, r1, #10
 8007962:	f025 0501 	bic.w	r5, r5, #1
 8007966:	6205      	str	r5, [r0, #32]
 8007968:	6983      	ldr	r3, [r0, #24]
 800796a:	430a      	orrs	r2, r1
 800796c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007970:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8007974:	6183      	str	r3, [r0, #24]
 8007976:	6202      	str	r2, [r0, #32]
 8007978:	6883      	ldr	r3, [r0, #8]
 800797a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800797e:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8007982:	6083      	str	r3, [r0, #8]
 8007984:	e7d0      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x38>
 8007986:	2b70      	cmp	r3, #112	; 0x70
 8007988:	d00c      	beq.n	80079a4 <HAL_TIM_ConfigClockSource+0xb4>
 800798a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800798e:	d1cb      	bne.n	8007928 <HAL_TIM_ConfigClockSource+0x38>
 8007990:	68cb      	ldr	r3, [r1, #12]
 8007992:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8007996:	f7ff ffa1 	bl	80078dc <TIM_ETR_SetConfig>
 800799a:	6822      	ldr	r2, [r4, #0]
 800799c:	6893      	ldr	r3, [r2, #8]
 800799e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079a2:	e008      	b.n	80079b6 <HAL_TIM_ConfigClockSource+0xc6>
 80079a4:	68cb      	ldr	r3, [r1, #12]
 80079a6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 80079aa:	f7ff ff97 	bl	80078dc <TIM_ETR_SetConfig>
 80079ae:	6822      	ldr	r2, [r4, #0]
 80079b0:	6893      	ldr	r3, [r2, #8]
 80079b2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80079b6:	6093      	str	r3, [r2, #8]
 80079b8:	e7b6      	b.n	8007928 <HAL_TIM_ConfigClockSource+0x38>
 80079ba:	684d      	ldr	r5, [r1, #4]
 80079bc:	68ce      	ldr	r6, [r1, #12]
 80079be:	6a01      	ldr	r1, [r0, #32]
 80079c0:	f021 0110 	bic.w	r1, r1, #16
 80079c4:	6201      	str	r1, [r0, #32]
 80079c6:	6982      	ldr	r2, [r0, #24]
 80079c8:	6a03      	ldr	r3, [r0, #32]
 80079ca:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 80079ce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80079d2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80079d6:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
 80079da:	6182      	str	r2, [r0, #24]
 80079dc:	6203      	str	r3, [r0, #32]
 80079de:	6883      	ldr	r3, [r0, #8]
 80079e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079e4:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80079e8:	e7cb      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x92>
 80079ea:	684a      	ldr	r2, [r1, #4]
 80079ec:	68ce      	ldr	r6, [r1, #12]
 80079ee:	6a01      	ldr	r1, [r0, #32]
 80079f0:	6a05      	ldr	r5, [r0, #32]
 80079f2:	f021 010a 	bic.w	r1, r1, #10
 80079f6:	f025 0501 	bic.w	r5, r5, #1
 80079fa:	6205      	str	r5, [r0, #32]
 80079fc:	6983      	ldr	r3, [r0, #24]
 80079fe:	430a      	orrs	r2, r1
 8007a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a04:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8007a08:	6183      	str	r3, [r0, #24]
 8007a0a:	6202      	str	r2, [r0, #32]
 8007a0c:	6883      	ldr	r3, [r0, #8]
 8007a0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a12:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8007a16:	e7b4      	b.n	8007982 <HAL_TIM_ConfigClockSource+0x92>

08007a18 <TIM_SlaveTimer_SetConfig>:
 8007a18:	6800      	ldr	r0, [r0, #0]
 8007a1a:	b538      	push	{r3, r4, r5, lr}
 8007a1c:	6883      	ldr	r3, [r0, #8]
 8007a1e:	684a      	ldr	r2, [r1, #4]
 8007a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007a24:	680c      	ldr	r4, [r1, #0]
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f023 0307 	bic.w	r3, r3, #7
 8007a2c:	4323      	orrs	r3, r4
 8007a2e:	2a50      	cmp	r2, #80	; 0x50
 8007a30:	6083      	str	r3, [r0, #8]
 8007a32:	d01e      	beq.n	8007a72 <TIM_SlaveTimer_SetConfig+0x5a>
 8007a34:	d803      	bhi.n	8007a3e <TIM_SlaveTimer_SetConfig+0x26>
 8007a36:	2a40      	cmp	r2, #64	; 0x40
 8007a38:	d00b      	beq.n	8007a52 <TIM_SlaveTimer_SetConfig+0x3a>
 8007a3a:	2000      	movs	r0, #0
 8007a3c:	bd38      	pop	{r3, r4, r5, pc}
 8007a3e:	2a60      	cmp	r2, #96	; 0x60
 8007a40:	d027      	beq.n	8007a92 <TIM_SlaveTimer_SetConfig+0x7a>
 8007a42:	2a70      	cmp	r2, #112	; 0x70
 8007a44:	d1f9      	bne.n	8007a3a <TIM_SlaveTimer_SetConfig+0x22>
 8007a46:	690b      	ldr	r3, [r1, #16]
 8007a48:	e9d1 2102 	ldrd	r2, r1, [r1, #8]
 8007a4c:	f7ff ff46 	bl	80078dc <TIM_ETR_SetConfig>
 8007a50:	e7f3      	b.n	8007a3a <TIM_SlaveTimer_SetConfig+0x22>
 8007a52:	2c05      	cmp	r4, #5
 8007a54:	d030      	beq.n	8007ab8 <TIM_SlaveTimer_SetConfig+0xa0>
 8007a56:	6a02      	ldr	r2, [r0, #32]
 8007a58:	6a03      	ldr	r3, [r0, #32]
 8007a5a:	6909      	ldr	r1, [r1, #16]
 8007a5c:	f023 0301 	bic.w	r3, r3, #1
 8007a60:	6203      	str	r3, [r0, #32]
 8007a62:	6983      	ldr	r3, [r0, #24]
 8007a64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a68:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
 8007a6c:	6183      	str	r3, [r0, #24]
 8007a6e:	6202      	str	r2, [r0, #32]
 8007a70:	e7e3      	b.n	8007a3a <TIM_SlaveTimer_SetConfig+0x22>
 8007a72:	688a      	ldr	r2, [r1, #8]
 8007a74:	690d      	ldr	r5, [r1, #16]
 8007a76:	6a01      	ldr	r1, [r0, #32]
 8007a78:	6a04      	ldr	r4, [r0, #32]
 8007a7a:	f021 010a 	bic.w	r1, r1, #10
 8007a7e:	f024 0401 	bic.w	r4, r4, #1
 8007a82:	6204      	str	r4, [r0, #32]
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	430a      	orrs	r2, r1
 8007a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8007a90:	e7ec      	b.n	8007a6c <TIM_SlaveTimer_SetConfig+0x54>
 8007a92:	688c      	ldr	r4, [r1, #8]
 8007a94:	690d      	ldr	r5, [r1, #16]
 8007a96:	6a01      	ldr	r1, [r0, #32]
 8007a98:	f021 0110 	bic.w	r1, r1, #16
 8007a9c:	6201      	str	r1, [r0, #32]
 8007a9e:	6982      	ldr	r2, [r0, #24]
 8007aa0:	6a03      	ldr	r3, [r0, #32]
 8007aa2:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
 8007aa6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007aaa:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
 8007aae:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 8007ab2:	6182      	str	r2, [r0, #24]
 8007ab4:	6203      	str	r3, [r0, #32]
 8007ab6:	e7c0      	b.n	8007a3a <TIM_SlaveTimer_SetConfig+0x22>
 8007ab8:	2001      	movs	r0, #1
 8007aba:	e7bf      	b.n	8007a3c <TIM_SlaveTimer_SetConfig+0x24>

08007abc <HAL_TIM_SlaveConfigSynchro>:
 8007abc:	b538      	push	{r3, r4, r5, lr}
 8007abe:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007ac2:	4604      	mov	r4, r0
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	f04f 0302 	mov.w	r3, #2
 8007aca:	d01c      	beq.n	8007b06 <HAL_TIM_SlaveConfigSynchro+0x4a>
 8007acc:	2501      	movs	r5, #1
 8007ace:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007ad2:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
 8007ad6:	f7ff ff9f 	bl	8007a18 <TIM_SlaveTimer_SetConfig>
 8007ada:	b130      	cbz	r0, 8007aea <HAL_TIM_SlaveConfigSynchro+0x2e>
 8007adc:	2300      	movs	r3, #0
 8007ade:	4628      	mov	r0, r5
 8007ae0:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8007ae4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8007ae8:	bd38      	pop	{r3, r4, r5, pc}
 8007aea:	6823      	ldr	r3, [r4, #0]
 8007aec:	68da      	ldr	r2, [r3, #12]
 8007aee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007af2:	60da      	str	r2, [r3, #12]
 8007af4:	68da      	ldr	r2, [r3, #12]
 8007af6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007afa:	60da      	str	r2, [r3, #12]
 8007afc:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
 8007b00:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
 8007b04:	e7f0      	b.n	8007ae8 <HAL_TIM_SlaveConfigSynchro+0x2c>
 8007b06:	4618      	mov	r0, r3
 8007b08:	e7ee      	b.n	8007ae8 <HAL_TIM_SlaveConfigSynchro+0x2c>

08007b0a <TIM_CCxChannelCmd>:
 8007b0a:	b510      	push	{r4, lr}
 8007b0c:	2401      	movs	r4, #1
 8007b0e:	6a03      	ldr	r3, [r0, #32]
 8007b10:	f001 011f 	and.w	r1, r1, #31
 8007b14:	408c      	lsls	r4, r1
 8007b16:	ea23 0304 	bic.w	r3, r3, r4
 8007b1a:	6203      	str	r3, [r0, #32]
 8007b1c:	6a03      	ldr	r3, [r0, #32]
 8007b1e:	408a      	lsls	r2, r1
 8007b20:	431a      	orrs	r2, r3
 8007b22:	6202      	str	r2, [r0, #32]
 8007b24:	bd10      	pop	{r4, pc}
	...

08007b28 <HAL_TIM_OC_Start>:
 8007b28:	b510      	push	{r4, lr}
 8007b2a:	4604      	mov	r4, r0
 8007b2c:	2201      	movs	r2, #1
 8007b2e:	6800      	ldr	r0, [r0, #0]
 8007b30:	f7ff ffeb 	bl	8007b0a <TIM_CCxChannelCmd>
 8007b34:	6823      	ldr	r3, [r4, #0]
 8007b36:	4a09      	ldr	r2, [pc, #36]	; (8007b5c <HAL_TIM_OC_Start+0x34>)
 8007b38:	2000      	movs	r0, #0
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	bf02      	ittt	eq
 8007b3e:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 8007b40:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8007b44:	645a      	streq	r2, [r3, #68]	; 0x44
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	f002 0207 	and.w	r2, r2, #7
 8007b4c:	2a06      	cmp	r2, #6
 8007b4e:	bf1e      	ittt	ne
 8007b50:	681a      	ldrne	r2, [r3, #0]
 8007b52:	f042 0201 	orrne.w	r2, r2, #1
 8007b56:	601a      	strne	r2, [r3, #0]
 8007b58:	bd10      	pop	{r4, pc}
 8007b5a:	bf00      	nop
 8007b5c:	40012c00 	.word	0x40012c00

08007b60 <HAL_TIM_PWM_Start>:
 8007b60:	f7ff bfe2 	b.w	8007b28 <HAL_TIM_OC_Start>

08007b64 <TIM_CCxNChannelCmd>:
 8007b64:	b510      	push	{r4, lr}
 8007b66:	2404      	movs	r4, #4
 8007b68:	6a03      	ldr	r3, [r0, #32]
 8007b6a:	f001 011f 	and.w	r1, r1, #31
 8007b6e:	408c      	lsls	r4, r1
 8007b70:	ea23 0304 	bic.w	r3, r3, r4
 8007b74:	6203      	str	r3, [r0, #32]
 8007b76:	6a03      	ldr	r3, [r0, #32]
 8007b78:	408a      	lsls	r2, r1
 8007b7a:	431a      	orrs	r2, r3
 8007b7c:	6202      	str	r2, [r0, #32]
 8007b7e:	bd10      	pop	{r4, pc}

08007b80 <HAL_TIMEx_OCN_Start>:
 8007b80:	b510      	push	{r4, lr}
 8007b82:	4604      	mov	r4, r0
 8007b84:	2204      	movs	r2, #4
 8007b86:	6800      	ldr	r0, [r0, #0]
 8007b88:	f7ff ffec 	bl	8007b64 <TIM_CCxNChannelCmd>
 8007b8c:	6823      	ldr	r3, [r4, #0]
 8007b8e:	2000      	movs	r0, #0
 8007b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	f002 0207 	and.w	r2, r2, #7
 8007b9e:	2a06      	cmp	r2, #6
 8007ba0:	bf1e      	ittt	ne
 8007ba2:	681a      	ldrne	r2, [r3, #0]
 8007ba4:	f042 0201 	orrne.w	r2, r2, #1
 8007ba8:	601a      	strne	r2, [r3, #0]
 8007baa:	bd10      	pop	{r4, pc}

08007bac <HAL_TIMEx_PWMN_Start>:
 8007bac:	f7ff bfe8 	b.w	8007b80 <HAL_TIMEx_OCN_Start>

08007bb0 <HAL_TIMEx_MasterConfigSynchronization>:
 8007bb0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007bb4:	b530      	push	{r4, r5, lr}
 8007bb6:	2b01      	cmp	r3, #1
 8007bb8:	f04f 0302 	mov.w	r3, #2
 8007bbc:	d014      	beq.n	8007be8 <HAL_TIMEx_MasterConfigSynchronization+0x38>
 8007bbe:	6804      	ldr	r4, [r0, #0]
 8007bc0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007bc4:	6862      	ldr	r2, [r4, #4]
 8007bc6:	68a3      	ldr	r3, [r4, #8]
 8007bc8:	680d      	ldr	r5, [r1, #0]
 8007bca:	6849      	ldr	r1, [r1, #4]
 8007bcc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007bd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bd4:	430b      	orrs	r3, r1
 8007bd6:	432a      	orrs	r2, r5
 8007bd8:	6062      	str	r2, [r4, #4]
 8007bda:	60a3      	str	r3, [r4, #8]
 8007bdc:	2301      	movs	r3, #1
 8007bde:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8007be2:	2300      	movs	r3, #0
 8007be4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8007be8:	4618      	mov	r0, r3
 8007bea:	bd30      	pop	{r4, r5, pc}

08007bec <HAL_TIMEx_ConfigBreakDeadTime>:
 8007bec:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8007bf0:	2b01      	cmp	r3, #1
 8007bf2:	d01f      	beq.n	8007c34 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
 8007bf4:	68cb      	ldr	r3, [r1, #12]
 8007bf6:	688a      	ldr	r2, [r1, #8]
 8007bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	684a      	ldr	r2, [r1, #4]
 8007c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007c04:	4313      	orrs	r3, r2
 8007c06:	680a      	ldr	r2, [r1, #0]
 8007c08:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	690a      	ldr	r2, [r1, #16]
 8007c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c14:	4313      	orrs	r3, r2
 8007c16:	694a      	ldr	r2, [r1, #20]
 8007c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	69ca      	ldr	r2, [r1, #28]
 8007c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c24:	4313      	orrs	r3, r2
 8007c26:	6802      	ldr	r2, [r0, #0]
 8007c28:	6453      	str	r3, [r2, #68]	; 0x44
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8007c30:	4618      	mov	r0, r3
 8007c32:	4770      	bx	lr
 8007c34:	2002      	movs	r0, #2
 8007c36:	4770      	bx	lr

08007c38 <HAL_TIMEx_CommutCallback>:
 8007c38:	4770      	bx	lr

08007c3a <HAL_TIMEx_BreakCallback>:
 8007c3a:	4770      	bx	lr

08007c3c <UART_EndRxTransfer>:
 8007c3c:	6803      	ldr	r3, [r0, #0]
 8007c3e:	68da      	ldr	r2, [r3, #12]
 8007c40:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007c44:	60da      	str	r2, [r3, #12]
 8007c46:	695a      	ldr	r2, [r3, #20]
 8007c48:	f022 0201 	bic.w	r2, r2, #1
 8007c4c:	615a      	str	r2, [r3, #20]
 8007c4e:	2320      	movs	r3, #32
 8007c50:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8007c54:	4770      	bx	lr
	...

08007c58 <UART_SetConfig>:
 8007c58:	b538      	push	{r3, r4, r5, lr}
 8007c5a:	4605      	mov	r5, r0
 8007c5c:	6803      	ldr	r3, [r0, #0]
 8007c5e:	68c1      	ldr	r1, [r0, #12]
 8007c60:	691a      	ldr	r2, [r3, #16]
 8007c62:	2419      	movs	r4, #25
 8007c64:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8007c68:	430a      	orrs	r2, r1
 8007c6a:	611a      	str	r2, [r3, #16]
 8007c6c:	6882      	ldr	r2, [r0, #8]
 8007c6e:	6900      	ldr	r0, [r0, #16]
 8007c70:	68d9      	ldr	r1, [r3, #12]
 8007c72:	4302      	orrs	r2, r0
 8007c74:	6968      	ldr	r0, [r5, #20]
 8007c76:	f421 51b0 	bic.w	r1, r1, #5632	; 0x1600
 8007c7a:	f021 010c 	bic.w	r1, r1, #12
 8007c7e:	4302      	orrs	r2, r0
 8007c80:	430a      	orrs	r2, r1
 8007c82:	60da      	str	r2, [r3, #12]
 8007c84:	695a      	ldr	r2, [r3, #20]
 8007c86:	69a9      	ldr	r1, [r5, #24]
 8007c88:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	615a      	str	r2, [r3, #20]
 8007c90:	4a0d      	ldr	r2, [pc, #52]	; (8007cc8 <UART_SetConfig+0x70>)
 8007c92:	4293      	cmp	r3, r2
 8007c94:	d114      	bne.n	8007cc0 <UART_SetConfig+0x68>
 8007c96:	f7ff fb55 	bl	8007344 <HAL_RCC_GetPCLK2Freq>
 8007c9a:	4360      	muls	r0, r4
 8007c9c:	686c      	ldr	r4, [r5, #4]
 8007c9e:	2264      	movs	r2, #100	; 0x64
 8007ca0:	00a4      	lsls	r4, r4, #2
 8007ca2:	fbb0 f0f4 	udiv	r0, r0, r4
 8007ca6:	fbb0 f1f2 	udiv	r1, r0, r2
 8007caa:	fb02 0311 	mls	r3, r2, r1, r0
 8007cae:	011b      	lsls	r3, r3, #4
 8007cb0:	3332      	adds	r3, #50	; 0x32
 8007cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8007cb6:	682c      	ldr	r4, [r5, #0]
 8007cb8:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 8007cbc:	60a3      	str	r3, [r4, #8]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	f7ff fb30 	bl	8007324 <HAL_RCC_GetPCLK1Freq>
 8007cc4:	e7e9      	b.n	8007c9a <UART_SetConfig+0x42>
 8007cc6:	bf00      	nop
 8007cc8:	40013800 	.word	0x40013800

08007ccc <HAL_UART_Init>:
 8007ccc:	b510      	push	{r4, lr}
 8007cce:	4604      	mov	r4, r0
 8007cd0:	b340      	cbz	r0, 8007d24 <HAL_UART_Init+0x58>
 8007cd2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8007cd6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8007cda:	b91b      	cbnz	r3, 8007ce4 <HAL_UART_Init+0x18>
 8007cdc:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8007ce0:	f7fc fbda 	bl	8004498 <HAL_UART_MspInit>
 8007ce4:	2324      	movs	r3, #36	; 0x24
 8007ce6:	6822      	ldr	r2, [r4, #0]
 8007ce8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8007cec:	68d3      	ldr	r3, [r2, #12]
 8007cee:	4620      	mov	r0, r4
 8007cf0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007cf4:	60d3      	str	r3, [r2, #12]
 8007cf6:	f7ff ffaf 	bl	8007c58 <UART_SetConfig>
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	2000      	movs	r0, #0
 8007cfe:	691a      	ldr	r2, [r3, #16]
 8007d00:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d04:	611a      	str	r2, [r3, #16]
 8007d06:	695a      	ldr	r2, [r3, #20]
 8007d08:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d0c:	615a      	str	r2, [r3, #20]
 8007d0e:	68da      	ldr	r2, [r3, #12]
 8007d10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d14:	60da      	str	r2, [r3, #12]
 8007d16:	2320      	movs	r3, #32
 8007d18:	63e0      	str	r0, [r4, #60]	; 0x3c
 8007d1a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 8007d1e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8007d22:	bd10      	pop	{r4, pc}
 8007d24:	2001      	movs	r0, #1
 8007d26:	e7fc      	b.n	8007d22 <HAL_UART_Init+0x56>

08007d28 <HAL_UART_Transmit_DMA>:
 8007d28:	b538      	push	{r3, r4, r5, lr}
 8007d2a:	4604      	mov	r4, r0
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8007d32:	2a20      	cmp	r2, #32
 8007d34:	d12a      	bne.n	8007d8c <HAL_UART_Transmit_DMA+0x64>
 8007d36:	b339      	cbz	r1, 8007d88 <HAL_UART_Transmit_DMA+0x60>
 8007d38:	b333      	cbz	r3, 8007d88 <HAL_UART_Transmit_DMA+0x60>
 8007d3a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
 8007d3e:	2a01      	cmp	r2, #1
 8007d40:	d024      	beq.n	8007d8c <HAL_UART_Transmit_DMA+0x64>
 8007d42:	2201      	movs	r2, #1
 8007d44:	2500      	movs	r5, #0
 8007d46:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
 8007d4a:	2221      	movs	r2, #33	; 0x21
 8007d4c:	84e3      	strh	r3, [r4, #38]	; 0x26
 8007d4e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8007d50:	63e5      	str	r5, [r4, #60]	; 0x3c
 8007d52:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8007d56:	4a0e      	ldr	r2, [pc, #56]	; (8007d90 <HAL_UART_Transmit_DMA+0x68>)
 8007d58:	84a3      	strh	r3, [r4, #36]	; 0x24
 8007d5a:	6221      	str	r1, [r4, #32]
 8007d5c:	6282      	str	r2, [r0, #40]	; 0x28
 8007d5e:	4a0d      	ldr	r2, [pc, #52]	; (8007d94 <HAL_UART_Transmit_DMA+0x6c>)
 8007d60:	62c2      	str	r2, [r0, #44]	; 0x2c
 8007d62:	4a0d      	ldr	r2, [pc, #52]	; (8007d98 <HAL_UART_Transmit_DMA+0x70>)
 8007d64:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
 8007d68:	6822      	ldr	r2, [r4, #0]
 8007d6a:	3204      	adds	r2, #4
 8007d6c:	f7fe fd32 	bl	80067d4 <HAL_DMA_Start_IT>
 8007d70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007d74:	4628      	mov	r0, r5
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	601a      	str	r2, [r3, #0]
 8007d7a:	695a      	ldr	r2, [r3, #20]
 8007d7c:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
 8007d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007d84:	615a      	str	r2, [r3, #20]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	2001      	movs	r0, #1
 8007d8a:	e7fc      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x5e>
 8007d8c:	2002      	movs	r0, #2
 8007d8e:	e7fa      	b.n	8007d86 <HAL_UART_Transmit_DMA+0x5e>
 8007d90:	08007e2f 	.word	0x08007e2f
 8007d94:	08007e5d 	.word	0x08007e5d
 8007d98:	08007f25 	.word	0x08007f25

08007d9c <HAL_UART_Receive_DMA>:
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8007da2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007da4:	2a20      	cmp	r2, #32
 8007da6:	4605      	mov	r5, r0
 8007da8:	d138      	bne.n	8007e1c <HAL_UART_Receive_DMA+0x80>
 8007daa:	2900      	cmp	r1, #0
 8007dac:	d034      	beq.n	8007e18 <HAL_UART_Receive_DMA+0x7c>
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d032      	beq.n	8007e18 <HAL_UART_Receive_DMA+0x7c>
 8007db2:	f890 2038 	ldrb.w	r2, [r0, #56]	; 0x38
 8007db6:	2a01      	cmp	r2, #1
 8007db8:	d030      	beq.n	8007e1c <HAL_UART_Receive_DMA+0x80>
 8007dba:	2201      	movs	r2, #1
 8007dbc:	2400      	movs	r4, #0
 8007dbe:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
 8007dc2:	2222      	movs	r2, #34	; 0x22
 8007dc4:	6281      	str	r1, [r0, #40]	; 0x28
 8007dc6:	8583      	strh	r3, [r0, #44]	; 0x2c
 8007dc8:	63c4      	str	r4, [r0, #60]	; 0x3c
 8007dca:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
 8007dce:	6b40      	ldr	r0, [r0, #52]	; 0x34
 8007dd0:	4a13      	ldr	r2, [pc, #76]	; (8007e20 <HAL_UART_Receive_DMA+0x84>)
 8007dd2:	682e      	ldr	r6, [r5, #0]
 8007dd4:	6282      	str	r2, [r0, #40]	; 0x28
 8007dd6:	4a13      	ldr	r2, [pc, #76]	; (8007e24 <HAL_UART_Receive_DMA+0x88>)
 8007dd8:	62c2      	str	r2, [r0, #44]	; 0x2c
 8007dda:	4a13      	ldr	r2, [pc, #76]	; (8007e28 <HAL_UART_Receive_DMA+0x8c>)
 8007ddc:	e9c0 240c 	strd	r2, r4, [r0, #48]	; 0x30
 8007de0:	460a      	mov	r2, r1
 8007de2:	1d31      	adds	r1, r6, #4
 8007de4:	f7fe fcf6 	bl	80067d4 <HAL_DMA_Start_IT>
 8007de8:	4620      	mov	r0, r4
 8007dea:	682b      	ldr	r3, [r5, #0]
 8007dec:	9401      	str	r4, [sp, #4]
 8007dee:	681a      	ldr	r2, [r3, #0]
 8007df0:	9201      	str	r2, [sp, #4]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	f885 4038 	strb.w	r4, [r5, #56]	; 0x38
 8007df8:	9201      	str	r2, [sp, #4]
 8007dfa:	9a01      	ldr	r2, [sp, #4]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007e02:	60da      	str	r2, [r3, #12]
 8007e04:	695a      	ldr	r2, [r3, #20]
 8007e06:	f042 0201 	orr.w	r2, r2, #1
 8007e0a:	615a      	str	r2, [r3, #20]
 8007e0c:	695a      	ldr	r2, [r3, #20]
 8007e0e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e12:	615a      	str	r2, [r3, #20]
 8007e14:	b002      	add	sp, #8
 8007e16:	bd70      	pop	{r4, r5, r6, pc}
 8007e18:	2001      	movs	r0, #1
 8007e1a:	e7fb      	b.n	8007e14 <HAL_UART_Receive_DMA+0x78>
 8007e1c:	2002      	movs	r0, #2
 8007e1e:	e7f9      	b.n	8007e14 <HAL_UART_Receive_DMA+0x78>
 8007e20:	08007e69 	.word	0x08007e69
 8007e24:	08007f19 	.word	0x08007f19
 8007e28:	08007f25 	.word	0x08007f25

08007e2c <HAL_UART_TxCpltCallback>:
 8007e2c:	4770      	bx	lr

08007e2e <UART_DMATransmitCplt>:
 8007e2e:	b508      	push	{r3, lr}
 8007e30:	6803      	ldr	r3, [r0, #0]
 8007e32:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f013 0320 	ands.w	r3, r3, #32
 8007e3a:	d10a      	bne.n	8007e52 <UART_DMATransmitCplt+0x24>
 8007e3c:	84d3      	strh	r3, [r2, #38]	; 0x26
 8007e3e:	6813      	ldr	r3, [r2, #0]
 8007e40:	695a      	ldr	r2, [r3, #20]
 8007e42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e46:	615a      	str	r2, [r3, #20]
 8007e48:	68da      	ldr	r2, [r3, #12]
 8007e4a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e4e:	60da      	str	r2, [r3, #12]
 8007e50:	bd08      	pop	{r3, pc}
 8007e52:	4610      	mov	r0, r2
 8007e54:	f7ff ffea 	bl	8007e2c <HAL_UART_TxCpltCallback>
 8007e58:	e7fa      	b.n	8007e50 <UART_DMATransmitCplt+0x22>

08007e5a <HAL_UART_TxHalfCpltCallback>:
 8007e5a:	4770      	bx	lr

08007e5c <UART_DMATxHalfCplt>:
 8007e5c:	b508      	push	{r3, lr}
 8007e5e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007e60:	f7ff fffb 	bl	8007e5a <HAL_UART_TxHalfCpltCallback>
 8007e64:	bd08      	pop	{r3, pc}

08007e66 <HAL_UART_RxCpltCallback>:
 8007e66:	4770      	bx	lr

08007e68 <UART_DMAReceiveCplt>:
 8007e68:	b508      	push	{r3, lr}
 8007e6a:	6803      	ldr	r3, [r0, #0]
 8007e6c:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f013 0320 	ands.w	r3, r3, #32
 8007e74:	d110      	bne.n	8007e98 <UART_DMAReceiveCplt+0x30>
 8007e76:	85d3      	strh	r3, [r2, #46]	; 0x2e
 8007e78:	6813      	ldr	r3, [r2, #0]
 8007e7a:	68d9      	ldr	r1, [r3, #12]
 8007e7c:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8007e80:	60d9      	str	r1, [r3, #12]
 8007e82:	6959      	ldr	r1, [r3, #20]
 8007e84:	f021 0101 	bic.w	r1, r1, #1
 8007e88:	6159      	str	r1, [r3, #20]
 8007e8a:	6959      	ldr	r1, [r3, #20]
 8007e8c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8007e90:	6159      	str	r1, [r3, #20]
 8007e92:	2320      	movs	r3, #32
 8007e94:	f882 303a 	strb.w	r3, [r2, #58]	; 0x3a
 8007e98:	4610      	mov	r0, r2
 8007e9a:	f7ff ffe4 	bl	8007e66 <HAL_UART_RxCpltCallback>
 8007e9e:	bd08      	pop	{r3, pc}

08007ea0 <UART_Receive_IT>:
 8007ea0:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8007ea4:	b510      	push	{r4, lr}
 8007ea6:	2b22      	cmp	r3, #34	; 0x22
 8007ea8:	d133      	bne.n	8007f12 <UART_Receive_IT+0x72>
 8007eaa:	6881      	ldr	r1, [r0, #8]
 8007eac:	6904      	ldr	r4, [r0, #16]
 8007eae:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8007eb2:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8007eb4:	6802      	ldr	r2, [r0, #0]
 8007eb6:	d123      	bne.n	8007f00 <UART_Receive_IT+0x60>
 8007eb8:	6852      	ldr	r2, [r2, #4]
 8007eba:	b9ec      	cbnz	r4, 8007ef8 <UART_Receive_IT+0x58>
 8007ebc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007ec0:	f823 2b02 	strh.w	r2, [r3], #2
 8007ec4:	6283      	str	r3, [r0, #40]	; 0x28
 8007ec6:	8dc4      	ldrh	r4, [r0, #46]	; 0x2e
 8007ec8:	3c01      	subs	r4, #1
 8007eca:	b2a4      	uxth	r4, r4
 8007ecc:	85c4      	strh	r4, [r0, #46]	; 0x2e
 8007ece:	b98c      	cbnz	r4, 8007ef4 <UART_Receive_IT+0x54>
 8007ed0:	6803      	ldr	r3, [r0, #0]
 8007ed2:	68da      	ldr	r2, [r3, #12]
 8007ed4:	f022 0220 	bic.w	r2, r2, #32
 8007ed8:	60da      	str	r2, [r3, #12]
 8007eda:	68da      	ldr	r2, [r3, #12]
 8007edc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007ee0:	60da      	str	r2, [r3, #12]
 8007ee2:	695a      	ldr	r2, [r3, #20]
 8007ee4:	f022 0201 	bic.w	r2, r2, #1
 8007ee8:	615a      	str	r2, [r3, #20]
 8007eea:	2320      	movs	r3, #32
 8007eec:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
 8007ef0:	f7ff ffb9 	bl	8007e66 <HAL_UART_RxCpltCallback>
 8007ef4:	2000      	movs	r0, #0
 8007ef6:	e00d      	b.n	8007f14 <UART_Receive_IT+0x74>
 8007ef8:	b2d2      	uxtb	r2, r2
 8007efa:	f823 2b01 	strh.w	r2, [r3], #1
 8007efe:	e7e1      	b.n	8007ec4 <UART_Receive_IT+0x24>
 8007f00:	1c59      	adds	r1, r3, #1
 8007f02:	6852      	ldr	r2, [r2, #4]
 8007f04:	6281      	str	r1, [r0, #40]	; 0x28
 8007f06:	b90c      	cbnz	r4, 8007f0c <UART_Receive_IT+0x6c>
 8007f08:	701a      	strb	r2, [r3, #0]
 8007f0a:	e7dc      	b.n	8007ec6 <UART_Receive_IT+0x26>
 8007f0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8007f10:	e7fa      	b.n	8007f08 <UART_Receive_IT+0x68>
 8007f12:	2002      	movs	r0, #2
 8007f14:	bd10      	pop	{r4, pc}

08007f16 <HAL_UART_RxHalfCpltCallback>:
 8007f16:	4770      	bx	lr

08007f18 <UART_DMARxHalfCplt>:
 8007f18:	b508      	push	{r3, lr}
 8007f1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8007f1c:	f7ff fffb 	bl	8007f16 <HAL_UART_RxHalfCpltCallback>
 8007f20:	bd08      	pop	{r3, pc}

08007f22 <HAL_UART_ErrorCallback>:
 8007f22:	4770      	bx	lr

08007f24 <UART_DMAError>:
 8007f24:	6a41      	ldr	r1, [r0, #36]	; 0x24
 8007f26:	b508      	push	{r3, lr}
 8007f28:	680b      	ldr	r3, [r1, #0]
 8007f2a:	695a      	ldr	r2, [r3, #20]
 8007f2c:	f891 0039 	ldrb.w	r0, [r1, #57]	; 0x39
 8007f30:	2821      	cmp	r0, #33	; 0x21
 8007f32:	d10a      	bne.n	8007f4a <UART_DMAError+0x26>
 8007f34:	0612      	lsls	r2, r2, #24
 8007f36:	d508      	bpl.n	8007f4a <UART_DMAError+0x26>
 8007f38:	2200      	movs	r2, #0
 8007f3a:	84ca      	strh	r2, [r1, #38]	; 0x26
 8007f3c:	68da      	ldr	r2, [r3, #12]
 8007f3e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007f42:	60da      	str	r2, [r3, #12]
 8007f44:	2220      	movs	r2, #32
 8007f46:	f881 2039 	strb.w	r2, [r1, #57]	; 0x39
 8007f4a:	695b      	ldr	r3, [r3, #20]
 8007f4c:	f891 203a 	ldrb.w	r2, [r1, #58]	; 0x3a
 8007f50:	2a22      	cmp	r2, #34	; 0x22
 8007f52:	d106      	bne.n	8007f62 <UART_DMAError+0x3e>
 8007f54:	065b      	lsls	r3, r3, #25
 8007f56:	d504      	bpl.n	8007f62 <UART_DMAError+0x3e>
 8007f58:	2300      	movs	r3, #0
 8007f5a:	4608      	mov	r0, r1
 8007f5c:	85cb      	strh	r3, [r1, #46]	; 0x2e
 8007f5e:	f7ff fe6d 	bl	8007c3c <UART_EndRxTransfer>
 8007f62:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 8007f64:	4608      	mov	r0, r1
 8007f66:	f043 0310 	orr.w	r3, r3, #16
 8007f6a:	63cb      	str	r3, [r1, #60]	; 0x3c
 8007f6c:	f7ff ffd9 	bl	8007f22 <HAL_UART_ErrorCallback>
 8007f70:	bd08      	pop	{r3, pc}
	...

08007f74 <HAL_UART_IRQHandler>:
 8007f74:	6803      	ldr	r3, [r0, #0]
 8007f76:	b570      	push	{r4, r5, r6, lr}
 8007f78:	681a      	ldr	r2, [r3, #0]
 8007f7a:	4604      	mov	r4, r0
 8007f7c:	0716      	lsls	r6, r2, #28
 8007f7e:	68d9      	ldr	r1, [r3, #12]
 8007f80:	695d      	ldr	r5, [r3, #20]
 8007f82:	d107      	bne.n	8007f94 <HAL_UART_IRQHandler+0x20>
 8007f84:	0696      	lsls	r6, r2, #26
 8007f86:	d558      	bpl.n	800803a <HAL_UART_IRQHandler+0xc6>
 8007f88:	068d      	lsls	r5, r1, #26
 8007f8a:	d556      	bpl.n	800803a <HAL_UART_IRQHandler+0xc6>
 8007f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f90:	f7ff bf86 	b.w	8007ea0 <UART_Receive_IT>
 8007f94:	f015 0501 	ands.w	r5, r5, #1
 8007f98:	d102      	bne.n	8007fa0 <HAL_UART_IRQHandler+0x2c>
 8007f9a:	f411 7f90 	tst.w	r1, #288	; 0x120
 8007f9e:	d04c      	beq.n	800803a <HAL_UART_IRQHandler+0xc6>
 8007fa0:	07d3      	lsls	r3, r2, #31
 8007fa2:	d505      	bpl.n	8007fb0 <HAL_UART_IRQHandler+0x3c>
 8007fa4:	05ce      	lsls	r6, r1, #23
 8007fa6:	bf42      	ittt	mi
 8007fa8:	6be3      	ldrmi	r3, [r4, #60]	; 0x3c
 8007faa:	f043 0301 	orrmi.w	r3, r3, #1
 8007fae:	63e3      	strmi	r3, [r4, #60]	; 0x3c
 8007fb0:	0750      	lsls	r0, r2, #29
 8007fb2:	d504      	bpl.n	8007fbe <HAL_UART_IRQHandler+0x4a>
 8007fb4:	b11d      	cbz	r5, 8007fbe <HAL_UART_IRQHandler+0x4a>
 8007fb6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fb8:	f043 0302 	orr.w	r3, r3, #2
 8007fbc:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007fbe:	0793      	lsls	r3, r2, #30
 8007fc0:	d504      	bpl.n	8007fcc <HAL_UART_IRQHandler+0x58>
 8007fc2:	b11d      	cbz	r5, 8007fcc <HAL_UART_IRQHandler+0x58>
 8007fc4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fc6:	f043 0304 	orr.w	r3, r3, #4
 8007fca:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007fcc:	0716      	lsls	r6, r2, #28
 8007fce:	d504      	bpl.n	8007fda <HAL_UART_IRQHandler+0x66>
 8007fd0:	b11d      	cbz	r5, 8007fda <HAL_UART_IRQHandler+0x66>
 8007fd2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fd4:	f043 0308 	orr.w	r3, r3, #8
 8007fd8:	63e3      	str	r3, [r4, #60]	; 0x3c
 8007fda:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007fdc:	b343      	cbz	r3, 8008030 <HAL_UART_IRQHandler+0xbc>
 8007fde:	0695      	lsls	r5, r2, #26
 8007fe0:	d504      	bpl.n	8007fec <HAL_UART_IRQHandler+0x78>
 8007fe2:	0688      	lsls	r0, r1, #26
 8007fe4:	d502      	bpl.n	8007fec <HAL_UART_IRQHandler+0x78>
 8007fe6:	4620      	mov	r0, r4
 8007fe8:	f7ff ff5a 	bl	8007ea0 <UART_Receive_IT>
 8007fec:	6823      	ldr	r3, [r4, #0]
 8007fee:	4620      	mov	r0, r4
 8007ff0:	695d      	ldr	r5, [r3, #20]
 8007ff2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007ff4:	0711      	lsls	r1, r2, #28
 8007ff6:	d402      	bmi.n	8007ffe <HAL_UART_IRQHandler+0x8a>
 8007ff8:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8007ffc:	d019      	beq.n	8008032 <HAL_UART_IRQHandler+0xbe>
 8007ffe:	f7ff fe1d 	bl	8007c3c <UART_EndRxTransfer>
 8008002:	6823      	ldr	r3, [r4, #0]
 8008004:	695a      	ldr	r2, [r3, #20]
 8008006:	0652      	lsls	r2, r2, #25
 8008008:	d50f      	bpl.n	800802a <HAL_UART_IRQHandler+0xb6>
 800800a:	695a      	ldr	r2, [r3, #20]
 800800c:	6b60      	ldr	r0, [r4, #52]	; 0x34
 800800e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008012:	615a      	str	r2, [r3, #20]
 8008014:	b148      	cbz	r0, 800802a <HAL_UART_IRQHandler+0xb6>
 8008016:	4b26      	ldr	r3, [pc, #152]	; (80080b0 <HAL_UART_IRQHandler+0x13c>)
 8008018:	6343      	str	r3, [r0, #52]	; 0x34
 800801a:	f7fe fc19 	bl	8006850 <HAL_DMA_Abort_IT>
 800801e:	b138      	cbz	r0, 8008030 <HAL_UART_IRQHandler+0xbc>
 8008020:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8008022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008026:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8008028:	4718      	bx	r3
 800802a:	4620      	mov	r0, r4
 800802c:	f7ff ff79 	bl	8007f22 <HAL_UART_ErrorCallback>
 8008030:	bd70      	pop	{r4, r5, r6, pc}
 8008032:	f7ff ff76 	bl	8007f22 <HAL_UART_ErrorCallback>
 8008036:	63e5      	str	r5, [r4, #60]	; 0x3c
 8008038:	e7fa      	b.n	8008030 <HAL_UART_IRQHandler+0xbc>
 800803a:	0616      	lsls	r6, r2, #24
 800803c:	d528      	bpl.n	8008090 <HAL_UART_IRQHandler+0x11c>
 800803e:	060d      	lsls	r5, r1, #24
 8008040:	d526      	bpl.n	8008090 <HAL_UART_IRQHandler+0x11c>
 8008042:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8008046:	2a21      	cmp	r2, #33	; 0x21
 8008048:	d1f2      	bne.n	8008030 <HAL_UART_IRQHandler+0xbc>
 800804a:	68a1      	ldr	r1, [r4, #8]
 800804c:	6a22      	ldr	r2, [r4, #32]
 800804e:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8008052:	d118      	bne.n	8008086 <HAL_UART_IRQHandler+0x112>
 8008054:	8811      	ldrh	r1, [r2, #0]
 8008056:	f3c1 0108 	ubfx	r1, r1, #0, #9
 800805a:	6059      	str	r1, [r3, #4]
 800805c:	6921      	ldr	r1, [r4, #16]
 800805e:	b981      	cbnz	r1, 8008082 <HAL_UART_IRQHandler+0x10e>
 8008060:	3202      	adds	r2, #2
 8008062:	6222      	str	r2, [r4, #32]
 8008064:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008066:	3a01      	subs	r2, #1
 8008068:	b292      	uxth	r2, r2
 800806a:	84e2      	strh	r2, [r4, #38]	; 0x26
 800806c:	2a00      	cmp	r2, #0
 800806e:	d1df      	bne.n	8008030 <HAL_UART_IRQHandler+0xbc>
 8008070:	68da      	ldr	r2, [r3, #12]
 8008072:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008076:	60da      	str	r2, [r3, #12]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800807e:	60da      	str	r2, [r3, #12]
 8008080:	e7d6      	b.n	8008030 <HAL_UART_IRQHandler+0xbc>
 8008082:	3201      	adds	r2, #1
 8008084:	e7ed      	b.n	8008062 <HAL_UART_IRQHandler+0xee>
 8008086:	1c51      	adds	r1, r2, #1
 8008088:	6221      	str	r1, [r4, #32]
 800808a:	7812      	ldrb	r2, [r2, #0]
 800808c:	605a      	str	r2, [r3, #4]
 800808e:	e7e9      	b.n	8008064 <HAL_UART_IRQHandler+0xf0>
 8008090:	0650      	lsls	r0, r2, #25
 8008092:	d5cd      	bpl.n	8008030 <HAL_UART_IRQHandler+0xbc>
 8008094:	064a      	lsls	r2, r1, #25
 8008096:	d5cb      	bpl.n	8008030 <HAL_UART_IRQHandler+0xbc>
 8008098:	68da      	ldr	r2, [r3, #12]
 800809a:	4620      	mov	r0, r4
 800809c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080a0:	60da      	str	r2, [r3, #12]
 80080a2:	2320      	movs	r3, #32
 80080a4:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
 80080a8:	f7ff fec0 	bl	8007e2c <HAL_UART_TxCpltCallback>
 80080ac:	e7c0      	b.n	8008030 <HAL_UART_IRQHandler+0xbc>
 80080ae:	bf00      	nop
 80080b0:	080080b5 	.word	0x080080b5

080080b4 <UART_DMAAbortOnError>:
 80080b4:	b508      	push	{r3, lr}
 80080b6:	2300      	movs	r3, #0
 80080b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
 80080ba:	85c3      	strh	r3, [r0, #46]	; 0x2e
 80080bc:	84c3      	strh	r3, [r0, #38]	; 0x26
 80080be:	f7ff ff30 	bl	8007f22 <HAL_UART_ErrorCallback>
 80080c2:	bd08      	pop	{r3, pc}

080080c4 <osKernelInitialize>:
 80080c4:	f3ef 8305 	mrs	r3, IPSR
 80080c8:	b113      	cbz	r3, 80080d0 <osKernelInitialize+0xc>
 80080ca:	f06f 0005 	mvn.w	r0, #5
 80080ce:	4770      	bx	lr
 80080d0:	f3ef 8310 	mrs	r3, PRIMASK
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d1f8      	bne.n	80080ca <osKernelInitialize+0x6>
 80080d8:	4b07      	ldr	r3, [pc, #28]	; (80080f8 <osKernelInitialize+0x34>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	2802      	cmp	r0, #2
 80080de:	d106      	bne.n	80080ee <osKernelInitialize+0x2a>
 80080e0:	f3ef 8311 	mrs	r3, BASEPRI
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d1f0      	bne.n	80080ca <osKernelInitialize+0x6>
 80080e8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ec:	4770      	bx	lr
 80080ee:	2800      	cmp	r0, #0
 80080f0:	d1fa      	bne.n	80080e8 <osKernelInitialize+0x24>
 80080f2:	2201      	movs	r2, #1
 80080f4:	601a      	str	r2, [r3, #0]
 80080f6:	4770      	bx	lr
 80080f8:	20000848 	.word	0x20000848

080080fc <osKernelStart>:
 80080fc:	b510      	push	{r4, lr}
 80080fe:	f3ef 8305 	mrs	r3, IPSR
 8008102:	b113      	cbz	r3, 800810a <osKernelStart+0xe>
 8008104:	f06f 0005 	mvn.w	r0, #5
 8008108:	bd10      	pop	{r4, pc}
 800810a:	f3ef 8410 	mrs	r4, PRIMASK
 800810e:	2c00      	cmp	r4, #0
 8008110:	d1f8      	bne.n	8008104 <osKernelStart+0x8>
 8008112:	4b09      	ldr	r3, [pc, #36]	; (8008138 <osKernelStart+0x3c>)
 8008114:	681a      	ldr	r2, [r3, #0]
 8008116:	2a02      	cmp	r2, #2
 8008118:	d106      	bne.n	8008128 <osKernelStart+0x2c>
 800811a:	f3ef 8311 	mrs	r3, BASEPRI
 800811e:	2b00      	cmp	r3, #0
 8008120:	d1f0      	bne.n	8008104 <osKernelStart+0x8>
 8008122:	f04f 30ff 	mov.w	r0, #4294967295
 8008126:	e7ef      	b.n	8008108 <osKernelStart+0xc>
 8008128:	2a01      	cmp	r2, #1
 800812a:	d1fa      	bne.n	8008122 <osKernelStart+0x26>
 800812c:	2202      	movs	r2, #2
 800812e:	601a      	str	r2, [r3, #0]
 8008130:	f001 f824 	bl	800917c <vTaskStartScheduler>
 8008134:	4620      	mov	r0, r4
 8008136:	e7e7      	b.n	8008108 <osKernelStart+0xc>
 8008138:	20000848 	.word	0x20000848

0800813c <osThreadNew>:
 800813c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800813e:	4614      	mov	r4, r2
 8008140:	2200      	movs	r2, #0
 8008142:	b087      	sub	sp, #28
 8008144:	460b      	mov	r3, r1
 8008146:	9205      	str	r2, [sp, #20]
 8008148:	f3ef 8205 	mrs	r2, IPSR
 800814c:	bb62      	cbnz	r2, 80081a8 <osThreadNew+0x6c>
 800814e:	f3ef 8210 	mrs	r2, PRIMASK
 8008152:	bb4a      	cbnz	r2, 80081a8 <osThreadNew+0x6c>
 8008154:	4a26      	ldr	r2, [pc, #152]	; (80081f0 <osThreadNew+0xb4>)
 8008156:	6812      	ldr	r2, [r2, #0]
 8008158:	2a02      	cmp	r2, #2
 800815a:	d102      	bne.n	8008162 <osThreadNew+0x26>
 800815c:	f3ef 8211 	mrs	r2, BASEPRI
 8008160:	bb12      	cbnz	r2, 80081a8 <osThreadNew+0x6c>
 8008162:	b308      	cbz	r0, 80081a8 <osThreadNew+0x6c>
 8008164:	2200      	movs	r2, #0
 8008166:	f88d 2013 	strb.w	r2, [sp, #19]
 800816a:	2c00      	cmp	r4, #0
 800816c:	d039      	beq.n	80081e2 <osThreadNew+0xa6>
 800816e:	6821      	ldr	r1, [r4, #0]
 8008170:	b909      	cbnz	r1, 8008176 <osThreadNew+0x3a>
 8008172:	f10d 0113 	add.w	r1, sp, #19
 8008176:	69a5      	ldr	r5, [r4, #24]
 8008178:	2d00      	cmp	r5, #0
 800817a:	bf08      	it	eq
 800817c:	2518      	moveq	r5, #24
 800817e:	1e6a      	subs	r2, r5, #1
 8008180:	2a37      	cmp	r2, #55	; 0x37
 8008182:	462f      	mov	r7, r5
 8008184:	d832      	bhi.n	80081ec <osThreadNew+0xb0>
 8008186:	6862      	ldr	r2, [r4, #4]
 8008188:	07d2      	lsls	r2, r2, #31
 800818a:	d42f      	bmi.n	80081ec <osThreadNew+0xb0>
 800818c:	6966      	ldr	r6, [r4, #20]
 800818e:	b176      	cbz	r6, 80081ae <osThreadNew+0x72>
 8008190:	08b2      	lsrs	r2, r6, #2
 8008192:	e9d4 ce02 	ldrd	ip, lr, [r4, #8]
 8008196:	f1bc 0f00 	cmp.w	ip, #0
 800819a:	d00a      	beq.n	80081b2 <osThreadNew+0x76>
 800819c:	f1be 0f53 	cmp.w	lr, #83	; 0x53
 80081a0:	d902      	bls.n	80081a8 <osThreadNew+0x6c>
 80081a2:	6924      	ldr	r4, [r4, #16]
 80081a4:	b104      	cbz	r4, 80081a8 <osThreadNew+0x6c>
 80081a6:	b9ae      	cbnz	r6, 80081d4 <osThreadNew+0x98>
 80081a8:	9805      	ldr	r0, [sp, #20]
 80081aa:	b007      	add	sp, #28
 80081ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081ae:	2280      	movs	r2, #128	; 0x80
 80081b0:	e7ef      	b.n	8008192 <osThreadNew+0x56>
 80081b2:	f1be 0f00 	cmp.w	lr, #0
 80081b6:	d1f7      	bne.n	80081a8 <osThreadNew+0x6c>
 80081b8:	6924      	ldr	r4, [r4, #16]
 80081ba:	2c00      	cmp	r4, #0
 80081bc:	d1f4      	bne.n	80081a8 <osThreadNew+0x6c>
 80081be:	ac05      	add	r4, sp, #20
 80081c0:	e9cd 7400 	strd	r7, r4, [sp]
 80081c4:	b292      	uxth	r2, r2
 80081c6:	f000 ffac 	bl	8009122 <xTaskCreate>
 80081ca:	2801      	cmp	r0, #1
 80081cc:	bf1c      	itt	ne
 80081ce:	2300      	movne	r3, #0
 80081d0:	9305      	strne	r3, [sp, #20]
 80081d2:	e7e9      	b.n	80081a8 <osThreadNew+0x6c>
 80081d4:	e9cd 4c01 	strd	r4, ip, [sp, #4]
 80081d8:	9500      	str	r5, [sp, #0]
 80081da:	f000 ff6b 	bl	80090b4 <xTaskCreateStatic>
 80081de:	9005      	str	r0, [sp, #20]
 80081e0:	e7e2      	b.n	80081a8 <osThreadNew+0x6c>
 80081e2:	2718      	movs	r7, #24
 80081e4:	2280      	movs	r2, #128	; 0x80
 80081e6:	f10d 0113 	add.w	r1, sp, #19
 80081ea:	e7e8      	b.n	80081be <osThreadNew+0x82>
 80081ec:	2000      	movs	r0, #0
 80081ee:	e7dc      	b.n	80081aa <osThreadNew+0x6e>
 80081f0:	20000848 	.word	0x20000848

080081f4 <vApplicationGetIdleTaskMemory>:
 80081f4:	4b03      	ldr	r3, [pc, #12]	; (8008204 <vApplicationGetIdleTaskMemory+0x10>)
 80081f6:	6003      	str	r3, [r0, #0]
 80081f8:	4b03      	ldr	r3, [pc, #12]	; (8008208 <vApplicationGetIdleTaskMemory+0x14>)
 80081fa:	600b      	str	r3, [r1, #0]
 80081fc:	2380      	movs	r3, #128	; 0x80
 80081fe:	6013      	str	r3, [r2, #0]
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	200007f4 	.word	0x200007f4
 8008208:	200005f4 	.word	0x200005f4

0800820c <vApplicationGetTimerTaskMemory>:
 800820c:	4b03      	ldr	r3, [pc, #12]	; (800821c <vApplicationGetTimerTaskMemory+0x10>)
 800820e:	6003      	str	r3, [r0, #0]
 8008210:	4b03      	ldr	r3, [pc, #12]	; (8008220 <vApplicationGetTimerTaskMemory+0x14>)
 8008212:	600b      	str	r3, [r1, #0]
 8008214:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008218:	6013      	str	r3, [r2, #0]
 800821a:	4770      	bx	lr
 800821c:	20000c4c 	.word	0x20000c4c
 8008220:	2000084c 	.word	0x2000084c

08008224 <vListInitialise>:
 8008224:	f04f 32ff 	mov.w	r2, #4294967295
 8008228:	f100 0308 	add.w	r3, r0, #8
 800822c:	6043      	str	r3, [r0, #4]
 800822e:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008232:	6103      	str	r3, [r0, #16]
 8008234:	2300      	movs	r3, #0
 8008236:	6003      	str	r3, [r0, #0]
 8008238:	4770      	bx	lr

0800823a <vListInitialiseItem>:
 800823a:	2300      	movs	r3, #0
 800823c:	6103      	str	r3, [r0, #16]
 800823e:	4770      	bx	lr

08008240 <vListInsertEnd>:
 8008240:	6843      	ldr	r3, [r0, #4]
 8008242:	689a      	ldr	r2, [r3, #8]
 8008244:	604b      	str	r3, [r1, #4]
 8008246:	608a      	str	r2, [r1, #8]
 8008248:	689a      	ldr	r2, [r3, #8]
 800824a:	6051      	str	r1, [r2, #4]
 800824c:	6099      	str	r1, [r3, #8]
 800824e:	6803      	ldr	r3, [r0, #0]
 8008250:	6108      	str	r0, [r1, #16]
 8008252:	3301      	adds	r3, #1
 8008254:	6003      	str	r3, [r0, #0]
 8008256:	4770      	bx	lr

08008258 <vListInsert>:
 8008258:	680a      	ldr	r2, [r1, #0]
 800825a:	b530      	push	{r4, r5, lr}
 800825c:	1c53      	adds	r3, r2, #1
 800825e:	d10a      	bne.n	8008276 <vListInsert+0x1e>
 8008260:	6903      	ldr	r3, [r0, #16]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	604a      	str	r2, [r1, #4]
 8008266:	6091      	str	r1, [r2, #8]
 8008268:	608b      	str	r3, [r1, #8]
 800826a:	6059      	str	r1, [r3, #4]
 800826c:	6803      	ldr	r3, [r0, #0]
 800826e:	6108      	str	r0, [r1, #16]
 8008270:	3301      	adds	r3, #1
 8008272:	6003      	str	r3, [r0, #0]
 8008274:	bd30      	pop	{r4, r5, pc}
 8008276:	f100 0308 	add.w	r3, r0, #8
 800827a:	685c      	ldr	r4, [r3, #4]
 800827c:	6825      	ldr	r5, [r4, #0]
 800827e:	4295      	cmp	r5, r2
 8008280:	d8ef      	bhi.n	8008262 <vListInsert+0xa>
 8008282:	4623      	mov	r3, r4
 8008284:	e7f9      	b.n	800827a <vListInsert+0x22>

08008286 <uxListRemove>:
 8008286:	6903      	ldr	r3, [r0, #16]
 8008288:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800828c:	608a      	str	r2, [r1, #8]
 800828e:	6882      	ldr	r2, [r0, #8]
 8008290:	6051      	str	r1, [r2, #4]
 8008292:	6859      	ldr	r1, [r3, #4]
 8008294:	4281      	cmp	r1, r0
 8008296:	bf08      	it	eq
 8008298:	605a      	streq	r2, [r3, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	6102      	str	r2, [r0, #16]
 800829e:	681a      	ldr	r2, [r3, #0]
 80082a0:	3a01      	subs	r2, #1
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	6818      	ldr	r0, [r3, #0]
 80082a6:	4770      	bx	lr

080082a8 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082a8:	b510      	push	{r4, lr}
 80082aa:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082ac:	f001 fdda 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082b0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80082b2:	f001 fdf9 	bl	8009ea8 <vPortExitCritical>

	return xReturn;
}
 80082b6:	fab4 f084 	clz	r0, r4
 80082ba:	0940      	lsrs	r0, r0, #5
 80082bc:	bd10      	pop	{r4, pc}

080082be <prvCopyDataToQueue>:
{
 80082be:	b570      	push	{r4, r5, r6, lr}
 80082c0:	4615      	mov	r5, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082c2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80082c4:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80082c6:	6b86      	ldr	r6, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80082c8:	b942      	cbnz	r2, 80082dc <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082ca:	6805      	ldr	r5, [r0, #0]
 80082cc:	b99d      	cbnz	r5, 80082f6 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80082ce:	6840      	ldr	r0, [r0, #4]
 80082d0:	f001 fa40 	bl	8009754 <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
 80082d4:	6065      	str	r5, [r4, #4]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80082d6:	3601      	adds	r6, #1
 80082d8:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80082da:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 80082dc:	b96d      	cbnz	r5, 80082fa <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80082de:	6880      	ldr	r0, [r0, #8]
 80082e0:	f001 fff9 	bl	800a2d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80082e4:	68a3      	ldr	r3, [r4, #8]
 80082e6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80082e8:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ea:	6862      	ldr	r2, [r4, #4]
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80082ec:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d301      	bcc.n	80082f6 <prvCopyDataToQueue+0x38>
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
 80082f6:	2000      	movs	r0, #0
 80082f8:	e7ed      	b.n	80082d6 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80082fa:	68c0      	ldr	r0, [r0, #12]
 80082fc:	f001 ffeb 	bl	800a2d6 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008302:	68e2      	ldr	r2, [r4, #12]
 8008304:	425b      	negs	r3, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008306:	6821      	ldr	r1, [r4, #0]
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8008308:	441a      	add	r2, r3
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800830a:	428a      	cmp	r2, r1
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800830c:	60e2      	str	r2, [r4, #12]
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800830e:	bf3e      	ittt	cc
 8008310:	6862      	ldrcc	r2, [r4, #4]
 8008312:	189b      	addcc	r3, r3, r2
 8008314:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 8008316:	2d02      	cmp	r5, #2
 8008318:	d1ed      	bne.n	80082f6 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800831a:	b10e      	cbz	r6, 8008320 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800831c:	3e01      	subs	r6, #1
 800831e:	e7ea      	b.n	80082f6 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 8008320:	4630      	mov	r0, r6
 8008322:	e7d8      	b.n	80082d6 <prvCopyDataToQueue+0x18>

08008324 <prvCopyDataFromQueue>:
{
 8008324:	4603      	mov	r3, r0
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008326:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8008328:	b410      	push	{r4}
 800832a:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800832c:	b162      	cbz	r2, 8008348 <prvCopyDataFromQueue+0x24>
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800832e:	68d9      	ldr	r1, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008330:	685c      	ldr	r4, [r3, #4]
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008332:	4411      	add	r1, r2
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008334:	42a1      	cmp	r1, r4
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8008336:	60d9      	str	r1, [r3, #12]
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8008338:	bf28      	it	cs
 800833a:	6819      	ldrcs	r1, [r3, #0]
}
 800833c:	bc10      	pop	{r4}
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800833e:	bf28      	it	cs
 8008340:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8008342:	68d9      	ldr	r1, [r3, #12]
 8008344:	f001 bfc7 	b.w	800a2d6 <memcpy>
}
 8008348:	bc10      	pop	{r4}
 800834a:	4770      	bx	lr

0800834c <prvUnlockQueue>:
{
 800834c:	b570      	push	{r4, r5, r6, lr}
 800834e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8008350:	f001 fd88 	bl	8009e64 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 8008354:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008358:	f104 0624 	add.w	r6, r4, #36	; 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800835c:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800835e:	2d00      	cmp	r5, #0
 8008360:	dc14      	bgt.n	800838c <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 8008362:	23ff      	movs	r3, #255	; 0xff
 8008364:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
	taskEXIT_CRITICAL();
 8008368:	f001 fd9e 	bl	8009ea8 <vPortExitCritical>
	taskENTER_CRITICAL();
 800836c:	f001 fd7a 	bl	8009e64 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 8008370:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008374:	f104 0610 	add.w	r6, r4, #16
		int8_t cRxLock = pxQueue->cRxLock;
 8008378:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800837a:	2d00      	cmp	r5, #0
 800837c:	dc12      	bgt.n	80083a4 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800837e:	23ff      	movs	r3, #255	; 0xff
 8008380:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8008384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 8008388:	f001 bd8e 	b.w	8009ea8 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800838c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0e7      	beq.n	8008362 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008392:	4630      	mov	r0, r6
 8008394:	f001 f8de 	bl	8009554 <xTaskRemoveFromEventList>
 8008398:	b108      	cbz	r0, 800839e <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800839a:	f001 f97d 	bl	8009698 <vTaskMissedYield>
 800839e:	3d01      	subs	r5, #1
 80083a0:	b26d      	sxtb	r5, r5
 80083a2:	e7dc      	b.n	800835e <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083a4:	6923      	ldr	r3, [r4, #16]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d0e9      	beq.n	800837e <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80083aa:	4630      	mov	r0, r6
 80083ac:	f001 f8d2 	bl	8009554 <xTaskRemoveFromEventList>
 80083b0:	b108      	cbz	r0, 80083b6 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 80083b2:	f001 f971 	bl	8009698 <vTaskMissedYield>
 80083b6:	3d01      	subs	r5, #1
 80083b8:	b26d      	sxtb	r5, r5
 80083ba:	e7de      	b.n	800837a <prvUnlockQueue+0x2e>

080083bc <xQueueGenericReset>:
{
 80083bc:	b538      	push	{r3, r4, r5, lr}
 80083be:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 80083c0:	4604      	mov	r4, r0
 80083c2:	b940      	cbnz	r0, 80083d6 <xQueueGenericReset+0x1a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80083c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c8:	f383 8811 	msr	BASEPRI, r3
 80083cc:	f3bf 8f6f 	isb	sy
 80083d0:	f3bf 8f4f 	dsb	sy
 80083d4:	e7fe      	b.n	80083d4 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 80083d6:	f001 fd45 	bl	8009e64 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80083da:	e9d4 300f 	ldrd	r3, r0, [r4, #60]	; 0x3c
 80083de:	4343      	muls	r3, r0
 80083e0:	6822      	ldr	r2, [r4, #0]
 80083e2:	18d1      	adds	r1, r2, r3
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80083e4:	1a1b      	subs	r3, r3, r0
 80083e6:	4413      	add	r3, r2
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80083e8:	6061      	str	r1, [r4, #4]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80083ea:	60e3      	str	r3, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083ec:	2100      	movs	r1, #0
		pxQueue->cRxLock = queueUNLOCKED;
 80083ee:	23ff      	movs	r3, #255	; 0xff
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80083f0:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f2:	60a2      	str	r2, [r4, #8]
		pxQueue->cRxLock = queueUNLOCKED;
 80083f4:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80083f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
 80083fc:	b995      	cbnz	r5, 8008424 <xQueueGenericReset+0x68>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80083fe:	6923      	ldr	r3, [r4, #16]
 8008400:	b163      	cbz	r3, 800841c <xQueueGenericReset+0x60>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008402:	f104 0010 	add.w	r0, r4, #16
 8008406:	f001 f8a5 	bl	8009554 <xTaskRemoveFromEventList>
 800840a:	b138      	cbz	r0, 800841c <xQueueGenericReset+0x60>
					queueYIELD_IF_USING_PREEMPTION();
 800840c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008410:	4b09      	ldr	r3, [pc, #36]	; (8008438 <xQueueGenericReset+0x7c>)
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800841c:	f001 fd44 	bl	8009ea8 <vPortExitCritical>
}
 8008420:	2001      	movs	r0, #1
 8008422:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008424:	f104 0010 	add.w	r0, r4, #16
 8008428:	f7ff fefc 	bl	8008224 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800842c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008430:	f7ff fef8 	bl	8008224 <vListInitialise>
 8008434:	e7f2      	b.n	800841c <xQueueGenericReset+0x60>
 8008436:	bf00      	nop
 8008438:	e000ed04 	.word	0xe000ed04

0800843c <xQueueGenericCreateStatic>:
	{
 800843c:	b513      	push	{r0, r1, r4, lr}
 800843e:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008440:	b940      	cbnz	r0, 8008454 <xQueueGenericCreateStatic+0x18>
 8008442:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	e7fe      	b.n	8008452 <xQueueGenericCreateStatic+0x16>
		configASSERT( pxStaticQueue != NULL );
 8008454:	b943      	cbnz	r3, 8008468 <xQueueGenericCreateStatic+0x2c>
 8008456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800845a:	f383 8811 	msr	BASEPRI, r3
 800845e:	f3bf 8f6f 	isb	sy
 8008462:	f3bf 8f4f 	dsb	sy
 8008466:	e7fe      	b.n	8008466 <xQueueGenericCreateStatic+0x2a>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008468:	b14a      	cbz	r2, 800847e <xQueueGenericCreateStatic+0x42>
 800846a:	b991      	cbnz	r1, 8008492 <xQueueGenericCreateStatic+0x56>
 800846c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008470:	f383 8811 	msr	BASEPRI, r3
 8008474:	f3bf 8f6f 	isb	sy
 8008478:	f3bf 8f4f 	dsb	sy
 800847c:	e7fe      	b.n	800847c <xQueueGenericCreateStatic+0x40>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800847e:	b141      	cbz	r1, 8008492 <xQueueGenericCreateStatic+0x56>
 8008480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008484:	f383 8811 	msr	BASEPRI, r3
 8008488:	f3bf 8f6f 	isb	sy
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	e7fe      	b.n	8008490 <xQueueGenericCreateStatic+0x54>
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008492:	2348      	movs	r3, #72	; 0x48
 8008494:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008496:	9b01      	ldr	r3, [sp, #4]
 8008498:	2b48      	cmp	r3, #72	; 0x48
 800849a:	d008      	beq.n	80084ae <xQueueGenericCreateStatic+0x72>
 800849c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a0:	f383 8811 	msr	BASEPRI, r3
 80084a4:	f3bf 8f6f 	isb	sy
 80084a8:	f3bf 8f4f 	dsb	sy
 80084ac:	e7fe      	b.n	80084ac <xQueueGenericCreateStatic+0x70>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084ae:	2301      	movs	r3, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084b0:	2900      	cmp	r1, #0
 80084b2:	bf08      	it	eq
 80084b4:	4622      	moveq	r2, r4
	pxNewQueue->uxItemSize = uxItemSize;
 80084b6:	e9c4 010f 	strd	r0, r1, [r4, #60]	; 0x3c
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80084ba:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084be:	6022      	str	r2, [r4, #0]
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084c0:	4619      	mov	r1, r3
 80084c2:	4620      	mov	r0, r4
 80084c4:	f7ff ff7a 	bl	80083bc <xQueueGenericReset>
	}
 80084c8:	4620      	mov	r0, r4
 80084ca:	b002      	add	sp, #8
 80084cc:	bd10      	pop	{r4, pc}

080084ce <xQueueGenericCreate>:
	{
 80084ce:	b570      	push	{r4, r5, r6, lr}
 80084d0:	460d      	mov	r5, r1
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80084d2:	4606      	mov	r6, r0
 80084d4:	b940      	cbnz	r0, 80084e8 <xQueueGenericCreate+0x1a>
 80084d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	e7fe      	b.n	80084e6 <xQueueGenericCreate+0x18>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084e8:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 80084ea:	3048      	adds	r0, #72	; 0x48
 80084ec:	f001 fdee 	bl	800a0cc <pvPortMalloc>
		if( pxNewQueue != NULL )
 80084f0:	4604      	mov	r4, r0
 80084f2:	b150      	cbz	r0, 800850a <xQueueGenericCreate+0x3c>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80084f4:	2300      	movs	r3, #0
 80084f6:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 80084fa:	b945      	cbnz	r5, 800850e <xQueueGenericCreate+0x40>
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80084fc:	6020      	str	r0, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 80084fe:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008502:	2101      	movs	r1, #1
 8008504:	4620      	mov	r0, r4
 8008506:	f7ff ff59 	bl	80083bc <xQueueGenericReset>
	}
 800850a:	4620      	mov	r0, r4
 800850c:	bd70      	pop	{r4, r5, r6, pc}
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 800850e:	f100 0348 	add.w	r3, r0, #72	; 0x48
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008512:	6003      	str	r3, [r0, #0]
 8008514:	e7f3      	b.n	80084fe <xQueueGenericCreate+0x30>
	...

08008518 <xQueueGenericSend>:
{
 8008518:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800851c:	4688      	mov	r8, r1
 800851e:	9201      	str	r2, [sp, #4]
 8008520:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008522:	4604      	mov	r4, r0
 8008524:	b940      	cbnz	r0, 8008538 <xQueueGenericSend+0x20>
 8008526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800852a:	f383 8811 	msr	BASEPRI, r3
 800852e:	f3bf 8f6f 	isb	sy
 8008532:	f3bf 8f4f 	dsb	sy
 8008536:	e7fe      	b.n	8008536 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008538:	b951      	cbnz	r1, 8008550 <xQueueGenericSend+0x38>
 800853a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800853c:	b143      	cbz	r3, 8008550 <xQueueGenericSend+0x38>
 800853e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008542:	f383 8811 	msr	BASEPRI, r3
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	f3bf 8f4f 	dsb	sy
 800854e:	e7fe      	b.n	800854e <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008550:	2f02      	cmp	r7, #2
 8008552:	d10b      	bne.n	800856c <xQueueGenericSend+0x54>
 8008554:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8008556:	2b01      	cmp	r3, #1
 8008558:	d008      	beq.n	800856c <xQueueGenericSend+0x54>
 800855a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855e:	f383 8811 	msr	BASEPRI, r3
 8008562:	f3bf 8f6f 	isb	sy
 8008566:	f3bf 8f4f 	dsb	sy
 800856a:	e7fe      	b.n	800856a <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800856c:	f001 f8a0 	bl	80096b0 <xTaskGetSchedulerState>
 8008570:	b950      	cbnz	r0, 8008588 <xQueueGenericSend+0x70>
 8008572:	9e01      	ldr	r6, [sp, #4]
 8008574:	b14e      	cbz	r6, 800858a <xQueueGenericSend+0x72>
 8008576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857a:	f383 8811 	msr	BASEPRI, r3
 800857e:	f3bf 8f6f 	isb	sy
 8008582:	f3bf 8f4f 	dsb	sy
 8008586:	e7fe      	b.n	8008586 <xQueueGenericSend+0x6e>
 8008588:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 800858a:	f04f 0900 	mov.w	r9, #0
					portYIELD_WITHIN_API();
 800858e:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 8008678 <xQueueGenericSend+0x160>
 8008592:	e037      	b.n	8008604 <xQueueGenericSend+0xec>
				if( xTicksToWait == ( TickType_t ) 0 )
 8008594:	9d01      	ldr	r5, [sp, #4]
 8008596:	b91d      	cbnz	r5, 80085a0 <xQueueGenericSend+0x88>
					taskEXIT_CRITICAL();
 8008598:	f001 fc86 	bl	8009ea8 <vPortExitCritical>
			return errQUEUE_FULL;
 800859c:	2000      	movs	r0, #0
 800859e:	e050      	b.n	8008642 <xQueueGenericSend+0x12a>
				else if( xEntryTimeSet == pdFALSE )
 80085a0:	b916      	cbnz	r6, 80085a8 <xQueueGenericSend+0x90>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80085a2:	a802      	add	r0, sp, #8
 80085a4:	f001 f832 	bl	800960c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80085a8:	f001 fc7e 	bl	8009ea8 <vPortExitCritical>
		vTaskSuspendAll();
 80085ac:	f000 fe2a 	bl	8009204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80085b0:	f001 fc58 	bl	8009e64 <vPortEnterCritical>
 80085b4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80085b8:	2bff      	cmp	r3, #255	; 0xff
 80085ba:	bf08      	it	eq
 80085bc:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 80085c0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80085c4:	2bff      	cmp	r3, #255	; 0xff
 80085c6:	bf08      	it	eq
 80085c8:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 80085cc:	f001 fc6c 	bl	8009ea8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80085d0:	a901      	add	r1, sp, #4
 80085d2:	a802      	add	r0, sp, #8
 80085d4:	f001 f826 	bl	8009624 <xTaskCheckForTimeOut>
 80085d8:	2800      	cmp	r0, #0
 80085da:	d146      	bne.n	800866a <xQueueGenericSend+0x152>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80085dc:	f001 fc42 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80085e0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80085e2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80085e4:	429a      	cmp	r2, r3
 80085e6:	d12f      	bne.n	8008648 <xQueueGenericSend+0x130>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 80085e8:	f001 fc5e 	bl	8009ea8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80085ec:	9901      	ldr	r1, [sp, #4]
 80085ee:	f104 0010 	add.w	r0, r4, #16
 80085f2:	f000 ff79 	bl	80094e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80085f6:	4620      	mov	r0, r4
 80085f8:	f7ff fea8 	bl	800834c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80085fc:	f000 fea0 	bl	8009340 <xTaskResumeAll>
 8008600:	b350      	cbz	r0, 8008658 <xQueueGenericSend+0x140>
 8008602:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008604:	f001 fc2e 	bl	8009e64 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008608:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800860a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800860c:	429a      	cmp	r2, r3
 800860e:	d301      	bcc.n	8008614 <xQueueGenericSend+0xfc>
 8008610:	2f02      	cmp	r7, #2
 8008612:	d1bf      	bne.n	8008594 <xQueueGenericSend+0x7c>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008614:	463a      	mov	r2, r7
 8008616:	4641      	mov	r1, r8
 8008618:	4620      	mov	r0, r4
 800861a:	f7ff fe50 	bl	80082be <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800861e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008620:	b11b      	cbz	r3, 800862a <xQueueGenericSend+0x112>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008622:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008626:	f000 ff95 	bl	8009554 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800862a:	b138      	cbz	r0, 800863c <xQueueGenericSend+0x124>
						queueYIELD_IF_USING_PREEMPTION();
 800862c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008630:	4b11      	ldr	r3, [pc, #68]	; (8008678 <xQueueGenericSend+0x160>)
 8008632:	601a      	str	r2, [r3, #0]
 8008634:	f3bf 8f4f 	dsb	sy
 8008638:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800863c:	f001 fc34 	bl	8009ea8 <vPortExitCritical>
				return pdPASS;
 8008640:	2001      	movs	r0, #1
}
 8008642:	b004      	add	sp, #16
 8008644:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	taskEXIT_CRITICAL();
 8008648:	f001 fc2e 	bl	8009ea8 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800864c:	4620      	mov	r0, r4
 800864e:	f7ff fe7d 	bl	800834c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008652:	f000 fe75 	bl	8009340 <xTaskResumeAll>
 8008656:	e7d4      	b.n	8008602 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
 8008658:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800865c:	f8ca 3000 	str.w	r3, [sl]
 8008660:	f3bf 8f4f 	dsb	sy
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	e7cb      	b.n	8008602 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
 800866a:	4620      	mov	r0, r4
 800866c:	f7ff fe6e 	bl	800834c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008670:	f000 fe66 	bl	8009340 <xTaskResumeAll>
 8008674:	e792      	b.n	800859c <xQueueGenericSend+0x84>
 8008676:	bf00      	nop
 8008678:	e000ed04 	.word	0xe000ed04

0800867c <xQueueGenericSendFromISR>:
{
 800867c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008680:	4689      	mov	r9, r1
 8008682:	4690      	mov	r8, r2
 8008684:	461f      	mov	r7, r3
	configASSERT( pxQueue );
 8008686:	4604      	mov	r4, r0
 8008688:	b940      	cbnz	r0, 800869c <xQueueGenericSendFromISR+0x20>
 800868a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868e:	f383 8811 	msr	BASEPRI, r3
 8008692:	f3bf 8f6f 	isb	sy
 8008696:	f3bf 8f4f 	dsb	sy
 800869a:	e7fe      	b.n	800869a <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800869c:	b951      	cbnz	r1, 80086b4 <xQueueGenericSendFromISR+0x38>
 800869e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80086a0:	b143      	cbz	r3, 80086b4 <xQueueGenericSendFromISR+0x38>
 80086a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a6:	f383 8811 	msr	BASEPRI, r3
 80086aa:	f3bf 8f6f 	isb	sy
 80086ae:	f3bf 8f4f 	dsb	sy
 80086b2:	e7fe      	b.n	80086b2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80086b4:	2f02      	cmp	r7, #2
 80086b6:	d10b      	bne.n	80086d0 <xQueueGenericSendFromISR+0x54>
 80086b8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80086ba:	2b01      	cmp	r3, #1
 80086bc:	d008      	beq.n	80086d0 <xQueueGenericSendFromISR+0x54>
 80086be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	e7fe      	b.n	80086ce <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80086d0:	f001 fcaa 	bl	800a028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80086d4:	f3ef 8611 	mrs	r6, BASEPRI
 80086d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80086e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80086ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d301      	bcc.n	80086f4 <xQueueGenericSendFromISR+0x78>
 80086f0:	2f02      	cmp	r7, #2
 80086f2:	d122      	bne.n	800873a <xQueueGenericSendFromISR+0xbe>
			const int8_t cTxLock = pxQueue->cTxLock;
 80086f4:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086f8:	463a      	mov	r2, r7
			const int8_t cTxLock = pxQueue->cTxLock;
 80086fa:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80086fc:	4649      	mov	r1, r9
 80086fe:	4620      	mov	r0, r4
 8008700:	f7ff fddd 	bl	80082be <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 8008704:	1c6b      	adds	r3, r5, #1
 8008706:	d113      	bne.n	8008730 <xQueueGenericSendFromISR+0xb4>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008708:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800870a:	b90b      	cbnz	r3, 8008710 <xQueueGenericSendFromISR+0x94>
			xReturn = pdPASS;
 800870c:	2001      	movs	r0, #1
 800870e:	e00b      	b.n	8008728 <xQueueGenericSendFromISR+0xac>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008710:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008714:	f000 ff1e 	bl	8009554 <xTaskRemoveFromEventList>
 8008718:	2800      	cmp	r0, #0
 800871a:	d0f7      	beq.n	800870c <xQueueGenericSendFromISR+0x90>
							if( pxHigherPriorityTaskWoken != NULL )
 800871c:	f1b8 0f00 	cmp.w	r8, #0
 8008720:	d0f4      	beq.n	800870c <xQueueGenericSendFromISR+0x90>
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008722:	2001      	movs	r0, #1
 8008724:	f8c8 0000 	str.w	r0, [r8]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008728:	f386 8811 	msr	BASEPRI, r6
}
 800872c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008730:	3501      	adds	r5, #1
 8008732:	b26d      	sxtb	r5, r5
 8008734:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
 8008738:	e7e8      	b.n	800870c <xQueueGenericSendFromISR+0x90>
			xReturn = errQUEUE_FULL;
 800873a:	2000      	movs	r0, #0
 800873c:	e7f4      	b.n	8008728 <xQueueGenericSendFromISR+0xac>
	...

08008740 <xQueueReceive>:
{
 8008740:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008744:	b085      	sub	sp, #20
 8008746:	460f      	mov	r7, r1
 8008748:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800874a:	4604      	mov	r4, r0
 800874c:	b940      	cbnz	r0, 8008760 <xQueueReceive+0x20>
	__asm volatile
 800874e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008752:	f383 8811 	msr	BASEPRI, r3
 8008756:	f3bf 8f6f 	isb	sy
 800875a:	f3bf 8f4f 	dsb	sy
 800875e:	e7fe      	b.n	800875e <xQueueReceive+0x1e>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008760:	b951      	cbnz	r1, 8008778 <xQueueReceive+0x38>
 8008762:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8008764:	b143      	cbz	r3, 8008778 <xQueueReceive+0x38>
 8008766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800876a:	f383 8811 	msr	BASEPRI, r3
 800876e:	f3bf 8f6f 	isb	sy
 8008772:	f3bf 8f4f 	dsb	sy
 8008776:	e7fe      	b.n	8008776 <xQueueReceive+0x36>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008778:	f000 ff9a 	bl	80096b0 <xTaskGetSchedulerState>
 800877c:	b950      	cbnz	r0, 8008794 <xQueueReceive+0x54>
 800877e:	9e01      	ldr	r6, [sp, #4]
 8008780:	b14e      	cbz	r6, 8008796 <xQueueReceive+0x56>
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	e7fe      	b.n	8008792 <xQueueReceive+0x52>
 8008794:	2600      	movs	r6, #0
		prvLockQueue( pxQueue );
 8008796:	f04f 0800 	mov.w	r8, #0
					portYIELD_WITHIN_API();
 800879a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 800887c <xQueueReceive+0x13c>
 800879e:	e03b      	b.n	8008818 <xQueueReceive+0xd8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80087a0:	9d01      	ldr	r5, [sp, #4]
 80087a2:	b91d      	cbnz	r5, 80087ac <xQueueReceive+0x6c>
					taskEXIT_CRITICAL();
 80087a4:	f001 fb80 	bl	8009ea8 <vPortExitCritical>
				return errQUEUE_EMPTY;
 80087a8:	2000      	movs	r0, #0
 80087aa:	e052      	b.n	8008852 <xQueueReceive+0x112>
				else if( xEntryTimeSet == pdFALSE )
 80087ac:	b916      	cbnz	r6, 80087b4 <xQueueReceive+0x74>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087ae:	a802      	add	r0, sp, #8
 80087b0:	f000 ff2c 	bl	800960c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80087b4:	f001 fb78 	bl	8009ea8 <vPortExitCritical>
		vTaskSuspendAll();
 80087b8:	f000 fd24 	bl	8009204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087bc:	f001 fb52 	bl	8009e64 <vPortEnterCritical>
 80087c0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80087c4:	2bff      	cmp	r3, #255	; 0xff
 80087c6:	bf08      	it	eq
 80087c8:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 80087cc:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80087d0:	2bff      	cmp	r3, #255	; 0xff
 80087d2:	bf08      	it	eq
 80087d4:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 80087d8:	f001 fb66 	bl	8009ea8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087dc:	a901      	add	r1, sp, #4
 80087de:	a802      	add	r0, sp, #8
 80087e0:	f000 ff20 	bl	8009624 <xTaskCheckForTimeOut>
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d13d      	bne.n	8008864 <xQueueReceive+0x124>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80087e8:	4620      	mov	r0, r4
 80087ea:	f7ff fd5d 	bl	80082a8 <prvIsQueueEmpty>
 80087ee:	b398      	cbz	r0, 8008858 <xQueueReceive+0x118>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80087f0:	9901      	ldr	r1, [sp, #4]
 80087f2:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80087f6:	f000 fe77 	bl	80094e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80087fa:	4620      	mov	r0, r4
 80087fc:	f7ff fda6 	bl	800834c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008800:	f000 fd9e 	bl	8009340 <xTaskResumeAll>
 8008804:	b938      	cbnz	r0, 8008816 <xQueueReceive+0xd6>
					portYIELD_WITHIN_API();
 8008806:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800880a:	f8c9 3000 	str.w	r3, [r9]
 800880e:	f3bf 8f4f 	dsb	sy
 8008812:	f3bf 8f6f 	isb	sy
 8008816:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008818:	f001 fb24 	bl	8009e64 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800881c:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800881e:	2d00      	cmp	r5, #0
 8008820:	d0be      	beq.n	80087a0 <xQueueReceive+0x60>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008822:	4639      	mov	r1, r7
 8008824:	4620      	mov	r0, r4
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008826:	3d01      	subs	r5, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008828:	f7ff fd7c 	bl	8008324 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800882c:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800882e:	6923      	ldr	r3, [r4, #16]
 8008830:	b163      	cbz	r3, 800884c <xQueueReceive+0x10c>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008832:	f104 0010 	add.w	r0, r4, #16
 8008836:	f000 fe8d 	bl	8009554 <xTaskRemoveFromEventList>
 800883a:	b138      	cbz	r0, 800884c <xQueueReceive+0x10c>
						queueYIELD_IF_USING_PREEMPTION();
 800883c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008840:	4b0e      	ldr	r3, [pc, #56]	; (800887c <xQueueReceive+0x13c>)
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	f3bf 8f4f 	dsb	sy
 8008848:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800884c:	f001 fb2c 	bl	8009ea8 <vPortExitCritical>
				return pdPASS;
 8008850:	2001      	movs	r0, #1
}
 8008852:	b005      	add	sp, #20
 8008854:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				prvUnlockQueue( pxQueue );
 8008858:	4620      	mov	r0, r4
 800885a:	f7ff fd77 	bl	800834c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800885e:	f000 fd6f 	bl	8009340 <xTaskResumeAll>
 8008862:	e7d8      	b.n	8008816 <xQueueReceive+0xd6>
			prvUnlockQueue( pxQueue );
 8008864:	4620      	mov	r0, r4
 8008866:	f7ff fd71 	bl	800834c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800886a:	f000 fd69 	bl	8009340 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800886e:	4620      	mov	r0, r4
 8008870:	f7ff fd1a 	bl	80082a8 <prvIsQueueEmpty>
 8008874:	2800      	cmp	r0, #0
 8008876:	d0ce      	beq.n	8008816 <xQueueReceive+0xd6>
 8008878:	e796      	b.n	80087a8 <xQueueReceive+0x68>
 800887a:	bf00      	nop
 800887c:	e000ed04 	.word	0xe000ed04

08008880 <xQueueSemaphoreTake>:
{
 8008880:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	configASSERT( ( pxQueue ) );
 8008884:	4604      	mov	r4, r0
{
 8008886:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 8008888:	b940      	cbnz	r0, 800889c <xQueueSemaphoreTake+0x1c>
 800888a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888e:	f383 8811 	msr	BASEPRI, r3
 8008892:	f3bf 8f6f 	isb	sy
 8008896:	f3bf 8f4f 	dsb	sy
 800889a:	e7fe      	b.n	800889a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800889c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 800889e:	b145      	cbz	r5, 80088b2 <xQueueSemaphoreTake+0x32>
 80088a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a4:	f383 8811 	msr	BASEPRI, r3
 80088a8:	f3bf 8f6f 	isb	sy
 80088ac:	f3bf 8f4f 	dsb	sy
 80088b0:	e7fe      	b.n	80088b0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80088b2:	f000 fefd 	bl	80096b0 <xTaskGetSchedulerState>
 80088b6:	b950      	cbnz	r0, 80088ce <xQueueSemaphoreTake+0x4e>
 80088b8:	9d01      	ldr	r5, [sp, #4]
 80088ba:	b145      	cbz	r5, 80088ce <xQueueSemaphoreTake+0x4e>
 80088bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088c0:	f383 8811 	msr	BASEPRI, r3
 80088c4:	f3bf 8f6f 	isb	sy
 80088c8:	f3bf 8f4f 	dsb	sy
 80088cc:	e7fe      	b.n	80088cc <xQueueSemaphoreTake+0x4c>
 80088ce:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 80088d0:	2700      	movs	r7, #0
					portYIELD_WITHIN_API();
 80088d2:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8008a00 <xQueueSemaphoreTake+0x180>
 80088d6:	e04f      	b.n	8008978 <xQueueSemaphoreTake+0xf8>
				if( xTicksToWait == ( TickType_t ) 0 )
 80088d8:	9b01      	ldr	r3, [sp, #4]
 80088da:	b963      	cbnz	r3, 80088f6 <xQueueSemaphoreTake+0x76>
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088dc:	b145      	cbz	r5, 80088f0 <xQueueSemaphoreTake+0x70>
 80088de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088e2:	f383 8811 	msr	BASEPRI, r3
 80088e6:	f3bf 8f6f 	isb	sy
 80088ea:	f3bf 8f4f 	dsb	sy
 80088ee:	e7fe      	b.n	80088ee <xQueueSemaphoreTake+0x6e>
					taskEXIT_CRITICAL();
 80088f0:	f001 fada 	bl	8009ea8 <vPortExitCritical>
					return errQUEUE_EMPTY;
 80088f4:	e05e      	b.n	80089b4 <xQueueSemaphoreTake+0x134>
				else if( xEntryTimeSet == pdFALSE )
 80088f6:	b916      	cbnz	r6, 80088fe <xQueueSemaphoreTake+0x7e>
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f8:	a802      	add	r0, sp, #8
 80088fa:	f000 fe87 	bl	800960c <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 80088fe:	f001 fad3 	bl	8009ea8 <vPortExitCritical>
		vTaskSuspendAll();
 8008902:	f000 fc7f 	bl	8009204 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008906:	f001 faad 	bl	8009e64 <vPortEnterCritical>
 800890a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800890e:	2bff      	cmp	r3, #255	; 0xff
 8008910:	bf08      	it	eq
 8008912:	f884 7044 	strbeq.w	r7, [r4, #68]	; 0x44
 8008916:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800891a:	2bff      	cmp	r3, #255	; 0xff
 800891c:	bf08      	it	eq
 800891e:	f884 7045 	strbeq.w	r7, [r4, #69]	; 0x45
 8008922:	f001 fac1 	bl	8009ea8 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008926:	a901      	add	r1, sp, #4
 8008928:	a802      	add	r0, sp, #8
 800892a:	f000 fe7b 	bl	8009624 <xTaskCheckForTimeOut>
 800892e:	2800      	cmp	r0, #0
 8008930:	d14a      	bne.n	80089c8 <xQueueSemaphoreTake+0x148>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008932:	4620      	mov	r0, r4
 8008934:	f7ff fcb8 	bl	80082a8 <prvIsQueueEmpty>
 8008938:	2800      	cmp	r0, #0
 800893a:	d03f      	beq.n	80089bc <xQueueSemaphoreTake+0x13c>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	b93b      	cbnz	r3, 8008950 <xQueueSemaphoreTake+0xd0>
						taskENTER_CRITICAL();
 8008940:	f001 fa90 	bl	8009e64 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8008944:	6860      	ldr	r0, [r4, #4]
 8008946:	f000 fec3 	bl	80096d0 <xTaskPriorityInherit>
 800894a:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800894c:	f001 faac 	bl	8009ea8 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008950:	9901      	ldr	r1, [sp, #4]
 8008952:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008956:	f000 fdc7 	bl	80094e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800895a:	4620      	mov	r0, r4
 800895c:	f7ff fcf6 	bl	800834c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008960:	f000 fcee 	bl	8009340 <xTaskResumeAll>
 8008964:	b938      	cbnz	r0, 8008976 <xQueueSemaphoreTake+0xf6>
					portYIELD_WITHIN_API();
 8008966:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800896a:	f8c8 3000 	str.w	r3, [r8]
 800896e:	f3bf 8f4f 	dsb	sy
 8008972:	f3bf 8f6f 	isb	sy
 8008976:	2601      	movs	r6, #1
		taskENTER_CRITICAL();
 8008978:	f001 fa74 	bl	8009e64 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800897c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800897e:	2b00      	cmp	r3, #0
 8008980:	d0aa      	beq.n	80088d8 <xQueueSemaphoreTake+0x58>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008982:	3b01      	subs	r3, #1
 8008984:	63a3      	str	r3, [r4, #56]	; 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008986:	6823      	ldr	r3, [r4, #0]
 8008988:	b913      	cbnz	r3, 8008990 <xQueueSemaphoreTake+0x110>
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 800898a:	f000 ff73 	bl	8009874 <pvTaskIncrementMutexHeldCount>
 800898e:	6060      	str	r0, [r4, #4]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	b163      	cbz	r3, 80089ae <xQueueSemaphoreTake+0x12e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008994:	f104 0010 	add.w	r0, r4, #16
 8008998:	f000 fddc 	bl	8009554 <xTaskRemoveFromEventList>
 800899c:	b138      	cbz	r0, 80089ae <xQueueSemaphoreTake+0x12e>
						queueYIELD_IF_USING_PREEMPTION();
 800899e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089a2:	4b17      	ldr	r3, [pc, #92]	; (8008a00 <xQueueSemaphoreTake+0x180>)
 80089a4:	601a      	str	r2, [r3, #0]
 80089a6:	f3bf 8f4f 	dsb	sy
 80089aa:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 80089ae:	f001 fa7b 	bl	8009ea8 <vPortExitCritical>
				return pdPASS;
 80089b2:	2501      	movs	r5, #1
}
 80089b4:	4628      	mov	r0, r5
 80089b6:	b004      	add	sp, #16
 80089b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				prvUnlockQueue( pxQueue );
 80089bc:	4620      	mov	r0, r4
 80089be:	f7ff fcc5 	bl	800834c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089c2:	f000 fcbd 	bl	8009340 <xTaskResumeAll>
 80089c6:	e7d6      	b.n	8008976 <xQueueSemaphoreTake+0xf6>
			prvUnlockQueue( pxQueue );
 80089c8:	4620      	mov	r0, r4
 80089ca:	f7ff fcbf 	bl	800834c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089ce:	f000 fcb7 	bl	8009340 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089d2:	4620      	mov	r0, r4
 80089d4:	f7ff fc68 	bl	80082a8 <prvIsQueueEmpty>
 80089d8:	2800      	cmp	r0, #0
 80089da:	d0cc      	beq.n	8008976 <xQueueSemaphoreTake+0xf6>
					if( xInheritanceOccurred != pdFALSE )
 80089dc:	2d00      	cmp	r5, #0
 80089de:	d0e9      	beq.n	80089b4 <xQueueSemaphoreTake+0x134>
						taskENTER_CRITICAL();
 80089e0:	f001 fa40 	bl	8009e64 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80089e4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80089e6:	b119      	cbz	r1, 80089f0 <xQueueSemaphoreTake+0x170>
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80089e8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80089ea:	6819      	ldr	r1, [r3, #0]
 80089ec:	f1c1 0138 	rsb	r1, r1, #56	; 0x38
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 80089f0:	6860      	ldr	r0, [r4, #4]
 80089f2:	f000 fef1 	bl	80097d8 <vTaskPriorityDisinheritAfterTimeout>
				return errQUEUE_EMPTY;
 80089f6:	2500      	movs	r5, #0
						taskEXIT_CRITICAL();
 80089f8:	f001 fa56 	bl	8009ea8 <vPortExitCritical>
 80089fc:	e7da      	b.n	80089b4 <xQueueSemaphoreTake+0x134>
 80089fe:	bf00      	nop
 8008a00:	e000ed04 	.word	0xe000ed04

08008a04 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a04:	2300      	movs	r3, #0
	{
 8008a06:	b530      	push	{r4, r5, lr}
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008a08:	4a06      	ldr	r2, [pc, #24]	; (8008a24 <vQueueAddToRegistry+0x20>)
 8008a0a:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 8008a0e:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 8008a12:	b91d      	cbnz	r5, 8008a1c <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008a14:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008a18:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008a1a:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	2b08      	cmp	r3, #8
 8008a20:	d1f3      	bne.n	8008a0a <vQueueAddToRegistry+0x6>
 8008a22:	e7fa      	b.n	8008a1a <vQueueAddToRegistry+0x16>
 8008a24:	20004500 	.word	0x20004500

08008a28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008a28:	b570      	push	{r4, r5, r6, lr}
 8008a2a:	4604      	mov	r4, r0
 8008a2c:	460d      	mov	r5, r1
 8008a2e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008a30:	f001 fa18 	bl	8009e64 <vPortEnterCritical>
 8008a34:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008a38:	2bff      	cmp	r3, #255	; 0xff
 8008a3a:	bf04      	itt	eq
 8008a3c:	2300      	moveq	r3, #0
 8008a3e:	f884 3044 	strbeq.w	r3, [r4, #68]	; 0x44
 8008a42:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008a46:	2bff      	cmp	r3, #255	; 0xff
 8008a48:	bf04      	itt	eq
 8008a4a:	2300      	moveq	r3, #0
 8008a4c:	f884 3045 	strbeq.w	r3, [r4, #69]	; 0x45
 8008a50:	f001 fa2a 	bl	8009ea8 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008a54:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008a56:	b92b      	cbnz	r3, 8008a64 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008a58:	4632      	mov	r2, r6
 8008a5a:	4629      	mov	r1, r5
 8008a5c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8008a60:	f000 fd5a 	bl	8009518 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008a64:	4620      	mov	r0, r4
	}
 8008a66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 8008a6a:	f7ff bc6f 	b.w	800834c <prvUnlockQueue>

08008a6e <prvBytesInBuffer>:
static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008a6e:	6882      	ldr	r2, [r0, #8]
 8008a70:	6843      	ldr	r3, [r0, #4]
	xCount -= pxStreamBuffer->xTail;
 8008a72:	6800      	ldr	r0, [r0, #0]
	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8008a74:	4413      	add	r3, r2
	xCount -= pxStreamBuffer->xTail;
 8008a76:	1a18      	subs	r0, r3, r0
	if ( xCount >= pxStreamBuffer->xLength )
 8008a78:	4282      	cmp	r2, r0
	{
		xCount -= pxStreamBuffer->xLength;
 8008a7a:	bf98      	it	ls
 8008a7c:	1a80      	subls	r0, r0, r2
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
}
 8008a7e:	4770      	bx	lr

08008a80 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  BaseType_t xIsMessageBuffer )
{
 8008a80:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8008a84:	460e      	mov	r6, r1
 8008a86:	4604      	mov	r4, r0
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008a88:	2155      	movs	r1, #85	; 0x55
 8008a8a:	4630      	mov	r0, r6
{
 8008a8c:	4691      	mov	r9, r2
 8008a8e:	461f      	mov	r7, r3
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 8008a90:	f001 fc2c 	bl	800a2ec <memset>
 8008a94:	42b0      	cmp	r0, r6
 8008a96:	4605      	mov	r5, r0
 8008a98:	d008      	beq.n	8008aac <prvInitialiseNewStreamBuffer+0x2c>
 8008a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	e7fe      	b.n	8008aaa <prvInitialiseNewStreamBuffer+0x2a>
	}
	#endif

	memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8008aac:	2220      	movs	r2, #32
 8008aae:	2100      	movs	r1, #0
 8008ab0:	4620      	mov	r0, r4
 8008ab2:	f001 fc1b 	bl	800a2ec <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
	pxStreamBuffer->xLength = xBufferSizeBytes;
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;

	if( xIsMessageBuffer != pdFALSE )
 8008ab6:	9b06      	ldr	r3, [sp, #24]
	pxStreamBuffer->pucBuffer = pucBuffer;
 8008ab8:	61a5      	str	r5, [r4, #24]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 8008aba:	e9c4 9702 	strd	r9, r7, [r4, #8]
	if( xIsMessageBuffer != pdFALSE )
 8008abe:	b11b      	cbz	r3, 8008ac8 <prvInitialiseNewStreamBuffer+0x48>
	{
		pxStreamBuffer->ucFlags |= sbFLAGS_IS_MESSAGE_BUFFER;
 8008ac0:	7f23      	ldrb	r3, [r4, #28]
 8008ac2:	f043 0301 	orr.w	r3, r3, #1
 8008ac6:	7723      	strb	r3, [r4, #28]
	}
}
 8008ac8:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}

08008acc <prvWriteBytesToBuffer>:
{
 8008acc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ad0:	4605      	mov	r5, r0
 8008ad2:	4688      	mov	r8, r1
	configASSERT( xCount > ( size_t ) 0 );
 8008ad4:	4617      	mov	r7, r2
 8008ad6:	b942      	cbnz	r2, 8008aea <prvWriteBytesToBuffer+0x1e>
 8008ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008adc:	f383 8811 	msr	BASEPRI, r3
 8008ae0:	f3bf 8f6f 	isb	sy
 8008ae4:	f3bf 8f4f 	dsb	sy
 8008ae8:	e7fe      	b.n	8008ae8 <prvWriteBytesToBuffer+0x1c>
	xNextHead = pxStreamBuffer->xHead;
 8008aea:	6844      	ldr	r4, [r0, #4]
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8008aec:	6883      	ldr	r3, [r0, #8]
 8008aee:	1b1e      	subs	r6, r3, r4
 8008af0:	4296      	cmp	r6, r2
 8008af2:	bf28      	it	cs
 8008af4:	4616      	movcs	r6, r2
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8008af6:	19a2      	adds	r2, r4, r6
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d208      	bcs.n	8008b0e <prvWriteBytesToBuffer+0x42>
 8008afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b00:	f383 8811 	msr	BASEPRI, r3
 8008b04:	f3bf 8f6f 	isb	sy
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	e7fe      	b.n	8008b0c <prvWriteBytesToBuffer+0x40>
	memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008b0e:	6980      	ldr	r0, [r0, #24]
 8008b10:	4632      	mov	r2, r6
 8008b12:	4420      	add	r0, r4
 8008b14:	f001 fbdf 	bl	800a2d6 <memcpy>
	if( xCount > xFirstLength )
 8008b18:	42b7      	cmp	r7, r6
 8008b1a:	d911      	bls.n	8008b40 <prvWriteBytesToBuffer+0x74>
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8008b1c:	68ab      	ldr	r3, [r5, #8]
 8008b1e:	1bba      	subs	r2, r7, r6
 8008b20:	429a      	cmp	r2, r3
 8008b22:	d908      	bls.n	8008b36 <prvWriteBytesToBuffer+0x6a>
 8008b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b28:	f383 8811 	msr	BASEPRI, r3
 8008b2c:	f3bf 8f6f 	isb	sy
 8008b30:	f3bf 8f4f 	dsb	sy
 8008b34:	e7fe      	b.n	8008b34 <prvWriteBytesToBuffer+0x68>
		memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008b36:	eb08 0106 	add.w	r1, r8, r6
 8008b3a:	69a8      	ldr	r0, [r5, #24]
 8008b3c:	f001 fbcb 	bl	800a2d6 <memcpy>
	if( xNextHead >= pxStreamBuffer->xLength )
 8008b40:	68ab      	ldr	r3, [r5, #8]
	xNextHead += xCount;
 8008b42:	443c      	add	r4, r7
	if( xNextHead >= pxStreamBuffer->xLength )
 8008b44:	42a3      	cmp	r3, r4
		xNextHead -= pxStreamBuffer->xLength;
 8008b46:	bf98      	it	ls
 8008b48:	1ae4      	subls	r4, r4, r3
	pxStreamBuffer->xHead = xNextHead;
 8008b4a:	606c      	str	r4, [r5, #4]
}
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008b52 <prvReadBytesFromBuffer>:
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008b52:	429a      	cmp	r2, r3
{
 8008b54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	xCount = configMIN( xBytesAvailable, xMaxCount );
 8008b58:	4616      	mov	r6, r2
 8008b5a:	bf28      	it	cs
 8008b5c:	461e      	movcs	r6, r3
{
 8008b5e:	4607      	mov	r7, r0
 8008b60:	4689      	mov	r9, r1
 8008b62:	4690      	mov	r8, r2
	if( xCount > ( size_t ) 0 )
 8008b64:	2e00      	cmp	r6, #0
 8008b66:	d03b      	beq.n	8008be0 <prvReadBytesFromBuffer+0x8e>
		xNextTail = pxStreamBuffer->xTail;
 8008b68:	6804      	ldr	r4, [r0, #0]
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8008b6a:	6883      	ldr	r3, [r0, #8]
 8008b6c:	1b1d      	subs	r5, r3, r4
 8008b6e:	42b5      	cmp	r5, r6
 8008b70:	bf28      	it	cs
 8008b72:	4635      	movcs	r5, r6
		configASSERT( xFirstLength <= xMaxCount );
 8008b74:	42aa      	cmp	r2, r5
 8008b76:	d208      	bcs.n	8008b8a <prvReadBytesFromBuffer+0x38>
 8008b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b7c:	f383 8811 	msr	BASEPRI, r3
 8008b80:	f3bf 8f6f 	isb	sy
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	e7fe      	b.n	8008b88 <prvReadBytesFromBuffer+0x36>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8008b8a:	1962      	adds	r2, r4, r5
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	d208      	bcs.n	8008ba2 <prvReadBytesFromBuffer+0x50>
 8008b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b94:	f383 8811 	msr	BASEPRI, r3
 8008b98:	f3bf 8f6f 	isb	sy
 8008b9c:	f3bf 8f4f 	dsb	sy
 8008ba0:	e7fe      	b.n	8008ba0 <prvReadBytesFromBuffer+0x4e>
		memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008ba2:	6981      	ldr	r1, [r0, #24]
 8008ba4:	462a      	mov	r2, r5
 8008ba6:	4421      	add	r1, r4
 8008ba8:	4648      	mov	r0, r9
 8008baa:	f001 fb94 	bl	800a2d6 <memcpy>
		if( xCount > xFirstLength )
 8008bae:	42ae      	cmp	r6, r5
 8008bb0:	d910      	bls.n	8008bd4 <prvReadBytesFromBuffer+0x82>
			configASSERT( xCount <= xMaxCount );
 8008bb2:	45b0      	cmp	r8, r6
 8008bb4:	d208      	bcs.n	8008bc8 <prvReadBytesFromBuffer+0x76>
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	e7fe      	b.n	8008bc6 <prvReadBytesFromBuffer+0x74>
			memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8008bc8:	1b72      	subs	r2, r6, r5
 8008bca:	69b9      	ldr	r1, [r7, #24]
 8008bcc:	eb09 0005 	add.w	r0, r9, r5
 8008bd0:	f001 fb81 	bl	800a2d6 <memcpy>
		if( xNextTail >= pxStreamBuffer->xLength )
 8008bd4:	68bb      	ldr	r3, [r7, #8]
		xNextTail += xCount;
 8008bd6:	4434      	add	r4, r6
		if( xNextTail >= pxStreamBuffer->xLength )
 8008bd8:	42a3      	cmp	r3, r4
			xNextTail -= pxStreamBuffer->xLength;
 8008bda:	bf98      	it	ls
 8008bdc:	1ae4      	subls	r4, r4, r3
		pxStreamBuffer->xTail = xNextTail;
 8008bde:	603c      	str	r4, [r7, #0]
}
 8008be0:	4630      	mov	r0, r6
 8008be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08008be6 <prvReadMessageFromBuffer>:
{
 8008be6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008bea:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008bec:	4604      	mov	r4, r0
 8008bee:	4688      	mov	r8, r1
 8008bf0:	4617      	mov	r7, r2
 8008bf2:	461d      	mov	r5, r3
	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 8008bf4:	b1b6      	cbz	r6, 8008c24 <prvReadMessageFromBuffer+0x3e>
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008bf6:	4632      	mov	r2, r6
 8008bf8:	a901      	add	r1, sp, #4
		xOriginalTail = pxStreamBuffer->xTail;
 8008bfa:	f8d0 9000 	ldr.w	r9, [r0]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8008bfe:	f7ff ffa8 	bl	8008b52 <prvReadBytesFromBuffer>
		if( xNextMessageLength > xBufferLengthBytes )
 8008c02:	9b01      	ldr	r3, [sp, #4]
		xBytesAvailable -= xBytesToStoreMessageLength;
 8008c04:	1bad      	subs	r5, r5, r6
		if( xNextMessageLength > xBufferLengthBytes )
 8008c06:	42bb      	cmp	r3, r7
 8008c08:	d903      	bls.n	8008c12 <prvReadMessageFromBuffer+0x2c>
			xNextMessageLength = 0;
 8008c0a:	2300      	movs	r3, #0
			pxStreamBuffer->xTail = xOriginalTail;
 8008c0c:	f8c4 9000 	str.w	r9, [r4]
			xNextMessageLength = 0;
 8008c10:	9301      	str	r3, [sp, #4]
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 8008c12:	462b      	mov	r3, r5
 8008c14:	9a01      	ldr	r2, [sp, #4]
 8008c16:	4641      	mov	r1, r8
 8008c18:	4620      	mov	r0, r4
 8008c1a:	f7ff ff9a 	bl	8008b52 <prvReadBytesFromBuffer>
}
 8008c1e:	b003      	add	sp, #12
 8008c20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xNextMessageLength = xBufferLengthBytes;
 8008c24:	9201      	str	r2, [sp, #4]
 8008c26:	e7f4      	b.n	8008c12 <prvReadMessageFromBuffer+0x2c>

08008c28 <xStreamBufferGenericCreate>:
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008c28:	2804      	cmp	r0, #4
	{
 8008c2a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c2c:	460c      	mov	r4, r1
 8008c2e:	4617      	mov	r7, r2
		configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008c30:	d808      	bhi.n	8008c44 <xStreamBufferGenericCreate+0x1c>
 8008c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c36:	f383 8811 	msr	BASEPRI, r3
 8008c3a:	f3bf 8f6f 	isb	sy
 8008c3e:	f3bf 8f4f 	dsb	sy
 8008c42:	e7fe      	b.n	8008c42 <xStreamBufferGenericCreate+0x1a>
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8008c44:	4288      	cmp	r0, r1
 8008c46:	d208      	bcs.n	8008c5a <xStreamBufferGenericCreate+0x32>
 8008c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c4c:	f383 8811 	msr	BASEPRI, r3
 8008c50:	f3bf 8f6f 	isb	sy
 8008c54:	f3bf 8f4f 	dsb	sy
 8008c58:	e7fe      	b.n	8008c58 <xStreamBufferGenericCreate+0x30>
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8008c5a:	2900      	cmp	r1, #0
		xBufferSizeBytes++;
 8008c5c:	f100 0601 	add.w	r6, r0, #1
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008c60:	f100 0021 	add.w	r0, r0, #33	; 0x21
			xTriggerLevelBytes = ( size_t ) 1; /*lint !e9044 Parameter modified to ensure it doesn't have a dangerous value. */
 8008c64:	bf14      	ite	ne
 8008c66:	460c      	movne	r4, r1
 8008c68:	2401      	moveq	r4, #1
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8008c6a:	f001 fa2f 	bl	800a0cc <pvPortMalloc>
		if( pucAllocatedMemory != NULL )
 8008c6e:	4605      	mov	r5, r0
 8008c70:	b130      	cbz	r0, 8008c80 <xStreamBufferGenericCreate+0x58>
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8008c72:	9700      	str	r7, [sp, #0]
 8008c74:	4623      	mov	r3, r4
 8008c76:	4632      	mov	r2, r6
 8008c78:	f100 0120 	add.w	r1, r0, #32
 8008c7c:	f7ff ff00 	bl	8008a80 <prvInitialiseNewStreamBuffer>
	}
 8008c80:	4628      	mov	r0, r5
 8008c82:	b003      	add	sp, #12
 8008c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c86 <xStreamBufferSpacesAvailable>:
	configASSERT( pxStreamBuffer );
 8008c86:	b940      	cbnz	r0, 8008c9a <xStreamBufferSpacesAvailable+0x14>
 8008c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c8c:	f383 8811 	msr	BASEPRI, r3
 8008c90:	f3bf 8f6f 	isb	sy
 8008c94:	f3bf 8f4f 	dsb	sy
 8008c98:	e7fe      	b.n	8008c98 <xStreamBufferSpacesAvailable+0x12>
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008c9a:	6882      	ldr	r2, [r0, #8]
 8008c9c:	6803      	ldr	r3, [r0, #0]
	xSpace -= pxStreamBuffer->xHead;
 8008c9e:	6841      	ldr	r1, [r0, #4]
	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8008ca0:	18d0      	adds	r0, r2, r3
 8008ca2:	3801      	subs	r0, #1
	xSpace -= ( size_t ) 1;
 8008ca4:	1a40      	subs	r0, r0, r1
	if( xSpace >= pxStreamBuffer->xLength )
 8008ca6:	4282      	cmp	r2, r0
		xSpace -= pxStreamBuffer->xLength;
 8008ca8:	bf98      	it	ls
 8008caa:	1a80      	subls	r0, r0, r2
}
 8008cac:	4770      	bx	lr

08008cae <xStreamBufferSend>:
{
 8008cae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	4604      	mov	r4, r0
 8008cb6:	4616      	mov	r6, r2
 8008cb8:	9301      	str	r3, [sp, #4]
	configASSERT( pvTxData );
 8008cba:	4689      	mov	r9, r1
 8008cbc:	b941      	cbnz	r1, 8008cd0 <xStreamBufferSend+0x22>
 8008cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc2:	f383 8811 	msr	BASEPRI, r3
 8008cc6:	f3bf 8f6f 	isb	sy
 8008cca:	f3bf 8f4f 	dsb	sy
 8008cce:	e7fe      	b.n	8008cce <xStreamBufferSend+0x20>
	configASSERT( pxStreamBuffer );
 8008cd0:	b940      	cbnz	r0, 8008ce4 <xStreamBufferSend+0x36>
 8008cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cd6:	f383 8811 	msr	BASEPRI, r3
 8008cda:	f3bf 8f6f 	isb	sy
 8008cde:	f3bf 8f4f 	dsb	sy
 8008ce2:	e7fe      	b.n	8008ce2 <xStreamBufferSend+0x34>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008ce4:	7f03      	ldrb	r3, [r0, #28]
 8008ce6:	07da      	lsls	r2, r3, #31
	if( xTicksToWait != ( TickType_t ) 0 )
 8008ce8:	9b01      	ldr	r3, [sp, #4]
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8008cea:	bf4c      	ite	mi
 8008cec:	f106 0804 	addmi.w	r8, r6, #4
size_t xRequiredSpace = xDataLengthBytes;
 8008cf0:	46b0      	movpl	r8, r6
	if( xTicksToWait != ( TickType_t ) 0 )
 8008cf2:	b95b      	cbnz	r3, 8008d0c <xStreamBufferSend+0x5e>
		xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f7ff ffc6 	bl	8008c86 <xStreamBufferSpacesAvailable>
 8008cfa:	4605      	mov	r5, r0
 8008cfc:	9603      	str	r6, [sp, #12]
	if( xSpace == ( size_t ) 0 )
 8008cfe:	2d00      	cmp	r5, #0
 8008d00:	d136      	bne.n	8008d70 <xStreamBufferSend+0xc2>
		xReturn = 0;
 8008d02:	2500      	movs	r5, #0
}
 8008d04:	4628      	mov	r0, r5
 8008d06:	b007      	add	sp, #28
 8008d08:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		vTaskSetTimeOutState( &xTimeOut );
 8008d0c:	a804      	add	r0, sp, #16
 8008d0e:	f000 fc61 	bl	80095d4 <vTaskSetTimeOutState>
			taskENTER_CRITICAL();
 8008d12:	f001 f8a7 	bl	8009e64 <vPortEnterCritical>
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008d16:	4620      	mov	r0, r4
 8008d18:	f7ff ffb5 	bl	8008c86 <xStreamBufferSpacesAvailable>
				if( xSpace < xRequiredSpace )
 8008d1c:	4580      	cmp	r8, r0
				xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8008d1e:	4605      	mov	r5, r0
				if( xSpace < xRequiredSpace )
 8008d20:	d923      	bls.n	8008d6a <xStreamBufferSend+0xbc>
					( void ) xTaskNotifyStateClear( NULL );
 8008d22:	2000      	movs	r0, #0
 8008d24:	f000 fe5c 	bl	80099e0 <xTaskNotifyStateClear>
					configASSERT( pxStreamBuffer->xTaskWaitingToSend == NULL );
 8008d28:	6967      	ldr	r7, [r4, #20]
 8008d2a:	b147      	cbz	r7, 8008d3e <xStreamBufferSend+0x90>
 8008d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d30:	f383 8811 	msr	BASEPRI, r3
 8008d34:	f3bf 8f6f 	isb	sy
 8008d38:	f3bf 8f4f 	dsb	sy
 8008d3c:	e7fe      	b.n	8008d3c <xStreamBufferSend+0x8e>
					pxStreamBuffer->xTaskWaitingToSend = xTaskGetCurrentTaskHandle();
 8008d3e:	f000 fcb1 	bl	80096a4 <xTaskGetCurrentTaskHandle>
 8008d42:	6160      	str	r0, [r4, #20]
			taskEXIT_CRITICAL();
 8008d44:	f001 f8b0 	bl	8009ea8 <vPortExitCritical>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8008d48:	f04f 31ff 	mov.w	r1, #4294967295
 8008d4c:	9b01      	ldr	r3, [sp, #4]
 8008d4e:	463a      	mov	r2, r7
 8008d50:	4638      	mov	r0, r7
 8008d52:	f000 fd9b 	bl	800988c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToSend = NULL;
 8008d56:	6167      	str	r7, [r4, #20]
		} while( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE );
 8008d58:	a901      	add	r1, sp, #4
 8008d5a:	a804      	add	r0, sp, #16
 8008d5c:	f000 fc62 	bl	8009624 <xTaskCheckForTimeOut>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d0d6      	beq.n	8008d12 <xStreamBufferSend+0x64>
	if( xSpace == ( size_t ) 0 )
 8008d64:	2d00      	cmp	r5, #0
 8008d66:	d0c5      	beq.n	8008cf4 <xStreamBufferSend+0x46>
 8008d68:	e7c8      	b.n	8008cfc <xStreamBufferSend+0x4e>
					taskEXIT_CRITICAL();
 8008d6a:	f001 f89d 	bl	8009ea8 <vPortExitCritical>
					break;
 8008d6e:	e7f9      	b.n	8008d64 <xStreamBufferSend+0xb6>
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8008d70:	7f23      	ldrb	r3, [r4, #28]
 8008d72:	07db      	lsls	r3, r3, #31
 8008d74:	d420      	bmi.n	8008db8 <xStreamBufferSend+0x10a>
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace ); /*lint !e9044 Function parameter modified to ensure it is capped to available space. */
 8008d76:	42b5      	cmp	r5, r6
 8008d78:	bf94      	ite	ls
 8008d7a:	9503      	strls	r5, [sp, #12]
 8008d7c:	9603      	strhi	r6, [sp, #12]
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8008d7e:	9a03      	ldr	r2, [sp, #12]
 8008d80:	4649      	mov	r1, r9
 8008d82:	4620      	mov	r0, r4
 8008d84:	f7ff fea2 	bl	8008acc <prvWriteBytesToBuffer>
	if( xReturn > ( size_t ) 0 )
 8008d88:	4605      	mov	r5, r0
 8008d8a:	2800      	cmp	r0, #0
 8008d8c:	d0b9      	beq.n	8008d02 <xStreamBufferSend+0x54>
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f7ff fe6d 	bl	8008a6e <prvBytesInBuffer>
 8008d94:	68e3      	ldr	r3, [r4, #12]
 8008d96:	4298      	cmp	r0, r3
 8008d98:	d3b4      	bcc.n	8008d04 <xStreamBufferSend+0x56>
			sbSEND_COMPLETED( pxStreamBuffer );
 8008d9a:	f000 fa33 	bl	8009204 <vTaskSuspendAll>
 8008d9e:	6923      	ldr	r3, [r4, #16]
 8008da0:	b13b      	cbz	r3, 8008db2 <xStreamBufferSend+0x104>
 8008da2:	2300      	movs	r3, #0
 8008da4:	6920      	ldr	r0, [r4, #16]
 8008da6:	461a      	mov	r2, r3
 8008da8:	4619      	mov	r1, r3
 8008daa:	f000 fdb3 	bl	8009914 <xTaskGenericNotify>
 8008dae:	2300      	movs	r3, #0
 8008db0:	6123      	str	r3, [r4, #16]
 8008db2:	f000 fac5 	bl	8009340 <xTaskResumeAll>
	return xReturn;
 8008db6:	e7a5      	b.n	8008d04 <xStreamBufferSend+0x56>
	else if( xSpace >= xRequiredSpace )
 8008db8:	4545      	cmp	r5, r8
 8008dba:	d3a2      	bcc.n	8008d02 <xStreamBufferSend+0x54>
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8008dbc:	2204      	movs	r2, #4
 8008dbe:	a903      	add	r1, sp, #12
 8008dc0:	4620      	mov	r0, r4
 8008dc2:	f7ff fe83 	bl	8008acc <prvWriteBytesToBuffer>
 8008dc6:	e7da      	b.n	8008d7e <xStreamBufferSend+0xd0>

08008dc8 <xStreamBufferReceive>:
{
 8008dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dcc:	4604      	mov	r4, r0
 8008dce:	4691      	mov	r9, r2
 8008dd0:	4698      	mov	r8, r3
	configASSERT( pvRxData );
 8008dd2:	460f      	mov	r7, r1
 8008dd4:	b941      	cbnz	r1, 8008de8 <xStreamBufferReceive+0x20>
 8008dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dda:	f383 8811 	msr	BASEPRI, r3
 8008dde:	f3bf 8f6f 	isb	sy
 8008de2:	f3bf 8f4f 	dsb	sy
 8008de6:	e7fe      	b.n	8008de6 <xStreamBufferReceive+0x1e>
	configASSERT( pxStreamBuffer );
 8008de8:	b940      	cbnz	r0, 8008dfc <xStreamBufferReceive+0x34>
 8008dea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dee:	f383 8811 	msr	BASEPRI, r3
 8008df2:	f3bf 8f6f 	isb	sy
 8008df6:	f3bf 8f4f 	dsb	sy
 8008dfa:	e7fe      	b.n	8008dfa <xStreamBufferReceive+0x32>
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8008dfc:	7f03      	ldrb	r3, [r0, #28]
		xBytesToStoreMessageLength = 0;
 8008dfe:	f013 0f01 	tst.w	r3, #1
 8008e02:	bf14      	ite	ne
 8008e04:	2604      	movne	r6, #4
 8008e06:	2600      	moveq	r6, #0
	if( xTicksToWait != ( TickType_t ) 0 )
 8008e08:	f1b8 0f00 	cmp.w	r8, #0
 8008e0c:	d026      	beq.n	8008e5c <xStreamBufferReceive+0x94>
		taskENTER_CRITICAL();
 8008e0e:	f001 f829 	bl	8009e64 <vPortEnterCritical>
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e12:	4620      	mov	r0, r4
 8008e14:	f7ff fe2b 	bl	8008a6e <prvBytesInBuffer>
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008e18:	4286      	cmp	r6, r0
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e1a:	4605      	mov	r5, r0
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008e1c:	d310      	bcc.n	8008e40 <xStreamBufferReceive+0x78>
				( void ) xTaskNotifyStateClear( NULL );
 8008e1e:	2000      	movs	r0, #0
 8008e20:	f000 fdde 	bl	80099e0 <xTaskNotifyStateClear>
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8008e24:	6923      	ldr	r3, [r4, #16]
 8008e26:	b143      	cbz	r3, 8008e3a <xStreamBufferReceive+0x72>
 8008e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e2c:	f383 8811 	msr	BASEPRI, r3
 8008e30:	f3bf 8f6f 	isb	sy
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	e7fe      	b.n	8008e38 <xStreamBufferReceive+0x70>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8008e3a:	f000 fc33 	bl	80096a4 <xTaskGetCurrentTaskHandle>
 8008e3e:	6120      	str	r0, [r4, #16]
		taskEXIT_CRITICAL();
 8008e40:	f001 f832 	bl	8009ea8 <vPortExitCritical>
		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8008e44:	42ae      	cmp	r6, r5
 8008e46:	d313      	bcc.n	8008e70 <xStreamBufferReceive+0xa8>
			( void ) xTaskNotifyWait( ( uint32_t ) 0, UINT32_MAX, NULL, xTicksToWait );
 8008e48:	2200      	movs	r2, #0
 8008e4a:	4643      	mov	r3, r8
 8008e4c:	f04f 31ff 	mov.w	r1, #4294967295
 8008e50:	4610      	mov	r0, r2
 8008e52:	f000 fd1b 	bl	800988c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008e56:	2300      	movs	r3, #0
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e58:	4620      	mov	r0, r4
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 8008e5a:	6123      	str	r3, [r4, #16]
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e5c:	f7ff fe07 	bl	8008a6e <prvBytesInBuffer>
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008e60:	42b0      	cmp	r0, r6
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8008e62:	4605      	mov	r5, r0
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8008e64:	d804      	bhi.n	8008e70 <xStreamBufferReceive+0xa8>
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8008e66:	2500      	movs	r5, #0
}
 8008e68:	4628      	mov	r0, r5
 8008e6a:	b003      	add	sp, #12
 8008e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 8008e70:	462b      	mov	r3, r5
 8008e72:	9600      	str	r6, [sp, #0]
 8008e74:	464a      	mov	r2, r9
 8008e76:	4639      	mov	r1, r7
 8008e78:	4620      	mov	r0, r4
 8008e7a:	f7ff feb4 	bl	8008be6 <prvReadMessageFromBuffer>
		if( xReceivedLength != ( size_t ) 0 )
 8008e7e:	4605      	mov	r5, r0
 8008e80:	2800      	cmp	r0, #0
 8008e82:	d0f0      	beq.n	8008e66 <xStreamBufferReceive+0x9e>
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8008e84:	f000 f9be 	bl	8009204 <vTaskSuspendAll>
 8008e88:	6963      	ldr	r3, [r4, #20]
 8008e8a:	b13b      	cbz	r3, 8008e9c <xStreamBufferReceive+0xd4>
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	6960      	ldr	r0, [r4, #20]
 8008e90:	461a      	mov	r2, r3
 8008e92:	4619      	mov	r1, r3
 8008e94:	f000 fd3e 	bl	8009914 <xTaskGenericNotify>
 8008e98:	2300      	movs	r3, #0
 8008e9a:	6163      	str	r3, [r4, #20]
 8008e9c:	f000 fa50 	bl	8009340 <xTaskResumeAll>
	return xReceivedLength;
 8008ea0:	e7e2      	b.n	8008e68 <xStreamBufferReceive+0xa0>
	...

08008ea4 <prvIdleTask>:
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
			{
				taskYIELD();
 8008ea4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008ea8:	4905      	ldr	r1, [pc, #20]	; (8008ec0 <prvIdleTask+0x1c>)
				taskYIELD();
 8008eaa:	4b06      	ldr	r3, [pc, #24]	; (8008ec4 <prvIdleTask+0x20>)
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008eac:	6808      	ldr	r0, [r1, #0]
 8008eae:	2801      	cmp	r0, #1
 8008eb0:	d9fc      	bls.n	8008eac <prvIdleTask+0x8>
				taskYIELD();
 8008eb2:	601a      	str	r2, [r3, #0]
 8008eb4:	f3bf 8f4f 	dsb	sy
 8008eb8:	f3bf 8f6f 	isb	sy
 8008ebc:	e7f6      	b.n	8008eac <prvIdleTask+0x8>
 8008ebe:	bf00      	nop
 8008ec0:	20000cac 	.word	0x20000cac
 8008ec4:	e000ed04 	.word	0xe000ed04

08008ec8 <prvAddNewTaskToReadyList>:
{
 8008ec8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ecc:	4606      	mov	r6, r0
	taskENTER_CRITICAL();
 8008ece:	f000 ffc9 	bl	8009e64 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
 8008ed2:	4b2b      	ldr	r3, [pc, #172]	; (8008f80 <prvAddNewTaskToReadyList+0xb8>)
		if( pxCurrentTCB == NULL )
 8008ed4:	4c2b      	ldr	r4, [pc, #172]	; (8008f84 <prvAddNewTaskToReadyList+0xbc>)
		uxCurrentNumberOfTasks++;
 8008ed6:	681a      	ldr	r2, [r3, #0]
 8008ed8:	4f2b      	ldr	r7, [pc, #172]	; (8008f88 <prvAddNewTaskToReadyList+0xc0>)
 8008eda:	3201      	adds	r2, #1
 8008edc:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008ede:	6825      	ldr	r5, [r4, #0]
 8008ee0:	2d00      	cmp	r5, #0
 8008ee2:	d142      	bne.n	8008f6a <prvAddNewTaskToReadyList+0xa2>
			pxCurrentTCB = pxNewTCB;
 8008ee4:	6026      	str	r6, [r4, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d119      	bne.n	8008f20 <prvAddNewTaskToReadyList+0x58>
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008eec:	f04f 0814 	mov.w	r8, #20
 8008ef0:	fb08 7005 	mla	r0, r8, r5, r7
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ef4:	3501      	adds	r5, #1
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ef6:	f7ff f995 	bl	8008224 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008efa:	2d38      	cmp	r5, #56	; 0x38
 8008efc:	d1f8      	bne.n	8008ef0 <prvAddNewTaskToReadyList+0x28>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008efe:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 8008fac <prvAddNewTaskToReadyList+0xe4>
	vListInitialise( &xDelayedTaskList2 );
 8008f02:	4d22      	ldr	r5, [pc, #136]	; (8008f8c <prvAddNewTaskToReadyList+0xc4>)
	vListInitialise( &xDelayedTaskList1 );
 8008f04:	4640      	mov	r0, r8
 8008f06:	f7ff f98d 	bl	8008224 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	f7ff f98a 	bl	8008224 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008f10:	481f      	ldr	r0, [pc, #124]	; (8008f90 <prvAddNewTaskToReadyList+0xc8>)
 8008f12:	f7ff f987 	bl	8008224 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f16:	4b1f      	ldr	r3, [pc, #124]	; (8008f94 <prvAddNewTaskToReadyList+0xcc>)
 8008f18:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f1c:	4b1e      	ldr	r3, [pc, #120]	; (8008f98 <prvAddNewTaskToReadyList+0xd0>)
 8008f1e:	601d      	str	r5, [r3, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008f20:	2014      	movs	r0, #20
		uxTaskNumber++;
 8008f22:	4a1e      	ldr	r2, [pc, #120]	; (8008f9c <prvAddNewTaskToReadyList+0xd4>)
 8008f24:	6813      	ldr	r3, [r2, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 8008f2a:	4a1d      	ldr	r2, [pc, #116]	; (8008fa0 <prvAddNewTaskToReadyList+0xd8>)
 8008f2c:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008f2e:	6811      	ldr	r1, [r2, #0]
 8008f30:	fb00 7003 	mla	r0, r0, r3, r7
 8008f34:	428b      	cmp	r3, r1
 8008f36:	f106 0104 	add.w	r1, r6, #4
 8008f3a:	bf88      	it	hi
 8008f3c:	6013      	strhi	r3, [r2, #0]
 8008f3e:	f7ff f97f 	bl	8008240 <vListInsertEnd>
	taskEXIT_CRITICAL();
 8008f42:	f000 ffb1 	bl	8009ea8 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 8008f46:	4b17      	ldr	r3, [pc, #92]	; (8008fa4 <prvAddNewTaskToReadyList+0xdc>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	b163      	cbz	r3, 8008f66 <prvAddNewTaskToReadyList+0x9e>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008f4c:	6823      	ldr	r3, [r4, #0]
 8008f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f50:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d207      	bcs.n	8008f66 <prvAddNewTaskToReadyList+0x9e>
			taskYIELD_IF_USING_PREEMPTION();
 8008f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <prvAddNewTaskToReadyList+0xe0>)
 8008f5c:	601a      	str	r2, [r3, #0]
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	f3bf 8f6f 	isb	sy
}
 8008f66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 8008f6a:	4b0e      	ldr	r3, [pc, #56]	; (8008fa4 <prvAddNewTaskToReadyList+0xdc>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	d1d6      	bne.n	8008f20 <prvAddNewTaskToReadyList+0x58>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f72:	6823      	ldr	r3, [r4, #0]
 8008f74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f76:	6af3      	ldr	r3, [r6, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
					pxCurrentTCB = pxNewTCB;
 8008f7a:	bf98      	it	ls
 8008f7c:	6026      	strls	r6, [r4, #0]
 8008f7e:	e7cf      	b.n	8008f20 <prvAddNewTaskToReadyList+0x58>
 8008f80:	2000110c 	.word	0x2000110c
 8008f84:	20000ca0 	.word	0x20000ca0
 8008f88:	20000cac 	.word	0x20000cac
 8008f8c:	20001134 	.word	0x20001134
 8008f90:	20001150 	.word	0x20001150
 8008f94:	20000ca4 	.word	0x20000ca4
 8008f98:	20000ca8 	.word	0x20000ca8
 8008f9c:	20001118 	.word	0x20001118
 8008fa0:	2000111c 	.word	0x2000111c
 8008fa4:	20001164 	.word	0x20001164
 8008fa8:	e000ed04 	.word	0xe000ed04
 8008fac:	20001120 	.word	0x20001120

08008fb0 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb0:	4a06      	ldr	r2, [pc, #24]	; (8008fcc <prvResetNextTaskUnblockTime+0x1c>)
 8008fb2:	6813      	ldr	r3, [r2, #0]
 8008fb4:	6819      	ldr	r1, [r3, #0]
 8008fb6:	4b06      	ldr	r3, [pc, #24]	; (8008fd0 <prvResetNextTaskUnblockTime+0x20>)
 8008fb8:	b919      	cbnz	r1, 8008fc2 <prvResetNextTaskUnblockTime+0x12>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008fba:	f04f 32ff 	mov.w	r2, #4294967295
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fbe:	601a      	str	r2, [r3, #0]
	}
}
 8008fc0:	4770      	bx	lr
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008fc2:	6812      	ldr	r2, [r2, #0]
 8008fc4:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008fc6:	68d2      	ldr	r2, [r2, #12]
 8008fc8:	6852      	ldr	r2, [r2, #4]
 8008fca:	e7f8      	b.n	8008fbe <prvResetNextTaskUnblockTime+0xe>
 8008fcc:	20000ca4 	.word	0x20000ca4
 8008fd0:	20001148 	.word	0x20001148

08008fd4 <prvInitialiseNewTask.isra.1>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008fd8:	460d      	mov	r5, r1
 8008fda:	e9dd 7409 	ldrd	r7, r4, [sp, #36]	; 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fde:	0096      	lsls	r6, r2, #2
 8008fe0:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008fe2:	4680      	mov	r8, r0
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fe4:	21a5      	movs	r1, #165	; 0xa5
 8008fe6:	6b20      	ldr	r0, [r4, #48]	; 0x30
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 8008fe8:	4699      	mov	r9, r3
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008fea:	f001 f97f 	bl	800a2ec <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8008fee:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008ff0:	3e04      	subs	r6, #4
 8008ff2:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8008ff4:	f026 0607 	bic.w	r6, r6, #7
 8008ff8:	1e6b      	subs	r3, r5, #1
 8008ffa:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8008ffe:	350f      	adds	r5, #15
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009000:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 8009004:	f802 1b01 	strb.w	r1, [r2], #1
		if( pcName[ x ] == 0x00 )
 8009008:	7819      	ldrb	r1, [r3, #0]
 800900a:	b109      	cbz	r1, 8009010 <prvInitialiseNewTask.isra.1+0x3c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800900c:	42ab      	cmp	r3, r5
 800900e:	d1f7      	bne.n	8009000 <prvInitialiseNewTask.isra.1+0x2c>
 8009010:	9d08      	ldr	r5, [sp, #32]
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009012:	f04f 0a00 	mov.w	sl, #0
 8009016:	2d37      	cmp	r5, #55	; 0x37
 8009018:	bf28      	it	cs
 800901a:	2537      	movcs	r5, #55	; 0x37
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800901c:	1d20      	adds	r0, r4, #4
	pxNewTCB->uxPriority = uxPriority;
 800901e:	62e5      	str	r5, [r4, #44]	; 0x2c
		pxNewTCB->uxMutexesHeld = 0;
 8009020:	e9c4 5a11 	strd	r5, sl, [r4, #68]	; 0x44
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009024:	f884 a043 	strb.w	sl, [r4, #67]	; 0x43
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009028:	f7ff f907 	bl	800823a <vListInitialiseItem>
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800902c:	f1c5 0538 	rsb	r5, r5, #56	; 0x38
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009030:	f104 0018 	add.w	r0, r4, #24
 8009034:	f7ff f901 	bl	800823a <vListInitialiseItem>
		pxNewTCB->ulNotifiedValue = 0;
 8009038:	f8c4 a04c 	str.w	sl, [r4, #76]	; 0x4c
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800903c:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800903e:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009040:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009042:	f884 a050 	strb.w	sl, [r4, #80]	; 0x50
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009046:	464a      	mov	r2, r9
 8009048:	4641      	mov	r1, r8
 800904a:	4630      	mov	r0, r6
 800904c:	f000 fee4 	bl	8009e18 <pxPortInitialiseStack>
 8009050:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
 8009052:	b107      	cbz	r7, 8009056 <prvInitialiseNewTask.isra.1+0x82>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009054:	603c      	str	r4, [r7, #0]
}
 8009056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800905c <prvAddCurrentTaskToDelayedList.isra.2>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	4606      	mov	r6, r0
{
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009060:	4b0f      	ldr	r3, [pc, #60]	; (80090a0 <prvAddCurrentTaskToDelayedList.isra.2+0x44>)
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009062:	4d10      	ldr	r5, [pc, #64]	; (80090a4 <prvAddCurrentTaskToDelayedList.isra.2+0x48>)
const TickType_t xConstTickCount = xTickCount;
 8009064:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009066:	6828      	ldr	r0, [r5, #0]
 8009068:	3004      	adds	r0, #4
 800906a:	f7ff f90c 	bl	8008286 <uxListRemove>
		does not occur.  This may overflow but this doesn't matter, the kernel
		will manage it correctly. */
		xTimeToWake = xConstTickCount + xTicksToWait;

		/* The list item will be inserted in wake time order. */
		listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800906e:	682b      	ldr	r3, [r5, #0]
 8009070:	19a4      	adds	r4, r4, r6
 8009072:	605c      	str	r4, [r3, #4]

		if( xTimeToWake < xConstTickCount )
 8009074:	d307      	bcc.n	8009086 <prvAddCurrentTaskToDelayedList.isra.2+0x2a>
		{
			/* Wake time has overflowed.  Place this item in the overflow list. */
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009076:	4b0c      	ldr	r3, [pc, #48]	; (80090a8 <prvAddCurrentTaskToDelayedList.isra.2+0x4c>)
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	6829      	ldr	r1, [r5, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800907c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009080:	3104      	adds	r1, #4
 8009082:	f7ff b8e9 	b.w	8008258 <vListInsert>
			vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009086:	4b09      	ldr	r3, [pc, #36]	; (80090ac <prvAddCurrentTaskToDelayedList.isra.2+0x50>)
 8009088:	6818      	ldr	r0, [r3, #0]
 800908a:	6829      	ldr	r1, [r5, #0]
 800908c:	3104      	adds	r1, #4
 800908e:	f7ff f8e3 	bl	8008258 <vListInsert>
			if( xTimeToWake < xNextTaskUnblockTime )
 8009092:	4b07      	ldr	r3, [pc, #28]	; (80090b0 <prvAddCurrentTaskToDelayedList.isra.2+0x54>)
 8009094:	681a      	ldr	r2, [r3, #0]
 8009096:	4294      	cmp	r4, r2
				xNextTaskUnblockTime = xTimeToWake;
 8009098:	bf38      	it	cc
 800909a:	601c      	strcc	r4, [r3, #0]
}
 800909c:	bd70      	pop	{r4, r5, r6, pc}
 800909e:	bf00      	nop
 80090a0:	20001168 	.word	0x20001168
 80090a4:	20000ca0 	.word	0x20000ca0
 80090a8:	20000ca8 	.word	0x20000ca8
 80090ac:	20000ca4 	.word	0x20000ca4
 80090b0:	20001148 	.word	0x20001148

080090b4 <xTaskCreateStatic>:
	{
 80090b4:	b570      	push	{r4, r5, r6, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	; 0x2c
		configASSERT( puxStackBuffer != NULL );
 80090bc:	b945      	cbnz	r5, 80090d0 <xTaskCreateStatic+0x1c>
 80090be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090c2:	f383 8811 	msr	BASEPRI, r3
 80090c6:	f3bf 8f6f 	isb	sy
 80090ca:	f3bf 8f4f 	dsb	sy
 80090ce:	e7fe      	b.n	80090ce <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 80090d0:	b944      	cbnz	r4, 80090e4 <xTaskCreateStatic+0x30>
 80090d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090d6:	f383 8811 	msr	BASEPRI, r3
 80090da:	f3bf 8f6f 	isb	sy
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	e7fe      	b.n	80090e2 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 80090e4:	2654      	movs	r6, #84	; 0x54
 80090e6:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80090e8:	9e04      	ldr	r6, [sp, #16]
 80090ea:	2e54      	cmp	r6, #84	; 0x54
 80090ec:	d008      	beq.n	8009100 <xTaskCreateStatic+0x4c>
 80090ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090f2:	f383 8811 	msr	BASEPRI, r3
 80090f6:	f3bf 8f6f 	isb	sy
 80090fa:	f3bf 8f4f 	dsb	sy
 80090fe:	e7fe      	b.n	80090fe <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009100:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8009102:	2502      	movs	r5, #2
 8009104:	f884 5051 	strb.w	r5, [r4, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009108:	ad05      	add	r5, sp, #20
 800910a:	9501      	str	r5, [sp, #4]
 800910c:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800910e:	9402      	str	r4, [sp, #8]
 8009110:	9500      	str	r5, [sp, #0]
 8009112:	f7ff ff5f 	bl	8008fd4 <prvInitialiseNewTask.isra.1>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009116:	4620      	mov	r0, r4
 8009118:	f7ff fed6 	bl	8008ec8 <prvAddNewTaskToReadyList>
	}
 800911c:	9805      	ldr	r0, [sp, #20]
 800911e:	b006      	add	sp, #24
 8009120:	bd70      	pop	{r4, r5, r6, pc}

08009122 <xTaskCreate>:
	{
 8009122:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009126:	4607      	mov	r7, r0
 8009128:	b085      	sub	sp, #20
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800912a:	0090      	lsls	r0, r2, #2
	{
 800912c:	4688      	mov	r8, r1
 800912e:	4616      	mov	r6, r2
 8009130:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009132:	f000 ffcb 	bl	800a0cc <pvPortMalloc>
			if( pxStack != NULL )
 8009136:	4605      	mov	r5, r0
 8009138:	b1e8      	cbz	r0, 8009176 <xTaskCreate+0x54>
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 800913a:	2054      	movs	r0, #84	; 0x54
 800913c:	f000 ffc6 	bl	800a0cc <pvPortMalloc>
				if( pxNewTCB != NULL )
 8009140:	4604      	mov	r4, r0
 8009142:	b1a8      	cbz	r0, 8009170 <xTaskCreate+0x4e>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8009144:	2300      	movs	r3, #0
 8009146:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800914a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
					pxNewTCB->pxStack = pxStack;
 800914c:	6305      	str	r5, [r0, #48]	; 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800914e:	9301      	str	r3, [sp, #4]
 8009150:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009152:	9002      	str	r0, [sp, #8]
 8009154:	9300      	str	r3, [sp, #0]
 8009156:	4632      	mov	r2, r6
 8009158:	464b      	mov	r3, r9
 800915a:	4641      	mov	r1, r8
 800915c:	4638      	mov	r0, r7
 800915e:	f7ff ff39 	bl	8008fd4 <prvInitialiseNewTask.isra.1>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009162:	4620      	mov	r0, r4
 8009164:	f7ff feb0 	bl	8008ec8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009168:	2001      	movs	r0, #1
	}
 800916a:	b005      	add	sp, #20
 800916c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
 8009170:	4628      	mov	r0, r5
 8009172:	f001 f839 	bl	800a1e8 <vPortFree>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009176:	f04f 30ff 	mov.w	r0, #4294967295
		return xReturn;
 800917a:	e7f6      	b.n	800916a <xTaskCreate+0x48>

0800917c <vTaskStartScheduler>:
{
 800917c:	b510      	push	{r4, lr}
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800917e:	2400      	movs	r4, #0
{
 8009180:	b088      	sub	sp, #32
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009182:	aa07      	add	r2, sp, #28
 8009184:	a906      	add	r1, sp, #24
 8009186:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009188:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800918c:	f7ff f832 	bl	80081f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	9a07      	ldr	r2, [sp, #28]
 8009194:	9302      	str	r3, [sp, #8]
 8009196:	9b06      	ldr	r3, [sp, #24]
 8009198:	4915      	ldr	r1, [pc, #84]	; (80091f0 <vTaskStartScheduler+0x74>)
 800919a:	e9cd 4300 	strd	r4, r3, [sp]
 800919e:	4815      	ldr	r0, [pc, #84]	; (80091f4 <vTaskStartScheduler+0x78>)
 80091a0:	4623      	mov	r3, r4
 80091a2:	f7ff ff87 	bl	80090b4 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 80091a6:	b1a8      	cbz	r0, 80091d4 <vTaskStartScheduler+0x58>
			xReturn = xTimerCreateTimerTask();
 80091a8:	f000 fc82 	bl	8009ab0 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 80091ac:	2801      	cmp	r0, #1
 80091ae:	d113      	bne.n	80091d8 <vTaskStartScheduler+0x5c>
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
 80091c0:	f04f 32ff 	mov.w	r2, #4294967295
 80091c4:	4b0c      	ldr	r3, [pc, #48]	; (80091f8 <vTaskStartScheduler+0x7c>)
 80091c6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80091c8:	4b0c      	ldr	r3, [pc, #48]	; (80091fc <vTaskStartScheduler+0x80>)
 80091ca:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80091cc:	4b0c      	ldr	r3, [pc, #48]	; (8009200 <vTaskStartScheduler+0x84>)
 80091ce:	601c      	str	r4, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
 80091d0:	f000 fed0 	bl	8009f74 <xPortStartScheduler>
}
 80091d4:	b008      	add	sp, #32
 80091d6:	bd10      	pop	{r4, pc}
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80091d8:	3001      	adds	r0, #1
 80091da:	d1fb      	bne.n	80091d4 <vTaskStartScheduler+0x58>
 80091dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e0:	f383 8811 	msr	BASEPRI, r3
 80091e4:	f3bf 8f6f 	isb	sy
 80091e8:	f3bf 8f4f 	dsb	sy
 80091ec:	e7fe      	b.n	80091ec <vTaskStartScheduler+0x70>
 80091ee:	bf00      	nop
 80091f0:	0800dc46 	.word	0x0800dc46
 80091f4:	08008ea5 	.word	0x08008ea5
 80091f8:	20001148 	.word	0x20001148
 80091fc:	20001164 	.word	0x20001164
 8009200:	20001168 	.word	0x20001168

08009204 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 8009204:	4a02      	ldr	r2, [pc, #8]	; (8009210 <vTaskSuspendAll+0xc>)
 8009206:	6813      	ldr	r3, [r2, #0]
 8009208:	3301      	adds	r3, #1
 800920a:	6013      	str	r3, [r2, #0]
}
 800920c:	4770      	bx	lr
 800920e:	bf00      	nop
 8009210:	20001114 	.word	0x20001114

08009214 <xTaskGetTickCount>:
		xTicks = xTickCount;
 8009214:	4b01      	ldr	r3, [pc, #4]	; (800921c <xTaskGetTickCount+0x8>)
 8009216:	6818      	ldr	r0, [r3, #0]
}
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20001168 	.word	0x20001168

08009220 <xTaskIncrementTick>:
{
 8009220:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009224:	4b3b      	ldr	r3, [pc, #236]	; (8009314 <xTaskIncrementTick+0xf4>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d16b      	bne.n	8009304 <xTaskIncrementTick+0xe4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800922c:	4b3a      	ldr	r3, [pc, #232]	; (8009318 <xTaskIncrementTick+0xf8>)
 800922e:	681c      	ldr	r4, [r3, #0]
 8009230:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 8009232:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009234:	b9bc      	cbnz	r4, 8009266 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 8009236:	4b39      	ldr	r3, [pc, #228]	; (800931c <xTaskIncrementTick+0xfc>)
 8009238:	681a      	ldr	r2, [r3, #0]
 800923a:	6812      	ldr	r2, [r2, #0]
 800923c:	b142      	cbz	r2, 8009250 <xTaskIncrementTick+0x30>
 800923e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009242:	f383 8811 	msr	BASEPRI, r3
 8009246:	f3bf 8f6f 	isb	sy
 800924a:	f3bf 8f4f 	dsb	sy
 800924e:	e7fe      	b.n	800924e <xTaskIncrementTick+0x2e>
 8009250:	4a33      	ldr	r2, [pc, #204]	; (8009320 <xTaskIncrementTick+0x100>)
 8009252:	6819      	ldr	r1, [r3, #0]
 8009254:	6810      	ldr	r0, [r2, #0]
 8009256:	6018      	str	r0, [r3, #0]
 8009258:	6011      	str	r1, [r2, #0]
 800925a:	4a32      	ldr	r2, [pc, #200]	; (8009324 <xTaskIncrementTick+0x104>)
 800925c:	6813      	ldr	r3, [r2, #0]
 800925e:	3301      	adds	r3, #1
 8009260:	6013      	str	r3, [r2, #0]
 8009262:	f7ff fea5 	bl	8008fb0 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009266:	4d30      	ldr	r5, [pc, #192]	; (8009328 <xTaskIncrementTick+0x108>)
BaseType_t xSwitchRequired = pdFALSE;
 8009268:	f04f 0b00 	mov.w	fp, #0
		if( xConstTickCount >= xNextTaskUnblockTime )
 800926c:	682b      	ldr	r3, [r5, #0]
 800926e:	4f2f      	ldr	r7, [pc, #188]	; (800932c <xTaskIncrementTick+0x10c>)
 8009270:	42a3      	cmp	r3, r4
 8009272:	d911      	bls.n	8009298 <xTaskIncrementTick+0x78>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009274:	683a      	ldr	r2, [r7, #0]
 8009276:	4b2e      	ldr	r3, [pc, #184]	; (8009330 <xTaskIncrementTick+0x110>)
 8009278:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800927a:	2214      	movs	r2, #20
 800927c:	434a      	muls	r2, r1
 800927e:	589a      	ldr	r2, [r3, r2]
				xSwitchRequired = pdTRUE;
 8009280:	2a02      	cmp	r2, #2
 8009282:	bf28      	it	cs
 8009284:	f04f 0b01 	movcs.w	fp, #1
		if( xYieldPending != pdFALSE )
 8009288:	4a2a      	ldr	r2, [pc, #168]	; (8009334 <xTaskIncrementTick+0x114>)
 800928a:	6812      	ldr	r2, [r2, #0]
			xSwitchRequired = pdTRUE;
 800928c:	2a00      	cmp	r2, #0
}
 800928e:	bf0c      	ite	eq
 8009290:	4658      	moveq	r0, fp
 8009292:	2001      	movne	r0, #1
 8009294:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009298:	f8df 9080 	ldr.w	r9, [pc, #128]	; 800931c <xTaskIncrementTick+0xfc>
					prvAddTaskToReadyList( pxTCB );
 800929c:	f8df a09c 	ldr.w	sl, [pc, #156]	; 800933c <xTaskIncrementTick+0x11c>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092a0:	f8d9 2000 	ldr.w	r2, [r9]
 80092a4:	6812      	ldr	r2, [r2, #0]
 80092a6:	b91a      	cbnz	r2, 80092b0 <xTaskIncrementTick+0x90>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80092a8:	f04f 32ff 	mov.w	r2, #4294967295
 80092ac:	602a      	str	r2, [r5, #0]
					break;
 80092ae:	e7e1      	b.n	8009274 <xTaskIncrementTick+0x54>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80092b0:	f8d9 2000 	ldr.w	r2, [r9]
 80092b4:	68d2      	ldr	r2, [r2, #12]
 80092b6:	68d6      	ldr	r6, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80092b8:	6871      	ldr	r1, [r6, #4]
					if( xConstTickCount < xItemValue )
 80092ba:	428c      	cmp	r4, r1
 80092bc:	d201      	bcs.n	80092c2 <xTaskIncrementTick+0xa2>
						xNextTaskUnblockTime = xItemValue;
 80092be:	6029      	str	r1, [r5, #0]
						break;
 80092c0:	e7d8      	b.n	8009274 <xTaskIncrementTick+0x54>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c2:	f106 0804 	add.w	r8, r6, #4
 80092c6:	4640      	mov	r0, r8
 80092c8:	f7fe ffdd 	bl	8008286 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80092cc:	6ab1      	ldr	r1, [r6, #40]	; 0x28
 80092ce:	b119      	cbz	r1, 80092d8 <xTaskIncrementTick+0xb8>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80092d0:	f106 0018 	add.w	r0, r6, #24
 80092d4:	f7fe ffd7 	bl	8008286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80092d8:	2214      	movs	r2, #20
 80092da:	6af0      	ldr	r0, [r6, #44]	; 0x2c
 80092dc:	f8da 1000 	ldr.w	r1, [sl]
 80092e0:	4b13      	ldr	r3, [pc, #76]	; (8009330 <xTaskIncrementTick+0x110>)
 80092e2:	4288      	cmp	r0, r1
 80092e4:	bf88      	it	hi
 80092e6:	f8ca 0000 	strhi.w	r0, [sl]
 80092ea:	4641      	mov	r1, r8
 80092ec:	fb02 3000 	mla	r0, r2, r0, r3
 80092f0:	f7fe ffa6 	bl	8008240 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092f4:	6838      	ldr	r0, [r7, #0]
 80092f6:	6af1      	ldr	r1, [r6, #44]	; 0x2c
 80092f8:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
							xSwitchRequired = pdTRUE;
 80092fa:	4291      	cmp	r1, r2
 80092fc:	bf28      	it	cs
 80092fe:	f04f 0b01 	movcs.w	fp, #1
 8009302:	e7cd      	b.n	80092a0 <xTaskIncrementTick+0x80>
		++uxPendedTicks;
 8009304:	4a0c      	ldr	r2, [pc, #48]	; (8009338 <xTaskIncrementTick+0x118>)
BaseType_t xSwitchRequired = pdFALSE;
 8009306:	f04f 0b00 	mov.w	fp, #0
		++uxPendedTicks;
 800930a:	6813      	ldr	r3, [r2, #0]
 800930c:	3301      	adds	r3, #1
 800930e:	6013      	str	r3, [r2, #0]
 8009310:	e7ba      	b.n	8009288 <xTaskIncrementTick+0x68>
 8009312:	bf00      	nop
 8009314:	20001114 	.word	0x20001114
 8009318:	20001168 	.word	0x20001168
 800931c:	20000ca4 	.word	0x20000ca4
 8009320:	20000ca8 	.word	0x20000ca8
 8009324:	2000114c 	.word	0x2000114c
 8009328:	20001148 	.word	0x20001148
 800932c:	20000ca0 	.word	0x20000ca0
 8009330:	20000cac 	.word	0x20000cac
 8009334:	2000116c 	.word	0x2000116c
 8009338:	20001110 	.word	0x20001110
 800933c:	2000111c 	.word	0x2000111c

08009340 <xTaskResumeAll>:
{
 8009340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 8009344:	4c2f      	ldr	r4, [pc, #188]	; (8009404 <xTaskResumeAll+0xc4>)
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	b943      	cbnz	r3, 800935c <xTaskResumeAll+0x1c>
 800934a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	e7fe      	b.n	800935a <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800935c:	f000 fd82 	bl	8009e64 <vPortEnterCritical>
		--uxSchedulerSuspended;
 8009360:	6823      	ldr	r3, [r4, #0]
 8009362:	3b01      	subs	r3, #1
 8009364:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009366:	6824      	ldr	r4, [r4, #0]
 8009368:	b12c      	cbz	r4, 8009376 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800936a:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800936c:	f000 fd9c 	bl	8009ea8 <vPortExitCritical>
}
 8009370:	4620      	mov	r0, r4
 8009372:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009376:	4b24      	ldr	r3, [pc, #144]	; (8009408 <xTaskResumeAll+0xc8>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d0f5      	beq.n	800936a <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800937e:	4d23      	ldr	r5, [pc, #140]	; (800940c <xTaskResumeAll+0xcc>)
					prvAddTaskToReadyList( pxTCB );
 8009380:	4e23      	ldr	r6, [pc, #140]	; (8009410 <xTaskResumeAll+0xd0>)
 8009382:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 8009424 <xTaskResumeAll+0xe4>
 8009386:	e01d      	b.n	80093c4 <xTaskResumeAll+0x84>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8009388:	68eb      	ldr	r3, [r5, #12]
 800938a:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800938c:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800938e:	f104 0018 	add.w	r0, r4, #24
 8009392:	f7fe ff78 	bl	8008286 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009396:	4638      	mov	r0, r7
 8009398:	f7fe ff75 	bl	8008286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800939c:	2014      	movs	r0, #20
 800939e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80093a0:	6832      	ldr	r2, [r6, #0]
 80093a2:	fb00 8003 	mla	r0, r0, r3, r8
 80093a6:	4293      	cmp	r3, r2
 80093a8:	4639      	mov	r1, r7
 80093aa:	bf88      	it	hi
 80093ac:	6033      	strhi	r3, [r6, #0]
 80093ae:	f7fe ff47 	bl	8008240 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093b2:	4b18      	ldr	r3, [pc, #96]	; (8009414 <xTaskResumeAll+0xd4>)
 80093b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093ba:	429a      	cmp	r2, r3
 80093bc:	d302      	bcc.n	80093c4 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 80093be:	2201      	movs	r2, #1
 80093c0:	4b15      	ldr	r3, [pc, #84]	; (8009418 <xTaskResumeAll+0xd8>)
 80093c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093c4:	682b      	ldr	r3, [r5, #0]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d1de      	bne.n	8009388 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 80093ca:	b10c      	cbz	r4, 80093d0 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 80093cc:	f7ff fdf0 	bl	8008fb0 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80093d0:	4d12      	ldr	r5, [pc, #72]	; (800941c <xTaskResumeAll+0xdc>)
 80093d2:	682c      	ldr	r4, [r5, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80093d4:	b144      	cbz	r4, 80093e8 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 80093d6:	2701      	movs	r7, #1
 80093d8:	4e0f      	ldr	r6, [pc, #60]	; (8009418 <xTaskResumeAll+0xd8>)
							if( xTaskIncrementTick() != pdFALSE )
 80093da:	f7ff ff21 	bl	8009220 <xTaskIncrementTick>
 80093de:	b100      	cbz	r0, 80093e2 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 80093e0:	6037      	str	r7, [r6, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80093e2:	3c01      	subs	r4, #1
 80093e4:	d1f9      	bne.n	80093da <xTaskResumeAll+0x9a>
						uxPendedTicks = 0;
 80093e6:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 80093e8:	4b0b      	ldr	r3, [pc, #44]	; (8009418 <xTaskResumeAll+0xd8>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d0bc      	beq.n	800936a <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 80093f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093f4:	4b0a      	ldr	r3, [pc, #40]	; (8009420 <xTaskResumeAll+0xe0>)
 80093f6:	601a      	str	r2, [r3, #0]
 80093f8:	f3bf 8f4f 	dsb	sy
 80093fc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 8009400:	2401      	movs	r4, #1
 8009402:	e7b3      	b.n	800936c <xTaskResumeAll+0x2c>
 8009404:	20001114 	.word	0x20001114
 8009408:	2000110c 	.word	0x2000110c
 800940c:	20001150 	.word	0x20001150
 8009410:	2000111c 	.word	0x2000111c
 8009414:	20000ca0 	.word	0x20000ca0
 8009418:	2000116c 	.word	0x2000116c
 800941c:	20001110 	.word	0x20001110
 8009420:	e000ed04 	.word	0xe000ed04
 8009424:	20000cac 	.word	0x20000cac

08009428 <vTaskDelay>:
	{
 8009428:	b508      	push	{r3, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
 800942a:	b940      	cbnz	r0, 800943e <vTaskDelay+0x16>
			portYIELD_WITHIN_API();
 800942c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009430:	4b0d      	ldr	r3, [pc, #52]	; (8009468 <vTaskDelay+0x40>)
 8009432:	601a      	str	r2, [r3, #0]
 8009434:	f3bf 8f4f 	dsb	sy
 8009438:	f3bf 8f6f 	isb	sy
	}
 800943c:	bd08      	pop	{r3, pc}
			configASSERT( uxSchedulerSuspended == 0 );
 800943e:	4b0b      	ldr	r3, [pc, #44]	; (800946c <vTaskDelay+0x44>)
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	b143      	cbz	r3, 8009456 <vTaskDelay+0x2e>
 8009444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009448:	f383 8811 	msr	BASEPRI, r3
 800944c:	f3bf 8f6f 	isb	sy
 8009450:	f3bf 8f4f 	dsb	sy
 8009454:	e7fe      	b.n	8009454 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8009456:	f7ff fed5 	bl	8009204 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800945a:	f7ff fdff 	bl	800905c <prvAddCurrentTaskToDelayedList.isra.2>
			xAlreadyYielded = xTaskResumeAll();
 800945e:	f7ff ff6f 	bl	8009340 <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
 8009462:	2800      	cmp	r0, #0
 8009464:	d0e2      	beq.n	800942c <vTaskDelay+0x4>
 8009466:	e7e9      	b.n	800943c <vTaskDelay+0x14>
 8009468:	e000ed04 	.word	0xe000ed04
 800946c:	20001114 	.word	0x20001114

08009470 <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009470:	4b18      	ldr	r3, [pc, #96]	; (80094d4 <vTaskSwitchContext+0x64>)
{
 8009472:	b5f0      	push	{r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009474:	681a      	ldr	r2, [r3, #0]
 8009476:	4b18      	ldr	r3, [pc, #96]	; (80094d8 <vTaskSwitchContext+0x68>)
 8009478:	b112      	cbz	r2, 8009480 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800947a:	2201      	movs	r2, #1
 800947c:	601a      	str	r2, [r3, #0]
}
 800947e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		xYieldPending = pdFALSE;
 8009480:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8009482:	4a16      	ldr	r2, [pc, #88]	; (80094dc <vTaskSwitchContext+0x6c>)
 8009484:	2714      	movs	r7, #20
 8009486:	4616      	mov	r6, r2
 8009488:	4d15      	ldr	r5, [pc, #84]	; (80094e0 <vTaskSwitchContext+0x70>)
 800948a:	682b      	ldr	r3, [r5, #0]
 800948c:	fb07 f103 	mul.w	r1, r7, r3
 8009490:	5854      	ldr	r4, [r2, r1]
 8009492:	1850      	adds	r0, r2, r1
 8009494:	b194      	cbz	r4, 80094bc <vTaskSwitchContext+0x4c>
 8009496:	6844      	ldr	r4, [r0, #4]
 8009498:	3108      	adds	r1, #8
 800949a:	6864      	ldr	r4, [r4, #4]
 800949c:	440a      	add	r2, r1
 800949e:	4294      	cmp	r4, r2
 80094a0:	bf08      	it	eq
 80094a2:	6862      	ldreq	r2, [r4, #4]
 80094a4:	6044      	str	r4, [r0, #4]
 80094a6:	bf08      	it	eq
 80094a8:	6042      	streq	r2, [r0, #4]
 80094aa:	2214      	movs	r2, #20
 80094ac:	fb02 6203 	mla	r2, r2, r3, r6
 80094b0:	6852      	ldr	r2, [r2, #4]
 80094b2:	68d1      	ldr	r1, [r2, #12]
 80094b4:	4a0b      	ldr	r2, [pc, #44]	; (80094e4 <vTaskSwitchContext+0x74>)
 80094b6:	6011      	str	r1, [r2, #0]
 80094b8:	602b      	str	r3, [r5, #0]
}
 80094ba:	e7e0      	b.n	800947e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80094bc:	b943      	cbnz	r3, 80094d0 <vTaskSwitchContext+0x60>
 80094be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094c2:	f383 8811 	msr	BASEPRI, r3
 80094c6:	f3bf 8f6f 	isb	sy
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	e7fe      	b.n	80094ce <vTaskSwitchContext+0x5e>
 80094d0:	3b01      	subs	r3, #1
 80094d2:	e7db      	b.n	800948c <vTaskSwitchContext+0x1c>
 80094d4:	20001114 	.word	0x20001114
 80094d8:	2000116c 	.word	0x2000116c
 80094dc:	20000cac 	.word	0x20000cac
 80094e0:	2000111c 	.word	0x2000111c
 80094e4:	20000ca0 	.word	0x20000ca0

080094e8 <vTaskPlaceOnEventList>:
{
 80094e8:	b510      	push	{r4, lr}
 80094ea:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 80094ec:	b940      	cbnz	r0, 8009500 <vTaskPlaceOnEventList+0x18>
 80094ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094f2:	f383 8811 	msr	BASEPRI, r3
 80094f6:	f3bf 8f6f 	isb	sy
 80094fa:	f3bf 8f4f 	dsb	sy
 80094fe:	e7fe      	b.n	80094fe <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009500:	4b04      	ldr	r3, [pc, #16]	; (8009514 <vTaskPlaceOnEventList+0x2c>)
 8009502:	6819      	ldr	r1, [r3, #0]
 8009504:	3118      	adds	r1, #24
 8009506:	f7fe fea7 	bl	8008258 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800950a:	4620      	mov	r0, r4
}
 800950c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009510:	f7ff bda4 	b.w	800905c <prvAddCurrentTaskToDelayedList.isra.2>
 8009514:	20000ca0 	.word	0x20000ca0

08009518 <vTaskPlaceOnEventListRestricted>:
	{
 8009518:	b538      	push	{r3, r4, r5, lr}
 800951a:	460c      	mov	r4, r1
 800951c:	4615      	mov	r5, r2
		configASSERT( pxEventList );
 800951e:	b940      	cbnz	r0, 8009532 <vTaskPlaceOnEventListRestricted+0x1a>
 8009520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009524:	f383 8811 	msr	BASEPRI, r3
 8009528:	f3bf 8f6f 	isb	sy
 800952c:	f3bf 8f4f 	dsb	sy
 8009530:	e7fe      	b.n	8009530 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009532:	4b07      	ldr	r3, [pc, #28]	; (8009550 <vTaskPlaceOnEventListRestricted+0x38>)
 8009534:	6819      	ldr	r1, [r3, #0]
 8009536:	3118      	adds	r1, #24
 8009538:	f7fe fe82 	bl	8008240 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800953c:	2d00      	cmp	r5, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800953e:	bf08      	it	eq
 8009540:	4620      	moveq	r0, r4
	}
 8009542:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009546:	bf18      	it	ne
 8009548:	f04f 30ff 	movne.w	r0, #4294967295
 800954c:	f7ff bd86 	b.w	800905c <prvAddCurrentTaskToDelayedList.isra.2>
 8009550:	20000ca0 	.word	0x20000ca0

08009554 <xTaskRemoveFromEventList>:
{
 8009554:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8009556:	68c3      	ldr	r3, [r0, #12]
 8009558:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800955a:	b944      	cbnz	r4, 800956e <xTaskRemoveFromEventList+0x1a>
 800955c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009560:	f383 8811 	msr	BASEPRI, r3
 8009564:	f3bf 8f6f 	isb	sy
 8009568:	f3bf 8f4f 	dsb	sy
 800956c:	e7fe      	b.n	800956c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800956e:	f104 0518 	add.w	r5, r4, #24
 8009572:	4628      	mov	r0, r5
 8009574:	f7fe fe87 	bl	8008286 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009578:	4b10      	ldr	r3, [pc, #64]	; (80095bc <xTaskRemoveFromEventList+0x68>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	b9db      	cbnz	r3, 80095b6 <xTaskRemoveFromEventList+0x62>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800957e:	1d25      	adds	r5, r4, #4
 8009580:	4628      	mov	r0, r5
 8009582:	f7fe fe80 	bl	8008286 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8009586:	4a0e      	ldr	r2, [pc, #56]	; (80095c0 <xTaskRemoveFromEventList+0x6c>)
 8009588:	2014      	movs	r0, #20
 800958a:	6811      	ldr	r1, [r2, #0]
 800958c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800958e:	428b      	cmp	r3, r1
 8009590:	4629      	mov	r1, r5
 8009592:	bf88      	it	hi
 8009594:	6013      	strhi	r3, [r2, #0]
 8009596:	4a0b      	ldr	r2, [pc, #44]	; (80095c4 <xTaskRemoveFromEventList+0x70>)
 8009598:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800959c:	f7fe fe50 	bl	8008240 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80095a0:	4b09      	ldr	r3, [pc, #36]	; (80095c8 <xTaskRemoveFromEventList+0x74>)
 80095a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095a8:	429a      	cmp	r2, r3
		xYieldPending = pdTRUE;
 80095aa:	bf85      	ittet	hi
 80095ac:	2001      	movhi	r0, #1
 80095ae:	4b07      	ldrhi	r3, [pc, #28]	; (80095cc <xTaskRemoveFromEventList+0x78>)
		xReturn = pdFALSE;
 80095b0:	2000      	movls	r0, #0
		xYieldPending = pdTRUE;
 80095b2:	6018      	strhi	r0, [r3, #0]
}
 80095b4:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095b6:	4629      	mov	r1, r5
 80095b8:	4805      	ldr	r0, [pc, #20]	; (80095d0 <xTaskRemoveFromEventList+0x7c>)
 80095ba:	e7ef      	b.n	800959c <xTaskRemoveFromEventList+0x48>
 80095bc:	20001114 	.word	0x20001114
 80095c0:	2000111c 	.word	0x2000111c
 80095c4:	20000cac 	.word	0x20000cac
 80095c8:	20000ca0 	.word	0x20000ca0
 80095cc:	2000116c 	.word	0x2000116c
 80095d0:	20001150 	.word	0x20001150

080095d4 <vTaskSetTimeOutState>:
{
 80095d4:	b510      	push	{r4, lr}
	configASSERT( pxTimeOut );
 80095d6:	4604      	mov	r4, r0
 80095d8:	b940      	cbnz	r0, 80095ec <vTaskSetTimeOutState+0x18>
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	e7fe      	b.n	80095ea <vTaskSetTimeOutState+0x16>
	taskENTER_CRITICAL();
 80095ec:	f000 fc3a 	bl	8009e64 <vPortEnterCritical>
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 80095f0:	4b04      	ldr	r3, [pc, #16]	; (8009604 <vTaskSetTimeOutState+0x30>)
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	6023      	str	r3, [r4, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 80095f6:	4b04      	ldr	r3, [pc, #16]	; (8009608 <vTaskSetTimeOutState+0x34>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	6063      	str	r3, [r4, #4]
}
 80095fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8009600:	f000 bc52 	b.w	8009ea8 <vPortExitCritical>
 8009604:	2000114c 	.word	0x2000114c
 8009608:	20001168 	.word	0x20001168

0800960c <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800960c:	4b03      	ldr	r3, [pc, #12]	; (800961c <vTaskInternalSetTimeOutState+0x10>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009612:	4b03      	ldr	r3, [pc, #12]	; (8009620 <vTaskInternalSetTimeOutState+0x14>)
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	6043      	str	r3, [r0, #4]
}
 8009618:	4770      	bx	lr
 800961a:	bf00      	nop
 800961c:	2000114c 	.word	0x2000114c
 8009620:	20001168 	.word	0x20001168

08009624 <xTaskCheckForTimeOut>:
{
 8009624:	b570      	push	{r4, r5, r6, lr}
 8009626:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 8009628:	4605      	mov	r5, r0
 800962a:	b940      	cbnz	r0, 800963e <xTaskCheckForTimeOut+0x1a>
 800962c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009630:	f383 8811 	msr	BASEPRI, r3
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	f3bf 8f4f 	dsb	sy
 800963c:	e7fe      	b.n	800963c <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800963e:	b941      	cbnz	r1, 8009652 <xTaskCheckForTimeOut+0x2e>
 8009640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009644:	f383 8811 	msr	BASEPRI, r3
 8009648:	f3bf 8f6f 	isb	sy
 800964c:	f3bf 8f4f 	dsb	sy
 8009650:	e7fe      	b.n	8009650 <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 8009652:	f000 fc07 	bl	8009e64 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 8009656:	4b0e      	ldr	r3, [pc, #56]	; (8009690 <xTaskCheckForTimeOut+0x6c>)
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009658:	480e      	ldr	r0, [pc, #56]	; (8009694 <xTaskCheckForTimeOut+0x70>)
		const TickType_t xConstTickCount = xTickCount;
 800965a:	681b      	ldr	r3, [r3, #0]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800965c:	682e      	ldr	r6, [r5, #0]
 800965e:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009660:	6869      	ldr	r1, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009662:	4286      	cmp	r6, r0
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009664:	eba3 0201 	sub.w	r2, r3, r1
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009668:	d001      	beq.n	800966e <xTaskCheckForTimeOut+0x4a>
 800966a:	4299      	cmp	r1, r3
 800966c:	d90e      	bls.n	800968c <xTaskCheckForTimeOut+0x68>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800966e:	6823      	ldr	r3, [r4, #0]
 8009670:	4293      	cmp	r3, r2
 8009672:	d909      	bls.n	8009688 <xTaskCheckForTimeOut+0x64>
			*pxTicksToWait -= xElapsedTime;
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009678:	4628      	mov	r0, r5
 800967a:	f7ff ffc7 	bl	800960c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800967e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 8009680:	f000 fc12 	bl	8009ea8 <vPortExitCritical>
}
 8009684:	4620      	mov	r0, r4
 8009686:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 8009688:	2300      	movs	r3, #0
 800968a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800968c:	2401      	movs	r4, #1
 800968e:	e7f7      	b.n	8009680 <xTaskCheckForTimeOut+0x5c>
 8009690:	20001168 	.word	0x20001168
 8009694:	2000114c 	.word	0x2000114c

08009698 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 8009698:	2201      	movs	r2, #1
 800969a:	4b01      	ldr	r3, [pc, #4]	; (80096a0 <vTaskMissedYield+0x8>)
 800969c:	601a      	str	r2, [r3, #0]
}
 800969e:	4770      	bx	lr
 80096a0:	2000116c 	.word	0x2000116c

080096a4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 80096a4:	4b01      	ldr	r3, [pc, #4]	; (80096ac <xTaskGetCurrentTaskHandle+0x8>)
 80096a6:	6818      	ldr	r0, [r3, #0]
	}
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	20000ca0 	.word	0x20000ca0

080096b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 80096b0:	4b05      	ldr	r3, [pc, #20]	; (80096c8 <xTaskGetSchedulerState+0x18>)
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	b133      	cbz	r3, 80096c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80096b6:	4b05      	ldr	r3, [pc, #20]	; (80096cc <xTaskGetSchedulerState+0x1c>)
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	2b00      	cmp	r3, #0
				xReturn = taskSCHEDULER_SUSPENDED;
 80096bc:	bf0c      	ite	eq
 80096be:	2002      	moveq	r0, #2
 80096c0:	2000      	movne	r0, #0
 80096c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 80096c4:	2001      	movs	r0, #1
	}
 80096c6:	4770      	bx	lr
 80096c8:	20001164 	.word	0x20001164
 80096cc:	20001114 	.word	0x20001114

080096d0 <xTaskPriorityInherit>:
	{
 80096d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 80096d2:	4604      	mov	r4, r0
 80096d4:	2800      	cmp	r0, #0
 80096d6:	d02b      	beq.n	8009730 <xTaskPriorityInherit+0x60>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80096d8:	4a1b      	ldr	r2, [pc, #108]	; (8009748 <xTaskPriorityInherit+0x78>)
 80096da:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80096dc:	6811      	ldr	r1, [r2, #0]
 80096de:	4616      	mov	r6, r2
 80096e0:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
 80096e2:	428b      	cmp	r3, r1
 80096e4:	d227      	bcs.n	8009736 <xTaskPriorityInherit+0x66>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096e6:	6982      	ldr	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096e8:	4d18      	ldr	r5, [pc, #96]	; (800974c <xTaskPriorityInherit+0x7c>)
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096ea:	2a00      	cmp	r2, #0
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096ec:	bfa1      	itttt	ge
 80096ee:	6832      	ldrge	r2, [r6, #0]
 80096f0:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80096f2:	f1c2 0238 	rsbge	r2, r2, #56	; 0x38
 80096f6:	6182      	strge	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80096f8:	2214      	movs	r2, #20
 80096fa:	fb02 5303 	mla	r3, r2, r3, r5
 80096fe:	6942      	ldr	r2, [r0, #20]
 8009700:	429a      	cmp	r2, r3
 8009702:	d111      	bne.n	8009728 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009704:	1d07      	adds	r7, r0, #4
 8009706:	4638      	mov	r0, r7
 8009708:	f7fe fdbd 	bl	8008286 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800970c:	6833      	ldr	r3, [r6, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800970e:	4a10      	ldr	r2, [pc, #64]	; (8009750 <xTaskPriorityInherit+0x80>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009712:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009714:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009716:	428b      	cmp	r3, r1
 8009718:	d80b      	bhi.n	8009732 <xTaskPriorityInherit+0x62>
 800971a:	2014      	movs	r0, #20
 800971c:	4639      	mov	r1, r7
 800971e:	fb00 5003 	mla	r0, r0, r3, r5
 8009722:	f7fe fd8d 	bl	8008240 <vListInsertEnd>
 8009726:	e002      	b.n	800972e <xTaskPriorityInherit+0x5e>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009728:	6833      	ldr	r3, [r6, #0]
 800972a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800972c:	62c3      	str	r3, [r0, #44]	; 0x2c
				xReturn = pdTRUE;
 800972e:	2001      	movs	r0, #1
	}
 8009730:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009732:	6013      	str	r3, [r2, #0]
 8009734:	e7f1      	b.n	800971a <xTaskPriorityInherit+0x4a>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009736:	6813      	ldr	r3, [r2, #0]
 8009738:	6c40      	ldr	r0, [r0, #68]	; 0x44
 800973a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800973c:	42a0      	cmp	r0, r4
 800973e:	bf2c      	ite	cs
 8009740:	2000      	movcs	r0, #0
 8009742:	2001      	movcc	r0, #1
 8009744:	e7f4      	b.n	8009730 <xTaskPriorityInherit+0x60>
 8009746:	bf00      	nop
 8009748:	20000ca0 	.word	0x20000ca0
 800974c:	20000cac 	.word	0x20000cac
 8009750:	2000111c 	.word	0x2000111c

08009754 <xTaskPriorityDisinherit>:
	{
 8009754:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 8009756:	b908      	cbnz	r0, 800975c <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 8009758:	2000      	movs	r0, #0
	}
 800975a:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800975c:	4b1b      	ldr	r3, [pc, #108]	; (80097cc <xTaskPriorityDisinherit+0x78>)
 800975e:	681c      	ldr	r4, [r3, #0]
 8009760:	4284      	cmp	r4, r0
 8009762:	d008      	beq.n	8009776 <xTaskPriorityDisinherit+0x22>
 8009764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009768:	f383 8811 	msr	BASEPRI, r3
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f3bf 8f4f 	dsb	sy
 8009774:	e7fe      	b.n	8009774 <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 8009776:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8009778:	b943      	cbnz	r3, 800978c <xTaskPriorityDisinherit+0x38>
 800977a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800977e:	f383 8811 	msr	BASEPRI, r3
 8009782:	f3bf 8f6f 	isb	sy
 8009786:	f3bf 8f4f 	dsb	sy
 800978a:	e7fe      	b.n	800978a <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800978c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800978e:	6c62      	ldr	r2, [r4, #68]	; 0x44
			( pxTCB->uxMutexesHeld )--;
 8009790:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009792:	4291      	cmp	r1, r2
			( pxTCB->uxMutexesHeld )--;
 8009794:	64a3      	str	r3, [r4, #72]	; 0x48
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009796:	d0df      	beq.n	8009758 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009798:	2b00      	cmp	r3, #0
 800979a:	d1dd      	bne.n	8009758 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800979c:	1d25      	adds	r5, r4, #4
 800979e:	4628      	mov	r0, r5
 80097a0:	f7fe fd71 	bl	8008286 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80097a4:	2014      	movs	r0, #20
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097a6:	6c63      	ldr	r3, [r4, #68]	; 0x44
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80097a8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80097ac:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 80097ae:	4a08      	ldr	r2, [pc, #32]	; (80097d0 <xTaskPriorityDisinherit+0x7c>)
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80097b0:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80097b2:	6811      	ldr	r1, [r2, #0]
 80097b4:	428b      	cmp	r3, r1
 80097b6:	bf88      	it	hi
 80097b8:	6013      	strhi	r3, [r2, #0]
 80097ba:	4a06      	ldr	r2, [pc, #24]	; (80097d4 <xTaskPriorityDisinherit+0x80>)
 80097bc:	4629      	mov	r1, r5
 80097be:	fb00 2003 	mla	r0, r0, r3, r2
 80097c2:	f7fe fd3d 	bl	8008240 <vListInsertEnd>
					xReturn = pdTRUE;
 80097c6:	2001      	movs	r0, #1
		return xReturn;
 80097c8:	e7c7      	b.n	800975a <xTaskPriorityDisinherit+0x6>
 80097ca:	bf00      	nop
 80097cc:	20000ca0 	.word	0x20000ca0
 80097d0:	2000111c 	.word	0x2000111c
 80097d4:	20000cac 	.word	0x20000cac

080097d8 <vTaskPriorityDisinheritAfterTimeout>:
	{
 80097d8:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 80097da:	4604      	mov	r4, r0
 80097dc:	2800      	cmp	r0, #0
 80097de:	d041      	beq.n	8009864 <vTaskPriorityDisinheritAfterTimeout+0x8c>
			configASSERT( pxTCB->uxMutexesHeld );
 80097e0:	6c82      	ldr	r2, [r0, #72]	; 0x48
 80097e2:	b942      	cbnz	r2, 80097f6 <vTaskPriorityDisinheritAfterTimeout+0x1e>
 80097e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e8:	f383 8811 	msr	BASEPRI, r3
 80097ec:	f3bf 8f6f 	isb	sy
 80097f0:	f3bf 8f4f 	dsb	sy
 80097f4:	e7fe      	b.n	80097f4 <vTaskPriorityDisinheritAfterTimeout+0x1c>
 80097f6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80097f8:	4299      	cmp	r1, r3
 80097fa:	bf38      	it	cc
 80097fc:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 80097fe:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8009800:	428b      	cmp	r3, r1
 8009802:	d02f      	beq.n	8009864 <vTaskPriorityDisinheritAfterTimeout+0x8c>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009804:	2a01      	cmp	r2, #1
 8009806:	d12d      	bne.n	8009864 <vTaskPriorityDisinheritAfterTimeout+0x8c>
					configASSERT( pxTCB != pxCurrentTCB );
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800980a:	6812      	ldr	r2, [r2, #0]
 800980c:	4282      	cmp	r2, r0
 800980e:	d108      	bne.n	8009822 <vTaskPriorityDisinheritAfterTimeout+0x4a>
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	e7fe      	b.n	8009820 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009822:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009824:	4d11      	ldr	r5, [pc, #68]	; (800986c <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8009826:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009828:	f04f 0214 	mov.w	r2, #20
 800982c:	fb02 5303 	mla	r3, r2, r3, r5
 8009830:	6942      	ldr	r2, [r0, #20]
					pxTCB->uxPriority = uxPriorityToUse;
 8009832:	62c1      	str	r1, [r0, #44]	; 0x2c
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009834:	bfa4      	itt	ge
 8009836:	f1c1 0138 	rsbge	r1, r1, #56	; 0x38
 800983a:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800983c:	429a      	cmp	r2, r3
 800983e:	d111      	bne.n	8009864 <vTaskPriorityDisinheritAfterTimeout+0x8c>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009840:	1d06      	adds	r6, r0, #4
 8009842:	4630      	mov	r0, r6
 8009844:	f7fe fd1f 	bl	8008286 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 8009848:	2014      	movs	r0, #20
 800984a:	4a09      	ldr	r2, [pc, #36]	; (8009870 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800984c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800984e:	6811      	ldr	r1, [r2, #0]
 8009850:	fb00 5003 	mla	r0, r0, r3, r5
 8009854:	428b      	cmp	r3, r1
 8009856:	4631      	mov	r1, r6
	}
 8009858:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800985c:	bf88      	it	hi
 800985e:	6013      	strhi	r3, [r2, #0]
 8009860:	f7fe bcee 	b.w	8008240 <vListInsertEnd>
	}
 8009864:	bd70      	pop	{r4, r5, r6, pc}
 8009866:	bf00      	nop
 8009868:	20000ca0 	.word	0x20000ca0
 800986c:	20000cac 	.word	0x20000cac
 8009870:	2000111c 	.word	0x2000111c

08009874 <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 8009874:	4b04      	ldr	r3, [pc, #16]	; (8009888 <pvTaskIncrementMutexHeldCount+0x14>)
 8009876:	681a      	ldr	r2, [r3, #0]
 8009878:	b11a      	cbz	r2, 8009882 <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800987a:	6819      	ldr	r1, [r3, #0]
 800987c:	6c8a      	ldr	r2, [r1, #72]	; 0x48
 800987e:	3201      	adds	r2, #1
 8009880:	648a      	str	r2, [r1, #72]	; 0x48
		return pxCurrentTCB;
 8009882:	6818      	ldr	r0, [r3, #0]
	}
 8009884:	4770      	bx	lr
 8009886:	bf00      	nop
 8009888:	20000ca0 	.word	0x20000ca0

0800988c <xTaskNotifyWait>:
	{
 800988c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8009890:	4c1e      	ldr	r4, [pc, #120]	; (800990c <xTaskNotifyWait+0x80>)
	{
 8009892:	461e      	mov	r6, r3
 8009894:	4680      	mov	r8, r0
 8009896:	460f      	mov	r7, r1
 8009898:	4615      	mov	r5, r2
		taskENTER_CRITICAL();
 800989a:	f000 fae3 	bl	8009e64 <vPortEnterCritical>
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800989e:	6823      	ldr	r3, [r4, #0]
 80098a0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098a4:	2b02      	cmp	r3, #2
 80098a6:	d014      	beq.n	80098d2 <xTaskNotifyWait+0x46>
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80098a8:	6823      	ldr	r3, [r4, #0]
 80098aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098ac:	ea22 0208 	bic.w	r2, r2, r8
 80098b0:	64da      	str	r2, [r3, #76]	; 0x4c
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80098b2:	2201      	movs	r2, #1
 80098b4:	6823      	ldr	r3, [r4, #0]
 80098b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				if( xTicksToWait > ( TickType_t ) 0 )
 80098ba:	b156      	cbz	r6, 80098d2 <xTaskNotifyWait+0x46>
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80098bc:	4630      	mov	r0, r6
 80098be:	f7ff fbcd 	bl	800905c <prvAddCurrentTaskToDelayedList.isra.2>
					portYIELD_WITHIN_API();
 80098c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80098c6:	4b12      	ldr	r3, [pc, #72]	; (8009910 <xTaskNotifyWait+0x84>)
 80098c8:	601a      	str	r2, [r3, #0]
 80098ca:	f3bf 8f4f 	dsb	sy
 80098ce:	f3bf 8f6f 	isb	sy
		taskEXIT_CRITICAL();
 80098d2:	f000 fae9 	bl	8009ea8 <vPortExitCritical>
		taskENTER_CRITICAL();
 80098d6:	f000 fac5 	bl	8009e64 <vPortEnterCritical>
			if( pulNotificationValue != NULL )
 80098da:	b115      	cbz	r5, 80098e2 <xTaskNotifyWait+0x56>
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80098dc:	6823      	ldr	r3, [r4, #0]
 80098de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098e0:	602b      	str	r3, [r5, #0]
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098e2:	6823      	ldr	r3, [r4, #0]
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098e4:	2200      	movs	r2, #0
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80098e6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80098ea:	2b02      	cmp	r3, #2
				xReturn = pdTRUE;
 80098ec:	bf09      	itett	eq
 80098ee:	2501      	moveq	r5, #1
				xReturn = pdFALSE;
 80098f0:	2500      	movne	r5, #0
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80098f2:	6823      	ldreq	r3, [r4, #0]
 80098f4:	6cd9      	ldreq	r1, [r3, #76]	; 0x4c
 80098f6:	bf04      	itt	eq
 80098f8:	43b9      	biceq	r1, r7
 80098fa:	64d9      	streq	r1, [r3, #76]	; 0x4c
			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80098fc:	6823      	ldr	r3, [r4, #0]
 80098fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		taskEXIT_CRITICAL();
 8009902:	f000 fad1 	bl	8009ea8 <vPortExitCritical>
	}
 8009906:	4628      	mov	r0, r5
 8009908:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800990c:	20000ca0 	.word	0x20000ca0
 8009910:	e000ed04 	.word	0xe000ed04

08009914 <xTaskGenericNotify>:
	{
 8009914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009916:	460e      	mov	r6, r1
 8009918:	4615      	mov	r5, r2
 800991a:	461f      	mov	r7, r3
		configASSERT( xTaskToNotify );
 800991c:	4604      	mov	r4, r0
 800991e:	b940      	cbnz	r0, 8009932 <xTaskGenericNotify+0x1e>
 8009920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009924:	f383 8811 	msr	BASEPRI, r3
 8009928:	f3bf 8f6f 	isb	sy
 800992c:	f3bf 8f4f 	dsb	sy
 8009930:	e7fe      	b.n	8009930 <xTaskGenericNotify+0x1c>
		taskENTER_CRITICAL();
 8009932:	f000 fa97 	bl	8009e64 <vPortEnterCritical>
			if( pulPreviousNotificationValue != NULL )
 8009936:	b10f      	cbz	r7, 800993c <xTaskGenericNotify+0x28>
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8009938:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800993a:	603b      	str	r3, [r7, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800993c:	2202      	movs	r2, #2
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800993e:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8009942:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
			switch( eAction )
 8009946:	1e6a      	subs	r2, r5, #1
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009948:	b2db      	uxtb	r3, r3
			switch( eAction )
 800994a:	2a03      	cmp	r2, #3
 800994c:	d80a      	bhi.n	8009964 <xTaskGenericNotify+0x50>
 800994e:	e8df f002 	tbb	[pc, r2]
 8009952:	0602      	.short	0x0602
 8009954:	1004      	.short	0x1004
					pxTCB->ulNotifiedValue |= ulValue;
 8009956:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8009958:	430e      	orrs	r6, r1
						pxTCB->ulNotifiedValue = ulValue;
 800995a:	64e6      	str	r6, [r4, #76]	; 0x4c
 800995c:	e002      	b.n	8009964 <xTaskGenericNotify+0x50>
					( pxTCB->ulNotifiedValue )++;
 800995e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8009960:	3201      	adds	r2, #1
 8009962:	64e2      	str	r2, [r4, #76]	; 0x4c
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8009964:	2b01      	cmp	r3, #1
 8009966:	d008      	beq.n	800997a <xTaskGenericNotify+0x66>
 8009968:	2401      	movs	r4, #1
		taskEXIT_CRITICAL();
 800996a:	f000 fa9d 	bl	8009ea8 <vPortExitCritical>
	}
 800996e:	4620      	mov	r0, r4
 8009970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8009972:	2b02      	cmp	r3, #2
 8009974:	d1f1      	bne.n	800995a <xTaskGenericNotify+0x46>
						xReturn = pdFAIL;
 8009976:	2400      	movs	r4, #0
 8009978:	e7f7      	b.n	800996a <xTaskGenericNotify+0x56>
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800997a:	1d25      	adds	r5, r4, #4
 800997c:	4628      	mov	r0, r5
 800997e:	f7fe fc82 	bl	8008286 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8009982:	2014      	movs	r0, #20
 8009984:	4a12      	ldr	r2, [pc, #72]	; (80099d0 <xTaskGenericNotify+0xbc>)
 8009986:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8009988:	6811      	ldr	r1, [r2, #0]
 800998a:	428b      	cmp	r3, r1
 800998c:	bf88      	it	hi
 800998e:	6013      	strhi	r3, [r2, #0]
 8009990:	4a10      	ldr	r2, [pc, #64]	; (80099d4 <xTaskGenericNotify+0xc0>)
 8009992:	4629      	mov	r1, r5
 8009994:	fb00 2003 	mla	r0, r0, r3, r2
 8009998:	f7fe fc52 	bl	8008240 <vListInsertEnd>
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800999c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800999e:	b143      	cbz	r3, 80099b2 <xTaskGenericNotify+0x9e>
 80099a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a4:	f383 8811 	msr	BASEPRI, r3
 80099a8:	f3bf 8f6f 	isb	sy
 80099ac:	f3bf 8f4f 	dsb	sy
 80099b0:	e7fe      	b.n	80099b0 <xTaskGenericNotify+0x9c>
				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80099b2:	4b09      	ldr	r3, [pc, #36]	; (80099d8 <xTaskGenericNotify+0xc4>)
 80099b4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099ba:	429a      	cmp	r2, r3
 80099bc:	d9d4      	bls.n	8009968 <xTaskGenericNotify+0x54>
					taskYIELD_IF_USING_PREEMPTION();
 80099be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099c2:	4b06      	ldr	r3, [pc, #24]	; (80099dc <xTaskGenericNotify+0xc8>)
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	f3bf 8f4f 	dsb	sy
 80099ca:	f3bf 8f6f 	isb	sy
 80099ce:	e7cb      	b.n	8009968 <xTaskGenericNotify+0x54>
 80099d0:	2000111c 	.word	0x2000111c
 80099d4:	20000cac 	.word	0x20000cac
 80099d8:	20000ca0 	.word	0x20000ca0
 80099dc:	e000ed04 	.word	0xe000ed04

080099e0 <xTaskNotifyStateClear>:
	{
 80099e0:	b538      	push	{r3, r4, r5, lr}
		pxTCB = prvGetTCBFromHandle( xTask );
 80099e2:	4605      	mov	r5, r0
 80099e4:	b908      	cbnz	r0, 80099ea <xTaskNotifyStateClear+0xa>
 80099e6:	4b08      	ldr	r3, [pc, #32]	; (8009a08 <xTaskNotifyStateClear+0x28>)
 80099e8:	681d      	ldr	r5, [r3, #0]
 80099ea:	2400      	movs	r4, #0
		taskENTER_CRITICAL();
 80099ec:	f000 fa3a 	bl	8009e64 <vPortEnterCritical>
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 80099f0:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80099f4:	2b02      	cmp	r3, #2
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099f6:	bf04      	itt	eq
 80099f8:	f885 4050 	strbeq.w	r4, [r5, #80]	; 0x50
				xReturn = pdPASS;
 80099fc:	2401      	moveq	r4, #1
		taskEXIT_CRITICAL();
 80099fe:	f000 fa53 	bl	8009ea8 <vPortExitCritical>
	}
 8009a02:	4620      	mov	r0, r4
 8009a04:	bd38      	pop	{r3, r4, r5, pc}
 8009a06:	bf00      	nop
 8009a08:	20000ca0 	.word	0x20000ca0

08009a0c <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009a0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 8009a0e:	4c11      	ldr	r4, [pc, #68]	; (8009a54 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 8009a10:	f000 fa28 	bl	8009e64 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 8009a14:	6825      	ldr	r5, [r4, #0]
 8009a16:	b9bd      	cbnz	r5, 8009a48 <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 8009a18:	4f0f      	ldr	r7, [pc, #60]	; (8009a58 <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 8009a1a:	4e10      	ldr	r6, [pc, #64]	; (8009a5c <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7fe fc01 	bl	8008224 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009a22:	4630      	mov	r0, r6
 8009a24:	f7fe fbfe 	bl	8008224 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009a28:	4b0d      	ldr	r3, [pc, #52]	; (8009a60 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a2a:	4a0e      	ldr	r2, [pc, #56]	; (8009a64 <prvCheckForValidListAndQueue+0x58>)
			pxCurrentTimerList = &xActiveTimerList1;
 8009a2c:	601f      	str	r7, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009a2e:	4b0e      	ldr	r3, [pc, #56]	; (8009a68 <prvCheckForValidListAndQueue+0x5c>)
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a30:	2110      	movs	r1, #16
			pxOverflowTimerList = &xActiveTimerList2;
 8009a32:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009a34:	200a      	movs	r0, #10
 8009a36:	9500      	str	r5, [sp, #0]
 8009a38:	4b0c      	ldr	r3, [pc, #48]	; (8009a6c <prvCheckForValidListAndQueue+0x60>)
 8009a3a:	f7fe fcff 	bl	800843c <xQueueGenericCreateStatic>
 8009a3e:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009a40:	b110      	cbz	r0, 8009a48 <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009a42:	490b      	ldr	r1, [pc, #44]	; (8009a70 <prvCheckForValidListAndQueue+0x64>)
 8009a44:	f7fe ffde 	bl	8008a04 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 8009a48:	b003      	add	sp, #12
 8009a4a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 8009a4e:	f000 ba2b 	b.w	8009ea8 <vPortExitCritical>
 8009a52:	bf00      	nop
 8009a54:	2000128c 	.word	0x2000128c
 8009a58:	20001218 	.word	0x20001218
 8009a5c:	2000122c 	.word	0x2000122c
 8009a60:	20001170 	.word	0x20001170
 8009a64:	20001178 	.word	0x20001178
 8009a68:	20001174 	.word	0x20001174
 8009a6c:	20001244 	.word	0x20001244
 8009a70:	0800dc4b 	.word	0x0800dc4b

08009a74 <prvInsertTimerInActiveList>:
	if( xNextExpiryTime <= xTimeNow )
 8009a74:	4291      	cmp	r1, r2
{
 8009a76:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009a78:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009a7a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 8009a7c:	d80a      	bhi.n	8009a94 <prvInsertTimerInActiveList+0x20>
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a7e:	1ad2      	subs	r2, r2, r3
 8009a80:	6983      	ldr	r3, [r0, #24]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	d20d      	bcs.n	8009aa2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009a86:	4b08      	ldr	r3, [pc, #32]	; (8009aa8 <prvInsertTimerInActiveList+0x34>)
 8009a88:	1d01      	adds	r1, r0, #4
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a8a:	6818      	ldr	r0, [r3, #0]
 8009a8c:	f7fe fbe4 	bl	8008258 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 8009a90:	2000      	movs	r0, #0
}
 8009a92:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d201      	bcs.n	8009a9c <prvInsertTimerInActiveList+0x28>
 8009a98:	4299      	cmp	r1, r3
 8009a9a:	d202      	bcs.n	8009aa2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009a9c:	1d01      	adds	r1, r0, #4
 8009a9e:	4b03      	ldr	r3, [pc, #12]	; (8009aac <prvInsertTimerInActiveList+0x38>)
 8009aa0:	e7f3      	b.n	8009a8a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 8009aa2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 8009aa4:	e7f5      	b.n	8009a92 <prvInsertTimerInActiveList+0x1e>
 8009aa6:	bf00      	nop
 8009aa8:	20001174 	.word	0x20001174
 8009aac:	20001170 	.word	0x20001170

08009ab0 <xTimerCreateTimerTask>:
{
 8009ab0:	b510      	push	{r4, lr}
 8009ab2:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 8009ab4:	f7ff ffaa 	bl	8009a0c <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 8009ab8:	4b12      	ldr	r3, [pc, #72]	; (8009b04 <xTimerCreateTimerTask+0x54>)
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	b1b3      	cbz	r3, 8009aec <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009abe:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009ac0:	aa07      	add	r2, sp, #28
 8009ac2:	a906      	add	r1, sp, #24
 8009ac4:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009ac6:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009aca:	f7fe fb9f 	bl	800820c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009ace:	9b05      	ldr	r3, [sp, #20]
 8009ad0:	9a07      	ldr	r2, [sp, #28]
 8009ad2:	9302      	str	r3, [sp, #8]
 8009ad4:	9b06      	ldr	r3, [sp, #24]
 8009ad6:	490c      	ldr	r1, [pc, #48]	; (8009b08 <xTimerCreateTimerTask+0x58>)
 8009ad8:	9301      	str	r3, [sp, #4]
 8009ada:	2302      	movs	r3, #2
 8009adc:	480b      	ldr	r0, [pc, #44]	; (8009b0c <xTimerCreateTimerTask+0x5c>)
 8009ade:	9300      	str	r3, [sp, #0]
 8009ae0:	4623      	mov	r3, r4
 8009ae2:	f7ff fae7 	bl	80090b4 <xTaskCreateStatic>
 8009ae6:	4b0a      	ldr	r3, [pc, #40]	; (8009b10 <xTimerCreateTimerTask+0x60>)
 8009ae8:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 8009aea:	b940      	cbnz	r0, 8009afe <xTimerCreateTimerTask+0x4e>
 8009aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009af0:	f383 8811 	msr	BASEPRI, r3
 8009af4:	f3bf 8f6f 	isb	sy
 8009af8:	f3bf 8f4f 	dsb	sy
 8009afc:	e7fe      	b.n	8009afc <xTimerCreateTimerTask+0x4c>
}
 8009afe:	2001      	movs	r0, #1
 8009b00:	b008      	add	sp, #32
 8009b02:	bd10      	pop	{r4, pc}
 8009b04:	2000128c 	.word	0x2000128c
 8009b08:	0800dc50 	.word	0x0800dc50
 8009b0c:	08009be9 	.word	0x08009be9
 8009b10:	20001290 	.word	0x20001290

08009b14 <xTimerGenericCommand>:
{
 8009b14:	b530      	push	{r4, r5, lr}
 8009b16:	4615      	mov	r5, r2
 8009b18:	b085      	sub	sp, #20
 8009b1a:	461a      	mov	r2, r3
	configASSERT( xTimer );
 8009b1c:	4603      	mov	r3, r0
 8009b1e:	b940      	cbnz	r0, 8009b32 <xTimerGenericCommand+0x1e>
 8009b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b24:	f383 8811 	msr	BASEPRI, r3
 8009b28:	f3bf 8f6f 	isb	sy
 8009b2c:	f3bf 8f4f 	dsb	sy
 8009b30:	e7fe      	b.n	8009b30 <xTimerGenericCommand+0x1c>
	if( xTimerQueue != NULL )
 8009b32:	4c0d      	ldr	r4, [pc, #52]	; (8009b68 <xTimerGenericCommand+0x54>)
 8009b34:	6820      	ldr	r0, [r4, #0]
 8009b36:	b178      	cbz	r0, 8009b58 <xTimerGenericCommand+0x44>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b38:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009b3a:	e9cd 1500 	strd	r1, r5, [sp]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8009b3e:	9302      	str	r3, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009b40:	dc0c      	bgt.n	8009b5c <xTimerGenericCommand+0x48>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b42:	f7ff fdb5 	bl	80096b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b46:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009b48:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009b4a:	bf0c      	ite	eq
 8009b4c:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009b4e:	461a      	movne	r2, r3
 8009b50:	4669      	mov	r1, sp
 8009b52:	6820      	ldr	r0, [r4, #0]
 8009b54:	f7fe fce0 	bl	8008518 <xQueueGenericSend>
}
 8009b58:	b005      	add	sp, #20
 8009b5a:	bd30      	pop	{r4, r5, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009b5c:	2300      	movs	r3, #0
 8009b5e:	4669      	mov	r1, sp
 8009b60:	f7fe fd8c 	bl	800867c <xQueueGenericSendFromISR>
 8009b64:	e7f8      	b.n	8009b58 <xTimerGenericCommand+0x44>
 8009b66:	bf00      	nop
 8009b68:	2000128c 	.word	0x2000128c

08009b6c <prvSwitchTimerLists>:
{
 8009b6c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b70:	f04f 0800 	mov.w	r8, #0
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b74:	4d1a      	ldr	r5, [pc, #104]	; (8009be0 <prvSwitchTimerLists+0x74>)
 8009b76:	682b      	ldr	r3, [r5, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	b932      	cbnz	r2, 8009b8a <prvSwitchTimerLists+0x1e>
	pxCurrentTimerList = pxOverflowTimerList;
 8009b7c:	4a19      	ldr	r2, [pc, #100]	; (8009be4 <prvSwitchTimerLists+0x78>)
 8009b7e:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b80:	6013      	str	r3, [r2, #0]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b82:	6029      	str	r1, [r5, #0]
}
 8009b84:	b002      	add	sp, #8
 8009b86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b8a:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b8c:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009b8e:	681e      	ldr	r6, [r3, #0]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009b90:	1d27      	adds	r7, r4, #4
 8009b92:	4638      	mov	r0, r7
 8009b94:	f7fe fb77 	bl	8008286 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009b9a:	4620      	mov	r0, r4
 8009b9c:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009b9e:	69e3      	ldr	r3, [r4, #28]
 8009ba0:	2b01      	cmp	r3, #1
 8009ba2:	d1e8      	bne.n	8009b76 <prvSwitchTimerLists+0xa>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ba4:	69a3      	ldr	r3, [r4, #24]
 8009ba6:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
 8009ba8:	429e      	cmp	r6, r3
 8009baa:	d206      	bcs.n	8009bba <prvSwitchTimerLists+0x4e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009bac:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009bae:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009bb0:	4639      	mov	r1, r7
 8009bb2:	6828      	ldr	r0, [r5, #0]
 8009bb4:	f7fe fb50 	bl	8008258 <vListInsert>
 8009bb8:	e7dd      	b.n	8009b76 <prvSwitchTimerLists+0xa>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009bba:	2300      	movs	r3, #0
 8009bbc:	f8cd 8000 	str.w	r8, [sp]
 8009bc0:	4632      	mov	r2, r6
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	4620      	mov	r0, r4
 8009bc6:	f7ff ffa5 	bl	8009b14 <xTimerGenericCommand>
				configASSERT( xResult );
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d1d3      	bne.n	8009b76 <prvSwitchTimerLists+0xa>
 8009bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd2:	f383 8811 	msr	BASEPRI, r3
 8009bd6:	f3bf 8f6f 	isb	sy
 8009bda:	f3bf 8f4f 	dsb	sy
 8009bde:	e7fe      	b.n	8009bde <prvSwitchTimerLists+0x72>
 8009be0:	20001170 	.word	0x20001170
 8009be4:	20001174 	.word	0x20001174

08009be8 <prvTimerTask>:
{
 8009be8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bec:	4d6d      	ldr	r5, [pc, #436]	; (8009da4 <prvTimerTask+0x1bc>)
					portYIELD_WITHIN_API();
 8009bee:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8009db4 <prvTimerTask+0x1cc>
 8009bf2:	462f      	mov	r7, r5
{
 8009bf4:	b087      	sub	sp, #28
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009bf6:	682b      	ldr	r3, [r5, #0]
 8009bf8:	f8d3 b000 	ldr.w	fp, [r3]
	if( *pxListWasEmpty == pdFALSE )
 8009bfc:	f1bb 0f00 	cmp.w	fp, #0
 8009c00:	d04b      	beq.n	8009c9a <prvTimerTask+0xb2>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f8d3 a000 	ldr.w	sl, [r3]
	vTaskSuspendAll();
 8009c08:	f7ff fafc 	bl	8009204 <vTaskSuspendAll>
	xTimeNow = xTaskGetTickCount();
 8009c0c:	f7ff fb02 	bl	8009214 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009c10:	4c65      	ldr	r4, [pc, #404]	; (8009da8 <prvTimerTask+0x1c0>)
	xTimeNow = xTaskGetTickCount();
 8009c12:	4681      	mov	r9, r0
	if( xTimeNow < xLastTime )
 8009c14:	6823      	ldr	r3, [r4, #0]
 8009c16:	4626      	mov	r6, r4
 8009c18:	4298      	cmp	r0, r3
 8009c1a:	d240      	bcs.n	8009c9e <prvTimerTask+0xb6>
		prvSwitchTimerLists();
 8009c1c:	f7ff ffa6 	bl	8009b6c <prvSwitchTimerLists>
	xLastTime = xTimeNow;
 8009c20:	f8c4 9000 	str.w	r9, [r4]
			( void ) xTaskResumeAll();
 8009c24:	f7ff fb8c 	bl	8009340 <xTaskResumeAll>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009c28:	f8df 9184 	ldr.w	r9, [pc, #388]	; 8009db0 <prvTimerTask+0x1c8>
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	a902      	add	r1, sp, #8
 8009c30:	f8d9 0000 	ldr.w	r0, [r9]
 8009c34:	f7fe fd84 	bl	8008740 <xQueueReceive>
 8009c38:	2800      	cmp	r0, #0
 8009c3a:	d0dc      	beq.n	8009bf6 <prvTimerTask+0xe>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009c3c:	9b02      	ldr	r3, [sp, #8]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	da03      	bge.n	8009c4a <prvTimerTask+0x62>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c46:	9b03      	ldr	r3, [sp, #12]
 8009c48:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009c4a:	9b02      	ldr	r3, [sp, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	dbed      	blt.n	8009c2c <prvTimerTask+0x44>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009c50:	9c04      	ldr	r4, [sp, #16]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009c52:	6963      	ldr	r3, [r4, #20]
 8009c54:	b113      	cbz	r3, 8009c5c <prvTimerTask+0x74>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c56:	1d20      	adds	r0, r4, #4
 8009c58:	f7fe fb15 	bl	8008286 <uxListRemove>
	xTimeNow = xTaskGetTickCount();
 8009c5c:	f7ff fada 	bl	8009214 <xTaskGetTickCount>
	if( xTimeNow < xLastTime )
 8009c60:	6833      	ldr	r3, [r6, #0]
	xTimeNow = xTaskGetTickCount();
 8009c62:	4683      	mov	fp, r0
	if( xTimeNow < xLastTime )
 8009c64:	4298      	cmp	r0, r3
 8009c66:	d201      	bcs.n	8009c6c <prvTimerTask+0x84>
		prvSwitchTimerLists();
 8009c68:	f7ff ff80 	bl	8009b6c <prvSwitchTimerLists>
 8009c6c:	9a02      	ldr	r2, [sp, #8]
	xLastTime = xTimeNow;
 8009c6e:	f8c6 b000 	str.w	fp, [r6]
 8009c72:	2a09      	cmp	r2, #9
 8009c74:	d8da      	bhi.n	8009c2c <prvTimerTask+0x44>
 8009c76:	2301      	movs	r3, #1
 8009c78:	4093      	lsls	r3, r2
 8009c7a:	f413 7a04 	ands.w	sl, r3, #528	; 0x210
 8009c7e:	d17e      	bne.n	8009d7e <prvTimerTask+0x196>
 8009c80:	f013 0fc7 	tst.w	r3, #199	; 0xc7
 8009c84:	d154      	bne.n	8009d30 <prvTimerTask+0x148>
 8009c86:	069b      	lsls	r3, r3, #26
 8009c88:	d5d0      	bpl.n	8009c2c <prvTimerTask+0x44>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8009c8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d1cc      	bne.n	8009c2c <prvTimerTask+0x44>
							vPortFree( pxTimer );
 8009c92:	4620      	mov	r0, r4
 8009c94:	f000 faa8 	bl	800a1e8 <vPortFree>
 8009c98:	e7c8      	b.n	8009c2c <prvTimerTask+0x44>
		xNextExpireTime = ( TickType_t ) 0U;
 8009c9a:	46da      	mov	sl, fp
 8009c9c:	e7b4      	b.n	8009c08 <prvTimerTask+0x20>
	xLastTime = xTimeNow;
 8009c9e:	6020      	str	r0, [r4, #0]
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009ca0:	f1bb 0f00 	cmp.w	fp, #0
 8009ca4:	d029      	beq.n	8009cfa <prvTimerTask+0x112>
 8009ca6:	4582      	cmp	sl, r0
 8009ca8:	d840      	bhi.n	8009d2c <prvTimerTask+0x144>
				( void ) xTaskResumeAll();
 8009caa:	f7ff fb49 	bl	8009340 <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	68db      	ldr	r3, [r3, #12]
 8009cb2:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009cb4:	1d20      	adds	r0, r4, #4
 8009cb6:	f7fe fae6 	bl	8008286 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009cba:	69e3      	ldr	r3, [r4, #28]
 8009cbc:	2b01      	cmp	r3, #1
 8009cbe:	d118      	bne.n	8009cf2 <prvTimerTask+0x10a>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009cc0:	69a1      	ldr	r1, [r4, #24]
 8009cc2:	4653      	mov	r3, sl
 8009cc4:	464a      	mov	r2, r9
 8009cc6:	4451      	add	r1, sl
 8009cc8:	4620      	mov	r0, r4
 8009cca:	f7ff fed3 	bl	8009a74 <prvInsertTimerInActiveList>
 8009cce:	b180      	cbz	r0, 8009cf2 <prvTimerTask+0x10a>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	4652      	mov	r2, sl
 8009cd4:	9300      	str	r3, [sp, #0]
 8009cd6:	4619      	mov	r1, r3
 8009cd8:	4620      	mov	r0, r4
 8009cda:	f7ff ff1b 	bl	8009b14 <xTimerGenericCommand>
			configASSERT( xResult );
 8009cde:	b940      	cbnz	r0, 8009cf2 <prvTimerTask+0x10a>
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	e7fe      	b.n	8009cf0 <prvTimerTask+0x108>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009cf4:	4620      	mov	r0, r4
 8009cf6:	4798      	blx	r3
 8009cf8:	e796      	b.n	8009c28 <prvTimerTask+0x40>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009cfa:	4b2c      	ldr	r3, [pc, #176]	; (8009dac <prvTimerTask+0x1c4>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	681a      	ldr	r2, [r3, #0]
 8009d00:	fab2 f282 	clz	r2, r2
 8009d04:	0952      	lsrs	r2, r2, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d06:	4b2a      	ldr	r3, [pc, #168]	; (8009db0 <prvTimerTask+0x1c8>)
 8009d08:	ebaa 0109 	sub.w	r1, sl, r9
 8009d0c:	6818      	ldr	r0, [r3, #0]
 8009d0e:	f7fe fe8b 	bl	8008a28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d12:	f7ff fb15 	bl	8009340 <xTaskResumeAll>
 8009d16:	2800      	cmp	r0, #0
 8009d18:	d186      	bne.n	8009c28 <prvTimerTask+0x40>
					portYIELD_WITHIN_API();
 8009d1a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009d1e:	f8c8 3000 	str.w	r3, [r8]
 8009d22:	f3bf 8f4f 	dsb	sy
 8009d26:	f3bf 8f6f 	isb	sy
 8009d2a:	e77d      	b.n	8009c28 <prvTimerTask+0x40>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	e7ea      	b.n	8009d06 <prvTimerTask+0x11e>
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009d30:	69a1      	ldr	r1, [r4, #24]
 8009d32:	9b03      	ldr	r3, [sp, #12]
 8009d34:	465a      	mov	r2, fp
 8009d36:	4419      	add	r1, r3
 8009d38:	4620      	mov	r0, r4
 8009d3a:	f7ff fe9b 	bl	8009a74 <prvInsertTimerInActiveList>
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f af74 	beq.w	8009c2c <prvTimerTask+0x44>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d46:	4620      	mov	r0, r4
 8009d48:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8009d4a:	69e3      	ldr	r3, [r4, #28]
 8009d4c:	2b01      	cmp	r3, #1
 8009d4e:	f47f af6d 	bne.w	8009c2c <prvTimerTask+0x44>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009d52:	69a2      	ldr	r2, [r4, #24]
 8009d54:	9903      	ldr	r1, [sp, #12]
 8009d56:	f8cd a000 	str.w	sl, [sp]
 8009d5a:	440a      	add	r2, r1
 8009d5c:	4653      	mov	r3, sl
 8009d5e:	4651      	mov	r1, sl
 8009d60:	4620      	mov	r0, r4
 8009d62:	f7ff fed7 	bl	8009b14 <xTimerGenericCommand>
							configASSERT( xResult );
 8009d66:	2800      	cmp	r0, #0
 8009d68:	f47f af60 	bne.w	8009c2c <prvTimerTask+0x44>
 8009d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d70:	f383 8811 	msr	BASEPRI, r3
 8009d74:	f3bf 8f6f 	isb	sy
 8009d78:	f3bf 8f4f 	dsb	sy
 8009d7c:	e7fe      	b.n	8009d7c <prvTimerTask+0x194>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009d7e:	9903      	ldr	r1, [sp, #12]
 8009d80:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009d82:	b941      	cbnz	r1, 8009d96 <prvTimerTask+0x1ae>
 8009d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d88:	f383 8811 	msr	BASEPRI, r3
 8009d8c:	f3bf 8f6f 	isb	sy
 8009d90:	f3bf 8f4f 	dsb	sy
 8009d94:	e7fe      	b.n	8009d94 <prvTimerTask+0x1ac>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009d96:	465b      	mov	r3, fp
 8009d98:	465a      	mov	r2, fp
 8009d9a:	4459      	add	r1, fp
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	f7ff fe69 	bl	8009a74 <prvInsertTimerInActiveList>
 8009da2:	e743      	b.n	8009c2c <prvTimerTask+0x44>
 8009da4:	20001170 	.word	0x20001170
 8009da8:	20001240 	.word	0x20001240
 8009dac:	20001174 	.word	0x20001174
 8009db0:	2000128c 	.word	0x2000128c
 8009db4:	e000ed04 	.word	0xe000ed04

08009db8 <prvTaskExitError>:
 8009db8:	2300      	movs	r3, #0
 8009dba:	b082      	sub	sp, #8
 8009dbc:	9301      	str	r3, [sp, #4]
 8009dbe:	4b0d      	ldr	r3, [pc, #52]	; (8009df4 <prvTaskExitError+0x3c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	3301      	adds	r3, #1
 8009dc4:	d008      	beq.n	8009dd8 <prvTaskExitError+0x20>
 8009dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dca:	f383 8811 	msr	BASEPRI, r3
 8009dce:	f3bf 8f6f 	isb	sy
 8009dd2:	f3bf 8f4f 	dsb	sy
 8009dd6:	e7fe      	b.n	8009dd6 <prvTaskExitError+0x1e>
 8009dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ddc:	f383 8811 	msr	BASEPRI, r3
 8009de0:	f3bf 8f6f 	isb	sy
 8009de4:	f3bf 8f4f 	dsb	sy
 8009de8:	9b01      	ldr	r3, [sp, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d0fc      	beq.n	8009de8 <prvTaskExitError+0x30>
 8009dee:	b002      	add	sp, #8
 8009df0:	4770      	bx	lr
 8009df2:	bf00      	nop
 8009df4:	200003d8 	.word	0x200003d8

08009df8 <prvPortStartFirstTask>:
 8009df8:	4806      	ldr	r0, [pc, #24]	; (8009e14 <prvPortStartFirstTask+0x1c>)
 8009dfa:	6800      	ldr	r0, [r0, #0]
 8009dfc:	6800      	ldr	r0, [r0, #0]
 8009dfe:	f380 8808 	msr	MSP, r0
 8009e02:	b662      	cpsie	i
 8009e04:	b661      	cpsie	f
 8009e06:	f3bf 8f4f 	dsb	sy
 8009e0a:	f3bf 8f6f 	isb	sy
 8009e0e:	df00      	svc	0
 8009e10:	bf00      	nop
 8009e12:	0000      	.short	0x0000
 8009e14:	e000ed08 	.word	0xe000ed08

08009e18 <pxPortInitialiseStack>:
 8009e18:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009e1c:	f840 3c04 	str.w	r3, [r0, #-4]
 8009e20:	4b05      	ldr	r3, [pc, #20]	; (8009e38 <pxPortInitialiseStack+0x20>)
 8009e22:	f021 0101 	bic.w	r1, r1, #1
 8009e26:	f840 1c08 	str.w	r1, [r0, #-8]
 8009e2a:	f840 3c0c 	str.w	r3, [r0, #-12]
 8009e2e:	f840 2c20 	str.w	r2, [r0, #-32]
 8009e32:	3840      	subs	r0, #64	; 0x40
 8009e34:	4770      	bx	lr
 8009e36:	bf00      	nop
 8009e38:	08009db9 	.word	0x08009db9
 8009e3c:	00000000 	.word	0x00000000

08009e40 <SVC_Handler>:
 8009e40:	4b07      	ldr	r3, [pc, #28]	; (8009e60 <pxCurrentTCBConst2>)
 8009e42:	6819      	ldr	r1, [r3, #0]
 8009e44:	6808      	ldr	r0, [r1, #0]
 8009e46:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009e4a:	f380 8809 	msr	PSP, r0
 8009e4e:	f3bf 8f6f 	isb	sy
 8009e52:	f04f 0000 	mov.w	r0, #0
 8009e56:	f380 8811 	msr	BASEPRI, r0
 8009e5a:	f04e 0e0d 	orr.w	lr, lr, #13
 8009e5e:	4770      	bx	lr

08009e60 <pxCurrentTCBConst2>:
 8009e60:	20000ca0 	.word	0x20000ca0

08009e64 <vPortEnterCritical>:
 8009e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	4a0a      	ldr	r2, [pc, #40]	; (8009ea0 <vPortEnterCritical+0x3c>)
 8009e76:	6813      	ldr	r3, [r2, #0]
 8009e78:	3301      	adds	r3, #1
 8009e7a:	2b01      	cmp	r3, #1
 8009e7c:	6013      	str	r3, [r2, #0]
 8009e7e:	d10d      	bne.n	8009e9c <vPortEnterCritical+0x38>
 8009e80:	4b08      	ldr	r3, [pc, #32]	; (8009ea4 <vPortEnterCritical+0x40>)
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	f013 0fff 	tst.w	r3, #255	; 0xff
 8009e88:	d008      	beq.n	8009e9c <vPortEnterCritical+0x38>
 8009e8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e8e:	f383 8811 	msr	BASEPRI, r3
 8009e92:	f3bf 8f6f 	isb	sy
 8009e96:	f3bf 8f4f 	dsb	sy
 8009e9a:	e7fe      	b.n	8009e9a <vPortEnterCritical+0x36>
 8009e9c:	4770      	bx	lr
 8009e9e:	bf00      	nop
 8009ea0:	200003d8 	.word	0x200003d8
 8009ea4:	e000ed04 	.word	0xe000ed04

08009ea8 <vPortExitCritical>:
 8009ea8:	4a08      	ldr	r2, [pc, #32]	; (8009ecc <vPortExitCritical+0x24>)
 8009eaa:	6813      	ldr	r3, [r2, #0]
 8009eac:	b943      	cbnz	r3, 8009ec0 <vPortExitCritical+0x18>
 8009eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009eb2:	f383 8811 	msr	BASEPRI, r3
 8009eb6:	f3bf 8f6f 	isb	sy
 8009eba:	f3bf 8f4f 	dsb	sy
 8009ebe:	e7fe      	b.n	8009ebe <vPortExitCritical+0x16>
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	6013      	str	r3, [r2, #0]
 8009ec4:	b90b      	cbnz	r3, 8009eca <vPortExitCritical+0x22>
 8009ec6:	f383 8811 	msr	BASEPRI, r3
 8009eca:	4770      	bx	lr
 8009ecc:	200003d8 	.word	0x200003d8

08009ed0 <PendSV_Handler>:
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b0d      	ldr	r3, [pc, #52]	; (8009f10 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009ee0:	6010      	str	r0, [r2, #0]
 8009ee2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8009ee6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009eea:	f380 8811 	msr	BASEPRI, r0
 8009eee:	f7ff fabf 	bl	8009470 <vTaskSwitchContext>
 8009ef2:	f04f 0000 	mov.w	r0, #0
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009efe:	6819      	ldr	r1, [r3, #0]
 8009f00:	6808      	ldr	r0, [r1, #0]
 8009f02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8009f06:	f380 8809 	msr	PSP, r0
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	4770      	bx	lr

08009f10 <pxCurrentTCBConst>:
 8009f10:	20000ca0 	.word	0x20000ca0

08009f14 <SysTick_Handler>:
 8009f14:	b508      	push	{r3, lr}
 8009f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	f7ff f97b 	bl	8009220 <xTaskIncrementTick>
 8009f2a:	b118      	cbz	r0, 8009f34 <SysTick_Handler+0x20>
 8009f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f30:	4b02      	ldr	r3, [pc, #8]	; (8009f3c <SysTick_Handler+0x28>)
 8009f32:	601a      	str	r2, [r3, #0]
 8009f34:	2300      	movs	r3, #0
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	bd08      	pop	{r3, pc}
 8009f3c:	e000ed04 	.word	0xe000ed04

08009f40 <vPortSetupTimerInterrupt>:
 8009f40:	2300      	movs	r3, #0
 8009f42:	4a08      	ldr	r2, [pc, #32]	; (8009f64 <vPortSetupTimerInterrupt+0x24>)
 8009f44:	4908      	ldr	r1, [pc, #32]	; (8009f68 <vPortSetupTimerInterrupt+0x28>)
 8009f46:	6013      	str	r3, [r2, #0]
 8009f48:	600b      	str	r3, [r1, #0]
 8009f4a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8009f4e:	4b07      	ldr	r3, [pc, #28]	; (8009f6c <vPortSetupTimerInterrupt+0x2c>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8009f56:	4906      	ldr	r1, [pc, #24]	; (8009f70 <vPortSetupTimerInterrupt+0x30>)
 8009f58:	3b01      	subs	r3, #1
 8009f5a:	600b      	str	r3, [r1, #0]
 8009f5c:	2307      	movs	r3, #7
 8009f5e:	6013      	str	r3, [r2, #0]
 8009f60:	4770      	bx	lr
 8009f62:	bf00      	nop
 8009f64:	e000e010 	.word	0xe000e010
 8009f68:	e000e018 	.word	0xe000e018
 8009f6c:	2000033c 	.word	0x2000033c
 8009f70:	e000e014 	.word	0xe000e014

08009f74 <xPortStartScheduler>:
 8009f74:	b513      	push	{r0, r1, r4, lr}
 8009f76:	4b27      	ldr	r3, [pc, #156]	; (800a014 <xPortStartScheduler+0xa0>)
 8009f78:	2100      	movs	r1, #0
 8009f7a:	781a      	ldrb	r2, [r3, #0]
 8009f7c:	b2d2      	uxtb	r2, r2
 8009f7e:	9201      	str	r2, [sp, #4]
 8009f80:	22ff      	movs	r2, #255	; 0xff
 8009f82:	701a      	strb	r2, [r3, #0]
 8009f84:	781b      	ldrb	r3, [r3, #0]
 8009f86:	4a24      	ldr	r2, [pc, #144]	; (800a018 <xPortStartScheduler+0xa4>)
 8009f88:	b2db      	uxtb	r3, r3
 8009f8a:	f88d 3003 	strb.w	r3, [sp, #3]
 8009f8e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8009f92:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009f96:	7013      	strb	r3, [r2, #0]
 8009f98:	2207      	movs	r2, #7
 8009f9a:	4b20      	ldr	r3, [pc, #128]	; (800a01c <xPortStartScheduler+0xa8>)
 8009f9c:	601a      	str	r2, [r3, #0]
 8009f9e:	f89d 0003 	ldrb.w	r0, [sp, #3]
 8009fa2:	1e54      	subs	r4, r2, #1
 8009fa4:	0600      	lsls	r0, r0, #24
 8009fa6:	d40d      	bmi.n	8009fc4 <xPortStartScheduler+0x50>
 8009fa8:	b101      	cbz	r1, 8009fac <xPortStartScheduler+0x38>
 8009faa:	601a      	str	r2, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	2a03      	cmp	r2, #3
 8009fb0:	d011      	beq.n	8009fd6 <xPortStartScheduler+0x62>
 8009fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb6:	f383 8811 	msr	BASEPRI, r3
 8009fba:	f3bf 8f6f 	isb	sy
 8009fbe:	f3bf 8f4f 	dsb	sy
 8009fc2:	e7fe      	b.n	8009fc2 <xPortStartScheduler+0x4e>
 8009fc4:	f89d 2003 	ldrb.w	r2, [sp, #3]
 8009fc8:	2101      	movs	r1, #1
 8009fca:	0052      	lsls	r2, r2, #1
 8009fcc:	b2d2      	uxtb	r2, r2
 8009fce:	f88d 2003 	strb.w	r2, [sp, #3]
 8009fd2:	4622      	mov	r2, r4
 8009fd4:	e7e3      	b.n	8009f9e <xPortStartScheduler+0x2a>
 8009fd6:	2400      	movs	r4, #0
 8009fd8:	0212      	lsls	r2, r2, #8
 8009fda:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8009fde:	601a      	str	r2, [r3, #0]
 8009fe0:	9b01      	ldr	r3, [sp, #4]
 8009fe2:	4a0c      	ldr	r2, [pc, #48]	; (800a014 <xPortStartScheduler+0xa0>)
 8009fe4:	b2db      	uxtb	r3, r3
 8009fe6:	7013      	strb	r3, [r2, #0]
 8009fe8:	4b0d      	ldr	r3, [pc, #52]	; (800a020 <xPortStartScheduler+0xac>)
 8009fea:	681a      	ldr	r2, [r3, #0]
 8009fec:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8009ff0:	601a      	str	r2, [r3, #0]
 8009ff2:	681a      	ldr	r2, [r3, #0]
 8009ff4:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8009ff8:	601a      	str	r2, [r3, #0]
 8009ffa:	f7ff ffa1 	bl	8009f40 <vPortSetupTimerInterrupt>
 8009ffe:	4b09      	ldr	r3, [pc, #36]	; (800a024 <xPortStartScheduler+0xb0>)
 800a000:	601c      	str	r4, [r3, #0]
 800a002:	f7ff fef9 	bl	8009df8 <prvPortStartFirstTask>
 800a006:	f7ff fa33 	bl	8009470 <vTaskSwitchContext>
 800a00a:	f7ff fed5 	bl	8009db8 <prvTaskExitError>
 800a00e:	4620      	mov	r0, r4
 800a010:	b002      	add	sp, #8
 800a012:	bd10      	pop	{r4, pc}
 800a014:	e000e400 	.word	0xe000e400
 800a018:	20001294 	.word	0x20001294
 800a01c:	20001298 	.word	0x20001298
 800a020:	e000ed20 	.word	0xe000ed20
 800a024:	200003d8 	.word	0x200003d8

0800a028 <vPortValidateInterruptPriority>:
 800a028:	f3ef 8305 	mrs	r3, IPSR
 800a02c:	2b0f      	cmp	r3, #15
 800a02e:	d90e      	bls.n	800a04e <vPortValidateInterruptPriority+0x26>
 800a030:	4a10      	ldr	r2, [pc, #64]	; (800a074 <vPortValidateInterruptPriority+0x4c>)
 800a032:	5c9b      	ldrb	r3, [r3, r2]
 800a034:	4a10      	ldr	r2, [pc, #64]	; (800a078 <vPortValidateInterruptPriority+0x50>)
 800a036:	7812      	ldrb	r2, [r2, #0]
 800a038:	429a      	cmp	r2, r3
 800a03a:	d908      	bls.n	800a04e <vPortValidateInterruptPriority+0x26>
 800a03c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a040:	f383 8811 	msr	BASEPRI, r3
 800a044:	f3bf 8f6f 	isb	sy
 800a048:	f3bf 8f4f 	dsb	sy
 800a04c:	e7fe      	b.n	800a04c <vPortValidateInterruptPriority+0x24>
 800a04e:	4b0b      	ldr	r3, [pc, #44]	; (800a07c <vPortValidateInterruptPriority+0x54>)
 800a050:	4a0b      	ldr	r2, [pc, #44]	; (800a080 <vPortValidateInterruptPriority+0x58>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	6812      	ldr	r2, [r2, #0]
 800a056:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d908      	bls.n	800a070 <vPortValidateInterruptPriority+0x48>
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	e7fe      	b.n	800a06e <vPortValidateInterruptPriority+0x46>
 800a070:	4770      	bx	lr
 800a072:	bf00      	nop
 800a074:	e000e3f0 	.word	0xe000e3f0
 800a078:	20001294 	.word	0x20001294
 800a07c:	e000ed0c 	.word	0xe000ed0c
 800a080:	20001298 	.word	0x20001298

0800a084 <prvInsertBlockIntoFreeList>:
 800a084:	b510      	push	{r4, lr}
 800a086:	4b0f      	ldr	r3, [pc, #60]	; (800a0c4 <prvInsertBlockIntoFreeList+0x40>)
 800a088:	681a      	ldr	r2, [r3, #0]
 800a08a:	4282      	cmp	r2, r0
 800a08c:	d318      	bcc.n	800a0c0 <prvInsertBlockIntoFreeList+0x3c>
 800a08e:	685c      	ldr	r4, [r3, #4]
 800a090:	1919      	adds	r1, r3, r4
 800a092:	4288      	cmp	r0, r1
 800a094:	bf01      	itttt	eq
 800a096:	6841      	ldreq	r1, [r0, #4]
 800a098:	4618      	moveq	r0, r3
 800a09a:	1909      	addeq	r1, r1, r4
 800a09c:	6059      	streq	r1, [r3, #4]
 800a09e:	6844      	ldr	r4, [r0, #4]
 800a0a0:	1901      	adds	r1, r0, r4
 800a0a2:	428a      	cmp	r2, r1
 800a0a4:	d107      	bne.n	800a0b6 <prvInsertBlockIntoFreeList+0x32>
 800a0a6:	4908      	ldr	r1, [pc, #32]	; (800a0c8 <prvInsertBlockIntoFreeList+0x44>)
 800a0a8:	6809      	ldr	r1, [r1, #0]
 800a0aa:	428a      	cmp	r2, r1
 800a0ac:	bf1f      	itttt	ne
 800a0ae:	6851      	ldrne	r1, [r2, #4]
 800a0b0:	6812      	ldrne	r2, [r2, #0]
 800a0b2:	1909      	addne	r1, r1, r4
 800a0b4:	6041      	strne	r1, [r0, #4]
 800a0b6:	4298      	cmp	r0, r3
 800a0b8:	6002      	str	r2, [r0, #0]
 800a0ba:	bf18      	it	ne
 800a0bc:	6018      	strne	r0, [r3, #0]
 800a0be:	bd10      	pop	{r4, pc}
 800a0c0:	4613      	mov	r3, r2
 800a0c2:	e7e1      	b.n	800a088 <prvInsertBlockIntoFreeList+0x4>
 800a0c4:	2000418c 	.word	0x2000418c
 800a0c8:	2000129c 	.word	0x2000129c

0800a0cc <pvPortMalloc>:
 800a0cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a0d0:	4604      	mov	r4, r0
 800a0d2:	f7ff f897 	bl	8009204 <vTaskSuspendAll>
 800a0d6:	493d      	ldr	r1, [pc, #244]	; (800a1cc <pvPortMalloc+0x100>)
 800a0d8:	4d3d      	ldr	r5, [pc, #244]	; (800a1d0 <pvPortMalloc+0x104>)
 800a0da:	680b      	ldr	r3, [r1, #0]
 800a0dc:	b9fb      	cbnz	r3, 800a11e <pvPortMalloc+0x52>
 800a0de:	4a3d      	ldr	r2, [pc, #244]	; (800a1d4 <pvPortMalloc+0x108>)
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	0756      	lsls	r6, r2, #29
 800a0e4:	bf0f      	iteee	eq
 800a0e6:	f642 63e0 	movweq	r3, #12000	; 0x2ee0
 800a0ea:	3207      	addne	r2, #7
 800a0ec:	4b3a      	ldrne	r3, [pc, #232]	; (800a1d8 <pvPortMalloc+0x10c>)
 800a0ee:	f022 0207 	bicne.w	r2, r2, #7
 800a0f2:	bf18      	it	ne
 800a0f4:	1a9b      	subne	r3, r3, r2
 800a0f6:	4413      	add	r3, r2
 800a0f8:	4e38      	ldr	r6, [pc, #224]	; (800a1dc <pvPortMalloc+0x110>)
 800a0fa:	3b08      	subs	r3, #8
 800a0fc:	f023 0307 	bic.w	r3, r3, #7
 800a100:	6070      	str	r0, [r6, #4]
 800a102:	6032      	str	r2, [r6, #0]
 800a104:	e9c3 0000 	strd	r0, r0, [r3]
 800a108:	1a98      	subs	r0, r3, r2
 800a10a:	600b      	str	r3, [r1, #0]
 800a10c:	e9c2 3000 	strd	r3, r0, [r2]
 800a110:	4b33      	ldr	r3, [pc, #204]	; (800a1e0 <pvPortMalloc+0x114>)
 800a112:	6018      	str	r0, [r3, #0]
 800a114:	4b33      	ldr	r3, [pc, #204]	; (800a1e4 <pvPortMalloc+0x118>)
 800a116:	6018      	str	r0, [r3, #0]
 800a118:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a11c:	602b      	str	r3, [r5, #0]
 800a11e:	682f      	ldr	r7, [r5, #0]
 800a120:	4227      	tst	r7, r4
 800a122:	d14d      	bne.n	800a1c0 <pvPortMalloc+0xf4>
 800a124:	2c00      	cmp	r4, #0
 800a126:	d03e      	beq.n	800a1a6 <pvPortMalloc+0xda>
 800a128:	f104 0308 	add.w	r3, r4, #8
 800a12c:	0758      	lsls	r0, r3, #29
 800a12e:	bf1c      	itt	ne
 800a130:	f023 0307 	bicne.w	r3, r3, #7
 800a134:	3308      	addne	r3, #8
 800a136:	2b00      	cmp	r3, #0
 800a138:	d042      	beq.n	800a1c0 <pvPortMalloc+0xf4>
 800a13a:	4a2a      	ldr	r2, [pc, #168]	; (800a1e4 <pvPortMalloc+0x118>)
 800a13c:	6816      	ldr	r6, [r2, #0]
 800a13e:	4690      	mov	r8, r2
 800a140:	429e      	cmp	r6, r3
 800a142:	d33d      	bcc.n	800a1c0 <pvPortMalloc+0xf4>
 800a144:	4a25      	ldr	r2, [pc, #148]	; (800a1dc <pvPortMalloc+0x110>)
 800a146:	6815      	ldr	r5, [r2, #0]
 800a148:	6868      	ldr	r0, [r5, #4]
 800a14a:	4298      	cmp	r0, r3
 800a14c:	d201      	bcs.n	800a152 <pvPortMalloc+0x86>
 800a14e:	682c      	ldr	r4, [r5, #0]
 800a150:	b9a4      	cbnz	r4, 800a17c <pvPortMalloc+0xb0>
 800a152:	6809      	ldr	r1, [r1, #0]
 800a154:	42a9      	cmp	r1, r5
 800a156:	d033      	beq.n	800a1c0 <pvPortMalloc+0xf4>
 800a158:	6829      	ldr	r1, [r5, #0]
 800a15a:	6814      	ldr	r4, [r2, #0]
 800a15c:	6011      	str	r1, [r2, #0]
 800a15e:	1ac2      	subs	r2, r0, r3
 800a160:	2a10      	cmp	r2, #16
 800a162:	d912      	bls.n	800a18a <pvPortMalloc+0xbe>
 800a164:	18e8      	adds	r0, r5, r3
 800a166:	0741      	lsls	r1, r0, #29
 800a168:	d00b      	beq.n	800a182 <pvPortMalloc+0xb6>
 800a16a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a16e:	f383 8811 	msr	BASEPRI, r3
 800a172:	f3bf 8f6f 	isb	sy
 800a176:	f3bf 8f4f 	dsb	sy
 800a17a:	e7fe      	b.n	800a17a <pvPortMalloc+0xae>
 800a17c:	462a      	mov	r2, r5
 800a17e:	4625      	mov	r5, r4
 800a180:	e7e2      	b.n	800a148 <pvPortMalloc+0x7c>
 800a182:	6042      	str	r2, [r0, #4]
 800a184:	606b      	str	r3, [r5, #4]
 800a186:	f7ff ff7d 	bl	800a084 <prvInsertBlockIntoFreeList>
 800a18a:	686b      	ldr	r3, [r5, #4]
 800a18c:	4914      	ldr	r1, [pc, #80]	; (800a1e0 <pvPortMalloc+0x114>)
 800a18e:	1af6      	subs	r6, r6, r3
 800a190:	431f      	orrs	r7, r3
 800a192:	2300      	movs	r3, #0
 800a194:	6808      	ldr	r0, [r1, #0]
 800a196:	f8c8 6000 	str.w	r6, [r8]
 800a19a:	4286      	cmp	r6, r0
 800a19c:	bf38      	it	cc
 800a19e:	600e      	strcc	r6, [r1, #0]
 800a1a0:	3408      	adds	r4, #8
 800a1a2:	606f      	str	r7, [r5, #4]
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	f7ff f8cb 	bl	8009340 <xTaskResumeAll>
 800a1aa:	0763      	lsls	r3, r4, #29
 800a1ac:	d00a      	beq.n	800a1c4 <pvPortMalloc+0xf8>
 800a1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b2:	f383 8811 	msr	BASEPRI, r3
 800a1b6:	f3bf 8f6f 	isb	sy
 800a1ba:	f3bf 8f4f 	dsb	sy
 800a1be:	e7fe      	b.n	800a1be <pvPortMalloc+0xf2>
 800a1c0:	2400      	movs	r4, #0
 800a1c2:	e7f0      	b.n	800a1a6 <pvPortMalloc+0xda>
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a1ca:	bf00      	nop
 800a1cc:	2000129c 	.word	0x2000129c
 800a1d0:	20004180 	.word	0x20004180
 800a1d4:	200012a0 	.word	0x200012a0
 800a1d8:	20004180 	.word	0x20004180
 800a1dc:	2000418c 	.word	0x2000418c
 800a1e0:	20004188 	.word	0x20004188
 800a1e4:	20004184 	.word	0x20004184

0800a1e8 <vPortFree>:
 800a1e8:	b510      	push	{r4, lr}
 800a1ea:	4604      	mov	r4, r0
 800a1ec:	b370      	cbz	r0, 800a24c <vPortFree+0x64>
 800a1ee:	4a18      	ldr	r2, [pc, #96]	; (800a250 <vPortFree+0x68>)
 800a1f0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800a1f4:	6812      	ldr	r2, [r2, #0]
 800a1f6:	4213      	tst	r3, r2
 800a1f8:	d108      	bne.n	800a20c <vPortFree+0x24>
 800a1fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1fe:	f383 8811 	msr	BASEPRI, r3
 800a202:	f3bf 8f6f 	isb	sy
 800a206:	f3bf 8f4f 	dsb	sy
 800a20a:	e7fe      	b.n	800a20a <vPortFree+0x22>
 800a20c:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800a210:	b141      	cbz	r1, 800a224 <vPortFree+0x3c>
 800a212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a216:	f383 8811 	msr	BASEPRI, r3
 800a21a:	f3bf 8f6f 	isb	sy
 800a21e:	f3bf 8f4f 	dsb	sy
 800a222:	e7fe      	b.n	800a222 <vPortFree+0x3a>
 800a224:	ea23 0302 	bic.w	r3, r3, r2
 800a228:	f840 3c04 	str.w	r3, [r0, #-4]
 800a22c:	f7fe ffea 	bl	8009204 <vTaskSuspendAll>
 800a230:	4a08      	ldr	r2, [pc, #32]	; (800a254 <vPortFree+0x6c>)
 800a232:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a236:	6811      	ldr	r1, [r2, #0]
 800a238:	f1a4 0008 	sub.w	r0, r4, #8
 800a23c:	440b      	add	r3, r1
 800a23e:	6013      	str	r3, [r2, #0]
 800a240:	f7ff ff20 	bl	800a084 <prvInsertBlockIntoFreeList>
 800a244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a248:	f7ff b87a 	b.w	8009340 <xTaskResumeAll>
 800a24c:	bd10      	pop	{r4, pc}
 800a24e:	bf00      	nop
 800a250:	20004180 	.word	0x20004180
 800a254:	20004184 	.word	0x20004184

0800a258 <xPortGetFreeHeapSize>:
 800a258:	4b01      	ldr	r3, [pc, #4]	; (800a260 <xPortGetFreeHeapSize+0x8>)
 800a25a:	6818      	ldr	r0, [r3, #0]
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	20004184 	.word	0x20004184

0800a264 <__errno>:
 800a264:	4b01      	ldr	r3, [pc, #4]	; (800a26c <__errno+0x8>)
 800a266:	6818      	ldr	r0, [r3, #0]
 800a268:	4770      	bx	lr
 800a26a:	bf00      	nop
 800a26c:	200003dc 	.word	0x200003dc

0800a270 <__libc_init_array>:
 800a270:	b570      	push	{r4, r5, r6, lr}
 800a272:	2500      	movs	r5, #0
 800a274:	4e0c      	ldr	r6, [pc, #48]	; (800a2a8 <__libc_init_array+0x38>)
 800a276:	4c0d      	ldr	r4, [pc, #52]	; (800a2ac <__libc_init_array+0x3c>)
 800a278:	1ba4      	subs	r4, r4, r6
 800a27a:	10a4      	asrs	r4, r4, #2
 800a27c:	42a5      	cmp	r5, r4
 800a27e:	d109      	bne.n	800a294 <__libc_init_array+0x24>
 800a280:	f001 ffb8 	bl	800c1f4 <_init>
 800a284:	2500      	movs	r5, #0
 800a286:	4e0a      	ldr	r6, [pc, #40]	; (800a2b0 <__libc_init_array+0x40>)
 800a288:	4c0a      	ldr	r4, [pc, #40]	; (800a2b4 <__libc_init_array+0x44>)
 800a28a:	1ba4      	subs	r4, r4, r6
 800a28c:	10a4      	asrs	r4, r4, #2
 800a28e:	42a5      	cmp	r5, r4
 800a290:	d105      	bne.n	800a29e <__libc_init_array+0x2e>
 800a292:	bd70      	pop	{r4, r5, r6, pc}
 800a294:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a298:	4798      	blx	r3
 800a29a:	3501      	adds	r5, #1
 800a29c:	e7ee      	b.n	800a27c <__libc_init_array+0xc>
 800a29e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800a2a2:	4798      	blx	r3
 800a2a4:	3501      	adds	r5, #1
 800a2a6:	e7f2      	b.n	800a28e <__libc_init_array+0x1e>
 800a2a8:	0800dec0 	.word	0x0800dec0
 800a2ac:	0800dec0 	.word	0x0800dec0
 800a2b0:	0800dec0 	.word	0x0800dec0
 800a2b4:	0800dec4 	.word	0x0800dec4

0800a2b8 <memcmp>:
 800a2b8:	b530      	push	{r4, r5, lr}
 800a2ba:	2400      	movs	r4, #0
 800a2bc:	42a2      	cmp	r2, r4
 800a2be:	d101      	bne.n	800a2c4 <memcmp+0xc>
 800a2c0:	2000      	movs	r0, #0
 800a2c2:	e007      	b.n	800a2d4 <memcmp+0x1c>
 800a2c4:	5d03      	ldrb	r3, [r0, r4]
 800a2c6:	3401      	adds	r4, #1
 800a2c8:	190d      	adds	r5, r1, r4
 800a2ca:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800a2ce:	42ab      	cmp	r3, r5
 800a2d0:	d0f4      	beq.n	800a2bc <memcmp+0x4>
 800a2d2:	1b58      	subs	r0, r3, r5
 800a2d4:	bd30      	pop	{r4, r5, pc}

0800a2d6 <memcpy>:
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	1e43      	subs	r3, r0, #1
 800a2da:	440a      	add	r2, r1
 800a2dc:	4291      	cmp	r1, r2
 800a2de:	d100      	bne.n	800a2e2 <memcpy+0xc>
 800a2e0:	bd10      	pop	{r4, pc}
 800a2e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a2e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a2ea:	e7f7      	b.n	800a2dc <memcpy+0x6>

0800a2ec <memset>:
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	4402      	add	r2, r0
 800a2f0:	4293      	cmp	r3, r2
 800a2f2:	d100      	bne.n	800a2f6 <memset+0xa>
 800a2f4:	4770      	bx	lr
 800a2f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a2fa:	e7f9      	b.n	800a2f0 <memset+0x4>

0800a2fc <strchr>:
 800a2fc:	b2c9      	uxtb	r1, r1
 800a2fe:	4603      	mov	r3, r0
 800a300:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a304:	b11a      	cbz	r2, 800a30e <strchr+0x12>
 800a306:	428a      	cmp	r2, r1
 800a308:	d1f9      	bne.n	800a2fe <strchr+0x2>
 800a30a:	4618      	mov	r0, r3
 800a30c:	4770      	bx	lr
 800a30e:	2900      	cmp	r1, #0
 800a310:	bf18      	it	ne
 800a312:	2300      	movne	r3, #0
 800a314:	e7f9      	b.n	800a30a <strchr+0xe>

0800a316 <sulp>:
 800a316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a31a:	460f      	mov	r7, r1
 800a31c:	4690      	mov	r8, r2
 800a31e:	f001 fd95 	bl	800be4c <__ulp>
 800a322:	4604      	mov	r4, r0
 800a324:	460d      	mov	r5, r1
 800a326:	f1b8 0f00 	cmp.w	r8, #0
 800a32a:	d011      	beq.n	800a350 <sulp+0x3a>
 800a32c:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a330:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a334:	2b00      	cmp	r3, #0
 800a336:	dd0b      	ble.n	800a350 <sulp+0x3a>
 800a338:	2400      	movs	r4, #0
 800a33a:	051b      	lsls	r3, r3, #20
 800a33c:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a340:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a344:	4622      	mov	r2, r4
 800a346:	462b      	mov	r3, r5
 800a348:	f7f6 f8c6 	bl	80004d8 <__aeabi_dmul>
 800a34c:	4604      	mov	r4, r0
 800a34e:	460d      	mov	r5, r1
 800a350:	4620      	mov	r0, r4
 800a352:	4629      	mov	r1, r5
 800a354:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a358 <_strtod_l>:
 800a358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a35c:	461f      	mov	r7, r3
 800a35e:	2300      	movs	r3, #0
 800a360:	b0a1      	sub	sp, #132	; 0x84
 800a362:	4683      	mov	fp, r0
 800a364:	4638      	mov	r0, r7
 800a366:	460e      	mov	r6, r1
 800a368:	9217      	str	r2, [sp, #92]	; 0x5c
 800a36a:	931c      	str	r3, [sp, #112]	; 0x70
 800a36c:	f001 fa8f 	bl	800b88e <__localeconv_l>
 800a370:	4680      	mov	r8, r0
 800a372:	6800      	ldr	r0, [r0, #0]
 800a374:	f7f5 feec 	bl	8000150 <strlen>
 800a378:	f04f 0900 	mov.w	r9, #0
 800a37c:	4604      	mov	r4, r0
 800a37e:	f04f 0a00 	mov.w	sl, #0
 800a382:	961b      	str	r6, [sp, #108]	; 0x6c
 800a384:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a386:	781a      	ldrb	r2, [r3, #0]
 800a388:	2a0d      	cmp	r2, #13
 800a38a:	d832      	bhi.n	800a3f2 <_strtod_l+0x9a>
 800a38c:	2a09      	cmp	r2, #9
 800a38e:	d236      	bcs.n	800a3fe <_strtod_l+0xa6>
 800a390:	2a00      	cmp	r2, #0
 800a392:	d03e      	beq.n	800a412 <_strtod_l+0xba>
 800a394:	2300      	movs	r3, #0
 800a396:	930d      	str	r3, [sp, #52]	; 0x34
 800a398:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a39a:	782b      	ldrb	r3, [r5, #0]
 800a39c:	2b30      	cmp	r3, #48	; 0x30
 800a39e:	f040 80ac 	bne.w	800a4fa <_strtod_l+0x1a2>
 800a3a2:	786b      	ldrb	r3, [r5, #1]
 800a3a4:	2b58      	cmp	r3, #88	; 0x58
 800a3a6:	d001      	beq.n	800a3ac <_strtod_l+0x54>
 800a3a8:	2b78      	cmp	r3, #120	; 0x78
 800a3aa:	d167      	bne.n	800a47c <_strtod_l+0x124>
 800a3ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3ae:	9702      	str	r7, [sp, #8]
 800a3b0:	9301      	str	r3, [sp, #4]
 800a3b2:	ab1c      	add	r3, sp, #112	; 0x70
 800a3b4:	9300      	str	r3, [sp, #0]
 800a3b6:	4a89      	ldr	r2, [pc, #548]	; (800a5dc <_strtod_l+0x284>)
 800a3b8:	ab1d      	add	r3, sp, #116	; 0x74
 800a3ba:	a91b      	add	r1, sp, #108	; 0x6c
 800a3bc:	4658      	mov	r0, fp
 800a3be:	f000 ff8b 	bl	800b2d8 <__gethex>
 800a3c2:	f010 0407 	ands.w	r4, r0, #7
 800a3c6:	4606      	mov	r6, r0
 800a3c8:	d005      	beq.n	800a3d6 <_strtod_l+0x7e>
 800a3ca:	2c06      	cmp	r4, #6
 800a3cc:	d12b      	bne.n	800a426 <_strtod_l+0xce>
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	3501      	adds	r5, #1
 800a3d2:	951b      	str	r5, [sp, #108]	; 0x6c
 800a3d4:	930d      	str	r3, [sp, #52]	; 0x34
 800a3d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	f040 85a6 	bne.w	800af2a <_strtod_l+0xbd2>
 800a3de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3e0:	b1e3      	cbz	r3, 800a41c <_strtod_l+0xc4>
 800a3e2:	464a      	mov	r2, r9
 800a3e4:	f10a 4300 	add.w	r3, sl, #2147483648	; 0x80000000
 800a3e8:	4610      	mov	r0, r2
 800a3ea:	4619      	mov	r1, r3
 800a3ec:	b021      	add	sp, #132	; 0x84
 800a3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3f2:	2a2b      	cmp	r2, #43	; 0x2b
 800a3f4:	d015      	beq.n	800a422 <_strtod_l+0xca>
 800a3f6:	2a2d      	cmp	r2, #45	; 0x2d
 800a3f8:	d004      	beq.n	800a404 <_strtod_l+0xac>
 800a3fa:	2a20      	cmp	r2, #32
 800a3fc:	d1ca      	bne.n	800a394 <_strtod_l+0x3c>
 800a3fe:	3301      	adds	r3, #1
 800a400:	931b      	str	r3, [sp, #108]	; 0x6c
 800a402:	e7bf      	b.n	800a384 <_strtod_l+0x2c>
 800a404:	2201      	movs	r2, #1
 800a406:	920d      	str	r2, [sp, #52]	; 0x34
 800a408:	1c5a      	adds	r2, r3, #1
 800a40a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a40c:	785b      	ldrb	r3, [r3, #1]
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d1c2      	bne.n	800a398 <_strtod_l+0x40>
 800a412:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a414:	961b      	str	r6, [sp, #108]	; 0x6c
 800a416:	2b00      	cmp	r3, #0
 800a418:	f040 8585 	bne.w	800af26 <_strtod_l+0xbce>
 800a41c:	464a      	mov	r2, r9
 800a41e:	4653      	mov	r3, sl
 800a420:	e7e2      	b.n	800a3e8 <_strtod_l+0x90>
 800a422:	2200      	movs	r2, #0
 800a424:	e7ef      	b.n	800a406 <_strtod_l+0xae>
 800a426:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a428:	b13a      	cbz	r2, 800a43a <_strtod_l+0xe2>
 800a42a:	2135      	movs	r1, #53	; 0x35
 800a42c:	a81e      	add	r0, sp, #120	; 0x78
 800a42e:	f001 fe00 	bl	800c032 <__copybits>
 800a432:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a434:	4658      	mov	r0, fp
 800a436:	f001 fa72 	bl	800b91e <_Bfree>
 800a43a:	3c01      	subs	r4, #1
 800a43c:	2c04      	cmp	r4, #4
 800a43e:	d806      	bhi.n	800a44e <_strtod_l+0xf6>
 800a440:	e8df f004 	tbb	[pc, r4]
 800a444:	1714030a 	.word	0x1714030a
 800a448:	0a          	.byte	0x0a
 800a449:	00          	.byte	0x00
 800a44a:	e9dd 9a1e 	ldrd	r9, sl, [sp, #120]	; 0x78
 800a44e:	0731      	lsls	r1, r6, #28
 800a450:	d5c1      	bpl.n	800a3d6 <_strtod_l+0x7e>
 800a452:	f04a 4a00 	orr.w	sl, sl, #2147483648	; 0x80000000
 800a456:	e7be      	b.n	800a3d6 <_strtod_l+0x7e>
 800a458:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a45a:	e9dd 931e 	ldrd	r9, r3, [sp, #120]	; 0x78
 800a45e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a466:	ea43 5a02 	orr.w	sl, r3, r2, lsl #20
 800a46a:	e7f0      	b.n	800a44e <_strtod_l+0xf6>
 800a46c:	f8df a170 	ldr.w	sl, [pc, #368]	; 800a5e0 <_strtod_l+0x288>
 800a470:	e7ed      	b.n	800a44e <_strtod_l+0xf6>
 800a472:	f06f 4a00 	mvn.w	sl, #2147483648	; 0x80000000
 800a476:	f04f 39ff 	mov.w	r9, #4294967295
 800a47a:	e7e8      	b.n	800a44e <_strtod_l+0xf6>
 800a47c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a47e:	1c5a      	adds	r2, r3, #1
 800a480:	921b      	str	r2, [sp, #108]	; 0x6c
 800a482:	785b      	ldrb	r3, [r3, #1]
 800a484:	2b30      	cmp	r3, #48	; 0x30
 800a486:	d0f9      	beq.n	800a47c <_strtod_l+0x124>
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d0a4      	beq.n	800a3d6 <_strtod_l+0x7e>
 800a48c:	2301      	movs	r3, #1
 800a48e:	2500      	movs	r5, #0
 800a490:	220a      	movs	r2, #10
 800a492:	9307      	str	r3, [sp, #28]
 800a494:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a496:	9506      	str	r5, [sp, #24]
 800a498:	9308      	str	r3, [sp, #32]
 800a49a:	9504      	str	r5, [sp, #16]
 800a49c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a49e:	7807      	ldrb	r7, [r0, #0]
 800a4a0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800a4a4:	b2d9      	uxtb	r1, r3
 800a4a6:	2909      	cmp	r1, #9
 800a4a8:	d929      	bls.n	800a4fe <_strtod_l+0x1a6>
 800a4aa:	4622      	mov	r2, r4
 800a4ac:	f8d8 1000 	ldr.w	r1, [r8]
 800a4b0:	f001 fe76 	bl	800c1a0 <strncmp>
 800a4b4:	2800      	cmp	r0, #0
 800a4b6:	d031      	beq.n	800a51c <_strtod_l+0x1c4>
 800a4b8:	2000      	movs	r0, #0
 800a4ba:	463b      	mov	r3, r7
 800a4bc:	4602      	mov	r2, r0
 800a4be:	9c04      	ldr	r4, [sp, #16]
 800a4c0:	9005      	str	r0, [sp, #20]
 800a4c2:	2b65      	cmp	r3, #101	; 0x65
 800a4c4:	d001      	beq.n	800a4ca <_strtod_l+0x172>
 800a4c6:	2b45      	cmp	r3, #69	; 0x45
 800a4c8:	d114      	bne.n	800a4f4 <_strtod_l+0x19c>
 800a4ca:	b924      	cbnz	r4, 800a4d6 <_strtod_l+0x17e>
 800a4cc:	b910      	cbnz	r0, 800a4d4 <_strtod_l+0x17c>
 800a4ce:	9b07      	ldr	r3, [sp, #28]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d09e      	beq.n	800a412 <_strtod_l+0xba>
 800a4d4:	2400      	movs	r4, #0
 800a4d6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800a4d8:	1c73      	adds	r3, r6, #1
 800a4da:	931b      	str	r3, [sp, #108]	; 0x6c
 800a4dc:	7873      	ldrb	r3, [r6, #1]
 800a4de:	2b2b      	cmp	r3, #43	; 0x2b
 800a4e0:	d078      	beq.n	800a5d4 <_strtod_l+0x27c>
 800a4e2:	2b2d      	cmp	r3, #45	; 0x2d
 800a4e4:	d070      	beq.n	800a5c8 <_strtod_l+0x270>
 800a4e6:	f04f 0c00 	mov.w	ip, #0
 800a4ea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800a4ee:	2f09      	cmp	r7, #9
 800a4f0:	d97c      	bls.n	800a5ec <_strtod_l+0x294>
 800a4f2:	961b      	str	r6, [sp, #108]	; 0x6c
 800a4f4:	f04f 0e00 	mov.w	lr, #0
 800a4f8:	e09a      	b.n	800a630 <_strtod_l+0x2d8>
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	e7c7      	b.n	800a48e <_strtod_l+0x136>
 800a4fe:	9904      	ldr	r1, [sp, #16]
 800a500:	3001      	adds	r0, #1
 800a502:	2908      	cmp	r1, #8
 800a504:	bfd7      	itett	le
 800a506:	9906      	ldrle	r1, [sp, #24]
 800a508:	fb02 3505 	mlagt	r5, r2, r5, r3
 800a50c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a510:	9306      	strle	r3, [sp, #24]
 800a512:	9b04      	ldr	r3, [sp, #16]
 800a514:	901b      	str	r0, [sp, #108]	; 0x6c
 800a516:	3301      	adds	r3, #1
 800a518:	9304      	str	r3, [sp, #16]
 800a51a:	e7bf      	b.n	800a49c <_strtod_l+0x144>
 800a51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a51e:	191a      	adds	r2, r3, r4
 800a520:	921b      	str	r2, [sp, #108]	; 0x6c
 800a522:	9a04      	ldr	r2, [sp, #16]
 800a524:	5d1b      	ldrb	r3, [r3, r4]
 800a526:	2a00      	cmp	r2, #0
 800a528:	d037      	beq.n	800a59a <_strtod_l+0x242>
 800a52a:	4602      	mov	r2, r0
 800a52c:	9c04      	ldr	r4, [sp, #16]
 800a52e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a532:	2909      	cmp	r1, #9
 800a534:	d913      	bls.n	800a55e <_strtod_l+0x206>
 800a536:	2101      	movs	r1, #1
 800a538:	9105      	str	r1, [sp, #20]
 800a53a:	e7c2      	b.n	800a4c2 <_strtod_l+0x16a>
 800a53c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a53e:	3001      	adds	r0, #1
 800a540:	1c5a      	adds	r2, r3, #1
 800a542:	921b      	str	r2, [sp, #108]	; 0x6c
 800a544:	785b      	ldrb	r3, [r3, #1]
 800a546:	2b30      	cmp	r3, #48	; 0x30
 800a548:	d0f8      	beq.n	800a53c <_strtod_l+0x1e4>
 800a54a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a54e:	2a08      	cmp	r2, #8
 800a550:	f200 84f0 	bhi.w	800af34 <_strtod_l+0xbdc>
 800a554:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a556:	9208      	str	r2, [sp, #32]
 800a558:	4602      	mov	r2, r0
 800a55a:	2000      	movs	r0, #0
 800a55c:	4604      	mov	r4, r0
 800a55e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800a562:	f100 0101 	add.w	r1, r0, #1
 800a566:	d012      	beq.n	800a58e <_strtod_l+0x236>
 800a568:	440a      	add	r2, r1
 800a56a:	270a      	movs	r7, #10
 800a56c:	4621      	mov	r1, r4
 800a56e:	eb00 0c04 	add.w	ip, r0, r4
 800a572:	458c      	cmp	ip, r1
 800a574:	d113      	bne.n	800a59e <_strtod_l+0x246>
 800a576:	1821      	adds	r1, r4, r0
 800a578:	2908      	cmp	r1, #8
 800a57a:	f104 0401 	add.w	r4, r4, #1
 800a57e:	4404      	add	r4, r0
 800a580:	dc19      	bgt.n	800a5b6 <_strtod_l+0x25e>
 800a582:	210a      	movs	r1, #10
 800a584:	9b06      	ldr	r3, [sp, #24]
 800a586:	fb01 e303 	mla	r3, r1, r3, lr
 800a58a:	9306      	str	r3, [sp, #24]
 800a58c:	2100      	movs	r1, #0
 800a58e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a590:	1c58      	adds	r0, r3, #1
 800a592:	901b      	str	r0, [sp, #108]	; 0x6c
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	4608      	mov	r0, r1
 800a598:	e7c9      	b.n	800a52e <_strtod_l+0x1d6>
 800a59a:	9804      	ldr	r0, [sp, #16]
 800a59c:	e7d3      	b.n	800a546 <_strtod_l+0x1ee>
 800a59e:	2908      	cmp	r1, #8
 800a5a0:	f101 0101 	add.w	r1, r1, #1
 800a5a4:	dc03      	bgt.n	800a5ae <_strtod_l+0x256>
 800a5a6:	9b06      	ldr	r3, [sp, #24]
 800a5a8:	437b      	muls	r3, r7
 800a5aa:	9306      	str	r3, [sp, #24]
 800a5ac:	e7e1      	b.n	800a572 <_strtod_l+0x21a>
 800a5ae:	2910      	cmp	r1, #16
 800a5b0:	bfd8      	it	le
 800a5b2:	437d      	mulle	r5, r7
 800a5b4:	e7dd      	b.n	800a572 <_strtod_l+0x21a>
 800a5b6:	2c10      	cmp	r4, #16
 800a5b8:	bfdc      	itt	le
 800a5ba:	210a      	movle	r1, #10
 800a5bc:	fb01 e505 	mlale	r5, r1, r5, lr
 800a5c0:	e7e4      	b.n	800a58c <_strtod_l+0x234>
 800a5c2:	2301      	movs	r3, #1
 800a5c4:	9305      	str	r3, [sp, #20]
 800a5c6:	e781      	b.n	800a4cc <_strtod_l+0x174>
 800a5c8:	f04f 0c01 	mov.w	ip, #1
 800a5cc:	1cb3      	adds	r3, r6, #2
 800a5ce:	931b      	str	r3, [sp, #108]	; 0x6c
 800a5d0:	78b3      	ldrb	r3, [r6, #2]
 800a5d2:	e78a      	b.n	800a4ea <_strtod_l+0x192>
 800a5d4:	f04f 0c00 	mov.w	ip, #0
 800a5d8:	e7f8      	b.n	800a5cc <_strtod_l+0x274>
 800a5da:	bf00      	nop
 800a5dc:	0800dc64 	.word	0x0800dc64
 800a5e0:	7ff00000 	.word	0x7ff00000
 800a5e4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a5e6:	1c5f      	adds	r7, r3, #1
 800a5e8:	971b      	str	r7, [sp, #108]	; 0x6c
 800a5ea:	785b      	ldrb	r3, [r3, #1]
 800a5ec:	2b30      	cmp	r3, #48	; 0x30
 800a5ee:	d0f9      	beq.n	800a5e4 <_strtod_l+0x28c>
 800a5f0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800a5f4:	2f08      	cmp	r7, #8
 800a5f6:	f63f af7d 	bhi.w	800a4f4 <_strtod_l+0x19c>
 800a5fa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a5fe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a600:	9309      	str	r3, [sp, #36]	; 0x24
 800a602:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a604:	1c5f      	adds	r7, r3, #1
 800a606:	971b      	str	r7, [sp, #108]	; 0x6c
 800a608:	785b      	ldrb	r3, [r3, #1]
 800a60a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800a60e:	f1b8 0f09 	cmp.w	r8, #9
 800a612:	d937      	bls.n	800a684 <_strtod_l+0x32c>
 800a614:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a616:	1a7f      	subs	r7, r7, r1
 800a618:	2f08      	cmp	r7, #8
 800a61a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800a61e:	dc37      	bgt.n	800a690 <_strtod_l+0x338>
 800a620:	45be      	cmp	lr, r7
 800a622:	bfa8      	it	ge
 800a624:	46be      	movge	lr, r7
 800a626:	f1bc 0f00 	cmp.w	ip, #0
 800a62a:	d001      	beq.n	800a630 <_strtod_l+0x2d8>
 800a62c:	f1ce 0e00 	rsb	lr, lr, #0
 800a630:	2c00      	cmp	r4, #0
 800a632:	d151      	bne.n	800a6d8 <_strtod_l+0x380>
 800a634:	2800      	cmp	r0, #0
 800a636:	f47f aece 	bne.w	800a3d6 <_strtod_l+0x7e>
 800a63a:	9a07      	ldr	r2, [sp, #28]
 800a63c:	2a00      	cmp	r2, #0
 800a63e:	f47f aeca 	bne.w	800a3d6 <_strtod_l+0x7e>
 800a642:	9a05      	ldr	r2, [sp, #20]
 800a644:	2a00      	cmp	r2, #0
 800a646:	f47f aee4 	bne.w	800a412 <_strtod_l+0xba>
 800a64a:	2b4e      	cmp	r3, #78	; 0x4e
 800a64c:	d027      	beq.n	800a69e <_strtod_l+0x346>
 800a64e:	dc21      	bgt.n	800a694 <_strtod_l+0x33c>
 800a650:	2b49      	cmp	r3, #73	; 0x49
 800a652:	f47f aede 	bne.w	800a412 <_strtod_l+0xba>
 800a656:	49a4      	ldr	r1, [pc, #656]	; (800a8e8 <_strtod_l+0x590>)
 800a658:	a81b      	add	r0, sp, #108	; 0x6c
 800a65a:	f001 f871 	bl	800b740 <__match>
 800a65e:	2800      	cmp	r0, #0
 800a660:	f43f aed7 	beq.w	800a412 <_strtod_l+0xba>
 800a664:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a666:	49a1      	ldr	r1, [pc, #644]	; (800a8ec <_strtod_l+0x594>)
 800a668:	3b01      	subs	r3, #1
 800a66a:	a81b      	add	r0, sp, #108	; 0x6c
 800a66c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a66e:	f001 f867 	bl	800b740 <__match>
 800a672:	b910      	cbnz	r0, 800a67a <_strtod_l+0x322>
 800a674:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a676:	3301      	adds	r3, #1
 800a678:	931b      	str	r3, [sp, #108]	; 0x6c
 800a67a:	f8df a284 	ldr.w	sl, [pc, #644]	; 800a900 <_strtod_l+0x5a8>
 800a67e:	f04f 0900 	mov.w	r9, #0
 800a682:	e6a8      	b.n	800a3d6 <_strtod_l+0x7e>
 800a684:	210a      	movs	r1, #10
 800a686:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a68a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a68e:	e7b8      	b.n	800a602 <_strtod_l+0x2aa>
 800a690:	46be      	mov	lr, r7
 800a692:	e7c8      	b.n	800a626 <_strtod_l+0x2ce>
 800a694:	2b69      	cmp	r3, #105	; 0x69
 800a696:	d0de      	beq.n	800a656 <_strtod_l+0x2fe>
 800a698:	2b6e      	cmp	r3, #110	; 0x6e
 800a69a:	f47f aeba 	bne.w	800a412 <_strtod_l+0xba>
 800a69e:	4994      	ldr	r1, [pc, #592]	; (800a8f0 <_strtod_l+0x598>)
 800a6a0:	a81b      	add	r0, sp, #108	; 0x6c
 800a6a2:	f001 f84d 	bl	800b740 <__match>
 800a6a6:	2800      	cmp	r0, #0
 800a6a8:	f43f aeb3 	beq.w	800a412 <_strtod_l+0xba>
 800a6ac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	2b28      	cmp	r3, #40	; 0x28
 800a6b2:	d10e      	bne.n	800a6d2 <_strtod_l+0x37a>
 800a6b4:	aa1e      	add	r2, sp, #120	; 0x78
 800a6b6:	498f      	ldr	r1, [pc, #572]	; (800a8f4 <_strtod_l+0x59c>)
 800a6b8:	a81b      	add	r0, sp, #108	; 0x6c
 800a6ba:	f001 f855 	bl	800b768 <__hexnan>
 800a6be:	2805      	cmp	r0, #5
 800a6c0:	d107      	bne.n	800a6d2 <_strtod_l+0x37a>
 800a6c2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a6c4:	f8dd 9078 	ldr.w	r9, [sp, #120]	; 0x78
 800a6c8:	f043 4aff 	orr.w	sl, r3, #2139095040	; 0x7f800000
 800a6cc:	f44a 0ae0 	orr.w	sl, sl, #7340032	; 0x700000
 800a6d0:	e681      	b.n	800a3d6 <_strtod_l+0x7e>
 800a6d2:	f8df a234 	ldr.w	sl, [pc, #564]	; 800a908 <_strtod_l+0x5b0>
 800a6d6:	e7d2      	b.n	800a67e <_strtod_l+0x326>
 800a6d8:	ebae 0302 	sub.w	r3, lr, r2
 800a6dc:	9307      	str	r3, [sp, #28]
 800a6de:	9b04      	ldr	r3, [sp, #16]
 800a6e0:	9806      	ldr	r0, [sp, #24]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	bf08      	it	eq
 800a6e6:	4623      	moveq	r3, r4
 800a6e8:	2c10      	cmp	r4, #16
 800a6ea:	9304      	str	r3, [sp, #16]
 800a6ec:	46a0      	mov	r8, r4
 800a6ee:	bfa8      	it	ge
 800a6f0:	f04f 0810 	movge.w	r8, #16
 800a6f4:	f7f5 fe76 	bl	80003e4 <__aeabi_ui2d>
 800a6f8:	2c09      	cmp	r4, #9
 800a6fa:	4681      	mov	r9, r0
 800a6fc:	468a      	mov	sl, r1
 800a6fe:	dc13      	bgt.n	800a728 <_strtod_l+0x3d0>
 800a700:	9b07      	ldr	r3, [sp, #28]
 800a702:	2b00      	cmp	r3, #0
 800a704:	f43f ae67 	beq.w	800a3d6 <_strtod_l+0x7e>
 800a708:	9b07      	ldr	r3, [sp, #28]
 800a70a:	dd7e      	ble.n	800a80a <_strtod_l+0x4b2>
 800a70c:	2b16      	cmp	r3, #22
 800a70e:	dc65      	bgt.n	800a7dc <_strtod_l+0x484>
 800a710:	4a79      	ldr	r2, [pc, #484]	; (800a8f8 <_strtod_l+0x5a0>)
 800a712:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800a716:	464a      	mov	r2, r9
 800a718:	e9de 0100 	ldrd	r0, r1, [lr]
 800a71c:	4653      	mov	r3, sl
 800a71e:	f7f5 fedb 	bl	80004d8 <__aeabi_dmul>
 800a722:	4681      	mov	r9, r0
 800a724:	468a      	mov	sl, r1
 800a726:	e656      	b.n	800a3d6 <_strtod_l+0x7e>
 800a728:	4b73      	ldr	r3, [pc, #460]	; (800a8f8 <_strtod_l+0x5a0>)
 800a72a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a72e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a732:	f7f5 fed1 	bl	80004d8 <__aeabi_dmul>
 800a736:	4606      	mov	r6, r0
 800a738:	4628      	mov	r0, r5
 800a73a:	460f      	mov	r7, r1
 800a73c:	f7f5 fe52 	bl	80003e4 <__aeabi_ui2d>
 800a740:	4602      	mov	r2, r0
 800a742:	460b      	mov	r3, r1
 800a744:	4630      	mov	r0, r6
 800a746:	4639      	mov	r1, r7
 800a748:	f7f5 fd10 	bl	800016c <__adddf3>
 800a74c:	2c0f      	cmp	r4, #15
 800a74e:	4681      	mov	r9, r0
 800a750:	468a      	mov	sl, r1
 800a752:	ddd5      	ble.n	800a700 <_strtod_l+0x3a8>
 800a754:	9b07      	ldr	r3, [sp, #28]
 800a756:	eba4 0808 	sub.w	r8, r4, r8
 800a75a:	4498      	add	r8, r3
 800a75c:	f1b8 0f00 	cmp.w	r8, #0
 800a760:	f340 809a 	ble.w	800a898 <_strtod_l+0x540>
 800a764:	f018 030f 	ands.w	r3, r8, #15
 800a768:	d00a      	beq.n	800a780 <_strtod_l+0x428>
 800a76a:	4963      	ldr	r1, [pc, #396]	; (800a8f8 <_strtod_l+0x5a0>)
 800a76c:	464a      	mov	r2, r9
 800a76e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a772:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a776:	4653      	mov	r3, sl
 800a778:	f7f5 feae 	bl	80004d8 <__aeabi_dmul>
 800a77c:	4681      	mov	r9, r0
 800a77e:	468a      	mov	sl, r1
 800a780:	f038 080f 	bics.w	r8, r8, #15
 800a784:	d077      	beq.n	800a876 <_strtod_l+0x51e>
 800a786:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a78a:	dd4b      	ble.n	800a824 <_strtod_l+0x4cc>
 800a78c:	f04f 0800 	mov.w	r8, #0
 800a790:	f8cd 8010 	str.w	r8, [sp, #16]
 800a794:	f8cd 8020 	str.w	r8, [sp, #32]
 800a798:	f8cd 8018 	str.w	r8, [sp, #24]
 800a79c:	2322      	movs	r3, #34	; 0x22
 800a79e:	f04f 0900 	mov.w	r9, #0
 800a7a2:	f8df a15c 	ldr.w	sl, [pc, #348]	; 800a900 <_strtod_l+0x5a8>
 800a7a6:	f8cb 3000 	str.w	r3, [fp]
 800a7aa:	9b08      	ldr	r3, [sp, #32]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	f43f ae12 	beq.w	800a3d6 <_strtod_l+0x7e>
 800a7b2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a7b4:	4658      	mov	r0, fp
 800a7b6:	f001 f8b2 	bl	800b91e <_Bfree>
 800a7ba:	9906      	ldr	r1, [sp, #24]
 800a7bc:	4658      	mov	r0, fp
 800a7be:	f001 f8ae 	bl	800b91e <_Bfree>
 800a7c2:	9904      	ldr	r1, [sp, #16]
 800a7c4:	4658      	mov	r0, fp
 800a7c6:	f001 f8aa 	bl	800b91e <_Bfree>
 800a7ca:	9908      	ldr	r1, [sp, #32]
 800a7cc:	4658      	mov	r0, fp
 800a7ce:	f001 f8a6 	bl	800b91e <_Bfree>
 800a7d2:	4641      	mov	r1, r8
 800a7d4:	4658      	mov	r0, fp
 800a7d6:	f001 f8a2 	bl	800b91e <_Bfree>
 800a7da:	e5fc      	b.n	800a3d6 <_strtod_l+0x7e>
 800a7dc:	9a07      	ldr	r2, [sp, #28]
 800a7de:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a7e2:	4293      	cmp	r3, r2
 800a7e4:	dbb6      	blt.n	800a754 <_strtod_l+0x3fc>
 800a7e6:	4d44      	ldr	r5, [pc, #272]	; (800a8f8 <_strtod_l+0x5a0>)
 800a7e8:	f1c4 040f 	rsb	r4, r4, #15
 800a7ec:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a7f0:	464a      	mov	r2, r9
 800a7f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a7f6:	4653      	mov	r3, sl
 800a7f8:	f7f5 fe6e 	bl	80004d8 <__aeabi_dmul>
 800a7fc:	9b07      	ldr	r3, [sp, #28]
 800a7fe:	1b1c      	subs	r4, r3, r4
 800a800:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a804:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a808:	e789      	b.n	800a71e <_strtod_l+0x3c6>
 800a80a:	f113 0f16 	cmn.w	r3, #22
 800a80e:	dba1      	blt.n	800a754 <_strtod_l+0x3fc>
 800a810:	4a39      	ldr	r2, [pc, #228]	; (800a8f8 <_strtod_l+0x5a0>)
 800a812:	4648      	mov	r0, r9
 800a814:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800a818:	e9d2 2300 	ldrd	r2, r3, [r2]
 800a81c:	4651      	mov	r1, sl
 800a81e:	f7f5 ff85 	bl	800072c <__aeabi_ddiv>
 800a822:	e77e      	b.n	800a722 <_strtod_l+0x3ca>
 800a824:	2300      	movs	r3, #0
 800a826:	4648      	mov	r0, r9
 800a828:	4651      	mov	r1, sl
 800a82a:	461d      	mov	r5, r3
 800a82c:	4e33      	ldr	r6, [pc, #204]	; (800a8fc <_strtod_l+0x5a4>)
 800a82e:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a832:	f1b8 0f01 	cmp.w	r8, #1
 800a836:	dc21      	bgt.n	800a87c <_strtod_l+0x524>
 800a838:	b10b      	cbz	r3, 800a83e <_strtod_l+0x4e6>
 800a83a:	4681      	mov	r9, r0
 800a83c:	468a      	mov	sl, r1
 800a83e:	4b2f      	ldr	r3, [pc, #188]	; (800a8fc <_strtod_l+0x5a4>)
 800a840:	f1aa 7a54 	sub.w	sl, sl, #55574528	; 0x3500000
 800a844:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a848:	464a      	mov	r2, r9
 800a84a:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a84e:	4653      	mov	r3, sl
 800a850:	f7f5 fe42 	bl	80004d8 <__aeabi_dmul>
 800a854:	4b2a      	ldr	r3, [pc, #168]	; (800a900 <_strtod_l+0x5a8>)
 800a856:	460a      	mov	r2, r1
 800a858:	400b      	ands	r3, r1
 800a85a:	492a      	ldr	r1, [pc, #168]	; (800a904 <_strtod_l+0x5ac>)
 800a85c:	4681      	mov	r9, r0
 800a85e:	428b      	cmp	r3, r1
 800a860:	d894      	bhi.n	800a78c <_strtod_l+0x434>
 800a862:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a866:	428b      	cmp	r3, r1
 800a868:	bf86      	itte	hi
 800a86a:	f04f 39ff 	movhi.w	r9, #4294967295
 800a86e:	f8df a09c 	ldrhi.w	sl, [pc, #156]	; 800a90c <_strtod_l+0x5b4>
 800a872:	f102 7a54 	addls.w	sl, r2, #55574528	; 0x3500000
 800a876:	2300      	movs	r3, #0
 800a878:	9305      	str	r3, [sp, #20]
 800a87a:	e07b      	b.n	800a974 <_strtod_l+0x61c>
 800a87c:	f018 0f01 	tst.w	r8, #1
 800a880:	d006      	beq.n	800a890 <_strtod_l+0x538>
 800a882:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800a886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a88a:	f7f5 fe25 	bl	80004d8 <__aeabi_dmul>
 800a88e:	2301      	movs	r3, #1
 800a890:	3501      	adds	r5, #1
 800a892:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a896:	e7cc      	b.n	800a832 <_strtod_l+0x4da>
 800a898:	d0ed      	beq.n	800a876 <_strtod_l+0x51e>
 800a89a:	f1c8 0800 	rsb	r8, r8, #0
 800a89e:	f018 020f 	ands.w	r2, r8, #15
 800a8a2:	d00a      	beq.n	800a8ba <_strtod_l+0x562>
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <_strtod_l+0x5a0>)
 800a8a6:	4648      	mov	r0, r9
 800a8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8ac:	4651      	mov	r1, sl
 800a8ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b2:	f7f5 ff3b 	bl	800072c <__aeabi_ddiv>
 800a8b6:	4681      	mov	r9, r0
 800a8b8:	468a      	mov	sl, r1
 800a8ba:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a8be:	d0da      	beq.n	800a876 <_strtod_l+0x51e>
 800a8c0:	f1b8 0f1f 	cmp.w	r8, #31
 800a8c4:	dd24      	ble.n	800a910 <_strtod_l+0x5b8>
 800a8c6:	f04f 0800 	mov.w	r8, #0
 800a8ca:	f8cd 8010 	str.w	r8, [sp, #16]
 800a8ce:	f8cd 8020 	str.w	r8, [sp, #32]
 800a8d2:	f8cd 8018 	str.w	r8, [sp, #24]
 800a8d6:	2322      	movs	r3, #34	; 0x22
 800a8d8:	f04f 0900 	mov.w	r9, #0
 800a8dc:	f04f 0a00 	mov.w	sl, #0
 800a8e0:	f8cb 3000 	str.w	r3, [fp]
 800a8e4:	e761      	b.n	800a7aa <_strtod_l+0x452>
 800a8e6:	bf00      	nop
 800a8e8:	0800dc58 	.word	0x0800dc58
 800a8ec:	0800dc5b 	.word	0x0800dc5b
 800a8f0:	0800dc61 	.word	0x0800dc61
 800a8f4:	0800dc78 	.word	0x0800dc78
 800a8f8:	0800dce8 	.word	0x0800dce8
 800a8fc:	0800dcc0 	.word	0x0800dcc0
 800a900:	7ff00000 	.word	0x7ff00000
 800a904:	7ca00000 	.word	0x7ca00000
 800a908:	fff80000 	.word	0xfff80000
 800a90c:	7fefffff 	.word	0x7fefffff
 800a910:	f018 0310 	ands.w	r3, r8, #16
 800a914:	bf18      	it	ne
 800a916:	236a      	movne	r3, #106	; 0x6a
 800a918:	4648      	mov	r0, r9
 800a91a:	9305      	str	r3, [sp, #20]
 800a91c:	4651      	mov	r1, sl
 800a91e:	2300      	movs	r3, #0
 800a920:	4da1      	ldr	r5, [pc, #644]	; (800aba8 <_strtod_l+0x850>)
 800a922:	f1b8 0f00 	cmp.w	r8, #0
 800a926:	f300 8113 	bgt.w	800ab50 <_strtod_l+0x7f8>
 800a92a:	b10b      	cbz	r3, 800a930 <_strtod_l+0x5d8>
 800a92c:	4681      	mov	r9, r0
 800a92e:	468a      	mov	sl, r1
 800a930:	9b05      	ldr	r3, [sp, #20]
 800a932:	b1bb      	cbz	r3, 800a964 <_strtod_l+0x60c>
 800a934:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800a938:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	4651      	mov	r1, sl
 800a940:	dd10      	ble.n	800a964 <_strtod_l+0x60c>
 800a942:	2b1f      	cmp	r3, #31
 800a944:	f340 8110 	ble.w	800ab68 <_strtod_l+0x810>
 800a948:	2b34      	cmp	r3, #52	; 0x34
 800a94a:	bfd8      	it	le
 800a94c:	f04f 32ff 	movle.w	r2, #4294967295
 800a950:	f04f 0900 	mov.w	r9, #0
 800a954:	bfcf      	iteee	gt
 800a956:	f04f 7a5c 	movgt.w	sl, #57671680	; 0x3700000
 800a95a:	3b20      	suble	r3, #32
 800a95c:	fa02 f303 	lslle.w	r3, r2, r3
 800a960:	ea03 0a01 	andle.w	sl, r3, r1
 800a964:	2200      	movs	r2, #0
 800a966:	2300      	movs	r3, #0
 800a968:	4648      	mov	r0, r9
 800a96a:	4651      	mov	r1, sl
 800a96c:	f7f6 f81c 	bl	80009a8 <__aeabi_dcmpeq>
 800a970:	2800      	cmp	r0, #0
 800a972:	d1a8      	bne.n	800a8c6 <_strtod_l+0x56e>
 800a974:	9b06      	ldr	r3, [sp, #24]
 800a976:	9a04      	ldr	r2, [sp, #16]
 800a978:	9300      	str	r3, [sp, #0]
 800a97a:	9908      	ldr	r1, [sp, #32]
 800a97c:	4623      	mov	r3, r4
 800a97e:	4658      	mov	r0, fp
 800a980:	f001 f81f 	bl	800b9c2 <__s2b>
 800a984:	9008      	str	r0, [sp, #32]
 800a986:	2800      	cmp	r0, #0
 800a988:	f43f af00 	beq.w	800a78c <_strtod_l+0x434>
 800a98c:	9a07      	ldr	r2, [sp, #28]
 800a98e:	9b07      	ldr	r3, [sp, #28]
 800a990:	2a00      	cmp	r2, #0
 800a992:	f1c3 0300 	rsb	r3, r3, #0
 800a996:	bfa8      	it	ge
 800a998:	2300      	movge	r3, #0
 800a99a:	f04f 0800 	mov.w	r8, #0
 800a99e:	930e      	str	r3, [sp, #56]	; 0x38
 800a9a0:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a9a4:	9316      	str	r3, [sp, #88]	; 0x58
 800a9a6:	f8cd 8010 	str.w	r8, [sp, #16]
 800a9aa:	9b08      	ldr	r3, [sp, #32]
 800a9ac:	4658      	mov	r0, fp
 800a9ae:	6859      	ldr	r1, [r3, #4]
 800a9b0:	f000 ff81 	bl	800b8b6 <_Balloc>
 800a9b4:	9006      	str	r0, [sp, #24]
 800a9b6:	2800      	cmp	r0, #0
 800a9b8:	f43f aef0 	beq.w	800a79c <_strtod_l+0x444>
 800a9bc:	9b08      	ldr	r3, [sp, #32]
 800a9be:	300c      	adds	r0, #12
 800a9c0:	691a      	ldr	r2, [r3, #16]
 800a9c2:	f103 010c 	add.w	r1, r3, #12
 800a9c6:	3202      	adds	r2, #2
 800a9c8:	0092      	lsls	r2, r2, #2
 800a9ca:	f7ff fc84 	bl	800a2d6 <memcpy>
 800a9ce:	ab1e      	add	r3, sp, #120	; 0x78
 800a9d0:	9301      	str	r3, [sp, #4]
 800a9d2:	ab1d      	add	r3, sp, #116	; 0x74
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	464a      	mov	r2, r9
 800a9d8:	4653      	mov	r3, sl
 800a9da:	4658      	mov	r0, fp
 800a9dc:	e9cd 9a0a 	strd	r9, sl, [sp, #40]	; 0x28
 800a9e0:	f001 faaa 	bl	800bf38 <__d2b>
 800a9e4:	901c      	str	r0, [sp, #112]	; 0x70
 800a9e6:	2800      	cmp	r0, #0
 800a9e8:	f43f aed8 	beq.w	800a79c <_strtod_l+0x444>
 800a9ec:	2101      	movs	r1, #1
 800a9ee:	4658      	mov	r0, fp
 800a9f0:	f001 f873 	bl	800bada <__i2b>
 800a9f4:	9004      	str	r0, [sp, #16]
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	2800      	cmp	r0, #0
 800a9fa:	f43f aecf 	beq.w	800a79c <_strtod_l+0x444>
 800a9fe:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 800aa00:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800aa02:	2d00      	cmp	r5, #0
 800aa04:	bfab      	itete	ge
 800aa06:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800aa08:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800aa0a:	18ee      	addge	r6, r5, r3
 800aa0c:	1b5c      	sublt	r4, r3, r5
 800aa0e:	9b05      	ldr	r3, [sp, #20]
 800aa10:	bfa8      	it	ge
 800aa12:	9c16      	ldrge	r4, [sp, #88]	; 0x58
 800aa14:	eba5 0503 	sub.w	r5, r5, r3
 800aa18:	4415      	add	r5, r2
 800aa1a:	4b64      	ldr	r3, [pc, #400]	; (800abac <_strtod_l+0x854>)
 800aa1c:	f105 35ff 	add.w	r5, r5, #4294967295
 800aa20:	bfb8      	it	lt
 800aa22:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800aa24:	429d      	cmp	r5, r3
 800aa26:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800aa2a:	f280 80af 	bge.w	800ab8c <_strtod_l+0x834>
 800aa2e:	1b5b      	subs	r3, r3, r5
 800aa30:	2b1f      	cmp	r3, #31
 800aa32:	eba2 0203 	sub.w	r2, r2, r3
 800aa36:	f04f 0701 	mov.w	r7, #1
 800aa3a:	f300 809c 	bgt.w	800ab76 <_strtod_l+0x81e>
 800aa3e:	2500      	movs	r5, #0
 800aa40:	fa07 f303 	lsl.w	r3, r7, r3
 800aa44:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa46:	18b7      	adds	r7, r6, r2
 800aa48:	9b05      	ldr	r3, [sp, #20]
 800aa4a:	42be      	cmp	r6, r7
 800aa4c:	4414      	add	r4, r2
 800aa4e:	441c      	add	r4, r3
 800aa50:	4633      	mov	r3, r6
 800aa52:	bfa8      	it	ge
 800aa54:	463b      	movge	r3, r7
 800aa56:	42a3      	cmp	r3, r4
 800aa58:	bfa8      	it	ge
 800aa5a:	4623      	movge	r3, r4
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfc2      	ittt	gt
 800aa60:	1aff      	subgt	r7, r7, r3
 800aa62:	1ae4      	subgt	r4, r4, r3
 800aa64:	1af6      	subgt	r6, r6, r3
 800aa66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa68:	b1bb      	cbz	r3, 800aa9a <_strtod_l+0x742>
 800aa6a:	461a      	mov	r2, r3
 800aa6c:	9904      	ldr	r1, [sp, #16]
 800aa6e:	4658      	mov	r0, fp
 800aa70:	f001 f8d2 	bl	800bc18 <__pow5mult>
 800aa74:	9004      	str	r0, [sp, #16]
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f43f ae90 	beq.w	800a79c <_strtod_l+0x444>
 800aa7c:	4601      	mov	r1, r0
 800aa7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800aa80:	4658      	mov	r0, fp
 800aa82:	f001 f833 	bl	800baec <__multiply>
 800aa86:	9009      	str	r0, [sp, #36]	; 0x24
 800aa88:	2800      	cmp	r0, #0
 800aa8a:	f43f ae87 	beq.w	800a79c <_strtod_l+0x444>
 800aa8e:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aa90:	4658      	mov	r0, fp
 800aa92:	f000 ff44 	bl	800b91e <_Bfree>
 800aa96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa98:	931c      	str	r3, [sp, #112]	; 0x70
 800aa9a:	2f00      	cmp	r7, #0
 800aa9c:	dc7a      	bgt.n	800ab94 <_strtod_l+0x83c>
 800aa9e:	9b07      	ldr	r3, [sp, #28]
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	dd08      	ble.n	800aab6 <_strtod_l+0x75e>
 800aaa4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800aaa6:	9906      	ldr	r1, [sp, #24]
 800aaa8:	4658      	mov	r0, fp
 800aaaa:	f001 f8b5 	bl	800bc18 <__pow5mult>
 800aaae:	9006      	str	r0, [sp, #24]
 800aab0:	2800      	cmp	r0, #0
 800aab2:	f43f ae73 	beq.w	800a79c <_strtod_l+0x444>
 800aab6:	2c00      	cmp	r4, #0
 800aab8:	dd08      	ble.n	800aacc <_strtod_l+0x774>
 800aaba:	4622      	mov	r2, r4
 800aabc:	9906      	ldr	r1, [sp, #24]
 800aabe:	4658      	mov	r0, fp
 800aac0:	f001 f8f8 	bl	800bcb4 <__lshift>
 800aac4:	9006      	str	r0, [sp, #24]
 800aac6:	2800      	cmp	r0, #0
 800aac8:	f43f ae68 	beq.w	800a79c <_strtod_l+0x444>
 800aacc:	2e00      	cmp	r6, #0
 800aace:	dd08      	ble.n	800aae2 <_strtod_l+0x78a>
 800aad0:	4632      	mov	r2, r6
 800aad2:	9904      	ldr	r1, [sp, #16]
 800aad4:	4658      	mov	r0, fp
 800aad6:	f001 f8ed 	bl	800bcb4 <__lshift>
 800aada:	9004      	str	r0, [sp, #16]
 800aadc:	2800      	cmp	r0, #0
 800aade:	f43f ae5d 	beq.w	800a79c <_strtod_l+0x444>
 800aae2:	9a06      	ldr	r2, [sp, #24]
 800aae4:	991c      	ldr	r1, [sp, #112]	; 0x70
 800aae6:	4658      	mov	r0, fp
 800aae8:	f001 f952 	bl	800bd90 <__mdiff>
 800aaec:	4680      	mov	r8, r0
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	f43f ae54 	beq.w	800a79c <_strtod_l+0x444>
 800aaf4:	2400      	movs	r4, #0
 800aaf6:	68c3      	ldr	r3, [r0, #12]
 800aaf8:	9904      	ldr	r1, [sp, #16]
 800aafa:	60c4      	str	r4, [r0, #12]
 800aafc:	930c      	str	r3, [sp, #48]	; 0x30
 800aafe:	f001 f92d 	bl	800bd5c <__mcmp>
 800ab02:	42a0      	cmp	r0, r4
 800ab04:	da54      	bge.n	800abb0 <_strtod_l+0x858>
 800ab06:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab08:	b9f3      	cbnz	r3, 800ab48 <_strtod_l+0x7f0>
 800ab0a:	f1b9 0f00 	cmp.w	r9, #0
 800ab0e:	d11b      	bne.n	800ab48 <_strtod_l+0x7f0>
 800ab10:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800ab14:	b9c3      	cbnz	r3, 800ab48 <_strtod_l+0x7f0>
 800ab16:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ab1a:	0d1b      	lsrs	r3, r3, #20
 800ab1c:	051b      	lsls	r3, r3, #20
 800ab1e:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ab22:	d911      	bls.n	800ab48 <_strtod_l+0x7f0>
 800ab24:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800ab28:	b91b      	cbnz	r3, 800ab32 <_strtod_l+0x7da>
 800ab2a:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ab2e:	2b01      	cmp	r3, #1
 800ab30:	dd0a      	ble.n	800ab48 <_strtod_l+0x7f0>
 800ab32:	4641      	mov	r1, r8
 800ab34:	2201      	movs	r2, #1
 800ab36:	4658      	mov	r0, fp
 800ab38:	f001 f8bc 	bl	800bcb4 <__lshift>
 800ab3c:	9904      	ldr	r1, [sp, #16]
 800ab3e:	4680      	mov	r8, r0
 800ab40:	f001 f90c 	bl	800bd5c <__mcmp>
 800ab44:	2800      	cmp	r0, #0
 800ab46:	dc68      	bgt.n	800ac1a <_strtod_l+0x8c2>
 800ab48:	9b05      	ldr	r3, [sp, #20]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d172      	bne.n	800ac34 <_strtod_l+0x8dc>
 800ab4e:	e630      	b.n	800a7b2 <_strtod_l+0x45a>
 800ab50:	f018 0f01 	tst.w	r8, #1
 800ab54:	d004      	beq.n	800ab60 <_strtod_l+0x808>
 800ab56:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab5a:	f7f5 fcbd 	bl	80004d8 <__aeabi_dmul>
 800ab5e:	2301      	movs	r3, #1
 800ab60:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab64:	3508      	adds	r5, #8
 800ab66:	e6dc      	b.n	800a922 <_strtod_l+0x5ca>
 800ab68:	f04f 32ff 	mov.w	r2, #4294967295
 800ab6c:	fa02 f303 	lsl.w	r3, r2, r3
 800ab70:	ea03 0909 	and.w	r9, r3, r9
 800ab74:	e6f6      	b.n	800a964 <_strtod_l+0x60c>
 800ab76:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ab7a:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ab7e:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ab82:	35e2      	adds	r5, #226	; 0xe2
 800ab84:	fa07 f505 	lsl.w	r5, r7, r5
 800ab88:	970f      	str	r7, [sp, #60]	; 0x3c
 800ab8a:	e75c      	b.n	800aa46 <_strtod_l+0x6ee>
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	2500      	movs	r5, #0
 800ab90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab92:	e758      	b.n	800aa46 <_strtod_l+0x6ee>
 800ab94:	463a      	mov	r2, r7
 800ab96:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ab98:	4658      	mov	r0, fp
 800ab9a:	f001 f88b 	bl	800bcb4 <__lshift>
 800ab9e:	901c      	str	r0, [sp, #112]	; 0x70
 800aba0:	2800      	cmp	r0, #0
 800aba2:	f47f af7c 	bne.w	800aa9e <_strtod_l+0x746>
 800aba6:	e5f9      	b.n	800a79c <_strtod_l+0x444>
 800aba8:	0800dc90 	.word	0x0800dc90
 800abac:	fffffc02 	.word	0xfffffc02
 800abb0:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800abb4:	f040 8089 	bne.w	800acca <_strtod_l+0x972>
 800abb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800abba:	f3ca 0313 	ubfx	r3, sl, #0, #20
 800abbe:	b342      	cbz	r2, 800ac12 <_strtod_l+0x8ba>
 800abc0:	4aaf      	ldr	r2, [pc, #700]	; (800ae80 <_strtod_l+0xb28>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d156      	bne.n	800ac74 <_strtod_l+0x91c>
 800abc6:	9b05      	ldr	r3, [sp, #20]
 800abc8:	4648      	mov	r0, r9
 800abca:	b1eb      	cbz	r3, 800ac08 <_strtod_l+0x8b0>
 800abcc:	4653      	mov	r3, sl
 800abce:	4aad      	ldr	r2, [pc, #692]	; (800ae84 <_strtod_l+0xb2c>)
 800abd0:	f04f 31ff 	mov.w	r1, #4294967295
 800abd4:	401a      	ands	r2, r3
 800abd6:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800abda:	d818      	bhi.n	800ac0e <_strtod_l+0x8b6>
 800abdc:	0d12      	lsrs	r2, r2, #20
 800abde:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800abe2:	fa01 f303 	lsl.w	r3, r1, r3
 800abe6:	4298      	cmp	r0, r3
 800abe8:	d144      	bne.n	800ac74 <_strtod_l+0x91c>
 800abea:	4ba7      	ldr	r3, [pc, #668]	; (800ae88 <_strtod_l+0xb30>)
 800abec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abee:	429a      	cmp	r2, r3
 800abf0:	d102      	bne.n	800abf8 <_strtod_l+0x8a0>
 800abf2:	3001      	adds	r0, #1
 800abf4:	f43f add2 	beq.w	800a79c <_strtod_l+0x444>
 800abf8:	4ba2      	ldr	r3, [pc, #648]	; (800ae84 <_strtod_l+0xb2c>)
 800abfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abfc:	f04f 0900 	mov.w	r9, #0
 800ac00:	401a      	ands	r2, r3
 800ac02:	f502 1a80 	add.w	sl, r2, #1048576	; 0x100000
 800ac06:	e79f      	b.n	800ab48 <_strtod_l+0x7f0>
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	e7eb      	b.n	800abe6 <_strtod_l+0x88e>
 800ac0e:	460b      	mov	r3, r1
 800ac10:	e7e9      	b.n	800abe6 <_strtod_l+0x88e>
 800ac12:	bb7b      	cbnz	r3, 800ac74 <_strtod_l+0x91c>
 800ac14:	f1b9 0f00 	cmp.w	r9, #0
 800ac18:	d12c      	bne.n	800ac74 <_strtod_l+0x91c>
 800ac1a:	9905      	ldr	r1, [sp, #20]
 800ac1c:	4653      	mov	r3, sl
 800ac1e:	4a99      	ldr	r2, [pc, #612]	; (800ae84 <_strtod_l+0xb2c>)
 800ac20:	b1f1      	cbz	r1, 800ac60 <_strtod_l+0x908>
 800ac22:	ea02 010a 	and.w	r1, r2, sl
 800ac26:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac2a:	dc19      	bgt.n	800ac60 <_strtod_l+0x908>
 800ac2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac30:	f77f ae51 	ble.w	800a8d6 <_strtod_l+0x57e>
 800ac34:	2300      	movs	r3, #0
 800ac36:	4a95      	ldr	r2, [pc, #596]	; (800ae8c <_strtod_l+0xb34>)
 800ac38:	4648      	mov	r0, r9
 800ac3a:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ac3e:	4651      	mov	r1, sl
 800ac40:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac44:	f7f5 fc48 	bl	80004d8 <__aeabi_dmul>
 800ac48:	4681      	mov	r9, r0
 800ac4a:	468a      	mov	sl, r1
 800ac4c:	2900      	cmp	r1, #0
 800ac4e:	f47f adb0 	bne.w	800a7b2 <_strtod_l+0x45a>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	f47f adad 	bne.w	800a7b2 <_strtod_l+0x45a>
 800ac58:	2322      	movs	r3, #34	; 0x22
 800ac5a:	f8cb 3000 	str.w	r3, [fp]
 800ac5e:	e5a8      	b.n	800a7b2 <_strtod_l+0x45a>
 800ac60:	4013      	ands	r3, r2
 800ac62:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac66:	ea6f 5a13 	mvn.w	sl, r3, lsr #20
 800ac6a:	f04f 39ff 	mov.w	r9, #4294967295
 800ac6e:	ea6f 5a0a 	mvn.w	sl, sl, lsl #20
 800ac72:	e769      	b.n	800ab48 <_strtod_l+0x7f0>
 800ac74:	b19d      	cbz	r5, 800ac9e <_strtod_l+0x946>
 800ac76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac78:	421d      	tst	r5, r3
 800ac7a:	f43f af65 	beq.w	800ab48 <_strtod_l+0x7f0>
 800ac7e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ac80:	9a05      	ldr	r2, [sp, #20]
 800ac82:	4648      	mov	r0, r9
 800ac84:	4651      	mov	r1, sl
 800ac86:	b173      	cbz	r3, 800aca6 <_strtod_l+0x94e>
 800ac88:	f7ff fb45 	bl	800a316 <sulp>
 800ac8c:	4602      	mov	r2, r0
 800ac8e:	460b      	mov	r3, r1
 800ac90:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ac94:	f7f5 fa6a 	bl	800016c <__adddf3>
 800ac98:	4681      	mov	r9, r0
 800ac9a:	468a      	mov	sl, r1
 800ac9c:	e754      	b.n	800ab48 <_strtod_l+0x7f0>
 800ac9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aca0:	ea13 0f09 	tst.w	r3, r9
 800aca4:	e7e9      	b.n	800ac7a <_strtod_l+0x922>
 800aca6:	f7ff fb36 	bl	800a316 <sulp>
 800acaa:	4602      	mov	r2, r0
 800acac:	460b      	mov	r3, r1
 800acae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800acb2:	f7f5 fa59 	bl	8000168 <__aeabi_dsub>
 800acb6:	2200      	movs	r2, #0
 800acb8:	2300      	movs	r3, #0
 800acba:	4681      	mov	r9, r0
 800acbc:	468a      	mov	sl, r1
 800acbe:	f7f5 fe73 	bl	80009a8 <__aeabi_dcmpeq>
 800acc2:	2800      	cmp	r0, #0
 800acc4:	f47f ae07 	bne.w	800a8d6 <_strtod_l+0x57e>
 800acc8:	e73e      	b.n	800ab48 <_strtod_l+0x7f0>
 800acca:	9904      	ldr	r1, [sp, #16]
 800accc:	4640      	mov	r0, r8
 800acce:	f001 f982 	bl	800bfd6 <__ratio>
 800acd2:	2200      	movs	r2, #0
 800acd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800acd8:	4606      	mov	r6, r0
 800acda:	460f      	mov	r7, r1
 800acdc:	f7f5 fe78 	bl	80009d0 <__aeabi_dcmple>
 800ace0:	2800      	cmp	r0, #0
 800ace2:	d075      	beq.n	800add0 <_strtod_l+0xa78>
 800ace4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d047      	beq.n	800ad7a <_strtod_l+0xa22>
 800acea:	2600      	movs	r6, #0
 800acec:	4f68      	ldr	r7, [pc, #416]	; (800ae90 <_strtod_l+0xb38>)
 800acee:	4d68      	ldr	r5, [pc, #416]	; (800ae90 <_strtod_l+0xb38>)
 800acf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acf6:	0d1b      	lsrs	r3, r3, #20
 800acf8:	051b      	lsls	r3, r3, #20
 800acfa:	930f      	str	r3, [sp, #60]	; 0x3c
 800acfc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acfe:	4b65      	ldr	r3, [pc, #404]	; (800ae94 <_strtod_l+0xb3c>)
 800ad00:	429a      	cmp	r2, r3
 800ad02:	f040 80cf 	bne.w	800aea4 <_strtod_l+0xb4c>
 800ad06:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800ad0a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ad0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad10:	4648      	mov	r0, r9
 800ad12:	f1a3 7a54 	sub.w	sl, r3, #55574528	; 0x3500000
 800ad16:	4651      	mov	r1, sl
 800ad18:	f001 f898 	bl	800be4c <__ulp>
 800ad1c:	4602      	mov	r2, r0
 800ad1e:	460b      	mov	r3, r1
 800ad20:	4630      	mov	r0, r6
 800ad22:	4639      	mov	r1, r7
 800ad24:	f7f5 fbd8 	bl	80004d8 <__aeabi_dmul>
 800ad28:	464a      	mov	r2, r9
 800ad2a:	4653      	mov	r3, sl
 800ad2c:	f7f5 fa1e 	bl	800016c <__adddf3>
 800ad30:	460b      	mov	r3, r1
 800ad32:	4954      	ldr	r1, [pc, #336]	; (800ae84 <_strtod_l+0xb2c>)
 800ad34:	4a58      	ldr	r2, [pc, #352]	; (800ae98 <_strtod_l+0xb40>)
 800ad36:	4019      	ands	r1, r3
 800ad38:	4291      	cmp	r1, r2
 800ad3a:	4681      	mov	r9, r0
 800ad3c:	d95e      	bls.n	800adfc <_strtod_l+0xaa4>
 800ad3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad40:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d103      	bne.n	800ad50 <_strtod_l+0x9f8>
 800ad48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad4a:	3301      	adds	r3, #1
 800ad4c:	f43f ad26 	beq.w	800a79c <_strtod_l+0x444>
 800ad50:	f04f 39ff 	mov.w	r9, #4294967295
 800ad54:	f8df a130 	ldr.w	sl, [pc, #304]	; 800ae88 <_strtod_l+0xb30>
 800ad58:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ad5a:	4658      	mov	r0, fp
 800ad5c:	f000 fddf 	bl	800b91e <_Bfree>
 800ad60:	9906      	ldr	r1, [sp, #24]
 800ad62:	4658      	mov	r0, fp
 800ad64:	f000 fddb 	bl	800b91e <_Bfree>
 800ad68:	9904      	ldr	r1, [sp, #16]
 800ad6a:	4658      	mov	r0, fp
 800ad6c:	f000 fdd7 	bl	800b91e <_Bfree>
 800ad70:	4641      	mov	r1, r8
 800ad72:	4658      	mov	r0, fp
 800ad74:	f000 fdd3 	bl	800b91e <_Bfree>
 800ad78:	e617      	b.n	800a9aa <_strtod_l+0x652>
 800ad7a:	f1b9 0f00 	cmp.w	r9, #0
 800ad7e:	d119      	bne.n	800adb4 <_strtod_l+0xa5c>
 800ad80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad86:	b9e3      	cbnz	r3, 800adc2 <_strtod_l+0xa6a>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	4b41      	ldr	r3, [pc, #260]	; (800ae90 <_strtod_l+0xb38>)
 800ad8c:	4630      	mov	r0, r6
 800ad8e:	4639      	mov	r1, r7
 800ad90:	f7f5 fe14 	bl	80009bc <__aeabi_dcmplt>
 800ad94:	b9c8      	cbnz	r0, 800adca <_strtod_l+0xa72>
 800ad96:	2200      	movs	r2, #0
 800ad98:	4b40      	ldr	r3, [pc, #256]	; (800ae9c <_strtod_l+0xb44>)
 800ad9a:	4630      	mov	r0, r6
 800ad9c:	4639      	mov	r1, r7
 800ad9e:	f7f5 fb9b 	bl	80004d8 <__aeabi_dmul>
 800ada2:	4604      	mov	r4, r0
 800ada4:	460d      	mov	r5, r1
 800ada6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800adaa:	9418      	str	r4, [sp, #96]	; 0x60
 800adac:	9319      	str	r3, [sp, #100]	; 0x64
 800adae:	e9dd 6718 	ldrd	r6, r7, [sp, #96]	; 0x60
 800adb2:	e79d      	b.n	800acf0 <_strtod_l+0x998>
 800adb4:	f1b9 0f01 	cmp.w	r9, #1
 800adb8:	d103      	bne.n	800adc2 <_strtod_l+0xa6a>
 800adba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f43f ad8a 	beq.w	800a8d6 <_strtod_l+0x57e>
 800adc2:	2600      	movs	r6, #0
 800adc4:	4f36      	ldr	r7, [pc, #216]	; (800aea0 <_strtod_l+0xb48>)
 800adc6:	2400      	movs	r4, #0
 800adc8:	e791      	b.n	800acee <_strtod_l+0x996>
 800adca:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800adcc:	4d33      	ldr	r5, [pc, #204]	; (800ae9c <_strtod_l+0xb44>)
 800adce:	e7ea      	b.n	800ada6 <_strtod_l+0xa4e>
 800add0:	4b32      	ldr	r3, [pc, #200]	; (800ae9c <_strtod_l+0xb44>)
 800add2:	2200      	movs	r2, #0
 800add4:	4630      	mov	r0, r6
 800add6:	4639      	mov	r1, r7
 800add8:	f7f5 fb7e 	bl	80004d8 <__aeabi_dmul>
 800addc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800adde:	4604      	mov	r4, r0
 800ade0:	460d      	mov	r5, r1
 800ade2:	b933      	cbnz	r3, 800adf2 <_strtod_l+0xa9a>
 800ade4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ade8:	9010      	str	r0, [sp, #64]	; 0x40
 800adea:	9311      	str	r3, [sp, #68]	; 0x44
 800adec:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800adf0:	e77e      	b.n	800acf0 <_strtod_l+0x998>
 800adf2:	4602      	mov	r2, r0
 800adf4:	460b      	mov	r3, r1
 800adf6:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800adfa:	e7f7      	b.n	800adec <_strtod_l+0xa94>
 800adfc:	f103 7a54 	add.w	sl, r3, #55574528	; 0x3500000
 800ae00:	9b05      	ldr	r3, [sp, #20]
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d1a8      	bne.n	800ad58 <_strtod_l+0xa00>
 800ae06:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 800ae0a:	0d1b      	lsrs	r3, r3, #20
 800ae0c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae0e:	051b      	lsls	r3, r3, #20
 800ae10:	429a      	cmp	r2, r3
 800ae12:	4656      	mov	r6, sl
 800ae14:	d1a0      	bne.n	800ad58 <_strtod_l+0xa00>
 800ae16:	4629      	mov	r1, r5
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f7f5 fe0d 	bl	8000a38 <__aeabi_d2iz>
 800ae1e:	f7f5 faf1 	bl	8000404 <__aeabi_i2d>
 800ae22:	460b      	mov	r3, r1
 800ae24:	4602      	mov	r2, r0
 800ae26:	4629      	mov	r1, r5
 800ae28:	4620      	mov	r0, r4
 800ae2a:	f7f5 f99d 	bl	8000168 <__aeabi_dsub>
 800ae2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ae30:	4604      	mov	r4, r0
 800ae32:	460d      	mov	r5, r1
 800ae34:	b933      	cbnz	r3, 800ae44 <_strtod_l+0xaec>
 800ae36:	f1b9 0f00 	cmp.w	r9, #0
 800ae3a:	d103      	bne.n	800ae44 <_strtod_l+0xaec>
 800ae3c:	f3ca 0613 	ubfx	r6, sl, #0, #20
 800ae40:	2e00      	cmp	r6, #0
 800ae42:	d06a      	beq.n	800af1a <_strtod_l+0xbc2>
 800ae44:	a30a      	add	r3, pc, #40	; (adr r3, 800ae70 <_strtod_l+0xb18>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 fdb5 	bl	80009bc <__aeabi_dcmplt>
 800ae52:	2800      	cmp	r0, #0
 800ae54:	f47f acad 	bne.w	800a7b2 <_strtod_l+0x45a>
 800ae58:	a307      	add	r3, pc, #28	; (adr r3, 800ae78 <_strtod_l+0xb20>)
 800ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae5e:	4620      	mov	r0, r4
 800ae60:	4629      	mov	r1, r5
 800ae62:	f7f5 fdc9 	bl	80009f8 <__aeabi_dcmpgt>
 800ae66:	2800      	cmp	r0, #0
 800ae68:	f43f af76 	beq.w	800ad58 <_strtod_l+0xa00>
 800ae6c:	e4a1      	b.n	800a7b2 <_strtod_l+0x45a>
 800ae6e:	bf00      	nop
 800ae70:	94a03595 	.word	0x94a03595
 800ae74:	3fdfffff 	.word	0x3fdfffff
 800ae78:	35afe535 	.word	0x35afe535
 800ae7c:	3fe00000 	.word	0x3fe00000
 800ae80:	000fffff 	.word	0x000fffff
 800ae84:	7ff00000 	.word	0x7ff00000
 800ae88:	7fefffff 	.word	0x7fefffff
 800ae8c:	39500000 	.word	0x39500000
 800ae90:	3ff00000 	.word	0x3ff00000
 800ae94:	7fe00000 	.word	0x7fe00000
 800ae98:	7c9fffff 	.word	0x7c9fffff
 800ae9c:	3fe00000 	.word	0x3fe00000
 800aea0:	bff00000 	.word	0xbff00000
 800aea4:	9b05      	ldr	r3, [sp, #20]
 800aea6:	b313      	cbz	r3, 800aeee <_strtod_l+0xb96>
 800aea8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aeaa:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aeae:	d81e      	bhi.n	800aeee <_strtod_l+0xb96>
 800aeb0:	a325      	add	r3, pc, #148	; (adr r3, 800af48 <_strtod_l+0xbf0>)
 800aeb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	4629      	mov	r1, r5
 800aeba:	f7f5 fd89 	bl	80009d0 <__aeabi_dcmple>
 800aebe:	b190      	cbz	r0, 800aee6 <_strtod_l+0xb8e>
 800aec0:	4629      	mov	r1, r5
 800aec2:	4620      	mov	r0, r4
 800aec4:	f7f5 fde0 	bl	8000a88 <__aeabi_d2uiz>
 800aec8:	2800      	cmp	r0, #0
 800aeca:	bf08      	it	eq
 800aecc:	2001      	moveq	r0, #1
 800aece:	f7f5 fa89 	bl	80003e4 <__aeabi_ui2d>
 800aed2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800aed4:	4604      	mov	r4, r0
 800aed6:	460d      	mov	r5, r1
 800aed8:	b9d3      	cbnz	r3, 800af10 <_strtod_l+0xbb8>
 800aeda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aede:	9012      	str	r0, [sp, #72]	; 0x48
 800aee0:	9313      	str	r3, [sp, #76]	; 0x4c
 800aee2:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800aee6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800aee8:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800aeec:	1a9f      	subs	r7, r3, r2
 800aeee:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800aef2:	f000 ffab 	bl	800be4c <__ulp>
 800aef6:	4602      	mov	r2, r0
 800aef8:	460b      	mov	r3, r1
 800aefa:	4630      	mov	r0, r6
 800aefc:	4639      	mov	r1, r7
 800aefe:	f7f5 faeb 	bl	80004d8 <__aeabi_dmul>
 800af02:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800af06:	f7f5 f931 	bl	800016c <__adddf3>
 800af0a:	4681      	mov	r9, r0
 800af0c:	468a      	mov	sl, r1
 800af0e:	e777      	b.n	800ae00 <_strtod_l+0xaa8>
 800af10:	4602      	mov	r2, r0
 800af12:	460b      	mov	r3, r1
 800af14:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800af18:	e7e3      	b.n	800aee2 <_strtod_l+0xb8a>
 800af1a:	a30d      	add	r3, pc, #52	; (adr r3, 800af50 <_strtod_l+0xbf8>)
 800af1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af20:	f7f5 fd4c 	bl	80009bc <__aeabi_dcmplt>
 800af24:	e79f      	b.n	800ae66 <_strtod_l+0xb0e>
 800af26:	2300      	movs	r3, #0
 800af28:	930d      	str	r3, [sp, #52]	; 0x34
 800af2a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800af2c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af2e:	6013      	str	r3, [r2, #0]
 800af30:	f7ff ba55 	b.w	800a3de <_strtod_l+0x86>
 800af34:	2b65      	cmp	r3, #101	; 0x65
 800af36:	f04f 0200 	mov.w	r2, #0
 800af3a:	f43f ab42 	beq.w	800a5c2 <_strtod_l+0x26a>
 800af3e:	2101      	movs	r1, #1
 800af40:	4614      	mov	r4, r2
 800af42:	9105      	str	r1, [sp, #20]
 800af44:	f7ff babf 	b.w	800a4c6 <_strtod_l+0x16e>
 800af48:	ffc00000 	.word	0xffc00000
 800af4c:	41dfffff 	.word	0x41dfffff
 800af50:	94a03595 	.word	0x94a03595
 800af54:	3fcfffff 	.word	0x3fcfffff

0800af58 <strtof>:
 800af58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af5c:	4e21      	ldr	r6, [pc, #132]	; (800afe4 <strtof+0x8c>)
 800af5e:	4a22      	ldr	r2, [pc, #136]	; (800afe8 <strtof+0x90>)
 800af60:	6834      	ldr	r4, [r6, #0]
 800af62:	6a23      	ldr	r3, [r4, #32]
 800af64:	2b00      	cmp	r3, #0
 800af66:	bf08      	it	eq
 800af68:	4613      	moveq	r3, r2
 800af6a:	460a      	mov	r2, r1
 800af6c:	4601      	mov	r1, r0
 800af6e:	4620      	mov	r0, r4
 800af70:	f7ff f9f2 	bl	800a358 <_strtod_l>
 800af74:	4605      	mov	r5, r0
 800af76:	460c      	mov	r4, r1
 800af78:	4602      	mov	r2, r0
 800af7a:	460b      	mov	r3, r1
 800af7c:	4628      	mov	r0, r5
 800af7e:	4621      	mov	r1, r4
 800af80:	f7f5 fd44 	bl	8000a0c <__aeabi_dcmpun>
 800af84:	b120      	cbz	r0, 800af90 <strtof+0x38>
 800af86:	2000      	movs	r0, #0
 800af88:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af8c:	f001 b904 	b.w	800c198 <nanf>
 800af90:	4621      	mov	r1, r4
 800af92:	4628      	mov	r0, r5
 800af94:	f7f5 fd98 	bl	8000ac8 <__aeabi_d2f>
 800af98:	f020 4800 	bic.w	r8, r0, #2147483648	; 0x80000000
 800af9c:	4607      	mov	r7, r0
 800af9e:	4913      	ldr	r1, [pc, #76]	; (800afec <strtof+0x94>)
 800afa0:	4640      	mov	r0, r8
 800afa2:	f7f6 f8b5 	bl	8001110 <__aeabi_fcmpun>
 800afa6:	b9c8      	cbnz	r0, 800afdc <strtof+0x84>
 800afa8:	4910      	ldr	r1, [pc, #64]	; (800afec <strtof+0x94>)
 800afaa:	4640      	mov	r0, r8
 800afac:	f7f6 f892 	bl	80010d4 <__aeabi_fcmple>
 800afb0:	b9a0      	cbnz	r0, 800afdc <strtof+0x84>
 800afb2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800afb6:	f04f 32ff 	mov.w	r2, #4294967295
 800afba:	4b0d      	ldr	r3, [pc, #52]	; (800aff0 <strtof+0x98>)
 800afbc:	4628      	mov	r0, r5
 800afbe:	4621      	mov	r1, r4
 800afc0:	f7f5 fd24 	bl	8000a0c <__aeabi_dcmpun>
 800afc4:	b938      	cbnz	r0, 800afd6 <strtof+0x7e>
 800afc6:	f04f 32ff 	mov.w	r2, #4294967295
 800afca:	4b09      	ldr	r3, [pc, #36]	; (800aff0 <strtof+0x98>)
 800afcc:	4628      	mov	r0, r5
 800afce:	4621      	mov	r1, r4
 800afd0:	f7f5 fcfe 	bl	80009d0 <__aeabi_dcmple>
 800afd4:	b110      	cbz	r0, 800afdc <strtof+0x84>
 800afd6:	2222      	movs	r2, #34	; 0x22
 800afd8:	6833      	ldr	r3, [r6, #0]
 800afda:	601a      	str	r2, [r3, #0]
 800afdc:	4638      	mov	r0, r7
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	bf00      	nop
 800afe4:	200003dc 	.word	0x200003dc
 800afe8:	20000440 	.word	0x20000440
 800afec:	7f7fffff 	.word	0x7f7fffff
 800aff0:	7fefffff 	.word	0x7fefffff

0800aff4 <_strtol_l.isra.0>:
 800aff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aff8:	4680      	mov	r8, r0
 800affa:	4689      	mov	r9, r1
 800affc:	4692      	mov	sl, r2
 800affe:	461e      	mov	r6, r3
 800b000:	460f      	mov	r7, r1
 800b002:	463d      	mov	r5, r7
 800b004:	9808      	ldr	r0, [sp, #32]
 800b006:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b00a:	f000 fc3d 	bl	800b888 <__locale_ctype_ptr_l>
 800b00e:	4420      	add	r0, r4
 800b010:	7843      	ldrb	r3, [r0, #1]
 800b012:	f013 0308 	ands.w	r3, r3, #8
 800b016:	d132      	bne.n	800b07e <_strtol_l.isra.0+0x8a>
 800b018:	2c2d      	cmp	r4, #45	; 0x2d
 800b01a:	d132      	bne.n	800b082 <_strtol_l.isra.0+0x8e>
 800b01c:	2201      	movs	r2, #1
 800b01e:	787c      	ldrb	r4, [r7, #1]
 800b020:	1cbd      	adds	r5, r7, #2
 800b022:	2e00      	cmp	r6, #0
 800b024:	d05d      	beq.n	800b0e2 <_strtol_l.isra.0+0xee>
 800b026:	2e10      	cmp	r6, #16
 800b028:	d109      	bne.n	800b03e <_strtol_l.isra.0+0x4a>
 800b02a:	2c30      	cmp	r4, #48	; 0x30
 800b02c:	d107      	bne.n	800b03e <_strtol_l.isra.0+0x4a>
 800b02e:	782b      	ldrb	r3, [r5, #0]
 800b030:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b034:	2b58      	cmp	r3, #88	; 0x58
 800b036:	d14f      	bne.n	800b0d8 <_strtol_l.isra.0+0xe4>
 800b038:	2610      	movs	r6, #16
 800b03a:	786c      	ldrb	r4, [r5, #1]
 800b03c:	3502      	adds	r5, #2
 800b03e:	2a00      	cmp	r2, #0
 800b040:	bf14      	ite	ne
 800b042:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800b046:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800b04a:	2700      	movs	r7, #0
 800b04c:	fbb1 fcf6 	udiv	ip, r1, r6
 800b050:	4638      	mov	r0, r7
 800b052:	fb06 1e1c 	mls	lr, r6, ip, r1
 800b056:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800b05a:	2b09      	cmp	r3, #9
 800b05c:	d817      	bhi.n	800b08e <_strtol_l.isra.0+0x9a>
 800b05e:	461c      	mov	r4, r3
 800b060:	42a6      	cmp	r6, r4
 800b062:	dd23      	ble.n	800b0ac <_strtol_l.isra.0+0xb8>
 800b064:	1c7b      	adds	r3, r7, #1
 800b066:	d007      	beq.n	800b078 <_strtol_l.isra.0+0x84>
 800b068:	4584      	cmp	ip, r0
 800b06a:	d31c      	bcc.n	800b0a6 <_strtol_l.isra.0+0xb2>
 800b06c:	d101      	bne.n	800b072 <_strtol_l.isra.0+0x7e>
 800b06e:	45a6      	cmp	lr, r4
 800b070:	db19      	blt.n	800b0a6 <_strtol_l.isra.0+0xb2>
 800b072:	2701      	movs	r7, #1
 800b074:	fb00 4006 	mla	r0, r0, r6, r4
 800b078:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b07c:	e7eb      	b.n	800b056 <_strtol_l.isra.0+0x62>
 800b07e:	462f      	mov	r7, r5
 800b080:	e7bf      	b.n	800b002 <_strtol_l.isra.0+0xe>
 800b082:	2c2b      	cmp	r4, #43	; 0x2b
 800b084:	bf04      	itt	eq
 800b086:	1cbd      	addeq	r5, r7, #2
 800b088:	787c      	ldrbeq	r4, [r7, #1]
 800b08a:	461a      	mov	r2, r3
 800b08c:	e7c9      	b.n	800b022 <_strtol_l.isra.0+0x2e>
 800b08e:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800b092:	2b19      	cmp	r3, #25
 800b094:	d801      	bhi.n	800b09a <_strtol_l.isra.0+0xa6>
 800b096:	3c37      	subs	r4, #55	; 0x37
 800b098:	e7e2      	b.n	800b060 <_strtol_l.isra.0+0x6c>
 800b09a:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800b09e:	2b19      	cmp	r3, #25
 800b0a0:	d804      	bhi.n	800b0ac <_strtol_l.isra.0+0xb8>
 800b0a2:	3c57      	subs	r4, #87	; 0x57
 800b0a4:	e7dc      	b.n	800b060 <_strtol_l.isra.0+0x6c>
 800b0a6:	f04f 37ff 	mov.w	r7, #4294967295
 800b0aa:	e7e5      	b.n	800b078 <_strtol_l.isra.0+0x84>
 800b0ac:	1c7b      	adds	r3, r7, #1
 800b0ae:	d108      	bne.n	800b0c2 <_strtol_l.isra.0+0xce>
 800b0b0:	2322      	movs	r3, #34	; 0x22
 800b0b2:	4608      	mov	r0, r1
 800b0b4:	f8c8 3000 	str.w	r3, [r8]
 800b0b8:	f1ba 0f00 	cmp.w	sl, #0
 800b0bc:	d107      	bne.n	800b0ce <_strtol_l.isra.0+0xda>
 800b0be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0c2:	b102      	cbz	r2, 800b0c6 <_strtol_l.isra.0+0xd2>
 800b0c4:	4240      	negs	r0, r0
 800b0c6:	f1ba 0f00 	cmp.w	sl, #0
 800b0ca:	d0f8      	beq.n	800b0be <_strtol_l.isra.0+0xca>
 800b0cc:	b10f      	cbz	r7, 800b0d2 <_strtol_l.isra.0+0xde>
 800b0ce:	f105 39ff 	add.w	r9, r5, #4294967295
 800b0d2:	f8ca 9000 	str.w	r9, [sl]
 800b0d6:	e7f2      	b.n	800b0be <_strtol_l.isra.0+0xca>
 800b0d8:	2430      	movs	r4, #48	; 0x30
 800b0da:	2e00      	cmp	r6, #0
 800b0dc:	d1af      	bne.n	800b03e <_strtol_l.isra.0+0x4a>
 800b0de:	2608      	movs	r6, #8
 800b0e0:	e7ad      	b.n	800b03e <_strtol_l.isra.0+0x4a>
 800b0e2:	2c30      	cmp	r4, #48	; 0x30
 800b0e4:	d0a3      	beq.n	800b02e <_strtol_l.isra.0+0x3a>
 800b0e6:	260a      	movs	r6, #10
 800b0e8:	e7a9      	b.n	800b03e <_strtol_l.isra.0+0x4a>
	...

0800b0ec <strtol>:
 800b0ec:	4b08      	ldr	r3, [pc, #32]	; (800b110 <strtol+0x24>)
 800b0ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b0f0:	681c      	ldr	r4, [r3, #0]
 800b0f2:	4d08      	ldr	r5, [pc, #32]	; (800b114 <strtol+0x28>)
 800b0f4:	6a23      	ldr	r3, [r4, #32]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	bf08      	it	eq
 800b0fa:	462b      	moveq	r3, r5
 800b0fc:	9300      	str	r3, [sp, #0]
 800b0fe:	4613      	mov	r3, r2
 800b100:	460a      	mov	r2, r1
 800b102:	4601      	mov	r1, r0
 800b104:	4620      	mov	r0, r4
 800b106:	f7ff ff75 	bl	800aff4 <_strtol_l.isra.0>
 800b10a:	b003      	add	sp, #12
 800b10c:	bd30      	pop	{r4, r5, pc}
 800b10e:	bf00      	nop
 800b110:	200003dc 	.word	0x200003dc
 800b114:	20000440 	.word	0x20000440

0800b118 <_strtoul_l.isra.0>:
 800b118:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b11c:	4680      	mov	r8, r0
 800b11e:	4689      	mov	r9, r1
 800b120:	4692      	mov	sl, r2
 800b122:	461e      	mov	r6, r3
 800b124:	460f      	mov	r7, r1
 800b126:	463d      	mov	r5, r7
 800b128:	9808      	ldr	r0, [sp, #32]
 800b12a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b12e:	f000 fbab 	bl	800b888 <__locale_ctype_ptr_l>
 800b132:	4420      	add	r0, r4
 800b134:	7843      	ldrb	r3, [r0, #1]
 800b136:	f013 0308 	ands.w	r3, r3, #8
 800b13a:	d130      	bne.n	800b19e <_strtoul_l.isra.0+0x86>
 800b13c:	2c2d      	cmp	r4, #45	; 0x2d
 800b13e:	d130      	bne.n	800b1a2 <_strtoul_l.isra.0+0x8a>
 800b140:	2101      	movs	r1, #1
 800b142:	787c      	ldrb	r4, [r7, #1]
 800b144:	1cbd      	adds	r5, r7, #2
 800b146:	2e00      	cmp	r6, #0
 800b148:	d05c      	beq.n	800b204 <_strtoul_l.isra.0+0xec>
 800b14a:	2e10      	cmp	r6, #16
 800b14c:	d109      	bne.n	800b162 <_strtoul_l.isra.0+0x4a>
 800b14e:	2c30      	cmp	r4, #48	; 0x30
 800b150:	d107      	bne.n	800b162 <_strtoul_l.isra.0+0x4a>
 800b152:	782b      	ldrb	r3, [r5, #0]
 800b154:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b158:	2b58      	cmp	r3, #88	; 0x58
 800b15a:	d14e      	bne.n	800b1fa <_strtoul_l.isra.0+0xe2>
 800b15c:	2610      	movs	r6, #16
 800b15e:	786c      	ldrb	r4, [r5, #1]
 800b160:	3502      	adds	r5, #2
 800b162:	f04f 32ff 	mov.w	r2, #4294967295
 800b166:	fbb2 f2f6 	udiv	r2, r2, r6
 800b16a:	2300      	movs	r3, #0
 800b16c:	fb06 fc02 	mul.w	ip, r6, r2
 800b170:	4618      	mov	r0, r3
 800b172:	ea6f 0c0c 	mvn.w	ip, ip
 800b176:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b17a:	2f09      	cmp	r7, #9
 800b17c:	d817      	bhi.n	800b1ae <_strtoul_l.isra.0+0x96>
 800b17e:	463c      	mov	r4, r7
 800b180:	42a6      	cmp	r6, r4
 800b182:	dd23      	ble.n	800b1cc <_strtoul_l.isra.0+0xb4>
 800b184:	2b00      	cmp	r3, #0
 800b186:	db1e      	blt.n	800b1c6 <_strtoul_l.isra.0+0xae>
 800b188:	4282      	cmp	r2, r0
 800b18a:	d31c      	bcc.n	800b1c6 <_strtoul_l.isra.0+0xae>
 800b18c:	d101      	bne.n	800b192 <_strtoul_l.isra.0+0x7a>
 800b18e:	45a4      	cmp	ip, r4
 800b190:	db19      	blt.n	800b1c6 <_strtoul_l.isra.0+0xae>
 800b192:	2301      	movs	r3, #1
 800b194:	fb00 4006 	mla	r0, r0, r6, r4
 800b198:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b19c:	e7eb      	b.n	800b176 <_strtoul_l.isra.0+0x5e>
 800b19e:	462f      	mov	r7, r5
 800b1a0:	e7c1      	b.n	800b126 <_strtoul_l.isra.0+0xe>
 800b1a2:	2c2b      	cmp	r4, #43	; 0x2b
 800b1a4:	bf04      	itt	eq
 800b1a6:	1cbd      	addeq	r5, r7, #2
 800b1a8:	787c      	ldrbeq	r4, [r7, #1]
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	e7cb      	b.n	800b146 <_strtoul_l.isra.0+0x2e>
 800b1ae:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b1b2:	2f19      	cmp	r7, #25
 800b1b4:	d801      	bhi.n	800b1ba <_strtoul_l.isra.0+0xa2>
 800b1b6:	3c37      	subs	r4, #55	; 0x37
 800b1b8:	e7e2      	b.n	800b180 <_strtoul_l.isra.0+0x68>
 800b1ba:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b1be:	2f19      	cmp	r7, #25
 800b1c0:	d804      	bhi.n	800b1cc <_strtoul_l.isra.0+0xb4>
 800b1c2:	3c57      	subs	r4, #87	; 0x57
 800b1c4:	e7dc      	b.n	800b180 <_strtoul_l.isra.0+0x68>
 800b1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800b1ca:	e7e5      	b.n	800b198 <_strtoul_l.isra.0+0x80>
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	da09      	bge.n	800b1e4 <_strtoul_l.isra.0+0xcc>
 800b1d0:	2322      	movs	r3, #34	; 0x22
 800b1d2:	f04f 30ff 	mov.w	r0, #4294967295
 800b1d6:	f8c8 3000 	str.w	r3, [r8]
 800b1da:	f1ba 0f00 	cmp.w	sl, #0
 800b1de:	d107      	bne.n	800b1f0 <_strtoul_l.isra.0+0xd8>
 800b1e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b1e4:	b101      	cbz	r1, 800b1e8 <_strtoul_l.isra.0+0xd0>
 800b1e6:	4240      	negs	r0, r0
 800b1e8:	f1ba 0f00 	cmp.w	sl, #0
 800b1ec:	d0f8      	beq.n	800b1e0 <_strtoul_l.isra.0+0xc8>
 800b1ee:	b10b      	cbz	r3, 800b1f4 <_strtoul_l.isra.0+0xdc>
 800b1f0:	f105 39ff 	add.w	r9, r5, #4294967295
 800b1f4:	f8ca 9000 	str.w	r9, [sl]
 800b1f8:	e7f2      	b.n	800b1e0 <_strtoul_l.isra.0+0xc8>
 800b1fa:	2430      	movs	r4, #48	; 0x30
 800b1fc:	2e00      	cmp	r6, #0
 800b1fe:	d1b0      	bne.n	800b162 <_strtoul_l.isra.0+0x4a>
 800b200:	2608      	movs	r6, #8
 800b202:	e7ae      	b.n	800b162 <_strtoul_l.isra.0+0x4a>
 800b204:	2c30      	cmp	r4, #48	; 0x30
 800b206:	d0a4      	beq.n	800b152 <_strtoul_l.isra.0+0x3a>
 800b208:	260a      	movs	r6, #10
 800b20a:	e7aa      	b.n	800b162 <_strtoul_l.isra.0+0x4a>

0800b20c <strtoul>:
 800b20c:	4b08      	ldr	r3, [pc, #32]	; (800b230 <strtoul+0x24>)
 800b20e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b210:	681c      	ldr	r4, [r3, #0]
 800b212:	4d08      	ldr	r5, [pc, #32]	; (800b234 <strtoul+0x28>)
 800b214:	6a23      	ldr	r3, [r4, #32]
 800b216:	2b00      	cmp	r3, #0
 800b218:	bf08      	it	eq
 800b21a:	462b      	moveq	r3, r5
 800b21c:	9300      	str	r3, [sp, #0]
 800b21e:	4613      	mov	r3, r2
 800b220:	460a      	mov	r2, r1
 800b222:	4601      	mov	r1, r0
 800b224:	4620      	mov	r0, r4
 800b226:	f7ff ff77 	bl	800b118 <_strtoul_l.isra.0>
 800b22a:	b003      	add	sp, #12
 800b22c:	bd30      	pop	{r4, r5, pc}
 800b22e:	bf00      	nop
 800b230:	200003dc 	.word	0x200003dc
 800b234:	20000440 	.word	0x20000440

0800b238 <rshift>:
 800b238:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b23a:	6906      	ldr	r6, [r0, #16]
 800b23c:	114b      	asrs	r3, r1, #5
 800b23e:	429e      	cmp	r6, r3
 800b240:	f100 0414 	add.w	r4, r0, #20
 800b244:	dd31      	ble.n	800b2aa <rshift+0x72>
 800b246:	f011 011f 	ands.w	r1, r1, #31
 800b24a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800b24e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800b252:	d108      	bne.n	800b266 <rshift+0x2e>
 800b254:	4621      	mov	r1, r4
 800b256:	42b2      	cmp	r2, r6
 800b258:	460b      	mov	r3, r1
 800b25a:	d211      	bcs.n	800b280 <rshift+0x48>
 800b25c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b260:	f841 3b04 	str.w	r3, [r1], #4
 800b264:	e7f7      	b.n	800b256 <rshift+0x1e>
 800b266:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800b26a:	4623      	mov	r3, r4
 800b26c:	f1c1 0c20 	rsb	ip, r1, #32
 800b270:	40cd      	lsrs	r5, r1
 800b272:	3204      	adds	r2, #4
 800b274:	42b2      	cmp	r2, r6
 800b276:	4617      	mov	r7, r2
 800b278:	d30d      	bcc.n	800b296 <rshift+0x5e>
 800b27a:	601d      	str	r5, [r3, #0]
 800b27c:	b105      	cbz	r5, 800b280 <rshift+0x48>
 800b27e:	3304      	adds	r3, #4
 800b280:	42a3      	cmp	r3, r4
 800b282:	eba3 0204 	sub.w	r2, r3, r4
 800b286:	bf08      	it	eq
 800b288:	2300      	moveq	r3, #0
 800b28a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b28e:	6102      	str	r2, [r0, #16]
 800b290:	bf08      	it	eq
 800b292:	6143      	streq	r3, [r0, #20]
 800b294:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b296:	683f      	ldr	r7, [r7, #0]
 800b298:	fa07 f70c 	lsl.w	r7, r7, ip
 800b29c:	433d      	orrs	r5, r7
 800b29e:	f843 5b04 	str.w	r5, [r3], #4
 800b2a2:	f852 5b04 	ldr.w	r5, [r2], #4
 800b2a6:	40cd      	lsrs	r5, r1
 800b2a8:	e7e4      	b.n	800b274 <rshift+0x3c>
 800b2aa:	4623      	mov	r3, r4
 800b2ac:	e7e8      	b.n	800b280 <rshift+0x48>

0800b2ae <__hexdig_fun>:
 800b2ae:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b2b2:	2b09      	cmp	r3, #9
 800b2b4:	d802      	bhi.n	800b2bc <__hexdig_fun+0xe>
 800b2b6:	3820      	subs	r0, #32
 800b2b8:	b2c0      	uxtb	r0, r0
 800b2ba:	4770      	bx	lr
 800b2bc:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b2c0:	2b05      	cmp	r3, #5
 800b2c2:	d801      	bhi.n	800b2c8 <__hexdig_fun+0x1a>
 800b2c4:	3847      	subs	r0, #71	; 0x47
 800b2c6:	e7f7      	b.n	800b2b8 <__hexdig_fun+0xa>
 800b2c8:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b2cc:	2b05      	cmp	r3, #5
 800b2ce:	d801      	bhi.n	800b2d4 <__hexdig_fun+0x26>
 800b2d0:	3827      	subs	r0, #39	; 0x27
 800b2d2:	e7f1      	b.n	800b2b8 <__hexdig_fun+0xa>
 800b2d4:	2000      	movs	r0, #0
 800b2d6:	4770      	bx	lr

0800b2d8 <__gethex>:
 800b2d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2dc:	b08b      	sub	sp, #44	; 0x2c
 800b2de:	9002      	str	r0, [sp, #8]
 800b2e0:	9816      	ldr	r0, [sp, #88]	; 0x58
 800b2e2:	468a      	mov	sl, r1
 800b2e4:	4690      	mov	r8, r2
 800b2e6:	9306      	str	r3, [sp, #24]
 800b2e8:	f000 fad1 	bl	800b88e <__localeconv_l>
 800b2ec:	6803      	ldr	r3, [r0, #0]
 800b2ee:	f04f 0b00 	mov.w	fp, #0
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	9303      	str	r3, [sp, #12]
 800b2f6:	f7f4 ff2b 	bl	8000150 <strlen>
 800b2fa:	9b03      	ldr	r3, [sp, #12]
 800b2fc:	9001      	str	r0, [sp, #4]
 800b2fe:	4403      	add	r3, r0
 800b300:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b304:	9307      	str	r3, [sp, #28]
 800b306:	f8da 3000 	ldr.w	r3, [sl]
 800b30a:	3302      	adds	r3, #2
 800b30c:	461f      	mov	r7, r3
 800b30e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b312:	2830      	cmp	r0, #48	; 0x30
 800b314:	d06c      	beq.n	800b3f0 <__gethex+0x118>
 800b316:	f7ff ffca 	bl	800b2ae <__hexdig_fun>
 800b31a:	4604      	mov	r4, r0
 800b31c:	2800      	cmp	r0, #0
 800b31e:	d16a      	bne.n	800b3f6 <__gethex+0x11e>
 800b320:	9a01      	ldr	r2, [sp, #4]
 800b322:	9903      	ldr	r1, [sp, #12]
 800b324:	4638      	mov	r0, r7
 800b326:	f000 ff3b 	bl	800c1a0 <strncmp>
 800b32a:	2800      	cmp	r0, #0
 800b32c:	d166      	bne.n	800b3fc <__gethex+0x124>
 800b32e:	9b01      	ldr	r3, [sp, #4]
 800b330:	5cf8      	ldrb	r0, [r7, r3]
 800b332:	18fe      	adds	r6, r7, r3
 800b334:	f7ff ffbb 	bl	800b2ae <__hexdig_fun>
 800b338:	2800      	cmp	r0, #0
 800b33a:	d062      	beq.n	800b402 <__gethex+0x12a>
 800b33c:	4633      	mov	r3, r6
 800b33e:	7818      	ldrb	r0, [r3, #0]
 800b340:	461f      	mov	r7, r3
 800b342:	2830      	cmp	r0, #48	; 0x30
 800b344:	f103 0301 	add.w	r3, r3, #1
 800b348:	d0f9      	beq.n	800b33e <__gethex+0x66>
 800b34a:	f7ff ffb0 	bl	800b2ae <__hexdig_fun>
 800b34e:	fab0 f580 	clz	r5, r0
 800b352:	4634      	mov	r4, r6
 800b354:	f04f 0b01 	mov.w	fp, #1
 800b358:	096d      	lsrs	r5, r5, #5
 800b35a:	463a      	mov	r2, r7
 800b35c:	4616      	mov	r6, r2
 800b35e:	7830      	ldrb	r0, [r6, #0]
 800b360:	3201      	adds	r2, #1
 800b362:	f7ff ffa4 	bl	800b2ae <__hexdig_fun>
 800b366:	2800      	cmp	r0, #0
 800b368:	d1f8      	bne.n	800b35c <__gethex+0x84>
 800b36a:	9a01      	ldr	r2, [sp, #4]
 800b36c:	9903      	ldr	r1, [sp, #12]
 800b36e:	4630      	mov	r0, r6
 800b370:	f000 ff16 	bl	800c1a0 <strncmp>
 800b374:	b950      	cbnz	r0, 800b38c <__gethex+0xb4>
 800b376:	b954      	cbnz	r4, 800b38e <__gethex+0xb6>
 800b378:	9b01      	ldr	r3, [sp, #4]
 800b37a:	18f4      	adds	r4, r6, r3
 800b37c:	4622      	mov	r2, r4
 800b37e:	4616      	mov	r6, r2
 800b380:	7830      	ldrb	r0, [r6, #0]
 800b382:	3201      	adds	r2, #1
 800b384:	f7ff ff93 	bl	800b2ae <__hexdig_fun>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1f8      	bne.n	800b37e <__gethex+0xa6>
 800b38c:	b10c      	cbz	r4, 800b392 <__gethex+0xba>
 800b38e:	1ba4      	subs	r4, r4, r6
 800b390:	00a4      	lsls	r4, r4, #2
 800b392:	7833      	ldrb	r3, [r6, #0]
 800b394:	2b50      	cmp	r3, #80	; 0x50
 800b396:	d001      	beq.n	800b39c <__gethex+0xc4>
 800b398:	2b70      	cmp	r3, #112	; 0x70
 800b39a:	d140      	bne.n	800b41e <__gethex+0x146>
 800b39c:	7873      	ldrb	r3, [r6, #1]
 800b39e:	2b2b      	cmp	r3, #43	; 0x2b
 800b3a0:	d031      	beq.n	800b406 <__gethex+0x12e>
 800b3a2:	2b2d      	cmp	r3, #45	; 0x2d
 800b3a4:	d033      	beq.n	800b40e <__gethex+0x136>
 800b3a6:	f04f 0900 	mov.w	r9, #0
 800b3aa:	1c71      	adds	r1, r6, #1
 800b3ac:	7808      	ldrb	r0, [r1, #0]
 800b3ae:	f7ff ff7e 	bl	800b2ae <__hexdig_fun>
 800b3b2:	1e43      	subs	r3, r0, #1
 800b3b4:	b2db      	uxtb	r3, r3
 800b3b6:	2b18      	cmp	r3, #24
 800b3b8:	d831      	bhi.n	800b41e <__gethex+0x146>
 800b3ba:	f1a0 0210 	sub.w	r2, r0, #16
 800b3be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b3c2:	f7ff ff74 	bl	800b2ae <__hexdig_fun>
 800b3c6:	1e43      	subs	r3, r0, #1
 800b3c8:	b2db      	uxtb	r3, r3
 800b3ca:	2b18      	cmp	r3, #24
 800b3cc:	d922      	bls.n	800b414 <__gethex+0x13c>
 800b3ce:	f1b9 0f00 	cmp.w	r9, #0
 800b3d2:	d000      	beq.n	800b3d6 <__gethex+0xfe>
 800b3d4:	4252      	negs	r2, r2
 800b3d6:	4414      	add	r4, r2
 800b3d8:	f8ca 1000 	str.w	r1, [sl]
 800b3dc:	b30d      	cbz	r5, 800b422 <__gethex+0x14a>
 800b3de:	f1bb 0f00 	cmp.w	fp, #0
 800b3e2:	bf0c      	ite	eq
 800b3e4:	2706      	moveq	r7, #6
 800b3e6:	2700      	movne	r7, #0
 800b3e8:	4638      	mov	r0, r7
 800b3ea:	b00b      	add	sp, #44	; 0x2c
 800b3ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3f0:	f10b 0b01 	add.w	fp, fp, #1
 800b3f4:	e78a      	b.n	800b30c <__gethex+0x34>
 800b3f6:	2500      	movs	r5, #0
 800b3f8:	462c      	mov	r4, r5
 800b3fa:	e7ae      	b.n	800b35a <__gethex+0x82>
 800b3fc:	463e      	mov	r6, r7
 800b3fe:	2501      	movs	r5, #1
 800b400:	e7c7      	b.n	800b392 <__gethex+0xba>
 800b402:	4604      	mov	r4, r0
 800b404:	e7fb      	b.n	800b3fe <__gethex+0x126>
 800b406:	f04f 0900 	mov.w	r9, #0
 800b40a:	1cb1      	adds	r1, r6, #2
 800b40c:	e7ce      	b.n	800b3ac <__gethex+0xd4>
 800b40e:	f04f 0901 	mov.w	r9, #1
 800b412:	e7fa      	b.n	800b40a <__gethex+0x132>
 800b414:	230a      	movs	r3, #10
 800b416:	fb03 0202 	mla	r2, r3, r2, r0
 800b41a:	3a10      	subs	r2, #16
 800b41c:	e7cf      	b.n	800b3be <__gethex+0xe6>
 800b41e:	4631      	mov	r1, r6
 800b420:	e7da      	b.n	800b3d8 <__gethex+0x100>
 800b422:	4629      	mov	r1, r5
 800b424:	1bf3      	subs	r3, r6, r7
 800b426:	3b01      	subs	r3, #1
 800b428:	2b07      	cmp	r3, #7
 800b42a:	dc49      	bgt.n	800b4c0 <__gethex+0x1e8>
 800b42c:	9802      	ldr	r0, [sp, #8]
 800b42e:	f000 fa42 	bl	800b8b6 <_Balloc>
 800b432:	f04f 0b00 	mov.w	fp, #0
 800b436:	4605      	mov	r5, r0
 800b438:	46da      	mov	sl, fp
 800b43a:	9b01      	ldr	r3, [sp, #4]
 800b43c:	f100 0914 	add.w	r9, r0, #20
 800b440:	f1c3 0301 	rsb	r3, r3, #1
 800b444:	f8cd 9010 	str.w	r9, [sp, #16]
 800b448:	9308      	str	r3, [sp, #32]
 800b44a:	42b7      	cmp	r7, r6
 800b44c:	d33b      	bcc.n	800b4c6 <__gethex+0x1ee>
 800b44e:	9804      	ldr	r0, [sp, #16]
 800b450:	f840 ab04 	str.w	sl, [r0], #4
 800b454:	eba0 0009 	sub.w	r0, r0, r9
 800b458:	1080      	asrs	r0, r0, #2
 800b45a:	6128      	str	r0, [r5, #16]
 800b45c:	0147      	lsls	r7, r0, #5
 800b45e:	4650      	mov	r0, sl
 800b460:	f000 faed 	bl	800ba3e <__hi0bits>
 800b464:	f8d8 6000 	ldr.w	r6, [r8]
 800b468:	1a3f      	subs	r7, r7, r0
 800b46a:	42b7      	cmp	r7, r6
 800b46c:	dd64      	ble.n	800b538 <__gethex+0x260>
 800b46e:	1bbf      	subs	r7, r7, r6
 800b470:	4639      	mov	r1, r7
 800b472:	4628      	mov	r0, r5
 800b474:	f000 fdf7 	bl	800c066 <__any_on>
 800b478:	4682      	mov	sl, r0
 800b47a:	b178      	cbz	r0, 800b49c <__gethex+0x1c4>
 800b47c:	f04f 0a01 	mov.w	sl, #1
 800b480:	1e7b      	subs	r3, r7, #1
 800b482:	1159      	asrs	r1, r3, #5
 800b484:	f003 021f 	and.w	r2, r3, #31
 800b488:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b48c:	fa0a f202 	lsl.w	r2, sl, r2
 800b490:	420a      	tst	r2, r1
 800b492:	d003      	beq.n	800b49c <__gethex+0x1c4>
 800b494:	4553      	cmp	r3, sl
 800b496:	dc46      	bgt.n	800b526 <__gethex+0x24e>
 800b498:	f04f 0a02 	mov.w	sl, #2
 800b49c:	4639      	mov	r1, r7
 800b49e:	4628      	mov	r0, r5
 800b4a0:	f7ff feca 	bl	800b238 <rshift>
 800b4a4:	443c      	add	r4, r7
 800b4a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b4aa:	42a3      	cmp	r3, r4
 800b4ac:	da52      	bge.n	800b554 <__gethex+0x27c>
 800b4ae:	4629      	mov	r1, r5
 800b4b0:	9802      	ldr	r0, [sp, #8]
 800b4b2:	f000 fa34 	bl	800b91e <_Bfree>
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b4ba:	27a3      	movs	r7, #163	; 0xa3
 800b4bc:	6013      	str	r3, [r2, #0]
 800b4be:	e793      	b.n	800b3e8 <__gethex+0x110>
 800b4c0:	3101      	adds	r1, #1
 800b4c2:	105b      	asrs	r3, r3, #1
 800b4c4:	e7b0      	b.n	800b428 <__gethex+0x150>
 800b4c6:	1e73      	subs	r3, r6, #1
 800b4c8:	9305      	str	r3, [sp, #20]
 800b4ca:	9a07      	ldr	r2, [sp, #28]
 800b4cc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b4d0:	4293      	cmp	r3, r2
 800b4d2:	d018      	beq.n	800b506 <__gethex+0x22e>
 800b4d4:	f1bb 0f20 	cmp.w	fp, #32
 800b4d8:	d107      	bne.n	800b4ea <__gethex+0x212>
 800b4da:	9b04      	ldr	r3, [sp, #16]
 800b4dc:	f8c3 a000 	str.w	sl, [r3]
 800b4e0:	f04f 0a00 	mov.w	sl, #0
 800b4e4:	46d3      	mov	fp, sl
 800b4e6:	3304      	adds	r3, #4
 800b4e8:	9304      	str	r3, [sp, #16]
 800b4ea:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b4ee:	f7ff fede 	bl	800b2ae <__hexdig_fun>
 800b4f2:	f000 000f 	and.w	r0, r0, #15
 800b4f6:	fa00 f00b 	lsl.w	r0, r0, fp
 800b4fa:	ea4a 0a00 	orr.w	sl, sl, r0
 800b4fe:	f10b 0b04 	add.w	fp, fp, #4
 800b502:	9b05      	ldr	r3, [sp, #20]
 800b504:	e00d      	b.n	800b522 <__gethex+0x24a>
 800b506:	9b05      	ldr	r3, [sp, #20]
 800b508:	9a08      	ldr	r2, [sp, #32]
 800b50a:	4413      	add	r3, r2
 800b50c:	42bb      	cmp	r3, r7
 800b50e:	d3e1      	bcc.n	800b4d4 <__gethex+0x1fc>
 800b510:	4618      	mov	r0, r3
 800b512:	9a01      	ldr	r2, [sp, #4]
 800b514:	9903      	ldr	r1, [sp, #12]
 800b516:	9309      	str	r3, [sp, #36]	; 0x24
 800b518:	f000 fe42 	bl	800c1a0 <strncmp>
 800b51c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51e:	2800      	cmp	r0, #0
 800b520:	d1d8      	bne.n	800b4d4 <__gethex+0x1fc>
 800b522:	461e      	mov	r6, r3
 800b524:	e791      	b.n	800b44a <__gethex+0x172>
 800b526:	1eb9      	subs	r1, r7, #2
 800b528:	4628      	mov	r0, r5
 800b52a:	f000 fd9c 	bl	800c066 <__any_on>
 800b52e:	2800      	cmp	r0, #0
 800b530:	d0b2      	beq.n	800b498 <__gethex+0x1c0>
 800b532:	f04f 0a03 	mov.w	sl, #3
 800b536:	e7b1      	b.n	800b49c <__gethex+0x1c4>
 800b538:	da09      	bge.n	800b54e <__gethex+0x276>
 800b53a:	1bf7      	subs	r7, r6, r7
 800b53c:	4629      	mov	r1, r5
 800b53e:	463a      	mov	r2, r7
 800b540:	9802      	ldr	r0, [sp, #8]
 800b542:	f000 fbb7 	bl	800bcb4 <__lshift>
 800b546:	4605      	mov	r5, r0
 800b548:	1be4      	subs	r4, r4, r7
 800b54a:	f100 0914 	add.w	r9, r0, #20
 800b54e:	f04f 0a00 	mov.w	sl, #0
 800b552:	e7a8      	b.n	800b4a6 <__gethex+0x1ce>
 800b554:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b558:	42a0      	cmp	r0, r4
 800b55a:	dd6b      	ble.n	800b634 <__gethex+0x35c>
 800b55c:	1b04      	subs	r4, r0, r4
 800b55e:	42a6      	cmp	r6, r4
 800b560:	dc2e      	bgt.n	800b5c0 <__gethex+0x2e8>
 800b562:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b566:	2b02      	cmp	r3, #2
 800b568:	d022      	beq.n	800b5b0 <__gethex+0x2d8>
 800b56a:	2b03      	cmp	r3, #3
 800b56c:	d024      	beq.n	800b5b8 <__gethex+0x2e0>
 800b56e:	2b01      	cmp	r3, #1
 800b570:	d115      	bne.n	800b59e <__gethex+0x2c6>
 800b572:	42a6      	cmp	r6, r4
 800b574:	d113      	bne.n	800b59e <__gethex+0x2c6>
 800b576:	2e01      	cmp	r6, #1
 800b578:	dc0b      	bgt.n	800b592 <__gethex+0x2ba>
 800b57a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b57e:	9a06      	ldr	r2, [sp, #24]
 800b580:	2762      	movs	r7, #98	; 0x62
 800b582:	6013      	str	r3, [r2, #0]
 800b584:	2301      	movs	r3, #1
 800b586:	612b      	str	r3, [r5, #16]
 800b588:	f8c9 3000 	str.w	r3, [r9]
 800b58c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b58e:	601d      	str	r5, [r3, #0]
 800b590:	e72a      	b.n	800b3e8 <__gethex+0x110>
 800b592:	1e71      	subs	r1, r6, #1
 800b594:	4628      	mov	r0, r5
 800b596:	f000 fd66 	bl	800c066 <__any_on>
 800b59a:	2800      	cmp	r0, #0
 800b59c:	d1ed      	bne.n	800b57a <__gethex+0x2a2>
 800b59e:	4629      	mov	r1, r5
 800b5a0:	9802      	ldr	r0, [sp, #8]
 800b5a2:	f000 f9bc 	bl	800b91e <_Bfree>
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b5aa:	2750      	movs	r7, #80	; 0x50
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e71b      	b.n	800b3e8 <__gethex+0x110>
 800b5b0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d0e1      	beq.n	800b57a <__gethex+0x2a2>
 800b5b6:	e7f2      	b.n	800b59e <__gethex+0x2c6>
 800b5b8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d1dd      	bne.n	800b57a <__gethex+0x2a2>
 800b5be:	e7ee      	b.n	800b59e <__gethex+0x2c6>
 800b5c0:	1e67      	subs	r7, r4, #1
 800b5c2:	f1ba 0f00 	cmp.w	sl, #0
 800b5c6:	d132      	bne.n	800b62e <__gethex+0x356>
 800b5c8:	b127      	cbz	r7, 800b5d4 <__gethex+0x2fc>
 800b5ca:	4639      	mov	r1, r7
 800b5cc:	4628      	mov	r0, r5
 800b5ce:	f000 fd4a 	bl	800c066 <__any_on>
 800b5d2:	4682      	mov	sl, r0
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	117a      	asrs	r2, r7, #5
 800b5d8:	f007 071f 	and.w	r7, r7, #31
 800b5dc:	fa03 f707 	lsl.w	r7, r3, r7
 800b5e0:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800b5e4:	4621      	mov	r1, r4
 800b5e6:	421f      	tst	r7, r3
 800b5e8:	f04f 0702 	mov.w	r7, #2
 800b5ec:	4628      	mov	r0, r5
 800b5ee:	bf18      	it	ne
 800b5f0:	f04a 0a02 	orrne.w	sl, sl, #2
 800b5f4:	1b36      	subs	r6, r6, r4
 800b5f6:	f7ff fe1f 	bl	800b238 <rshift>
 800b5fa:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800b5fe:	f1ba 0f00 	cmp.w	sl, #0
 800b602:	d048      	beq.n	800b696 <__gethex+0x3be>
 800b604:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b608:	2b02      	cmp	r3, #2
 800b60a:	d015      	beq.n	800b638 <__gethex+0x360>
 800b60c:	2b03      	cmp	r3, #3
 800b60e:	d017      	beq.n	800b640 <__gethex+0x368>
 800b610:	2b01      	cmp	r3, #1
 800b612:	d109      	bne.n	800b628 <__gethex+0x350>
 800b614:	f01a 0f02 	tst.w	sl, #2
 800b618:	d006      	beq.n	800b628 <__gethex+0x350>
 800b61a:	f8d9 3000 	ldr.w	r3, [r9]
 800b61e:	ea4a 0a03 	orr.w	sl, sl, r3
 800b622:	f01a 0f01 	tst.w	sl, #1
 800b626:	d10e      	bne.n	800b646 <__gethex+0x36e>
 800b628:	f047 0710 	orr.w	r7, r7, #16
 800b62c:	e033      	b.n	800b696 <__gethex+0x3be>
 800b62e:	f04f 0a01 	mov.w	sl, #1
 800b632:	e7cf      	b.n	800b5d4 <__gethex+0x2fc>
 800b634:	2701      	movs	r7, #1
 800b636:	e7e2      	b.n	800b5fe <__gethex+0x326>
 800b638:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b63a:	f1c3 0301 	rsb	r3, r3, #1
 800b63e:	9315      	str	r3, [sp, #84]	; 0x54
 800b640:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b642:	2b00      	cmp	r3, #0
 800b644:	d0f0      	beq.n	800b628 <__gethex+0x350>
 800b646:	f04f 0c00 	mov.w	ip, #0
 800b64a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800b64e:	f105 0314 	add.w	r3, r5, #20
 800b652:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800b656:	eb03 010a 	add.w	r1, r3, sl
 800b65a:	4618      	mov	r0, r3
 800b65c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b660:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b664:	d01c      	beq.n	800b6a0 <__gethex+0x3c8>
 800b666:	3201      	adds	r2, #1
 800b668:	6002      	str	r2, [r0, #0]
 800b66a:	2f02      	cmp	r7, #2
 800b66c:	f105 0314 	add.w	r3, r5, #20
 800b670:	d138      	bne.n	800b6e4 <__gethex+0x40c>
 800b672:	f8d8 2000 	ldr.w	r2, [r8]
 800b676:	3a01      	subs	r2, #1
 800b678:	42b2      	cmp	r2, r6
 800b67a:	d10a      	bne.n	800b692 <__gethex+0x3ba>
 800b67c:	2201      	movs	r2, #1
 800b67e:	1171      	asrs	r1, r6, #5
 800b680:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b684:	f006 061f 	and.w	r6, r6, #31
 800b688:	fa02 f606 	lsl.w	r6, r2, r6
 800b68c:	421e      	tst	r6, r3
 800b68e:	bf18      	it	ne
 800b690:	4617      	movne	r7, r2
 800b692:	f047 0720 	orr.w	r7, r7, #32
 800b696:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b698:	601d      	str	r5, [r3, #0]
 800b69a:	9b06      	ldr	r3, [sp, #24]
 800b69c:	601c      	str	r4, [r3, #0]
 800b69e:	e6a3      	b.n	800b3e8 <__gethex+0x110>
 800b6a0:	4299      	cmp	r1, r3
 800b6a2:	f843 cc04 	str.w	ip, [r3, #-4]
 800b6a6:	d8d8      	bhi.n	800b65a <__gethex+0x382>
 800b6a8:	68ab      	ldr	r3, [r5, #8]
 800b6aa:	4599      	cmp	r9, r3
 800b6ac:	db12      	blt.n	800b6d4 <__gethex+0x3fc>
 800b6ae:	6869      	ldr	r1, [r5, #4]
 800b6b0:	9802      	ldr	r0, [sp, #8]
 800b6b2:	3101      	adds	r1, #1
 800b6b4:	f000 f8ff 	bl	800b8b6 <_Balloc>
 800b6b8:	4683      	mov	fp, r0
 800b6ba:	692a      	ldr	r2, [r5, #16]
 800b6bc:	f105 010c 	add.w	r1, r5, #12
 800b6c0:	3202      	adds	r2, #2
 800b6c2:	0092      	lsls	r2, r2, #2
 800b6c4:	300c      	adds	r0, #12
 800b6c6:	f7fe fe06 	bl	800a2d6 <memcpy>
 800b6ca:	4629      	mov	r1, r5
 800b6cc:	9802      	ldr	r0, [sp, #8]
 800b6ce:	f000 f926 	bl	800b91e <_Bfree>
 800b6d2:	465d      	mov	r5, fp
 800b6d4:	692b      	ldr	r3, [r5, #16]
 800b6d6:	1c5a      	adds	r2, r3, #1
 800b6d8:	612a      	str	r2, [r5, #16]
 800b6da:	2201      	movs	r2, #1
 800b6dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800b6e0:	615a      	str	r2, [r3, #20]
 800b6e2:	e7c2      	b.n	800b66a <__gethex+0x392>
 800b6e4:	692a      	ldr	r2, [r5, #16]
 800b6e6:	454a      	cmp	r2, r9
 800b6e8:	dd0b      	ble.n	800b702 <__gethex+0x42a>
 800b6ea:	2101      	movs	r1, #1
 800b6ec:	4628      	mov	r0, r5
 800b6ee:	f7ff fda3 	bl	800b238 <rshift>
 800b6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b6f6:	3401      	adds	r4, #1
 800b6f8:	42a3      	cmp	r3, r4
 800b6fa:	f6ff aed8 	blt.w	800b4ae <__gethex+0x1d6>
 800b6fe:	2701      	movs	r7, #1
 800b700:	e7c7      	b.n	800b692 <__gethex+0x3ba>
 800b702:	f016 061f 	ands.w	r6, r6, #31
 800b706:	d0fa      	beq.n	800b6fe <__gethex+0x426>
 800b708:	449a      	add	sl, r3
 800b70a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800b70e:	f000 f996 	bl	800ba3e <__hi0bits>
 800b712:	f1c6 0620 	rsb	r6, r6, #32
 800b716:	42b0      	cmp	r0, r6
 800b718:	dbe7      	blt.n	800b6ea <__gethex+0x412>
 800b71a:	e7f0      	b.n	800b6fe <__gethex+0x426>

0800b71c <L_shift>:
 800b71c:	f1c2 0208 	rsb	r2, r2, #8
 800b720:	0092      	lsls	r2, r2, #2
 800b722:	b570      	push	{r4, r5, r6, lr}
 800b724:	f1c2 0620 	rsb	r6, r2, #32
 800b728:	6843      	ldr	r3, [r0, #4]
 800b72a:	6804      	ldr	r4, [r0, #0]
 800b72c:	fa03 f506 	lsl.w	r5, r3, r6
 800b730:	432c      	orrs	r4, r5
 800b732:	40d3      	lsrs	r3, r2
 800b734:	6004      	str	r4, [r0, #0]
 800b736:	f840 3f04 	str.w	r3, [r0, #4]!
 800b73a:	4288      	cmp	r0, r1
 800b73c:	d3f4      	bcc.n	800b728 <L_shift+0xc>
 800b73e:	bd70      	pop	{r4, r5, r6, pc}

0800b740 <__match>:
 800b740:	b530      	push	{r4, r5, lr}
 800b742:	6803      	ldr	r3, [r0, #0]
 800b744:	3301      	adds	r3, #1
 800b746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b74a:	b914      	cbnz	r4, 800b752 <__match+0x12>
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	2001      	movs	r0, #1
 800b750:	bd30      	pop	{r4, r5, pc}
 800b752:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b756:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b75a:	2d19      	cmp	r5, #25
 800b75c:	bf98      	it	ls
 800b75e:	3220      	addls	r2, #32
 800b760:	42a2      	cmp	r2, r4
 800b762:	d0f0      	beq.n	800b746 <__match+0x6>
 800b764:	2000      	movs	r0, #0
 800b766:	e7f3      	b.n	800b750 <__match+0x10>

0800b768 <__hexnan>:
 800b768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b76c:	2500      	movs	r5, #0
 800b76e:	680b      	ldr	r3, [r1, #0]
 800b770:	4682      	mov	sl, r0
 800b772:	115f      	asrs	r7, r3, #5
 800b774:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800b778:	f013 031f 	ands.w	r3, r3, #31
 800b77c:	bf18      	it	ne
 800b77e:	3704      	addne	r7, #4
 800b780:	1f3e      	subs	r6, r7, #4
 800b782:	4690      	mov	r8, r2
 800b784:	46b1      	mov	r9, r6
 800b786:	4634      	mov	r4, r6
 800b788:	46ab      	mov	fp, r5
 800b78a:	b087      	sub	sp, #28
 800b78c:	6801      	ldr	r1, [r0, #0]
 800b78e:	9301      	str	r3, [sp, #4]
 800b790:	f847 5c04 	str.w	r5, [r7, #-4]
 800b794:	9502      	str	r5, [sp, #8]
 800b796:	784a      	ldrb	r2, [r1, #1]
 800b798:	1c4b      	adds	r3, r1, #1
 800b79a:	9303      	str	r3, [sp, #12]
 800b79c:	b342      	cbz	r2, 800b7f0 <__hexnan+0x88>
 800b79e:	4610      	mov	r0, r2
 800b7a0:	9105      	str	r1, [sp, #20]
 800b7a2:	9204      	str	r2, [sp, #16]
 800b7a4:	f7ff fd83 	bl	800b2ae <__hexdig_fun>
 800b7a8:	2800      	cmp	r0, #0
 800b7aa:	d143      	bne.n	800b834 <__hexnan+0xcc>
 800b7ac:	9a04      	ldr	r2, [sp, #16]
 800b7ae:	9905      	ldr	r1, [sp, #20]
 800b7b0:	2a20      	cmp	r2, #32
 800b7b2:	d818      	bhi.n	800b7e6 <__hexnan+0x7e>
 800b7b4:	9b02      	ldr	r3, [sp, #8]
 800b7b6:	459b      	cmp	fp, r3
 800b7b8:	dd13      	ble.n	800b7e2 <__hexnan+0x7a>
 800b7ba:	454c      	cmp	r4, r9
 800b7bc:	d206      	bcs.n	800b7cc <__hexnan+0x64>
 800b7be:	2d07      	cmp	r5, #7
 800b7c0:	dc04      	bgt.n	800b7cc <__hexnan+0x64>
 800b7c2:	462a      	mov	r2, r5
 800b7c4:	4649      	mov	r1, r9
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f7ff ffa8 	bl	800b71c <L_shift>
 800b7cc:	4544      	cmp	r4, r8
 800b7ce:	d944      	bls.n	800b85a <__hexnan+0xf2>
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	f1a4 0904 	sub.w	r9, r4, #4
 800b7d6:	f844 3c04 	str.w	r3, [r4, #-4]
 800b7da:	461d      	mov	r5, r3
 800b7dc:	464c      	mov	r4, r9
 800b7de:	f8cd b008 	str.w	fp, [sp, #8]
 800b7e2:	9903      	ldr	r1, [sp, #12]
 800b7e4:	e7d7      	b.n	800b796 <__hexnan+0x2e>
 800b7e6:	2a29      	cmp	r2, #41	; 0x29
 800b7e8:	d14a      	bne.n	800b880 <__hexnan+0x118>
 800b7ea:	3102      	adds	r1, #2
 800b7ec:	f8ca 1000 	str.w	r1, [sl]
 800b7f0:	f1bb 0f00 	cmp.w	fp, #0
 800b7f4:	d044      	beq.n	800b880 <__hexnan+0x118>
 800b7f6:	454c      	cmp	r4, r9
 800b7f8:	d206      	bcs.n	800b808 <__hexnan+0xa0>
 800b7fa:	2d07      	cmp	r5, #7
 800b7fc:	dc04      	bgt.n	800b808 <__hexnan+0xa0>
 800b7fe:	462a      	mov	r2, r5
 800b800:	4649      	mov	r1, r9
 800b802:	4620      	mov	r0, r4
 800b804:	f7ff ff8a 	bl	800b71c <L_shift>
 800b808:	4544      	cmp	r4, r8
 800b80a:	d928      	bls.n	800b85e <__hexnan+0xf6>
 800b80c:	4643      	mov	r3, r8
 800b80e:	f854 2b04 	ldr.w	r2, [r4], #4
 800b812:	42a6      	cmp	r6, r4
 800b814:	f843 2b04 	str.w	r2, [r3], #4
 800b818:	d2f9      	bcs.n	800b80e <__hexnan+0xa6>
 800b81a:	2200      	movs	r2, #0
 800b81c:	f843 2b04 	str.w	r2, [r3], #4
 800b820:	429e      	cmp	r6, r3
 800b822:	d2fb      	bcs.n	800b81c <__hexnan+0xb4>
 800b824:	6833      	ldr	r3, [r6, #0]
 800b826:	b91b      	cbnz	r3, 800b830 <__hexnan+0xc8>
 800b828:	4546      	cmp	r6, r8
 800b82a:	d127      	bne.n	800b87c <__hexnan+0x114>
 800b82c:	2301      	movs	r3, #1
 800b82e:	6033      	str	r3, [r6, #0]
 800b830:	2005      	movs	r0, #5
 800b832:	e026      	b.n	800b882 <__hexnan+0x11a>
 800b834:	3501      	adds	r5, #1
 800b836:	2d08      	cmp	r5, #8
 800b838:	f10b 0b01 	add.w	fp, fp, #1
 800b83c:	dd06      	ble.n	800b84c <__hexnan+0xe4>
 800b83e:	4544      	cmp	r4, r8
 800b840:	d9cf      	bls.n	800b7e2 <__hexnan+0x7a>
 800b842:	2300      	movs	r3, #0
 800b844:	2501      	movs	r5, #1
 800b846:	f844 3c04 	str.w	r3, [r4, #-4]
 800b84a:	3c04      	subs	r4, #4
 800b84c:	6822      	ldr	r2, [r4, #0]
 800b84e:	f000 000f 	and.w	r0, r0, #15
 800b852:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b856:	6020      	str	r0, [r4, #0]
 800b858:	e7c3      	b.n	800b7e2 <__hexnan+0x7a>
 800b85a:	2508      	movs	r5, #8
 800b85c:	e7c1      	b.n	800b7e2 <__hexnan+0x7a>
 800b85e:	9b01      	ldr	r3, [sp, #4]
 800b860:	2b00      	cmp	r3, #0
 800b862:	d0df      	beq.n	800b824 <__hexnan+0xbc>
 800b864:	f04f 32ff 	mov.w	r2, #4294967295
 800b868:	f1c3 0320 	rsb	r3, r3, #32
 800b86c:	fa22 f303 	lsr.w	r3, r2, r3
 800b870:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800b874:	401a      	ands	r2, r3
 800b876:	f847 2c04 	str.w	r2, [r7, #-4]
 800b87a:	e7d3      	b.n	800b824 <__hexnan+0xbc>
 800b87c:	3e04      	subs	r6, #4
 800b87e:	e7d1      	b.n	800b824 <__hexnan+0xbc>
 800b880:	2004      	movs	r0, #4
 800b882:	b007      	add	sp, #28
 800b884:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b888 <__locale_ctype_ptr_l>:
 800b888:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800b88c:	4770      	bx	lr

0800b88e <__localeconv_l>:
 800b88e:	30f0      	adds	r0, #240	; 0xf0
 800b890:	4770      	bx	lr

0800b892 <__ascii_mbtowc>:
 800b892:	b082      	sub	sp, #8
 800b894:	b901      	cbnz	r1, 800b898 <__ascii_mbtowc+0x6>
 800b896:	a901      	add	r1, sp, #4
 800b898:	b142      	cbz	r2, 800b8ac <__ascii_mbtowc+0x1a>
 800b89a:	b14b      	cbz	r3, 800b8b0 <__ascii_mbtowc+0x1e>
 800b89c:	7813      	ldrb	r3, [r2, #0]
 800b89e:	600b      	str	r3, [r1, #0]
 800b8a0:	7812      	ldrb	r2, [r2, #0]
 800b8a2:	1c10      	adds	r0, r2, #0
 800b8a4:	bf18      	it	ne
 800b8a6:	2001      	movne	r0, #1
 800b8a8:	b002      	add	sp, #8
 800b8aa:	4770      	bx	lr
 800b8ac:	4610      	mov	r0, r2
 800b8ae:	e7fb      	b.n	800b8a8 <__ascii_mbtowc+0x16>
 800b8b0:	f06f 0001 	mvn.w	r0, #1
 800b8b4:	e7f8      	b.n	800b8a8 <__ascii_mbtowc+0x16>

0800b8b6 <_Balloc>:
 800b8b6:	b570      	push	{r4, r5, r6, lr}
 800b8b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800b8ba:	4604      	mov	r4, r0
 800b8bc:	460e      	mov	r6, r1
 800b8be:	b93d      	cbnz	r5, 800b8d0 <_Balloc+0x1a>
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f000 fc8d 	bl	800c1e0 <malloc>
 800b8c6:	6260      	str	r0, [r4, #36]	; 0x24
 800b8c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b8cc:	6005      	str	r5, [r0, #0]
 800b8ce:	60c5      	str	r5, [r0, #12]
 800b8d0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800b8d2:	68eb      	ldr	r3, [r5, #12]
 800b8d4:	b183      	cbz	r3, 800b8f8 <_Balloc+0x42>
 800b8d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b8d8:	68db      	ldr	r3, [r3, #12]
 800b8da:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800b8de:	b9b8      	cbnz	r0, 800b910 <_Balloc+0x5a>
 800b8e0:	2101      	movs	r1, #1
 800b8e2:	fa01 f506 	lsl.w	r5, r1, r6
 800b8e6:	1d6a      	adds	r2, r5, #5
 800b8e8:	0092      	lsls	r2, r2, #2
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fbdc 	bl	800c0a8 <_calloc_r>
 800b8f0:	b160      	cbz	r0, 800b90c <_Balloc+0x56>
 800b8f2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800b8f6:	e00e      	b.n	800b916 <_Balloc+0x60>
 800b8f8:	2221      	movs	r2, #33	; 0x21
 800b8fa:	2104      	movs	r1, #4
 800b8fc:	4620      	mov	r0, r4
 800b8fe:	f000 fbd3 	bl	800c0a8 <_calloc_r>
 800b902:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b904:	60e8      	str	r0, [r5, #12]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d1e4      	bne.n	800b8d6 <_Balloc+0x20>
 800b90c:	2000      	movs	r0, #0
 800b90e:	bd70      	pop	{r4, r5, r6, pc}
 800b910:	6802      	ldr	r2, [r0, #0]
 800b912:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800b916:	2300      	movs	r3, #0
 800b918:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b91c:	e7f7      	b.n	800b90e <_Balloc+0x58>

0800b91e <_Bfree>:
 800b91e:	b570      	push	{r4, r5, r6, lr}
 800b920:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b922:	4606      	mov	r6, r0
 800b924:	460d      	mov	r5, r1
 800b926:	b93c      	cbnz	r4, 800b938 <_Bfree+0x1a>
 800b928:	2010      	movs	r0, #16
 800b92a:	f000 fc59 	bl	800c1e0 <malloc>
 800b92e:	6270      	str	r0, [r6, #36]	; 0x24
 800b930:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b934:	6004      	str	r4, [r0, #0]
 800b936:	60c4      	str	r4, [r0, #12]
 800b938:	b13d      	cbz	r5, 800b94a <_Bfree+0x2c>
 800b93a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800b93c:	686a      	ldr	r2, [r5, #4]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b944:	6029      	str	r1, [r5, #0]
 800b946:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800b94a:	bd70      	pop	{r4, r5, r6, pc}

0800b94c <__multadd>:
 800b94c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b950:	461f      	mov	r7, r3
 800b952:	4606      	mov	r6, r0
 800b954:	460c      	mov	r4, r1
 800b956:	2300      	movs	r3, #0
 800b958:	690d      	ldr	r5, [r1, #16]
 800b95a:	f101 0c14 	add.w	ip, r1, #20
 800b95e:	f8dc 0000 	ldr.w	r0, [ip]
 800b962:	3301      	adds	r3, #1
 800b964:	b281      	uxth	r1, r0
 800b966:	fb02 7101 	mla	r1, r2, r1, r7
 800b96a:	0c00      	lsrs	r0, r0, #16
 800b96c:	0c0f      	lsrs	r7, r1, #16
 800b96e:	fb02 7000 	mla	r0, r2, r0, r7
 800b972:	b289      	uxth	r1, r1
 800b974:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800b978:	429d      	cmp	r5, r3
 800b97a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800b97e:	f84c 1b04 	str.w	r1, [ip], #4
 800b982:	dcec      	bgt.n	800b95e <__multadd+0x12>
 800b984:	b1d7      	cbz	r7, 800b9bc <__multadd+0x70>
 800b986:	68a3      	ldr	r3, [r4, #8]
 800b988:	42ab      	cmp	r3, r5
 800b98a:	dc12      	bgt.n	800b9b2 <__multadd+0x66>
 800b98c:	6861      	ldr	r1, [r4, #4]
 800b98e:	4630      	mov	r0, r6
 800b990:	3101      	adds	r1, #1
 800b992:	f7ff ff90 	bl	800b8b6 <_Balloc>
 800b996:	4680      	mov	r8, r0
 800b998:	6922      	ldr	r2, [r4, #16]
 800b99a:	f104 010c 	add.w	r1, r4, #12
 800b99e:	3202      	adds	r2, #2
 800b9a0:	0092      	lsls	r2, r2, #2
 800b9a2:	300c      	adds	r0, #12
 800b9a4:	f7fe fc97 	bl	800a2d6 <memcpy>
 800b9a8:	4621      	mov	r1, r4
 800b9aa:	4630      	mov	r0, r6
 800b9ac:	f7ff ffb7 	bl	800b91e <_Bfree>
 800b9b0:	4644      	mov	r4, r8
 800b9b2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b9b6:	3501      	adds	r5, #1
 800b9b8:	615f      	str	r7, [r3, #20]
 800b9ba:	6125      	str	r5, [r4, #16]
 800b9bc:	4620      	mov	r0, r4
 800b9be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800b9c2 <__s2b>:
 800b9c2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9c6:	4615      	mov	r5, r2
 800b9c8:	2209      	movs	r2, #9
 800b9ca:	461f      	mov	r7, r3
 800b9cc:	3308      	adds	r3, #8
 800b9ce:	460c      	mov	r4, r1
 800b9d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800b9d4:	4606      	mov	r6, r0
 800b9d6:	2201      	movs	r2, #1
 800b9d8:	2100      	movs	r1, #0
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	db20      	blt.n	800ba20 <__s2b+0x5e>
 800b9de:	4630      	mov	r0, r6
 800b9e0:	f7ff ff69 	bl	800b8b6 <_Balloc>
 800b9e4:	9b08      	ldr	r3, [sp, #32]
 800b9e6:	2d09      	cmp	r5, #9
 800b9e8:	6143      	str	r3, [r0, #20]
 800b9ea:	f04f 0301 	mov.w	r3, #1
 800b9ee:	6103      	str	r3, [r0, #16]
 800b9f0:	dd19      	ble.n	800ba26 <__s2b+0x64>
 800b9f2:	f104 0809 	add.w	r8, r4, #9
 800b9f6:	46c1      	mov	r9, r8
 800b9f8:	442c      	add	r4, r5
 800b9fa:	f819 3b01 	ldrb.w	r3, [r9], #1
 800b9fe:	4601      	mov	r1, r0
 800ba00:	3b30      	subs	r3, #48	; 0x30
 800ba02:	220a      	movs	r2, #10
 800ba04:	4630      	mov	r0, r6
 800ba06:	f7ff ffa1 	bl	800b94c <__multadd>
 800ba0a:	45a1      	cmp	r9, r4
 800ba0c:	d1f5      	bne.n	800b9fa <__s2b+0x38>
 800ba0e:	eb08 0405 	add.w	r4, r8, r5
 800ba12:	3c08      	subs	r4, #8
 800ba14:	1b2d      	subs	r5, r5, r4
 800ba16:	1963      	adds	r3, r4, r5
 800ba18:	42bb      	cmp	r3, r7
 800ba1a:	db07      	blt.n	800ba2c <__s2b+0x6a>
 800ba1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba20:	0052      	lsls	r2, r2, #1
 800ba22:	3101      	adds	r1, #1
 800ba24:	e7d9      	b.n	800b9da <__s2b+0x18>
 800ba26:	340a      	adds	r4, #10
 800ba28:	2509      	movs	r5, #9
 800ba2a:	e7f3      	b.n	800ba14 <__s2b+0x52>
 800ba2c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ba30:	4601      	mov	r1, r0
 800ba32:	3b30      	subs	r3, #48	; 0x30
 800ba34:	220a      	movs	r2, #10
 800ba36:	4630      	mov	r0, r6
 800ba38:	f7ff ff88 	bl	800b94c <__multadd>
 800ba3c:	e7eb      	b.n	800ba16 <__s2b+0x54>

0800ba3e <__hi0bits>:
 800ba3e:	0c02      	lsrs	r2, r0, #16
 800ba40:	0412      	lsls	r2, r2, #16
 800ba42:	4603      	mov	r3, r0
 800ba44:	b9b2      	cbnz	r2, 800ba74 <__hi0bits+0x36>
 800ba46:	0403      	lsls	r3, r0, #16
 800ba48:	2010      	movs	r0, #16
 800ba4a:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800ba4e:	bf04      	itt	eq
 800ba50:	021b      	lsleq	r3, r3, #8
 800ba52:	3008      	addeq	r0, #8
 800ba54:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800ba58:	bf04      	itt	eq
 800ba5a:	011b      	lsleq	r3, r3, #4
 800ba5c:	3004      	addeq	r0, #4
 800ba5e:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800ba62:	bf04      	itt	eq
 800ba64:	009b      	lsleq	r3, r3, #2
 800ba66:	3002      	addeq	r0, #2
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	db06      	blt.n	800ba7a <__hi0bits+0x3c>
 800ba6c:	005b      	lsls	r3, r3, #1
 800ba6e:	d503      	bpl.n	800ba78 <__hi0bits+0x3a>
 800ba70:	3001      	adds	r0, #1
 800ba72:	4770      	bx	lr
 800ba74:	2000      	movs	r0, #0
 800ba76:	e7e8      	b.n	800ba4a <__hi0bits+0xc>
 800ba78:	2020      	movs	r0, #32
 800ba7a:	4770      	bx	lr

0800ba7c <__lo0bits>:
 800ba7c:	6803      	ldr	r3, [r0, #0]
 800ba7e:	4601      	mov	r1, r0
 800ba80:	f013 0207 	ands.w	r2, r3, #7
 800ba84:	d00b      	beq.n	800ba9e <__lo0bits+0x22>
 800ba86:	07da      	lsls	r2, r3, #31
 800ba88:	d423      	bmi.n	800bad2 <__lo0bits+0x56>
 800ba8a:	0798      	lsls	r0, r3, #30
 800ba8c:	bf49      	itett	mi
 800ba8e:	085b      	lsrmi	r3, r3, #1
 800ba90:	089b      	lsrpl	r3, r3, #2
 800ba92:	2001      	movmi	r0, #1
 800ba94:	600b      	strmi	r3, [r1, #0]
 800ba96:	bf5c      	itt	pl
 800ba98:	600b      	strpl	r3, [r1, #0]
 800ba9a:	2002      	movpl	r0, #2
 800ba9c:	4770      	bx	lr
 800ba9e:	b298      	uxth	r0, r3
 800baa0:	b9a8      	cbnz	r0, 800bace <__lo0bits+0x52>
 800baa2:	2010      	movs	r0, #16
 800baa4:	0c1b      	lsrs	r3, r3, #16
 800baa6:	f013 0fff 	tst.w	r3, #255	; 0xff
 800baaa:	bf04      	itt	eq
 800baac:	0a1b      	lsreq	r3, r3, #8
 800baae:	3008      	addeq	r0, #8
 800bab0:	071a      	lsls	r2, r3, #28
 800bab2:	bf04      	itt	eq
 800bab4:	091b      	lsreq	r3, r3, #4
 800bab6:	3004      	addeq	r0, #4
 800bab8:	079a      	lsls	r2, r3, #30
 800baba:	bf04      	itt	eq
 800babc:	089b      	lsreq	r3, r3, #2
 800babe:	3002      	addeq	r0, #2
 800bac0:	07da      	lsls	r2, r3, #31
 800bac2:	d402      	bmi.n	800baca <__lo0bits+0x4e>
 800bac4:	085b      	lsrs	r3, r3, #1
 800bac6:	d006      	beq.n	800bad6 <__lo0bits+0x5a>
 800bac8:	3001      	adds	r0, #1
 800baca:	600b      	str	r3, [r1, #0]
 800bacc:	4770      	bx	lr
 800bace:	4610      	mov	r0, r2
 800bad0:	e7e9      	b.n	800baa6 <__lo0bits+0x2a>
 800bad2:	2000      	movs	r0, #0
 800bad4:	4770      	bx	lr
 800bad6:	2020      	movs	r0, #32
 800bad8:	4770      	bx	lr

0800bada <__i2b>:
 800bada:	b510      	push	{r4, lr}
 800badc:	460c      	mov	r4, r1
 800bade:	2101      	movs	r1, #1
 800bae0:	f7ff fee9 	bl	800b8b6 <_Balloc>
 800bae4:	2201      	movs	r2, #1
 800bae6:	6144      	str	r4, [r0, #20]
 800bae8:	6102      	str	r2, [r0, #16]
 800baea:	bd10      	pop	{r4, pc}

0800baec <__multiply>:
 800baec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf0:	4614      	mov	r4, r2
 800baf2:	690a      	ldr	r2, [r1, #16]
 800baf4:	6923      	ldr	r3, [r4, #16]
 800baf6:	4688      	mov	r8, r1
 800baf8:	429a      	cmp	r2, r3
 800bafa:	bfbe      	ittt	lt
 800bafc:	460b      	movlt	r3, r1
 800bafe:	46a0      	movlt	r8, r4
 800bb00:	461c      	movlt	r4, r3
 800bb02:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bb06:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800bb0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bb0e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bb12:	eb07 0609 	add.w	r6, r7, r9
 800bb16:	42b3      	cmp	r3, r6
 800bb18:	bfb8      	it	lt
 800bb1a:	3101      	addlt	r1, #1
 800bb1c:	f7ff fecb 	bl	800b8b6 <_Balloc>
 800bb20:	f100 0514 	add.w	r5, r0, #20
 800bb24:	462b      	mov	r3, r5
 800bb26:	2200      	movs	r2, #0
 800bb28:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800bb2c:	4573      	cmp	r3, lr
 800bb2e:	d316      	bcc.n	800bb5e <__multiply+0x72>
 800bb30:	f104 0214 	add.w	r2, r4, #20
 800bb34:	f108 0114 	add.w	r1, r8, #20
 800bb38:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800bb3c:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800bb40:	9300      	str	r3, [sp, #0]
 800bb42:	9b00      	ldr	r3, [sp, #0]
 800bb44:	9201      	str	r2, [sp, #4]
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d80c      	bhi.n	800bb64 <__multiply+0x78>
 800bb4a:	2e00      	cmp	r6, #0
 800bb4c:	dd03      	ble.n	800bb56 <__multiply+0x6a>
 800bb4e:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d05d      	beq.n	800bc12 <__multiply+0x126>
 800bb56:	6106      	str	r6, [r0, #16]
 800bb58:	b003      	add	sp, #12
 800bb5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb5e:	f843 2b04 	str.w	r2, [r3], #4
 800bb62:	e7e3      	b.n	800bb2c <__multiply+0x40>
 800bb64:	f8b2 b000 	ldrh.w	fp, [r2]
 800bb68:	f1bb 0f00 	cmp.w	fp, #0
 800bb6c:	d023      	beq.n	800bbb6 <__multiply+0xca>
 800bb6e:	4689      	mov	r9, r1
 800bb70:	46ac      	mov	ip, r5
 800bb72:	f04f 0800 	mov.w	r8, #0
 800bb76:	f859 4b04 	ldr.w	r4, [r9], #4
 800bb7a:	f8dc a000 	ldr.w	sl, [ip]
 800bb7e:	b2a3      	uxth	r3, r4
 800bb80:	fa1f fa8a 	uxth.w	sl, sl
 800bb84:	fb0b a303 	mla	r3, fp, r3, sl
 800bb88:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800bb8c:	f8dc 4000 	ldr.w	r4, [ip]
 800bb90:	4443      	add	r3, r8
 800bb92:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bb96:	fb0b 840a 	mla	r4, fp, sl, r8
 800bb9a:	46e2      	mov	sl, ip
 800bb9c:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800bba0:	b29b      	uxth	r3, r3
 800bba2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bba6:	454f      	cmp	r7, r9
 800bba8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800bbac:	f84a 3b04 	str.w	r3, [sl], #4
 800bbb0:	d82b      	bhi.n	800bc0a <__multiply+0x11e>
 800bbb2:	f8cc 8004 	str.w	r8, [ip, #4]
 800bbb6:	9b01      	ldr	r3, [sp, #4]
 800bbb8:	3204      	adds	r2, #4
 800bbba:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800bbbe:	f1ba 0f00 	cmp.w	sl, #0
 800bbc2:	d020      	beq.n	800bc06 <__multiply+0x11a>
 800bbc4:	4689      	mov	r9, r1
 800bbc6:	46a8      	mov	r8, r5
 800bbc8:	f04f 0b00 	mov.w	fp, #0
 800bbcc:	682b      	ldr	r3, [r5, #0]
 800bbce:	f8b9 c000 	ldrh.w	ip, [r9]
 800bbd2:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	fb0a 440c 	mla	r4, sl, ip, r4
 800bbdc:	46c4      	mov	ip, r8
 800bbde:	445c      	add	r4, fp
 800bbe0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800bbe4:	f84c 3b04 	str.w	r3, [ip], #4
 800bbe8:	f859 3b04 	ldr.w	r3, [r9], #4
 800bbec:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800bbf0:	0c1b      	lsrs	r3, r3, #16
 800bbf2:	fb0a b303 	mla	r3, sl, r3, fp
 800bbf6:	454f      	cmp	r7, r9
 800bbf8:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800bbfc:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800bc00:	d805      	bhi.n	800bc0e <__multiply+0x122>
 800bc02:	f8c8 3004 	str.w	r3, [r8, #4]
 800bc06:	3504      	adds	r5, #4
 800bc08:	e79b      	b.n	800bb42 <__multiply+0x56>
 800bc0a:	46d4      	mov	ip, sl
 800bc0c:	e7b3      	b.n	800bb76 <__multiply+0x8a>
 800bc0e:	46e0      	mov	r8, ip
 800bc10:	e7dd      	b.n	800bbce <__multiply+0xe2>
 800bc12:	3e01      	subs	r6, #1
 800bc14:	e799      	b.n	800bb4a <__multiply+0x5e>
	...

0800bc18 <__pow5mult>:
 800bc18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc1c:	4615      	mov	r5, r2
 800bc1e:	f012 0203 	ands.w	r2, r2, #3
 800bc22:	4606      	mov	r6, r0
 800bc24:	460f      	mov	r7, r1
 800bc26:	d007      	beq.n	800bc38 <__pow5mult+0x20>
 800bc28:	4c21      	ldr	r4, [pc, #132]	; (800bcb0 <__pow5mult+0x98>)
 800bc2a:	3a01      	subs	r2, #1
 800bc2c:	2300      	movs	r3, #0
 800bc2e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bc32:	f7ff fe8b 	bl	800b94c <__multadd>
 800bc36:	4607      	mov	r7, r0
 800bc38:	10ad      	asrs	r5, r5, #2
 800bc3a:	d035      	beq.n	800bca8 <__pow5mult+0x90>
 800bc3c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800bc3e:	b93c      	cbnz	r4, 800bc50 <__pow5mult+0x38>
 800bc40:	2010      	movs	r0, #16
 800bc42:	f000 facd 	bl	800c1e0 <malloc>
 800bc46:	6270      	str	r0, [r6, #36]	; 0x24
 800bc48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bc4c:	6004      	str	r4, [r0, #0]
 800bc4e:	60c4      	str	r4, [r0, #12]
 800bc50:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bc54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bc58:	b94c      	cbnz	r4, 800bc6e <__pow5mult+0x56>
 800bc5a:	f240 2171 	movw	r1, #625	; 0x271
 800bc5e:	4630      	mov	r0, r6
 800bc60:	f7ff ff3b 	bl	800bada <__i2b>
 800bc64:	2300      	movs	r3, #0
 800bc66:	4604      	mov	r4, r0
 800bc68:	f8c8 0008 	str.w	r0, [r8, #8]
 800bc6c:	6003      	str	r3, [r0, #0]
 800bc6e:	f04f 0800 	mov.w	r8, #0
 800bc72:	07eb      	lsls	r3, r5, #31
 800bc74:	d50a      	bpl.n	800bc8c <__pow5mult+0x74>
 800bc76:	4639      	mov	r1, r7
 800bc78:	4622      	mov	r2, r4
 800bc7a:	4630      	mov	r0, r6
 800bc7c:	f7ff ff36 	bl	800baec <__multiply>
 800bc80:	4681      	mov	r9, r0
 800bc82:	4639      	mov	r1, r7
 800bc84:	4630      	mov	r0, r6
 800bc86:	f7ff fe4a 	bl	800b91e <_Bfree>
 800bc8a:	464f      	mov	r7, r9
 800bc8c:	106d      	asrs	r5, r5, #1
 800bc8e:	d00b      	beq.n	800bca8 <__pow5mult+0x90>
 800bc90:	6820      	ldr	r0, [r4, #0]
 800bc92:	b938      	cbnz	r0, 800bca4 <__pow5mult+0x8c>
 800bc94:	4622      	mov	r2, r4
 800bc96:	4621      	mov	r1, r4
 800bc98:	4630      	mov	r0, r6
 800bc9a:	f7ff ff27 	bl	800baec <__multiply>
 800bc9e:	6020      	str	r0, [r4, #0]
 800bca0:	f8c0 8000 	str.w	r8, [r0]
 800bca4:	4604      	mov	r4, r0
 800bca6:	e7e4      	b.n	800bc72 <__pow5mult+0x5a>
 800bca8:	4638      	mov	r0, r7
 800bcaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcae:	bf00      	nop
 800bcb0:	0800ddb0 	.word	0x0800ddb0

0800bcb4 <__lshift>:
 800bcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bcb8:	460c      	mov	r4, r1
 800bcba:	4607      	mov	r7, r0
 800bcbc:	4616      	mov	r6, r2
 800bcbe:	6923      	ldr	r3, [r4, #16]
 800bcc0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bcc4:	eb0a 0903 	add.w	r9, sl, r3
 800bcc8:	6849      	ldr	r1, [r1, #4]
 800bcca:	68a3      	ldr	r3, [r4, #8]
 800bccc:	f109 0501 	add.w	r5, r9, #1
 800bcd0:	42ab      	cmp	r3, r5
 800bcd2:	db32      	blt.n	800bd3a <__lshift+0x86>
 800bcd4:	4638      	mov	r0, r7
 800bcd6:	f7ff fdee 	bl	800b8b6 <_Balloc>
 800bcda:	2300      	movs	r3, #0
 800bcdc:	4680      	mov	r8, r0
 800bcde:	461a      	mov	r2, r3
 800bce0:	f100 0114 	add.w	r1, r0, #20
 800bce4:	4553      	cmp	r3, sl
 800bce6:	db2b      	blt.n	800bd40 <__lshift+0x8c>
 800bce8:	6920      	ldr	r0, [r4, #16]
 800bcea:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bcee:	f104 0314 	add.w	r3, r4, #20
 800bcf2:	f016 021f 	ands.w	r2, r6, #31
 800bcf6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bcfa:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bcfe:	d025      	beq.n	800bd4c <__lshift+0x98>
 800bd00:	2000      	movs	r0, #0
 800bd02:	f1c2 0e20 	rsb	lr, r2, #32
 800bd06:	468a      	mov	sl, r1
 800bd08:	681e      	ldr	r6, [r3, #0]
 800bd0a:	4096      	lsls	r6, r2
 800bd0c:	4330      	orrs	r0, r6
 800bd0e:	f84a 0b04 	str.w	r0, [sl], #4
 800bd12:	f853 0b04 	ldr.w	r0, [r3], #4
 800bd16:	459c      	cmp	ip, r3
 800bd18:	fa20 f00e 	lsr.w	r0, r0, lr
 800bd1c:	d814      	bhi.n	800bd48 <__lshift+0x94>
 800bd1e:	6048      	str	r0, [r1, #4]
 800bd20:	b108      	cbz	r0, 800bd26 <__lshift+0x72>
 800bd22:	f109 0502 	add.w	r5, r9, #2
 800bd26:	3d01      	subs	r5, #1
 800bd28:	4638      	mov	r0, r7
 800bd2a:	f8c8 5010 	str.w	r5, [r8, #16]
 800bd2e:	4621      	mov	r1, r4
 800bd30:	f7ff fdf5 	bl	800b91e <_Bfree>
 800bd34:	4640      	mov	r0, r8
 800bd36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd3a:	3101      	adds	r1, #1
 800bd3c:	005b      	lsls	r3, r3, #1
 800bd3e:	e7c7      	b.n	800bcd0 <__lshift+0x1c>
 800bd40:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800bd44:	3301      	adds	r3, #1
 800bd46:	e7cd      	b.n	800bce4 <__lshift+0x30>
 800bd48:	4651      	mov	r1, sl
 800bd4a:	e7dc      	b.n	800bd06 <__lshift+0x52>
 800bd4c:	3904      	subs	r1, #4
 800bd4e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bd52:	459c      	cmp	ip, r3
 800bd54:	f841 2f04 	str.w	r2, [r1, #4]!
 800bd58:	d8f9      	bhi.n	800bd4e <__lshift+0x9a>
 800bd5a:	e7e4      	b.n	800bd26 <__lshift+0x72>

0800bd5c <__mcmp>:
 800bd5c:	6903      	ldr	r3, [r0, #16]
 800bd5e:	690a      	ldr	r2, [r1, #16]
 800bd60:	b530      	push	{r4, r5, lr}
 800bd62:	1a9b      	subs	r3, r3, r2
 800bd64:	d10c      	bne.n	800bd80 <__mcmp+0x24>
 800bd66:	0092      	lsls	r2, r2, #2
 800bd68:	3014      	adds	r0, #20
 800bd6a:	3114      	adds	r1, #20
 800bd6c:	1884      	adds	r4, r0, r2
 800bd6e:	4411      	add	r1, r2
 800bd70:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800bd74:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800bd78:	4295      	cmp	r5, r2
 800bd7a:	d003      	beq.n	800bd84 <__mcmp+0x28>
 800bd7c:	d305      	bcc.n	800bd8a <__mcmp+0x2e>
 800bd7e:	2301      	movs	r3, #1
 800bd80:	4618      	mov	r0, r3
 800bd82:	bd30      	pop	{r4, r5, pc}
 800bd84:	42a0      	cmp	r0, r4
 800bd86:	d3f3      	bcc.n	800bd70 <__mcmp+0x14>
 800bd88:	e7fa      	b.n	800bd80 <__mcmp+0x24>
 800bd8a:	f04f 33ff 	mov.w	r3, #4294967295
 800bd8e:	e7f7      	b.n	800bd80 <__mcmp+0x24>

0800bd90 <__mdiff>:
 800bd90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd94:	460d      	mov	r5, r1
 800bd96:	4607      	mov	r7, r0
 800bd98:	4611      	mov	r1, r2
 800bd9a:	4628      	mov	r0, r5
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	f7ff ffdd 	bl	800bd5c <__mcmp>
 800bda2:	1e06      	subs	r6, r0, #0
 800bda4:	d108      	bne.n	800bdb8 <__mdiff+0x28>
 800bda6:	4631      	mov	r1, r6
 800bda8:	4638      	mov	r0, r7
 800bdaa:	f7ff fd84 	bl	800b8b6 <_Balloc>
 800bdae:	2301      	movs	r3, #1
 800bdb0:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800bdb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdb8:	bfa4      	itt	ge
 800bdba:	4623      	movge	r3, r4
 800bdbc:	462c      	movge	r4, r5
 800bdbe:	4638      	mov	r0, r7
 800bdc0:	6861      	ldr	r1, [r4, #4]
 800bdc2:	bfa6      	itte	ge
 800bdc4:	461d      	movge	r5, r3
 800bdc6:	2600      	movge	r6, #0
 800bdc8:	2601      	movlt	r6, #1
 800bdca:	f7ff fd74 	bl	800b8b6 <_Balloc>
 800bdce:	f04f 0e00 	mov.w	lr, #0
 800bdd2:	60c6      	str	r6, [r0, #12]
 800bdd4:	692b      	ldr	r3, [r5, #16]
 800bdd6:	6926      	ldr	r6, [r4, #16]
 800bdd8:	f104 0214 	add.w	r2, r4, #20
 800bddc:	f105 0914 	add.w	r9, r5, #20
 800bde0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800bde4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800bde8:	f100 0114 	add.w	r1, r0, #20
 800bdec:	f852 ab04 	ldr.w	sl, [r2], #4
 800bdf0:	f859 5b04 	ldr.w	r5, [r9], #4
 800bdf4:	fa1f f38a 	uxth.w	r3, sl
 800bdf8:	4473      	add	r3, lr
 800bdfa:	b2ac      	uxth	r4, r5
 800bdfc:	1b1b      	subs	r3, r3, r4
 800bdfe:	0c2c      	lsrs	r4, r5, #16
 800be00:	ebc4 441a 	rsb	r4, r4, sl, lsr #16
 800be04:	eb04 4423 	add.w	r4, r4, r3, asr #16
 800be08:	b29b      	uxth	r3, r3
 800be0a:	ea4f 4e24 	mov.w	lr, r4, asr #16
 800be0e:	45c8      	cmp	r8, r9
 800be10:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800be14:	4694      	mov	ip, r2
 800be16:	f841 4b04 	str.w	r4, [r1], #4
 800be1a:	d8e7      	bhi.n	800bdec <__mdiff+0x5c>
 800be1c:	45bc      	cmp	ip, r7
 800be1e:	d304      	bcc.n	800be2a <__mdiff+0x9a>
 800be20:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800be24:	b183      	cbz	r3, 800be48 <__mdiff+0xb8>
 800be26:	6106      	str	r6, [r0, #16]
 800be28:	e7c4      	b.n	800bdb4 <__mdiff+0x24>
 800be2a:	f85c 4b04 	ldr.w	r4, [ip], #4
 800be2e:	b2a2      	uxth	r2, r4
 800be30:	4472      	add	r2, lr
 800be32:	1413      	asrs	r3, r2, #16
 800be34:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800be38:	b292      	uxth	r2, r2
 800be3a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800be3e:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800be42:	f841 2b04 	str.w	r2, [r1], #4
 800be46:	e7e9      	b.n	800be1c <__mdiff+0x8c>
 800be48:	3e01      	subs	r6, #1
 800be4a:	e7e9      	b.n	800be20 <__mdiff+0x90>

0800be4c <__ulp>:
 800be4c:	4b10      	ldr	r3, [pc, #64]	; (800be90 <__ulp+0x44>)
 800be4e:	400b      	ands	r3, r1
 800be50:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800be54:	2b00      	cmp	r3, #0
 800be56:	dd02      	ble.n	800be5e <__ulp+0x12>
 800be58:	2000      	movs	r0, #0
 800be5a:	4619      	mov	r1, r3
 800be5c:	4770      	bx	lr
 800be5e:	425b      	negs	r3, r3
 800be60:	151b      	asrs	r3, r3, #20
 800be62:	2b13      	cmp	r3, #19
 800be64:	f04f 0000 	mov.w	r0, #0
 800be68:	f04f 0100 	mov.w	r1, #0
 800be6c:	dc04      	bgt.n	800be78 <__ulp+0x2c>
 800be6e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800be72:	fa42 f103 	asr.w	r1, r2, r3
 800be76:	4770      	bx	lr
 800be78:	2201      	movs	r2, #1
 800be7a:	3b14      	subs	r3, #20
 800be7c:	2b1e      	cmp	r3, #30
 800be7e:	bfce      	itee	gt
 800be80:	4613      	movgt	r3, r2
 800be82:	f1c3 031f 	rsble	r3, r3, #31
 800be86:	fa02 f303 	lslle.w	r3, r2, r3
 800be8a:	4618      	mov	r0, r3
 800be8c:	4770      	bx	lr
 800be8e:	bf00      	nop
 800be90:	7ff00000 	.word	0x7ff00000

0800be94 <__b2d>:
 800be94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be98:	6907      	ldr	r7, [r0, #16]
 800be9a:	f100 0914 	add.w	r9, r0, #20
 800be9e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800bea2:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800bea6:	f1a7 0804 	sub.w	r8, r7, #4
 800beaa:	4630      	mov	r0, r6
 800beac:	f7ff fdc7 	bl	800ba3e <__hi0bits>
 800beb0:	f1c0 0320 	rsb	r3, r0, #32
 800beb4:	280a      	cmp	r0, #10
 800beb6:	600b      	str	r3, [r1, #0]
 800beb8:	491e      	ldr	r1, [pc, #120]	; (800bf34 <__b2d+0xa0>)
 800beba:	dc17      	bgt.n	800beec <__b2d+0x58>
 800bebc:	45c1      	cmp	r9, r8
 800bebe:	bf28      	it	cs
 800bec0:	2200      	movcs	r2, #0
 800bec2:	f1c0 0c0b 	rsb	ip, r0, #11
 800bec6:	fa26 f30c 	lsr.w	r3, r6, ip
 800beca:	bf38      	it	cc
 800becc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bed0:	ea43 0501 	orr.w	r5, r3, r1
 800bed4:	f100 0315 	add.w	r3, r0, #21
 800bed8:	fa06 f303 	lsl.w	r3, r6, r3
 800bedc:	fa22 f20c 	lsr.w	r2, r2, ip
 800bee0:	ea43 0402 	orr.w	r4, r3, r2
 800bee4:	4620      	mov	r0, r4
 800bee6:	4629      	mov	r1, r5
 800bee8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beec:	45c1      	cmp	r9, r8
 800beee:	bf3a      	itte	cc
 800bef0:	f1a7 0808 	subcc.w	r8, r7, #8
 800bef4:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800bef8:	2200      	movcs	r2, #0
 800befa:	f1b0 030b 	subs.w	r3, r0, #11
 800befe:	d015      	beq.n	800bf2c <__b2d+0x98>
 800bf00:	409e      	lsls	r6, r3
 800bf02:	f1c3 0720 	rsb	r7, r3, #32
 800bf06:	f046 567f 	orr.w	r6, r6, #1069547520	; 0x3fc00000
 800bf0a:	fa22 f107 	lsr.w	r1, r2, r7
 800bf0e:	45c8      	cmp	r8, r9
 800bf10:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800bf14:	ea46 0501 	orr.w	r5, r6, r1
 800bf18:	bf94      	ite	ls
 800bf1a:	2100      	movls	r1, #0
 800bf1c:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800bf20:	fa02 f003 	lsl.w	r0, r2, r3
 800bf24:	40f9      	lsrs	r1, r7
 800bf26:	ea40 0401 	orr.w	r4, r0, r1
 800bf2a:	e7db      	b.n	800bee4 <__b2d+0x50>
 800bf2c:	ea46 0501 	orr.w	r5, r6, r1
 800bf30:	4614      	mov	r4, r2
 800bf32:	e7d7      	b.n	800bee4 <__b2d+0x50>
 800bf34:	3ff00000 	.word	0x3ff00000

0800bf38 <__d2b>:
 800bf38:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800bf3c:	461c      	mov	r4, r3
 800bf3e:	e9dd 6508 	ldrd	r6, r5, [sp, #32]
 800bf42:	2101      	movs	r1, #1
 800bf44:	4690      	mov	r8, r2
 800bf46:	f7ff fcb6 	bl	800b8b6 <_Balloc>
 800bf4a:	f3c4 0213 	ubfx	r2, r4, #0, #20
 800bf4e:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800bf52:	4607      	mov	r7, r0
 800bf54:	bb34      	cbnz	r4, 800bfa4 <__d2b+0x6c>
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	f1b8 0200 	subs.w	r2, r8, #0
 800bf5c:	d027      	beq.n	800bfae <__d2b+0x76>
 800bf5e:	a802      	add	r0, sp, #8
 800bf60:	f840 2d08 	str.w	r2, [r0, #-8]!
 800bf64:	f7ff fd8a 	bl	800ba7c <__lo0bits>
 800bf68:	9900      	ldr	r1, [sp, #0]
 800bf6a:	b1f0      	cbz	r0, 800bfaa <__d2b+0x72>
 800bf6c:	9a01      	ldr	r2, [sp, #4]
 800bf6e:	f1c0 0320 	rsb	r3, r0, #32
 800bf72:	fa02 f303 	lsl.w	r3, r2, r3
 800bf76:	430b      	orrs	r3, r1
 800bf78:	40c2      	lsrs	r2, r0
 800bf7a:	617b      	str	r3, [r7, #20]
 800bf7c:	9201      	str	r2, [sp, #4]
 800bf7e:	9b01      	ldr	r3, [sp, #4]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	bf14      	ite	ne
 800bf84:	2102      	movne	r1, #2
 800bf86:	2101      	moveq	r1, #1
 800bf88:	61bb      	str	r3, [r7, #24]
 800bf8a:	6139      	str	r1, [r7, #16]
 800bf8c:	b1c4      	cbz	r4, 800bfc0 <__d2b+0x88>
 800bf8e:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800bf92:	4404      	add	r4, r0
 800bf94:	6034      	str	r4, [r6, #0]
 800bf96:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bf9a:	6028      	str	r0, [r5, #0]
 800bf9c:	4638      	mov	r0, r7
 800bf9e:	b002      	add	sp, #8
 800bfa0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfa4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800bfa8:	e7d5      	b.n	800bf56 <__d2b+0x1e>
 800bfaa:	6179      	str	r1, [r7, #20]
 800bfac:	e7e7      	b.n	800bf7e <__d2b+0x46>
 800bfae:	a801      	add	r0, sp, #4
 800bfb0:	f7ff fd64 	bl	800ba7c <__lo0bits>
 800bfb4:	2101      	movs	r1, #1
 800bfb6:	9b01      	ldr	r3, [sp, #4]
 800bfb8:	6139      	str	r1, [r7, #16]
 800bfba:	617b      	str	r3, [r7, #20]
 800bfbc:	3020      	adds	r0, #32
 800bfbe:	e7e5      	b.n	800bf8c <__d2b+0x54>
 800bfc0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bfc4:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800bfc8:	6030      	str	r0, [r6, #0]
 800bfca:	6918      	ldr	r0, [r3, #16]
 800bfcc:	f7ff fd37 	bl	800ba3e <__hi0bits>
 800bfd0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800bfd4:	e7e1      	b.n	800bf9a <__d2b+0x62>

0800bfd6 <__ratio>:
 800bfd6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfda:	4688      	mov	r8, r1
 800bfdc:	4669      	mov	r1, sp
 800bfde:	4681      	mov	r9, r0
 800bfe0:	f7ff ff58 	bl	800be94 <__b2d>
 800bfe4:	468b      	mov	fp, r1
 800bfe6:	4606      	mov	r6, r0
 800bfe8:	460f      	mov	r7, r1
 800bfea:	4640      	mov	r0, r8
 800bfec:	a901      	add	r1, sp, #4
 800bfee:	f7ff ff51 	bl	800be94 <__b2d>
 800bff2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bff6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bffa:	460d      	mov	r5, r1
 800bffc:	eba3 0c02 	sub.w	ip, r3, r2
 800c000:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c004:	1a9b      	subs	r3, r3, r2
 800c006:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	bfd5      	itete	le
 800c00e:	460a      	movle	r2, r1
 800c010:	463a      	movgt	r2, r7
 800c012:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c016:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800c01a:	bfd8      	it	le
 800c01c:	eb02 5503 	addle.w	r5, r2, r3, lsl #20
 800c020:	462b      	mov	r3, r5
 800c022:	4602      	mov	r2, r0
 800c024:	4659      	mov	r1, fp
 800c026:	4630      	mov	r0, r6
 800c028:	f7f4 fb80 	bl	800072c <__aeabi_ddiv>
 800c02c:	b003      	add	sp, #12
 800c02e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c032 <__copybits>:
 800c032:	3901      	subs	r1, #1
 800c034:	b510      	push	{r4, lr}
 800c036:	1149      	asrs	r1, r1, #5
 800c038:	6914      	ldr	r4, [r2, #16]
 800c03a:	3101      	adds	r1, #1
 800c03c:	f102 0314 	add.w	r3, r2, #20
 800c040:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c044:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c048:	42a3      	cmp	r3, r4
 800c04a:	4602      	mov	r2, r0
 800c04c:	d303      	bcc.n	800c056 <__copybits+0x24>
 800c04e:	2300      	movs	r3, #0
 800c050:	428a      	cmp	r2, r1
 800c052:	d305      	bcc.n	800c060 <__copybits+0x2e>
 800c054:	bd10      	pop	{r4, pc}
 800c056:	f853 2b04 	ldr.w	r2, [r3], #4
 800c05a:	f840 2b04 	str.w	r2, [r0], #4
 800c05e:	e7f3      	b.n	800c048 <__copybits+0x16>
 800c060:	f842 3b04 	str.w	r3, [r2], #4
 800c064:	e7f4      	b.n	800c050 <__copybits+0x1e>

0800c066 <__any_on>:
 800c066:	f100 0214 	add.w	r2, r0, #20
 800c06a:	6900      	ldr	r0, [r0, #16]
 800c06c:	114b      	asrs	r3, r1, #5
 800c06e:	4298      	cmp	r0, r3
 800c070:	b510      	push	{r4, lr}
 800c072:	db11      	blt.n	800c098 <__any_on+0x32>
 800c074:	dd0a      	ble.n	800c08c <__any_on+0x26>
 800c076:	f011 011f 	ands.w	r1, r1, #31
 800c07a:	d007      	beq.n	800c08c <__any_on+0x26>
 800c07c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c080:	fa24 f001 	lsr.w	r0, r4, r1
 800c084:	fa00 f101 	lsl.w	r1, r0, r1
 800c088:	428c      	cmp	r4, r1
 800c08a:	d10b      	bne.n	800c0a4 <__any_on+0x3e>
 800c08c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c090:	4293      	cmp	r3, r2
 800c092:	d803      	bhi.n	800c09c <__any_on+0x36>
 800c094:	2000      	movs	r0, #0
 800c096:	bd10      	pop	{r4, pc}
 800c098:	4603      	mov	r3, r0
 800c09a:	e7f7      	b.n	800c08c <__any_on+0x26>
 800c09c:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c0a0:	2900      	cmp	r1, #0
 800c0a2:	d0f5      	beq.n	800c090 <__any_on+0x2a>
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	e7f6      	b.n	800c096 <__any_on+0x30>

0800c0a8 <_calloc_r>:
 800c0a8:	b538      	push	{r3, r4, r5, lr}
 800c0aa:	fb02 f401 	mul.w	r4, r2, r1
 800c0ae:	4621      	mov	r1, r4
 800c0b0:	f000 f808 	bl	800c0c4 <_malloc_r>
 800c0b4:	4605      	mov	r5, r0
 800c0b6:	b118      	cbz	r0, 800c0c0 <_calloc_r+0x18>
 800c0b8:	4622      	mov	r2, r4
 800c0ba:	2100      	movs	r1, #0
 800c0bc:	f7fe f916 	bl	800a2ec <memset>
 800c0c0:	4628      	mov	r0, r5
 800c0c2:	bd38      	pop	{r3, r4, r5, pc}

0800c0c4 <_malloc_r>:
 800c0c4:	b570      	push	{r4, r5, r6, lr}
 800c0c6:	1ccd      	adds	r5, r1, #3
 800c0c8:	f025 0503 	bic.w	r5, r5, #3
 800c0cc:	3508      	adds	r5, #8
 800c0ce:	2d0c      	cmp	r5, #12
 800c0d0:	bf38      	it	cc
 800c0d2:	250c      	movcc	r5, #12
 800c0d4:	2d00      	cmp	r5, #0
 800c0d6:	4606      	mov	r6, r0
 800c0d8:	db01      	blt.n	800c0de <_malloc_r+0x1a>
 800c0da:	42a9      	cmp	r1, r5
 800c0dc:	d903      	bls.n	800c0e6 <_malloc_r+0x22>
 800c0de:	230c      	movs	r3, #12
 800c0e0:	6033      	str	r3, [r6, #0]
 800c0e2:	2000      	movs	r0, #0
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	f000 f883 	bl	800c1f0 <__malloc_lock>
 800c0ea:	4a21      	ldr	r2, [pc, #132]	; (800c170 <_malloc_r+0xac>)
 800c0ec:	6814      	ldr	r4, [r2, #0]
 800c0ee:	4621      	mov	r1, r4
 800c0f0:	b991      	cbnz	r1, 800c118 <_malloc_r+0x54>
 800c0f2:	4c20      	ldr	r4, [pc, #128]	; (800c174 <_malloc_r+0xb0>)
 800c0f4:	6823      	ldr	r3, [r4, #0]
 800c0f6:	b91b      	cbnz	r3, 800c100 <_malloc_r+0x3c>
 800c0f8:	4630      	mov	r0, r6
 800c0fa:	f000 f83d 	bl	800c178 <_sbrk_r>
 800c0fe:	6020      	str	r0, [r4, #0]
 800c100:	4629      	mov	r1, r5
 800c102:	4630      	mov	r0, r6
 800c104:	f000 f838 	bl	800c178 <_sbrk_r>
 800c108:	1c43      	adds	r3, r0, #1
 800c10a:	d124      	bne.n	800c156 <_malloc_r+0x92>
 800c10c:	230c      	movs	r3, #12
 800c10e:	4630      	mov	r0, r6
 800c110:	6033      	str	r3, [r6, #0]
 800c112:	f000 f86e 	bl	800c1f2 <__malloc_unlock>
 800c116:	e7e4      	b.n	800c0e2 <_malloc_r+0x1e>
 800c118:	680b      	ldr	r3, [r1, #0]
 800c11a:	1b5b      	subs	r3, r3, r5
 800c11c:	d418      	bmi.n	800c150 <_malloc_r+0x8c>
 800c11e:	2b0b      	cmp	r3, #11
 800c120:	d90f      	bls.n	800c142 <_malloc_r+0x7e>
 800c122:	600b      	str	r3, [r1, #0]
 800c124:	18cc      	adds	r4, r1, r3
 800c126:	50cd      	str	r5, [r1, r3]
 800c128:	4630      	mov	r0, r6
 800c12a:	f000 f862 	bl	800c1f2 <__malloc_unlock>
 800c12e:	f104 000b 	add.w	r0, r4, #11
 800c132:	1d23      	adds	r3, r4, #4
 800c134:	f020 0007 	bic.w	r0, r0, #7
 800c138:	1ac3      	subs	r3, r0, r3
 800c13a:	d0d3      	beq.n	800c0e4 <_malloc_r+0x20>
 800c13c:	425a      	negs	r2, r3
 800c13e:	50e2      	str	r2, [r4, r3]
 800c140:	e7d0      	b.n	800c0e4 <_malloc_r+0x20>
 800c142:	684b      	ldr	r3, [r1, #4]
 800c144:	428c      	cmp	r4, r1
 800c146:	bf16      	itet	ne
 800c148:	6063      	strne	r3, [r4, #4]
 800c14a:	6013      	streq	r3, [r2, #0]
 800c14c:	460c      	movne	r4, r1
 800c14e:	e7eb      	b.n	800c128 <_malloc_r+0x64>
 800c150:	460c      	mov	r4, r1
 800c152:	6849      	ldr	r1, [r1, #4]
 800c154:	e7cc      	b.n	800c0f0 <_malloc_r+0x2c>
 800c156:	1cc4      	adds	r4, r0, #3
 800c158:	f024 0403 	bic.w	r4, r4, #3
 800c15c:	42a0      	cmp	r0, r4
 800c15e:	d005      	beq.n	800c16c <_malloc_r+0xa8>
 800c160:	1a21      	subs	r1, r4, r0
 800c162:	4630      	mov	r0, r6
 800c164:	f000 f808 	bl	800c178 <_sbrk_r>
 800c168:	3001      	adds	r0, #1
 800c16a:	d0cf      	beq.n	800c10c <_malloc_r+0x48>
 800c16c:	6025      	str	r5, [r4, #0]
 800c16e:	e7db      	b.n	800c128 <_malloc_r+0x64>
 800c170:	20004194 	.word	0x20004194
 800c174:	20004198 	.word	0x20004198

0800c178 <_sbrk_r>:
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	2300      	movs	r3, #0
 800c17c:	4c05      	ldr	r4, [pc, #20]	; (800c194 <_sbrk_r+0x1c>)
 800c17e:	4605      	mov	r5, r0
 800c180:	4608      	mov	r0, r1
 800c182:	6023      	str	r3, [r4, #0]
 800c184:	f7f8 fa64 	bl	8004650 <_sbrk>
 800c188:	1c43      	adds	r3, r0, #1
 800c18a:	d102      	bne.n	800c192 <_sbrk_r+0x1a>
 800c18c:	6823      	ldr	r3, [r4, #0]
 800c18e:	b103      	cbz	r3, 800c192 <_sbrk_r+0x1a>
 800c190:	602b      	str	r3, [r5, #0]
 800c192:	bd38      	pop	{r3, r4, r5, pc}
 800c194:	20004540 	.word	0x20004540

0800c198 <nanf>:
 800c198:	4800      	ldr	r0, [pc, #0]	; (800c19c <nanf+0x4>)
 800c19a:	4770      	bx	lr
 800c19c:	7fc00000 	.word	0x7fc00000

0800c1a0 <strncmp>:
 800c1a0:	b510      	push	{r4, lr}
 800c1a2:	b16a      	cbz	r2, 800c1c0 <strncmp+0x20>
 800c1a4:	3901      	subs	r1, #1
 800c1a6:	1884      	adds	r4, r0, r2
 800c1a8:	f810 3b01 	ldrb.w	r3, [r0], #1
 800c1ac:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c1b0:	4293      	cmp	r3, r2
 800c1b2:	d103      	bne.n	800c1bc <strncmp+0x1c>
 800c1b4:	42a0      	cmp	r0, r4
 800c1b6:	d001      	beq.n	800c1bc <strncmp+0x1c>
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d1f5      	bne.n	800c1a8 <strncmp+0x8>
 800c1bc:	1a98      	subs	r0, r3, r2
 800c1be:	bd10      	pop	{r4, pc}
 800c1c0:	4610      	mov	r0, r2
 800c1c2:	e7fc      	b.n	800c1be <strncmp+0x1e>

0800c1c4 <__ascii_wctomb>:
 800c1c4:	b149      	cbz	r1, 800c1da <__ascii_wctomb+0x16>
 800c1c6:	2aff      	cmp	r2, #255	; 0xff
 800c1c8:	bf8b      	itete	hi
 800c1ca:	238a      	movhi	r3, #138	; 0x8a
 800c1cc:	700a      	strbls	r2, [r1, #0]
 800c1ce:	6003      	strhi	r3, [r0, #0]
 800c1d0:	2001      	movls	r0, #1
 800c1d2:	bf88      	it	hi
 800c1d4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1d8:	4770      	bx	lr
 800c1da:	4608      	mov	r0, r1
 800c1dc:	4770      	bx	lr
	...

0800c1e0 <malloc>:
 800c1e0:	4b02      	ldr	r3, [pc, #8]	; (800c1ec <malloc+0xc>)
 800c1e2:	4601      	mov	r1, r0
 800c1e4:	6818      	ldr	r0, [r3, #0]
 800c1e6:	f7ff bf6d 	b.w	800c0c4 <_malloc_r>
 800c1ea:	bf00      	nop
 800c1ec:	200003dc 	.word	0x200003dc

0800c1f0 <__malloc_lock>:
 800c1f0:	4770      	bx	lr

0800c1f2 <__malloc_unlock>:
 800c1f2:	4770      	bx	lr

0800c1f4 <_init>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr

0800c200 <_fini>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr
